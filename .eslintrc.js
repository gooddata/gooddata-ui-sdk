// (C) 2020-2025 GoodData Corporation
module.exports = {
    root: true,
    ignorePatterns: ["**/dist/**/*.*"],
    plugins: ["eslint-comments"],
    extends: ["plugin:prettier/recommended"],
    rules: {
        "no-duplicate-imports": "error",
        "sort-imports": [
            "error",
            {
                ignoreCase: false,
                ignoreDeclarationSort: true,
                ignoreMemberSort: false,
            },
        ],
        "import/order": [
            "error",
            {
                pathGroups: [
                    {
                        pattern: "react",
                        group: "external",
                        position: "before",
                    },
                    {
                        pattern: "@gooddata/**",
                        group: "external",
                        position: "after",
                    },
                ],
                groups: ["builtin", "external", "internal", ["parent", "sibling", "index"]],
                pathGroupsExcludedImportTypes: ["react"],
                alphabetize: {
                    order: "asc",
                    caseInsensitive: true,
                },
                "newlines-between": "always",
            },
        ],
        "no-restricted-imports": [
            "error",
            {
                paths: [
                    { name: "lodash/get", message: "Please use the ?. and ?? operators instead." },
                    { name: "lodash/getOr", message: "Please use the ?. and ?? operators instead." },
                    { name: "lodash/keys", message: "Please use Object.keys() instead." },
                    { name: "lodash/values", message: "Please use Object.values() instead." },
                    { name: "lodash/entries", message: "Please use Object.entries() instead." },
                    { name: "lodash/toPairs", message: "Please use Object.entries() instead." },
                    { name: "lodash/map", message: "Please use Array.prototype.map() instead." },
                    { name: "lodash/filter", message: "Please use Array.prototype.filter() instead." },
                    { name: "lodash/find", message: "Please use Array.prototype.find() instead." },
                    { name: "lodash/findIndex", message: "Please use Array.prototype.findIndex() instead." },
                    { name: "lodash/includes", message: "Please use Array.prototype.includes() instead." },
                    { name: "lodash/some", message: "Please use Array.prototype.some() instead." },
                    { name: "lodash/every", message: "Please use Array.prototype.every() instead." },
                    { name: "lodash/reduce", message: "Please use Array.prototype.reduce() instead." },
                    { name: "lodash/concat", message: "Please use Array.prototype.concat() or spread [...arr1, ...arr2] instead." },
                    { name: "lodash/reverse", message: "Please use Array.prototype.reverse() instead." },
                    { name: "lodash/slice", message: "Please use Array.prototype.slice() instead." },
                    { name: "lodash/indexOf", message: "Please use Array.prototype.indexOf() instead." },
                    { name: "lodash/lastIndexOf", message: "Please use Array.prototype.lastIndexOf() instead." },
                    { name: "lodash/fill", message: "Please use Array.prototype.fill() instead." },
                    { name: "lodash/startsWith", message: "Please use String.prototype.startsWith() instead." },
                    { name: "lodash/endsWith", message: "Please use String.prototype.endsWith() instead." },
                    { name: "lodash/repeat", message: "Please use String.prototype.repeat() instead." },
                    { name: "lodash/padStart", message: "Please use String.prototype.padStart() instead." },
                    { name: "lodash/padEnd", message: "Please use String.prototype.padEnd() instead." },
                    { name: "lodash/trim", message: "Please use String.prototype.trim() instead." },
                    { name: "lodash/trimStart", message: "Please use String.prototype.trimStart() instead." },
                    { name: "lodash/trimLeft", message: "Please use String.prototype.trimStart() instead." },
                    { name: "lodash/trimEnd", message: "Please use String.prototype.trimEnd() instead." },
                    { name: "lodash/trimRight", message: "Please use String.prototype.trimEnd() instead." },
                    { name: "lodash/toUpper", message: "Please use String.prototype.toUpperCase() instead." },
                    { name: "lodash/toLower", message: "Please use String.prototype.toLowerCase() instead." },
                    { name: "lodash/isArray", message: "Please use Array.isArray() instead." },
                    { name: "lodash/isNaN", message: "Please use Number.isNaN() instead." },
                    { name: "lodash/isFinite", message: "Please use Number.isFinite() instead." },
                    { name: "lodash/isInteger", message: "Please use Number.isInteger() instead." },
                    { name: "lodash/isNull", message: "Please use value === null instead." },
                    { name: "lodash/isUndefined", message: "Please use value === undefined instead." },
                    { name: "lodash/defaultTo", message: "Please use value ?? defaultValue instead." },
                    { name: "lodash/assign", message: "Please use Object.assign() or spread syntax {...obj} instead." },
                    { name: "lodash/flatten", message: "Please use Array.prototype.flat() instead." },
                    { name: "lodash/flattenDeep", message: "Please use Array.prototype.flat(Infinity) instead." },
                    { name: "lodash/isNil", message: "Please use value === null || value === undefined instead." },
                    { name: "lodash/noop", message: "Please use () => {} instead." }
                ],
                patterns: [
                    { group: ["lodash/get.js", "lodash/get/*"], message: "Please use the ?. and ?? operators instead." },
                    { group: ["lodash/getOr.js", "lodash/getOr/*"], message: "Please use the ?. and ?? operators instead." },
                    { group: ["lodash/keys.js", "lodash/keys/*"], message: "Please use Object.keys() instead." },
                    { group: ["lodash/values.js", "lodash/values/*"], message: "Please use Object.values() instead." },
                    { group: ["lodash/entries.js", "lodash/entries/*"], message: "Please use Object.entries() instead." },
                    { group: ["lodash/toPairs.js", "lodash/toPairs/*"], message: "Please use Object.entries() instead." },
                    { group: ["lodash/map.js", "lodash/map/*"], message: "Please use Array.prototype.map() instead." },
                    { group: ["lodash/filter.js", "lodash/filter/*"], message: "Please use Array.prototype.filter() instead." },
                    { group: ["lodash/find.js", "lodash/find/*"], message: "Please use Array.prototype.find() instead." },
                    { group: ["lodash/findIndex.js", "lodash/findIndex/*"], message: "Please use Array.prototype.findIndex() instead." },
                    { group: ["lodash/includes.js", "lodash/includes/*"], message: "Please use Array.prototype.includes() instead." },
                    { group: ["lodash/some.js", "lodash/some/*"], message: "Please use Array.prototype.some() instead." },
                    { group: ["lodash/every.js", "lodash/every/*"], message: "Please use Array.prototype.every() instead." },
                    { group: ["lodash/reduce.js", "lodash/reduce/*"], message: "Please use Array.prototype.reduce() instead." },
                    { group: ["lodash/concat.js", "lodash/concat/*"], message: "Please use Array.prototype.concat() or spread [...arr1, ...arr2] instead." },
                    { group: ["lodash/reverse.js", "lodash/reverse/*"], message: "Please use Array.prototype.reverse() instead." },
                    { group: ["lodash/slice.js", "lodash/slice/*"], message: "Please use Array.prototype.slice() instead." },
                    { group: ["lodash/indexOf.js", "lodash/indexOf/*"], message: "Please use Array.prototype.indexOf() instead." },
                    { group: ["lodash/lastIndexOf.js", "lodash/lastIndexOf/*"], message: "Please use Array.prototype.lastIndexOf() instead." },
                    { group: ["lodash/fill.js", "lodash/fill/*"], message: "Please use Array.prototype.fill() instead." },
                    { group: ["lodash/startsWith.js", "lodash/startsWith/*"], message: "Please use String.prototype.startsWith() instead." },
                    { group: ["lodash/endsWith.js", "lodash/endsWith/*"], message: "Please use String.prototype.endsWith() instead." },
                    { group: ["lodash/repeat.js", "lodash/repeat/*"], message: "Please use String.prototype.repeat() instead." },
                    { group: ["lodash/padStart.js", "lodash/padStart/*"], message: "Please use String.prototype.padStart() instead." },
                    { group: ["lodash/padEnd.js", "lodash/padEnd/*"], message: "Please use String.prototype.padEnd() instead." },
                    { group: ["lodash/trim.js", "lodash/trim/*"], message: "Please use String.prototype.trim() instead." },
                    { group: ["lodash/trimStart.js", "lodash/trimStart/*"], message: "Please use String.prototype.trimStart() instead." },
                    { group: ["lodash/trimLeft.js", "lodash/trimLeft/*"], message: "Please use String.prototype.trimStart() instead." },
                    { group: ["lodash/trimEnd.js", "lodash/trimEnd/*"], message: "Please use String.prototype.trimEnd() instead." },
                    { group: ["lodash/trimRight.js", "lodash/trimRight/*"], message: "Please use String.prototype.trimEnd() instead." },
                    { group: ["lodash/toUpper.js", "lodash/toUpper/*"], message: "Please use String.prototype.toUpperCase() instead." },
                    { group: ["lodash/toLower.js", "lodash/toLower/*"], message: "Please use String.prototype.toLowerCase() instead." },
                    { group: ["lodash/isArray.js", "lodash/isArray/*"], message: "Please use Array.isArray() instead." },
                    { group: ["lodash/isNaN.js", "lodash/isNaN/*"], message: "Please use Number.isNaN() instead." },
                    { group: ["lodash/isFinite.js", "lodash/isFinite/*"], message: "Please use Number.isFinite() instead." },
                    { group: ["lodash/isInteger.js", "lodash/isInteger/*"], message: "Please use Number.isInteger() instead." },
                    { group: ["lodash/isNull.js", "lodash/isNull/*"], message: "Please use value === null instead." },
                    { group: ["lodash/isUndefined.js", "lodash/isUndefined/*"], message: "Please use value === undefined instead." },
                    { group: ["lodash/defaultTo.js", "lodash/defaultTo/*"], message: "Please use value ?? defaultValue instead." },
                    { group: ["lodash/assign.js", "lodash/assign/*"], message: "Please use Object.assign() or spread syntax {...obj} instead." },
                    { group: ["lodash/flatten.js", "lodash/flatten/*"], message: "Please use Array.prototype.flat() instead." },
                    { group: ["lodash/flattenDeep.js", "lodash/flattenDeep/*"], message: "Please use Array.prototype.flat(Infinity) instead." },
                    { group: ["lodash/isNil.js", "lodash/isNil/*"], message: "Please use value === null || value === undefined instead." },
                    { group: ["lodash/noop.js", "lodash/noop/*"], message: "Please use () => {} instead." }
                ],
            },
        ],
        "import/no-unassigned-import": "error",

        // we don't mind duplicate string most of the time as they are often checked by TypeScript unions
        "sonarjs/no-duplicate-string": "off",
        // some of these findings are not actionable in a reasonable time
        "sonarjs/cognitive-complexity": "warn",
        "tsdoc/syntax": "error",
        // these rules can make some regexes much less readable
        "regexp/prefer-d": "off",
        "regexp/prefer-w": "off",
        // this rule is in direct conflict with the regexp plugin
        "no-useless-escape": "off",
        "no-negated-condition": "error",
        "no-unneeded-ternary": ["error", { defaultAssignment: false }],
        "no-extra-boolean-cast": "error",

        // unused disable comments
        "eslint-comments/no-unused-disable": "error",
    },
    parserOptions: {
        ecmaVersion: 2020,
        sourceType: "module",
    },
    overrides: [
        {
            plugins: ["@typescript-eslint"],
            extends: ["plugin:@typescript-eslint/recommended"],
            files: ["*.ts", "*.tsx"],
            rules: {
                "@typescript-eslint/array-type": "off",
                "@typescript-eslint/ban-ts-comment": [
                    "error",
                    { "ts-expect-error": "allow-with-description" },
                ],
                "@typescript-eslint/no-wrapper-object-types": "error",
                "@typescript-eslint/no-unsafe-function-type": "error",
                "@typescript-eslint/no-restricted-types": [
                    "error",
                    {
                        types: {
                            String: {
                                message: "Use 'string' instead",
                                fixWith: "string",
                            },
                            Number: {
                                message: "Use 'number' instead",
                                fixWith: "number",
                            },
                            Boolean: {
                                message: "Use 'boolean' instead",
                                fixWith: "boolean",
                            },
                            Symbol: {
                                message: "Use 'symbol' instead",
                                fixWith: "symbol",
                            },
                        },
                    },
                ],
                "@typescript-eslint/consistent-type-exports": [
                    "error",
                    { fixMixedExportsWithInlineTypeSpecifier: false },
                ],
                "@typescript-eslint/explicit-member-accessibility": "off",
                "@typescript-eslint/interface-name-prefix": "off",
                "@typescript-eslint/member-ordering": "off",
                "@typescript-eslint/naming-convention": "off",
                "@typescript-eslint/no-explicit-any": "off",
                "@typescript-eslint/no-inferrable-types": "off",
                "@typescript-eslint/no-non-null-assertion": "off",
                "@typescript-eslint/prefer-optional-chain": "error",
            },
        },
        {
            files: ["*.test.ts", "*.test.tsx", "*.spec.ts"],
            rules: {
                // we do not care about duplicate functions in test files, they often make sense (e.g. in different describe blocks)
                "sonarjs/no-identical-functions": "off",
            },
        },
    ],
};
