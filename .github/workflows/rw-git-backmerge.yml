name: rw ~ Git ~ Back merge release to master

on:
  workflow_call:
    inputs:
      source-branch:
        required: false
        type: string
        default: 'release'
      target-branch:
        required: false
        type: string
        default: 'master'


    outputs:
      pull-request-url:
        description: "The URL of the created Pull Request"
        value: ${{ jobs.merge-and-resolve-conflicts.outputs.pr_url }}
      has-conflicts:
        description: "Pull Request has conflicts"
        value: ${{ jobs.merge-and-resolve-conflicts.outputs.pr_has_conflicts }}

jobs:
  merge-and-resolve-conflicts:
    runs-on: ubuntu-latest
    outputs:
      pr_url: ${{ steps.prepare-pr.outputs.pr_url }}
      pr_has_conflicts: ${{ steps.prepare-pr.outputs.pr_has_conflicts }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18.17.0

      - name: Install rush
        run: |
            npm install -g @microsoft/rush

      - name: Configure Git
        run: |
          git config user.name 'github-actions'
          git config user.email 'github-actions@github.com'

      - name: Merge and Resolve Conflicts or Create Pull Request
        id: prepare-pr
        run: |
          git checkout $TARGET_BRANCH
          # this needs to be here directly, not via action as we are doing checkout before
          version=$(node -p "require('./libs/sdk-ui/package.json').version")

          git checkout $SOURCE_BRANCH

          TMP_BRANCH=$SOURCE_BRANCH-to-$TARGET_BRANCH

          # Check if the remote temporary branch exists and delete it if it does
          if git ls-remote --heads origin "$TMP_BRANCH" | grep "$TMP_BRANCH" >/dev/null; then
               echo "Remote branch $TMP_BRANCH exists. Deleting..."
               git push origin --delete "$TMP_BRANCH"
          fi

          # Check if local temporary branch exists and delete it if it does
          if git rev-parse --verify "$TMP_BRANCH" >/dev/null 2>&1; then
              echo "Local branch $TMP_BRANCH exists. Deleting..."
              git branch -D "$TMP_BRANCH"
          fi

          # Create a temporary branch
          git checkout -b $TMP_BRANCH

          # policies.json is not a valid json, cannot use `cat common/config/rush/version-policies.json | jq -r '.[].policyName'`
          policies=$(cat common/config/rush/version-policies.json | grep '^\s\+"policyName' | sed 's/.*"policyName": "\(.*\)",/\1/')

          for policy in $policies
          do
            rush version --ensure-version-policy --override-version $version --version-policy $policy
          done

          # commit only if bump produced some changes
          git diff --exit-code || git commit --no-verify -a -m "chore: bumped version of sdk packages to $version which is in $TARGET_BRANCH" -m "" -m "TRIVIAL"

          # rush bump to something that's in target branch
          git merge --verbose --no-ff origin/$TARGET_BRANCH || true

          # we are resolving only conflicts which we can do, we silently ignore other potential conflits
          conflicting_files=$(git diff --name-only --diff-filter=U)
          has_conflicts=false

          if [ -n "$conflicting_files" ]; then
            echo "There are conflicts which still need to be resolved, aborting"
            has_conflicts=true
            git merge --abort
          fi

          git push origin $TMP_BRANCH

          PR_MESSAGE=$(cat << EOL
          This PR is created automatically by GitHub Actions from $SOURCE_BRANCH into $TARGET_BRANCH via temporary branch $TMP_BRANCH.
          In case of conflicts, please resolve them.
          Check out $TMP_BRANCH locally and ensure the branch is up to date with the upstream.
          Then call 'git merge upstream/master'.
          Resolve conflicts and push $TMP_BRANCH to upstream.
          EOL
          )

          PR_OUTPUT=$(gh pr create --title "Merge $SOURCE_BRANCH into $TARGET_BRANCH" --body "$PR_MESSAGE" --base "$TARGET_BRANCH" --head "$TMP_BRANCH")
          PR_URL=$(echo "$PR_OUTPUT" | grep -o 'https://github.com[^ ]*')
          echo "Created pull-request: $PR_URL"

          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
          echo "pr_has_conflicts=$has_conflicts" >> $GITHUB_OUTPUT
        env:
          SOURCE_BRANCH: ${{ inputs.source-branch }}
          TARGET_BRANCH: ${{ inputs.target-branch }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
