# (C) 2024 GoodData Corporation

name: Push ~ Prerelease
on:
  push:
    branches:
      - master

jobs:
  pull-request-info:
    runs-on:
      group: infra1-runners-arc
      labels: runners-small
    outputs:
      should-prerelease: ${{ steps.should-prerelease.outputs.result }}
      branch-name: ${{ steps.extract-branch.outputs.branch-name }}
    steps:
      - uses: actions/github-script@v7
        id: should-prerelease
        with:
          script: |
            let pullRequests;
            let retries = 3;
            let lastError;
            
            // Retry logic for flaky GitHub API
            while (retries > 0) {
              try {
                pullRequests = await github.rest.repos.listPullRequestsAssociatedWithCommit({
                  commit_sha: context.sha,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                });
                break; // Success, exit retry loop
              } catch (error) {
                lastError = error;
                retries--;
                console.log(`GitHub API error: ${error.message}`);
                if (retries > 0) {
                  console.log(`Retrying... (${retries} retries left)`);
                  await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2 seconds before retry
                }
              }
            }
            
            if (!pullRequests) {
              console.error('Failed to fetch pull requests after all retries:', lastError);
              return false;
            }
            
            const pr = pullRequests?.data[0];
            if (!pr) {
              console.log('No pull request found for this commit');
              return false;
            }
            
            console.log(`Found PR #${pr.number} with labels: ${pr.labels?.map(l => l.name).join(', ')}`);
            const hasPublishLabel = pr.labels?.some((it) => it.name === 'publish');
            console.log(`Has publish label: ${hasPublishLabel}`);
            
            return hasPublishLabel;
          result-encoding: string
      - name: Extract branch name
        env:
          CURRENT_REF: ${{ github.event.ref }}
        id: extract-branch
        shell: bash
        run: echo "branch-name=${CURRENT_REF#refs/heads/}" >> $GITHUB_OUTPUT

  publish-pre-release:
    needs: [pull-request-info]
    name: Publish pre-release
    # should-prerelease is a string, not a boolean
    if: ${{ needs.pull-request-info.outputs.should-prerelease == 'true' }}
    uses: ./.github/workflows/rw-publish-prerelease.yml
    secrets: inherit
    permissions:
      contents: write
      id-token: write
    with:
      source-branch:  ${{ needs.pull-request-info.outputs.branch-name }}

  check-new-alpha:
    needs: [publish-pre-release]
    name: Check if new alpha version
    runs-on:
      group: infra1-runners-arc
      labels: runners-small
    outputs:
      is-new-alpha: ${{ steps.check-version.outputs.is-new-alpha }}
      version: ${{ steps.check-version.outputs.version }}
    steps:
      - name: Check if version is new alpha
        id: check-version
        run: |
          VERSION="${{ needs.publish-pre-release.outputs.version }}"
          echo "Version: $VERSION"
          
          # Check if version ends with -alpha.X where X is not 0
          if [[ $VERSION =~ -alpha\.([0-9]+)$ ]]; then
            ALPHA_NUMBER="${BASH_REMATCH[1]}"
            echo "Alpha number: $ALPHA_NUMBER"
            
            if [[ $ALPHA_NUMBER != "0" ]]; then
              echo "This is a new alpha version (not .0)"
              echo "is-new-alpha=true" >> $GITHUB_OUTPUT
            else
              echo "This is the first alpha version (.0)"
              echo "is-new-alpha=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Not an alpha version"
            echo "is-new-alpha=false" >> $GITHUB_OUTPUT
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  trigger-gdc-ui-backport:
    needs: [check-new-alpha, pull-request-info]
    name: Trigger gdc-ui backport
    if: ${{ needs.check-new-alpha.outputs.is-new-alpha == 'true' }}
    runs-on:
      group: infra1-runners-arc
      labels: runners-small
    steps:
      - name: Trigger sdk-backport in gdc-ui
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.TOKEN_GITHUB_YENKINS_ADMIN }}
          repository: gooddata/gdc-ui
          event-type: sdk-alpha-published
