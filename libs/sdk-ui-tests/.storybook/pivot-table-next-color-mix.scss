// (C) 2025 GoodData Corporation
// CSS polyfill for color-mix() function

@use "sass:math";

/**
 * As it is not easy to add a polyfill for css function, we rather override the css custom properties
 * with computed values in a different way using sass function.
 *
 * There may be some differences in the colors, but it is better than not having any colors at all in screenshots.
 * Beware, that any new total colors or related variables should be added here.
 *
 * For now, this does not support theming. If we need to support theming, we need to add a way to pass the theme
 * to the function and change the default.
 */

// SCSS function to simulate color-mix with transparency
@function color-mix-transparent($color, $percentage) {
    @return rgba(red($color), green($color), blue($color), alpha($color) * math.div($percentage, 100));
}

// Define the base total color as a SCSS variable for computation
$base-total-color: rgba(176, 190, 202, 0.4); // Default fallback

// Always override CSS custom properties with computed values
.gd-pivot-table-next {
    --subtotal-bg: #{color-mix-transparent($base-total-color, 20)} !important;
    --total-bg: #{color-mix-transparent($base-total-color, 40)} !important;
    --column-subtotal-bg: #{color-mix-transparent($base-total-color, 20)} !important;
    --column-total-bg: #{color-mix-transparent($base-total-color, 40)} !important;
    --row-subtotal-column-subtotal-bg: #{color-mix-transparent($base-total-color, 40)} !important;
    --row-total-column-subtotal-bg: #{color-mix-transparent($base-total-color, 60)} !important;
    --row-subtotal-column-total-bg: #{color-mix-transparent($base-total-color, 60)} !important;
    --row-total-column-total-bg: #{color-mix-transparent($base-total-color, 80)} !important;
}
