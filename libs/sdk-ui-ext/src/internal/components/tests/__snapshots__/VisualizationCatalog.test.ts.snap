// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 610x154 - Force position RIGHT - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 610x154 - Force position RIGHT - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 610x154 - Force position RIGHT - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 610x154 - Force position RIGHT - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 610x154 - Force position RIGHT - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"))
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - Y axis configuration 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    yaxis: {max: "25000000", min: "5000000"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - arithmetic measures 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - coloring - custom palette 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - data labels - auto visibility 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    dataLabels: {visible: "auto"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - data labels - default 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - data labels - forced hidden 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    dataLabels: {visible: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - data labels - forced visible 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    dataLabels: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - data labels - forced visible and german separators 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    dataLabels: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - data points - dense chart - auto visibility 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, localIdRef, newAttribute, newMeasure, newMeasureValueFilter } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_opportunity.opportunity.name", "displayForm"), a => a.localId("a_label.f_opportunity.opportunity.name"))
];
const filters: IFilter[] = [
    newMeasureValueFilter(localIdRef("m_87a053b0_3947_49f3_b0c5_de53fd01f050"), "GREATER_THAN", 100000)
];
const config: IChartConfig = {
    dataPoints: {visible: "auto"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - data points - dense chart - default 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, localIdRef, newAttribute, newMeasure, newMeasureValueFilter } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_opportunity.opportunity.name", "displayForm"), a => a.localId("a_label.f_opportunity.opportunity.name"))
];
const filters: IFilter[] = [
    newMeasureValueFilter(localIdRef("m_87a053b0_3947_49f3_b0c5_de53fd01f050"), "GREATER_THAN", 100000)
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - data points - dense chart - forced hidden 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, localIdRef, newAttribute, newMeasure, newMeasureValueFilter } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_opportunity.opportunity.name", "displayForm"), a => a.localId("a_label.f_opportunity.opportunity.name"))
];
const filters: IFilter[] = [
    newMeasureValueFilter(localIdRef("m_87a053b0_3947_49f3_b0c5_de53fd01f050"), "GREATER_THAN", 100000)
];
const config: IChartConfig = {
    dataPoints: {visible: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - data points - dense chart - forced visible 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, localIdRef, newAttribute, newMeasure, newMeasureValueFilter } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_opportunity.opportunity.name", "displayForm"), a => a.localId("a_label.f_opportunity.opportunity.name"))
];
const filters: IFilter[] = [
    newMeasureValueFilter(localIdRef("m_87a053b0_3947_49f3_b0c5_de53fd01f050"), "GREATER_THAN", 100000)
];
const config: IChartConfig = {
    dataPoints: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - data points - sparse chart - auto visibility 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    dataPoints: {visible: "auto"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - data points - sparse chart - default 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - data points - sparse chart - forced hidden 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    dataPoints: {visible: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - data points - sparse chart - forced visible 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    dataPoints: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - font 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - legend position - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - legend position - disabled 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - legend position - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {position: "bottom"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - legend position - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {position: "left"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - legend position - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {position: "right"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - legend position - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {position: "top"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - single measure 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - single measure with two viewBy 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const stackBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - single measure with viewBy 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - single measure with viewBy and stack to percent 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    stackMeasuresToPercent: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - single measure with viewBy and stackBy 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const stackBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - single measure with viewBy and stackBy and disabled stacking 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const stackBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - single measure with viewBy and stackBy and stack to percent 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const stackBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    stackMeasuresToPercent: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - single measure with viewBy and stackBy and stack to percent with labels 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const stackBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    dataLabels: {visible: true},
    stackMeasuresToPercent: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - themed 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - two measures with undefined values 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_closedate_timestamp.year", "displayForm"), a => a.localId("a_dt_closedate_timestamp.year"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - two measures with viewBy 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - two measures with viewBy and disabled stack measures 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    stackMeasures: false,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - two measures with viewBy and disabled stacking 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - two measures with viewBy and enabled stack measures 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    stackMeasures: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - two measures with viewBy and enabled stacking 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - two measures with viewBy and stack measures to percent 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    stackMeasuresToPercent: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - two measures with viewBy sorted by attribute 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - two measures with viewBy sorted by measure 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_e519fa2a_86c3_4e32_8313_0c03062348j3", "asc")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - undefined values and disabled stacking 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_closedate_timestamp.year", "displayForm"), a => a.localId("a_dt_closedate_timestamp.year"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - undefined values, disabled stacking and the continuous line enabled 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_closedate_timestamp.year", "displayForm"), a => a.localId("a_dt_closedate_timestamp.year"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for AreaChart - with one measure and view by date and stack by date 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { AreaChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_closedate_timestamp.year", "displayForm"), a => a.localId("a_dt_closedate_timestamp.year"))
];
const stackBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.year", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.year"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 100x70 - without x axis, without y axis (very small container) 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const stackBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_label.f_product.product.name", "desc", "sum")
];
const config: IChartConfig = {
    legend: {enabled: false, position: "right"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 120x354 - without y axis labels 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const stackBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_label.f_product.product.name", "desc", "sum")
];
const config: IChartConfig = {
    legend: {enabled: false, position: "right"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 165x354 - without y axis title 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const stackBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_label.f_product.product.name", "desc", "sum")
];
const config: IChartConfig = {
    legend: {enabled: false, position: "right"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 610x154 - Force position RIGHT - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 610x154 - Force position RIGHT - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 610x154 - Force position RIGHT - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 610x154 - Force position RIGHT - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 610x154 - Force position RIGHT - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 650x90 - without x axis labels 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const stackBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_label.f_product.product.name", "desc", "sum")
];
const config: IChartConfig = {
    legend: {enabled: false, position: "right"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 650x120 - without x axis title 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const stackBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_label.f_product.product.name", "desc", "sum")
];
const config: IChartConfig = {
    legend: {enabled: false, position: "right"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_account.account.name", "displayForm"), a => a.localId("a_label.f_account.account.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_account.account.name", "displayForm"), {
    uris: [
        "(add)ventures",
        "(blank)",
        "(mt) Media Temple",
        ".decimal",
        "1 Source Consulting",
        "1-800 Postcards",
        "1-800 We Answer",
        "1-888-OhioComp",
        "1000Bulbs.com",
        "101 Financial",
        "123 Exteriors",
        "14 West",
        "1Source International",
        "1st Choice Staffing & Consulting",
        "1st in Video - Music World",
        "2 Wheel Bikes",
        "2HB Software Designs",
        "352 Media Group",
        "3Degrees",
        "3E",
        "3balls.com",
        "3dCart Shopping Cart Software",
        "49er Communications",
        "4Wall Entertainment",
        "4th Source",
        "5LINX Enterprises",
        "614 Media Group",
        "6K Systems",
        "7 Medical Systems",
        "7 Simple Machines",
        "7-Eleven",
        "720 Strategies",
        "90octane",
        "919 Marketing",
        "@properties",
        "A Main Hobbies",
        "A Place for Mom",
        "A Squared Group",
        "A White Orchid Wedding",
        "A&C Plastics",
        "A&P Consulting Transportation Engineers",
        "A&R Tarpaulins",
        "A+ Mortgage Services",
        "A+ Tutor U",
        "A-1 Textiles",
        "A-Life Medical",
        "A-T Solutions",
        "A. Pomerantz & Co.",
        "A.B. Data",
        "A.R.M. Solutions"
    ]
})
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - X axis min/max configuration 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    xaxis: {max: "25000000", min: "5000000"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - X axis on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    secondary_xaxis: {
        measures: [
            "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
            "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
        ]
    },
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - X axis on top with two viewBy attributes 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_label.f_product.product.name", "desc", "sum"),
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    secondary_xaxis: {
        measures: [
            "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
            "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
        ]
    },
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - Y axis invisible 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_label.f_product.product.name", "desc", "sum"),
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    yaxis: {visible: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - Y axis rotation 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_label.f_product.product.name", "desc", "sum"),
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    yaxis: {rotation: "45"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - arithmetic measures 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newArithmeticMeasure, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - assign color to attribute element stack 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure } from "@gooddata/sdk-model";
import { BarChart, getColorMappingPredicate, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const stackBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_label.f_product.product.name", "desc", "sum")
];
const config: IChartConfig = {
    colorMapping: [
        {predicate: getColorMappingPredicate("East Coast"), color: {type: "rgb", value: {b: 0, g: 0, r: 0}}},
        {predicate: getColorMappingPredicate("West Coast"), color: {type: "rgb", value: {b: 0, g: 0, r: 255}}}
    ],
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - assign color to master measure impacts derived PoP 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newMeasure, newMeasureSort, newPopMeasure } from "@gooddata/sdk-model";
import { BarChart, getColorMappingPredicate, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newPopMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", idRef("dt_closedate_timestamp.year", "attribute"), m => m.alias("Won Last Year").localId("m_m_e519fa2a_86c3_4e32_8313_0c03062348j3_dt_closedate_timestamp.year"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_closedate_timestamp.year", "displayForm"), a => a.localId("a_dt_closedate_timestamp.year"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    colorMapping: [
        {predicate: getColorMappingPredicate("m_e519fa2a_86c3_4e32_8313_0c03062348j3"), color: {type: "rgb", value: {b: 0, g: 0, r: 0}}}
    ],
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - assign color to measures 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, getColorMappingPredicate, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    colorMapping: [
        {predicate: getColorMappingPredicate("m_87a053b0_3947_49f3_b0c5_de53fd01f050"), color: {type: "rgb", value: {b: 0, g: 0, r: 0}}},
        {predicate: getColorMappingPredicate("m_e519fa2a_86c3_4e32_8313_0c03062348j3"), color: {type: "guid", value: "05"}}
    ],
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - coloring - custom palette 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - data labels - data labels and totals with auto visibility 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_f_owner.region_id", "desc", "sum")
];
const config: IChartConfig = {
    dataLabels: {totalsVisible: "auto", visible: "auto"},
    enableSeparateTotalLabels: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - data labels - data labels auto visibility 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_f_owner.region_id", "desc", "sum")
];
const config: IChartConfig = {
    dataLabels: {visible: "auto"},
    enableSeparateTotalLabels: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - data labels - data labels forced hidden 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_f_owner.region_id", "desc", "sum")
];
const config: IChartConfig = {
    dataLabels: {visible: false},
    enableSeparateTotalLabels: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - data labels - data labels forced hidden totals forced hidden 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_f_owner.region_id", "desc", "sum")
];
const config: IChartConfig = {
    dataLabels: {totalsVisible: false, visible: false},
    enableSeparateTotalLabels: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - data labels - data labels forced hidden totals forced visible 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_f_owner.region_id", "desc", "sum")
];
const config: IChartConfig = {
    dataLabels: {totalsVisible: true, visible: false},
    enableSeparateTotalLabels: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - data labels - data labels forced visible 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_f_owner.region_id", "desc", "sum")
];
const config: IChartConfig = {
    dataLabels: {visible: true},
    enableSeparateTotalLabels: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - data labels - default 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_f_owner.region_id", "desc", "sum")
];
const config: IChartConfig = {
    enableSeparateTotalLabels: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - data labels - forced dataLabels visible and german separators 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_f_owner.region_id", "desc", "sum")
];
const config: IChartConfig = {
    dataLabels: {visible: true},
    enableSeparateTotalLabels: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - data labels - labels forced hidden totals auto visibility 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_f_owner.region_id", "desc", "sum")
];
const config: IChartConfig = {
    dataLabels: {totalsVisible: "auto", visible: false},
    enableSeparateTotalLabels: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - dual axis label rotation - 60 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newArithmeticMeasure, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    secondary_xaxis: {
        measures: ["m_aebe46cecdb5eb3b5c069ce97a80535f"],
        rotation: "60"
    },
    xaxis: {rotation: "60"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - dual axis label rotation - 90 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newArithmeticMeasure, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    secondary_xaxis: {
        measures: ["m_aebe46cecdb5eb3b5c069ce97a80535f"],
        rotation: "90"
    },
    xaxis: {rotation: "90"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - dual axis label rotation - minus60 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newArithmeticMeasure, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    secondary_xaxis: {
        measures: ["m_aebe46cecdb5eb3b5c069ce97a80535f"],
        rotation: "-60"
    },
    xaxis: {rotation: "-60"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - dual axis label rotation - minus90 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newArithmeticMeasure, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    secondary_xaxis: {
        measures: ["m_aebe46cecdb5eb3b5c069ce97a80535f"],
        rotation: "-90"
    },
    xaxis: {rotation: "-90"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - dual axis name customization - high 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_label.f_product.product.name", "desc", "sum"),
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    secondary_xaxis: {
        measures: ["m_e519fa2a_86c3_4e32_8313_0c03062348j3"],
        name: {position: "high"}
    },
    secondary_yaxis: {name: {position: "high"}},
    xaxis: {name: {position: "high"}},
    yaxis: {name: {position: "high"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - dual axis name customization - invisible 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_label.f_product.product.name", "desc", "sum"),
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    secondary_xaxis: {
        measures: ["m_e519fa2a_86c3_4e32_8313_0c03062348j3"],
        name: {position: "middle"}
    },
    secondary_yaxis: {name: {position: "middle"}},
    xaxis: {name: {position: "middle"}},
    yaxis: {name: {position: "middle"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - dual axis name customization - low 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_label.f_product.product.name", "desc", "sum"),
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    secondary_xaxis: {
        measures: ["m_e519fa2a_86c3_4e32_8313_0c03062348j3"],
        name: {position: "low"}
    },
    secondary_yaxis: {name: {position: "low"}},
    xaxis: {name: {position: "low"}},
    yaxis: {name: {position: "low"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - dual axis name customization - middle 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_label.f_product.product.name", "desc", "sum"),
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    secondary_xaxis: {
        measures: ["m_e519fa2a_86c3_4e32_8313_0c03062348j3"],
        name: {position: "middle"}
    },
    secondary_yaxis: {name: {position: "middle"}},
    xaxis: {name: {position: "middle"}},
    yaxis: {name: {position: "middle"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - dual axis when two viewBy attributes 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_label.f_product.product.name", "desc", "sum"),
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    secondary_xaxis: {
        measures: ["m_e519fa2a_86c3_4e32_8313_0c03062348j3"]
    },
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - dual axis with one top measure and three bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newArithmeticMeasure, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    secondary_xaxis: {measures: ["m_aebe46cecdb5eb3b5c069ce97a80535f"]},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - font 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const stackBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_label.f_product.product.name", "desc", "sum")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - four measures and PoP 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newArithmeticMeasure, newAttribute, newMeasure, newMeasureSort, newPopMeasure } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newPopMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", idRef("dt_closedate_timestamp.year", "attribute"), m => m.alias("Won Last Year").localId("m_m_e519fa2a_86c3_4e32_8313_0c03062348j3_dt_closedate_timestamp.year")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_closedate_timestamp.year", "displayForm"), a => a.localId("a_dt_closedate_timestamp.year"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - legend position - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    legend: {position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - legend position - disabled 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - legend position - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    legend: {position: "bottom"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - legend position - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    legend: {position: "left"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - legend position - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    legend: {position: "right"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - legend position - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    legend: {position: "top"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - reversed three measures and one viewBy with top axis and stackMeasures 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newArithmeticMeasure, newAttribute, newAttributeAreaSort, newMeasure } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_label.f_product.product.name", "desc", "sum")
];
const config: IChartConfig = {
    secondary_xaxis: {measures: ["m_aebe46cecdb5eb3b5c069ce97a80535f"]},
    stackMeasures: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - reversed two measures and two viewBy with stackMeasures 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_label.f_product.product.name", "desc", "sum"),
    newAttributeAreaSort("a_f_owner.region_id", "desc", "sum")
];
const config: IChartConfig = {
    stackMeasures: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - single axis name customization - high 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "high"}},
    secondary_yaxis: {name: {position: "high"}},
    xaxis: {name: {position: "high"}},
    yaxis: {name: {position: "high"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - single axis name customization - invisible 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "middle"}},
    secondary_yaxis: {name: {position: "middle"}},
    xaxis: {name: {position: "middle"}},
    yaxis: {name: {position: "middle"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - single axis name customization - low 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "low"}},
    secondary_yaxis: {name: {position: "low"}},
    xaxis: {name: {position: "low"}},
    yaxis: {name: {position: "low"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - single axis name customization - middle 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "middle"}},
    secondary_yaxis: {name: {position: "middle"}},
    xaxis: {name: {position: "middle"}},
    yaxis: {name: {position: "middle"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - single measure 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, ISortItem, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - single measure ignores stack measures 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_label.f_product.product.name", "desc", "sum")
];
const config: IChartConfig = {
    stackMeasures: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - single measure with stack to 100% 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    stackMeasuresToPercent: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - single measure with two viewBy and stack 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"));
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_label.f_product.product.name", "desc", "sum"),
    newAttributeAreaSort("a_f_owner.region_id", "desc", "sum")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - single measure with viewBy 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - single measure with viewBy and stackBy 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const stackBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_label.f_product.product.name", "desc", "sum")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - stack measures and dual axis 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newArithmeticMeasure, newAttribute, newAttributeAreaSort, newMeasure } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_label.f_product.product.name", "desc", "sum")
];
const config: IChartConfig = {
    secondary_xaxis: {measures: ["m_aebe46cecdb5eb3b5c069ce97a80535f"]},
    stackMeasures: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - stack measures to 100% and dual axis 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newArithmeticMeasure, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    secondary_xaxis: {measures: ["m_aebe46cecdb5eb3b5c069ce97a80535f"]},
    stackMeasuresToPercent: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - stack measures to 100% with dual axis and axis min/max 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newArithmeticMeasure, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    secondary_xaxis: {
        max: "2",
        measures: ["m_aebe46cecdb5eb3b5c069ce97a80535f"],
        min: "1"
    },
    stackMeasuresToPercent: true,
    xaxis: {max: "0.9", min: "0.1"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - stackBy with one date 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure, newPopMeasure } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newPopMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", idRef("dt_closedate_timestamp.year", "attribute"), m => m.alias("Won Last Year").localId("m_m_e519fa2a_86c3_4e32_8313_0c03062348j3_dt_closedate_timestamp.year"))
];
const stackBy: IAttribute = newAttribute(idRef("dt_closedate_timestamp.year", "displayForm"), a => a.localId("a_dt_closedate_timestamp.year"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - themed 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const stackBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_label.f_product.product.name", "desc", "sum")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - two measures and two viewBy with stackMeasures 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_label.f_product.product.name", "desc", "sum"),
    newAttributeAreaSort("a_f_owner.region_id", "desc", "sum")
];
const config: IChartConfig = {
    stackMeasures: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - two measures and two viewBy with stackMeasuresToPercent 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_label.f_product.product.name", "desc", "sum"),
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    stackMeasuresToPercent: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - two measures and two viewBy with top axis and stackMeasuresToPercent 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_label.f_product.product.name", "desc", "sum"),
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    secondary_xaxis: {
        measures: [
            "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
            "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
        ]
    },
    stackMeasuresToPercent: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - two measures with dual axis and stack measures to 100% 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_label.f_product.product.name", "desc", "sum"),
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    secondary_xaxis: {
        measures: ["m_87a053b0_3947_49f3_b0c5_de53fd01f050"]
    },
    stackMeasuresToPercent: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - two measures with dual axis ignores stack measures 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_label.f_product.product.name", "desc", "sum"),
    newAttributeAreaSort("a_f_owner.region_id", "desc", "sum")
];
const config: IChartConfig = {
    secondary_xaxis: {
        measures: ["m_87a053b0_3947_49f3_b0c5_de53fd01f050"]
    },
    stackMeasures: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - two measures with two viewBy 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_label.f_product.product.name", "desc", "sum"),
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - two measures with two viewBy, filtered to single value 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, ISortItem, newAttribute, newAttributeAreaSort, newMeasure, newMeasureSort, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_product.product.name", "displayForm"), {values: ["WonderKid"]}),
    newPositiveAttributeFilter(idRef("f_owner.region_id", "displayForm"), {values: ["East Coast"]})
];
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_label.f_product.product.name", "desc", "sum"),
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                filters={filters}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - two measures with viewBy 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - two measures with viewBy sorted by attribute 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - two measures with viewBy sorted by measure 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_e519fa2a_86c3_4e32_8313_0c03062348j3", "asc")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - viewBy date and PoP measure 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newMeasure, newMeasureSort, newPopMeasure } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newPopMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", idRef("dt_closedate_timestamp.year", "attribute"), m => m.alias("Won Last Year").localId("m_m_e519fa2a_86c3_4e32_8313_0c03062348j3_dt_closedate_timestamp.year"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_closedate_timestamp.year", "displayForm"), a => a.localId("a_dt_closedate_timestamp.year"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BarChart - viewBy with two dates 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeAreaSort, newMeasure, newMeasureSort, newPopMeasure } from "@gooddata/sdk-model";
import { BarChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newPopMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", idRef("dt_closedate_timestamp.year", "attribute"), m => m.alias("Won Last Year").localId("m_m_e519fa2a_86c3_4e32_8313_0c03062348j3_dt_closedate_timestamp.year"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_closedate_timestamp.year", "displayForm"), a => a.localId("a_dt_closedate_timestamp.year")),
    newAttribute(idRef("dt_closedate_timestamp.year", "displayForm"), a => a.localId("a_dt_closedate_timestamp.year_1"))
];
const sortBy: ISortItem[] = [
    newAttributeAreaSort("a_dt_closedate_timestamp.year", "desc", "sum"),
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - auto legend 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on left 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on right 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on top 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 610x154 - Force position RIGHT - auto legend 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 610x154 - Force position RIGHT - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 610x154 - Force position RIGHT - legend on left 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 610x154 - Force position RIGHT - legend on right 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 610x154 - Force position RIGHT - legend on top 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - X and Y axis min/max configuration 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    xaxis: {max: "25000000", min: "5000000"},
    yaxis: {max: ".70", min: ".54"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - X axis max only configuration 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    xaxis: {max: "15000000"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - X axis min/max configuration 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    xaxis: {max: "25000000", min: "5000000"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - Y axis max only configuration 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    yaxis: {max: ".53"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - Y axis min/max configuration 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    yaxis: {max: ".70", min: ".54"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - arithmetic measure 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const size: IMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - assign color to attribute bubbles 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, getColorMappingPredicate, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    colorMapping: [
        {predicate: getColorMappingPredicate("Explorer"), color: {type: "rgb", value: {b: 0, g: 0, r: 0}}},
        {predicate: getColorMappingPredicate("WonderKid"), color: {type: "rgb", value: {b: 0, g: 0, r: 255}}}
    ],
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - axis name customization - high 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "high"}},
    secondary_yaxis: {name: {position: "high"}},
    xaxis: {name: {position: "high"}},
    yaxis: {name: {position: "high"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - axis name customization - invisible 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "middle"}},
    secondary_yaxis: {name: {position: "middle"}},
    xaxis: {name: {position: "middle"}},
    yaxis: {name: {position: "middle"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - axis name customization - low 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "low"}},
    secondary_yaxis: {name: {position: "low"}},
    xaxis: {name: {position: "low"}},
    yaxis: {name: {position: "low"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - axis name customization - middle 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "middle"}},
    secondary_yaxis: {name: {position: "middle"}},
    xaxis: {name: {position: "middle"}},
    yaxis: {name: {position: "middle"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - coloring - custom palette 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - data labels - auto visibility 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {visible: "auto"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - data labels - default 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - data labels - forced hidden 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {visible: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - data labels - forced visible 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - data labels - forced visible and german separators 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - font 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - legend position - auto legend 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - legend position - disabled 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - legend position - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {position: "bottom"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - legend position - legend on left 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {position: "left"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - legend position - legend on right 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {position: "right"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - legend position - legend on top 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {position: "top"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - themed 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - x and y axis and size measures with viewBy 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - x and y axis and size measures with viewBy and sorted by attr 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - x and y axis and size measures with viewBy with nulls in data 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("dt_closedate_timestamp.year", "displayForm"), a => a.localId("a_dt_closedate_timestamp.year"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - x and y axis measures with viewBy 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - x axis and size measures with viewBy 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - x axis measure 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - x axis measure with viewBy 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BubbleChart - y axis and size measures with viewBy 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BubbleChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const yAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const size: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 80x50 - without x axis, without y axis (very small container) 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 140x354 - without y axis labels 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 165x354 - without y axis title 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 610x154 - Force position RIGHT - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 610x154 - Force position RIGHT - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 610x154 - Force position RIGHT - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 610x154 - Force position RIGHT - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 610x154 - Force position RIGHT - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 650x50 - without x axis labels 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 650x80 - without x axis labels, with x axis title 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 650x120 - without x axis title 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - X axis hidden 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    xaxis: {visible: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - X axis max only configuration 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    xaxis: {max: "15000000"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - X axis min/max configuration 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    xaxis: {max: "25000000", min: "5000000"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - X axis rotation 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    xaxis: {rotation: "60"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - Y axis hidden 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    yaxis: {visible: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - Y axis rotation 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    yaxis: {rotation: "60"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - assign color to attribute bubbles 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, getColorMappingPredicate, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    colorMapping: [
        {predicate: getColorMappingPredicate("m_e519fa2a_86c3_4e32_8313_0c03062348j3"), color: {type: "rgb", value: {b: 0, g: 0, r: 0}}},
        {predicate: getColorMappingPredicate("m_87a053b0_3947_49f3_b0c5_de53fd01f050"), color: {type: "rgb", value: {b: 0, g: 0, r: 255}}}
    ],
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - axis name customization - high 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "high"}},
    secondary_yaxis: {name: {position: "high"}},
    xaxis: {name: {position: "high"}},
    yaxis: {name: {position: "high"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - axis name customization - invisible 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "middle"}},
    secondary_yaxis: {name: {position: "middle"}},
    xaxis: {name: {position: "middle"}},
    yaxis: {name: {position: "middle"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - axis name customization - low 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "low"}},
    secondary_yaxis: {name: {position: "low"}},
    xaxis: {name: {position: "low"}},
    yaxis: {name: {position: "low"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - axis name customization - middle 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "middle"}},
    secondary_yaxis: {name: {position: "middle"}},
    xaxis: {name: {position: "middle"}},
    yaxis: {name: {position: "middle"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - coloring - custom palette 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - data labels - auto visibility 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    dataLabels: {visible: "auto"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - data labels - default 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - data labels - forced hidden 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    dataLabels: {visible: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - data labels - forced visible 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    dataLabels: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - data labels - forced visible and german separators 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    dataLabels: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - font 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - legend position - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - legend position - disabled 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - legend position - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {position: "bottom"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - legend position - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {position: "left"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - legend position - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {position: "right"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - legend position - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {position: "top"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - primary and comparative measures 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const comparativeMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                comparativeMeasure={comparativeMeasure}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - primary and target measures 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - primary and target measures with viewBy 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - primary measure 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - primary with two viewBy dates 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_closedate_timestamp.year", "displayForm"), a => a.localId("a_dt_closedate_timestamp.year")),
    newAttribute(idRef("dt_closedate_timestamp.year", "displayForm"), a => a.localId("a_dt_closedate_timestamp.year_1"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - primary, target and comparative measures 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newArithmeticMeasure, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - primary, target and comparative measures with two viewBy 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - primary, target and comparative measures with two viewBy dates 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_closedate_timestamp.year", "displayForm"), a => a.localId("a_dt_closedate_timestamp.year")),
    newAttribute(idRef("dt_closedate_timestamp.year", "displayForm"), a => a.localId("a_dt_closedate_timestamp.year_1"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - primary, target and comparative measures with viewBy 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - primary, target and comparative measures with viewBy and sort 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newArithmeticMeasure, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "asc")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for BulletChart - themed 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { BulletChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IAttributeOrMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const targetMeasure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const comparativeMeasure: IAttributeOrMeasure = newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"));
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 40x60 - without x axis, without y axis (very small container) 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 60x354 - without y axis labels 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 60x354 - without y axis labels, with y axis title 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 120x354 - without y axis title 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 610x154 - Force position RIGHT - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 610x154 - Force position RIGHT - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 610x154 - Force position RIGHT - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 610x154 - Force position RIGHT - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 610x154 - Force position RIGHT - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 650x90 - without x axis labels 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 650x120 - without x axis title 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - Stack measures to 100% with and axis min/max 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IChartConfig = {
    dataLabels: {visible: true},
    stackMeasuresToPercent: true,
    yaxis: {max: "0.9", min: "0.1"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - X and Y axis invisible 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IChartConfig = {
    xaxis: {visible: false},
    yaxis: {visible: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - X axis invisible 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IChartConfig = {
    xaxis: {visible: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - X axis rotation 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IChartConfig = {
    xaxis: {rotation: "45"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - Y axis min/max configuration 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    yaxis: {max: "25000000", min: "5000000"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - Y axis on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    secondary_yaxis: {
        measures: [
            "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
            "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
        ]
    },
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - Y axis on right with two viewBy attributes 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IChartConfig = {
    secondary_yaxis: {
        measures: [
            "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
            "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
        ]
    },
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - assign color to attribute element stack 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, getColorMappingPredicate, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const stackBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    colorMapping: [
        {predicate: getColorMappingPredicate("East Coast"), color: {type: "rgb", value: {b: 0, g: 0, r: 0}}},
        {predicate: getColorMappingPredicate("West Coast"), color: {type: "rgb", value: {b: 0, g: 0, r: 255}}}
    ],
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - assign color to master measure impacts derived PoP 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure, newPopMeasure } from "@gooddata/sdk-model";
import { ColumnChart, getColorMappingPredicate, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newPopMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", idRef("dt_closedate_timestamp.year", "attribute"), m => m.alias("Won Last Year").localId("m_m_e519fa2a_86c3_4e32_8313_0c03062348j3_dt_closedate_timestamp.year"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_closedate_timestamp.year", "displayForm"), a => a.localId("a_dt_closedate_timestamp.year"))
];
const config: IChartConfig = {
    colorMapping: [
        {predicate: getColorMappingPredicate("m_e519fa2a_86c3_4e32_8313_0c03062348j3"), color: {type: "rgb", value: {b: 0, g: 0, r: 0}}}
    ],
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - assign color to measures 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, getColorMappingPredicate, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    colorMapping: [
        {predicate: getColorMappingPredicate("m_87a053b0_3947_49f3_b0c5_de53fd01f050"), color: {type: "rgb", value: {b: 0, g: 0, r: 0}}},
        {predicate: getColorMappingPredicate("m_e519fa2a_86c3_4e32_8313_0c03062348j3"), color: {type: "guid", value: "05"}}
    ],
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - coloring - custom palette 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - data labels - data labels and totals with auto visibility 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {totalsVisible: "auto", visible: "auto"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - data labels - data labels auto visibility 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {visible: "auto"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - data labels - data labels forced hidden 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {visible: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - data labels - data labels forced hidden totals forced hidden 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {totalsVisible: false, visible: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - data labels - data labels forced hidden totals forced visible 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {totalsVisible: true, visible: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - data labels - data labels forced visible 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - data labels - default 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - data labels - forced dataLabels visible and german separators 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - data labels - labels forced hidden totals auto visibility 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {totalsVisible: "auto", visible: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - dense chart with two view by 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, localIdRef, newAttribute, newMeasure, newMeasureValueFilter } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.localId("m_f_opportunitysnapshot.f_amount_sum").aggregation("sum"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("label.f_opportunity.opportunity.name", "displayForm"), a => a.localId("a_label.f_opportunity.opportunity.name"))
];
const filters: IFilter[] = [
    newMeasureValueFilter(localIdRef("m_f_opportunitysnapshot.f_amount_sum"), "GREATER_THAN", 5000000)
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - dual axis name customization - high 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "high"}},
    secondary_yaxis: {
        measures: ["m_aebe46cecdb5eb3b5c069ce97a80535f"],
        name: {position: "high"}
    },
    xaxis: {name: {position: "high"}},
    yaxis: {name: {position: "high"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - dual axis name customization - invisible 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "middle"}},
    secondary_yaxis: {
        measures: ["m_aebe46cecdb5eb3b5c069ce97a80535f"],
        name: {position: "middle"}
    },
    xaxis: {name: {position: "middle"}},
    yaxis: {name: {position: "middle"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - dual axis name customization - low 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "low"}},
    secondary_yaxis: {
        measures: ["m_aebe46cecdb5eb3b5c069ce97a80535f"],
        name: {position: "low"}
    },
    xaxis: {name: {position: "low"}},
    yaxis: {name: {position: "low"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - dual axis name customization - middle 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "middle"}},
    secondary_yaxis: {
        measures: ["m_aebe46cecdb5eb3b5c069ce97a80535f"],
        name: {position: "middle"}
    },
    xaxis: {name: {position: "middle"}},
    yaxis: {name: {position: "middle"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - dual axis when two viewBy attributes 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IChartConfig = {
    secondary_yaxis: {
        measures: ["m_e519fa2a_86c3_4e32_8313_0c03062348j3"]
    },
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - dual axis with hidden right Y axis 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    secondary_yaxis: {
        measures: ["m_aebe46cecdb5eb3b5c069ce97a80535f"],
        visible: false
    },
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - dual axis with no labels on right Y axis 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    secondary_yaxis: {
        labelsEnabled: false,
        measures: ["m_aebe46cecdb5eb3b5c069ce97a80535f"]
    },
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - dual axis with one right measure and three left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    secondary_yaxis: {measures: ["m_aebe46cecdb5eb3b5c069ce97a80535f"]},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - dual axis with right axis labels rotated 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    secondary_yaxis: {
        measures: ["m_aebe46cecdb5eb3b5c069ce97a80535f"],
        rotation: "45"
    },
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - font 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - legend position - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - legend position - disabled 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - legend position - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {position: "bottom"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - legend position - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {position: "left"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - legend position - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {position: "right"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - legend position - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {position: "top"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - no gridline 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    grid: {enabled: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - single axis name customization - high 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "high"}},
    secondary_yaxis: {name: {position: "high"}},
    xaxis: {name: {position: "high"}},
    yaxis: {name: {position: "high"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - single axis name customization - invisible 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "middle"}},
    secondary_yaxis: {name: {position: "middle"}},
    xaxis: {name: {position: "middle"}},
    yaxis: {name: {position: "middle"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - single axis name customization - low 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "low"}},
    secondary_yaxis: {name: {position: "low"}},
    xaxis: {name: {position: "low"}},
    yaxis: {name: {position: "low"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - single axis name customization - middle 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "middle"}},
    secondary_yaxis: {name: {position: "middle"}},
    xaxis: {name: {position: "middle"}},
    yaxis: {name: {position: "middle"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - single measure 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - single measure ignores stack measures 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    stackMeasures: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - single measure with one viewBy and one stackBy with multiple items 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - single measure with stack to 100% 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    stackMeasuresToPercent: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - single measure with two viewBy and stack 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const stackBy: IAttribute = newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - single measure with viewBy 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - single measure with viewBy and stackBy 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const stackBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - single measure with viewBy and stackBy filtered to single stack 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const stackBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("f_owner.region_id", "displayForm"), {values: ["East Coast"]})
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - single ratio measure with viewBy 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.alias("Amount with Ratio").localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050_ratio").ratio())
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - stack measures and dual axis 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    secondary_yaxis: {measures: ["m_aebe46cecdb5eb3b5c069ce97a80535f"]},
    stackMeasures: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - stack measures to 100% and dual axis 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    secondary_yaxis: {measures: ["m_aebe46cecdb5eb3b5c069ce97a80535f"]},
    stackMeasuresToPercent: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - stack measures to 100% with dual axis and axis min/max 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    secondary_yaxis: {
        max: "2",
        measures: ["m_aebe46cecdb5eb3b5c069ce97a80535f"],
        min: "1"
    },
    stackMeasuresToPercent: true,
    yaxis: {max: "0.9", min: "0.1"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - stackBy with one date 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure, newPopMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newPopMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", idRef("dt_closedate_timestamp.year", "attribute"), m => m.alias("Won Last Year").localId("m_m_e519fa2a_86c3_4e32_8313_0c03062348j3_dt_closedate_timestamp.year"))
];
const stackBy: IAttribute = newAttribute(idRef("dt_closedate_timestamp.year", "displayForm"), a => a.localId("a_dt_closedate_timestamp.year"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - themed 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - two measures 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - two measures and two viewBy with right axis and stackMeasuresToPercent 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IChartConfig = {
    secondary_yaxis: {
        measures: [
            "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
            "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
        ]
    },
    stackMeasuresToPercent: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - two measures and two viewBy with stackMeasures 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IChartConfig = {
    stackMeasures: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - two measures and two viewBy with stackMeasuresToPercent 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IChartConfig = {
    stackMeasuresToPercent: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - two measures with dual axis and stack measures to 100% 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IChartConfig = {
    secondary_yaxis: {
        measures: ["m_87a053b0_3947_49f3_b0c5_de53fd01f050"]
    },
    stackMeasuresToPercent: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - two measures with dual axis ignores stack measures 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IChartConfig = {
    secondary_yaxis: {
        measures: ["m_87a053b0_3947_49f3_b0c5_de53fd01f050"]
    },
    stackMeasures: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - two measures with two viewBy 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - two measures with viewBy 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - two measures with viewBy sorted by attribute 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - two measures with viewBy sorted by measure 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_e519fa2a_86c3_4e32_8313_0c03062348j3", "asc")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - viewBy date and PoP measure 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure, newPopMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newPopMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", idRef("dt_closedate_timestamp.year", "attribute"), m => m.alias("Won Last Year").localId("m_m_e519fa2a_86c3_4e32_8313_0c03062348j3_dt_closedate_timestamp.year"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_closedate_timestamp.year", "displayForm"), a => a.localId("a_dt_closedate_timestamp.year"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ColumnChart - viewBy with two dates 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure, newPopMeasure } from "@gooddata/sdk-model";
import { ColumnChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newPopMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", idRef("dt_closedate_timestamp.year", "attribute"), m => m.alias("Won Last Year").localId("m_m_e519fa2a_86c3_4e32_8313_0c03062348j3_dt_closedate_timestamp.year"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_closedate_timestamp.year", "displayForm"), a => a.localId("a_dt_closedate_timestamp.year")),
    newAttribute(idRef("dt_closedate_timestamp.year", "displayForm"), a => a.localId("a_dt_closedate_timestamp.year_1"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 'Stack Measures' off and 'Stack to 100%' on 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const secondaryMeasures: IMeasure[] = [
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    dualAxis: false,
    stackMeasures: false,
    stackMeasuresToPercent: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 'Stack Measures' on and 'Stack to 100%' on 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const secondaryMeasures: IMeasure[] = [
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    dualAxis: false,
    stackMeasures: true,
    stackMeasuresToPercent: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - auto legend 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on left 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on right 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on top 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 610x154 - Force position RIGHT - auto legend 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 610x154 - Force position RIGHT - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 610x154 - Force position RIGHT - legend on left 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 610x154 - Force position RIGHT - legend on right 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 610x154 - Force position RIGHT - legend on top 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - arithmetic measures 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const secondaryMeasures: IMeasure[] = [
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - assign color to measures 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, getColorMappingPredicate, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const secondaryMeasures: IMeasure[] = [
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    colorMapping: [
        {predicate: getColorMappingPredicate("m_87a053b0_3947_49f3_b0c5_de53fd01f050"), color: {type: "rgb", value: {b: 0, g: 0, r: 0}}},
        {predicate: getColorMappingPredicate("m_e519fa2a_86c3_4e32_8313_0c03062348j3"), color: {type: "guid", value: "05"}}
    ],
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - axis name configuration - high 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "high"}},
    secondary_yaxis: {name: {position: "high"}},
    xaxis: {name: {position: "high"}},
    yaxis: {name: {position: "high"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - axis name configuration - invisible 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "middle"}},
    secondary_yaxis: {name: {position: "middle"}},
    xaxis: {name: {position: "middle"}},
    yaxis: {name: {position: "middle"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - axis name configuration - low 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "low"}},
    secondary_yaxis: {name: {position: "low"}},
    xaxis: {name: {position: "low"}},
    yaxis: {name: {position: "low"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - axis name configuration - middle 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "middle"}},
    secondary_yaxis: {name: {position: "middle"}},
    xaxis: {name: {position: "middle"}},
    yaxis: {name: {position: "middle"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - coloring - custom palette 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const secondaryMeasures: IMeasure[] = [
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - connect nulls values 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_closedate_timestamp.year", "displayForm"), a => a.localId("a_dt_closedate_timestamp.year"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - data labels - auto visibility 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    dataLabels: {visible: "auto"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - data labels - default 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - data labels - forced hidden 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    dataLabels: {visible: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - data labels - forced visible 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    dataLabels: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - data labels - forced visible and german separators 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    dataLabels: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - data points - dense chart - auto visibility 1`] = `
"import React from "react";
import { IAttribute, idRef, IFilter, IMeasure, localIdRef, newAttribute, newMeasure, newMeasureValueFilter } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_opportunity.opportunity.name", "displayForm"), a => a.localId("a_label.f_opportunity.opportunity.name"))
];
const filters: IFilter[] = [
    newMeasureValueFilter(localIdRef("m_87a053b0_3947_49f3_b0c5_de53fd01f050"), "GREATER_THAN", 100000)
];
const config: IChartConfig = {
    dataPoints: {visible: "auto"},
    primaryChartType: "line",
    secondaryChartType: "area",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - data points - dense chart - default 1`] = `
"import React from "react";
import { IAttribute, idRef, IFilter, IMeasure, localIdRef, newAttribute, newMeasure, newMeasureValueFilter } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_opportunity.opportunity.name", "displayForm"), a => a.localId("a_label.f_opportunity.opportunity.name"))
];
const filters: IFilter[] = [
    newMeasureValueFilter(localIdRef("m_87a053b0_3947_49f3_b0c5_de53fd01f050"), "GREATER_THAN", 100000)
];
const config: IChartConfig = {
    primaryChartType: "line",
    secondaryChartType: "area",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - data points - dense chart - forced hidden 1`] = `
"import React from "react";
import { IAttribute, idRef, IFilter, IMeasure, localIdRef, newAttribute, newMeasure, newMeasureValueFilter } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_opportunity.opportunity.name", "displayForm"), a => a.localId("a_label.f_opportunity.opportunity.name"))
];
const filters: IFilter[] = [
    newMeasureValueFilter(localIdRef("m_87a053b0_3947_49f3_b0c5_de53fd01f050"), "GREATER_THAN", 100000)
];
const config: IChartConfig = {
    dataPoints: {visible: false},
    primaryChartType: "line",
    secondaryChartType: "area",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - data points - dense chart - forced visible 1`] = `
"import React from "react";
import { IAttribute, idRef, IFilter, IMeasure, localIdRef, newAttribute, newMeasure, newMeasureValueFilter } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_opportunity.opportunity.name", "displayForm"), a => a.localId("a_label.f_opportunity.opportunity.name"))
];
const filters: IFilter[] = [
    newMeasureValueFilter(localIdRef("m_87a053b0_3947_49f3_b0c5_de53fd01f050"), "GREATER_THAN", 100000)
];
const config: IChartConfig = {
    dataPoints: {visible: true},
    primaryChartType: "line",
    secondaryChartType: "area",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - data points - sparse chart - auto visibility 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    dataPoints: {visible: "auto"},
    primaryChartType: "line",
    secondaryChartType: "area",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - data points - sparse chart - default 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    primaryChartType: "line",
    secondaryChartType: "area",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - data points - sparse chart - forced hidden 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    dataPoints: {visible: false},
    primaryChartType: "line",
    secondaryChartType: "area",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - data points - sparse chart - forced visible 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    dataPoints: {visible: true},
    primaryChartType: "line",
    secondaryChartType: "area",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - discard stacking when primary measures are not specified - secondary is area 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    primaryChartType: "line",
    secondaryChartType: "area",
    stackMeasures: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - discard stacking when primary measures are not specified - secondary is column 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    primaryChartType: "line",
    secondaryChartType: "column",
    stackMeasures: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - discard stacking when primary measures are on line chart - secondary is area 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    primaryChartType: "line",
    secondaryChartType: "area",
    stackMeasures: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - discard stacking when primary measures are on line chart - secondary is column 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    primaryChartType: "line",
    secondaryChartType: "column",
    stackMeasures: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis disabled 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    dualAxis: false,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis multiple measures with slicingarea-area 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const secondaryMeasures: IMeasure[] = [
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    primaryChartType: "area",
    secondaryChartType: "area",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis multiple measures with slicingarea-column 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const secondaryMeasures: IMeasure[] = [
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    primaryChartType: "area",
    secondaryChartType: "column",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis multiple measures with slicingarea-line 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const secondaryMeasures: IMeasure[] = [
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    primaryChartType: "area",
    secondaryChartType: "line",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis multiple measures with slicingcolumn-area 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const secondaryMeasures: IMeasure[] = [
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    primaryChartType: "column",
    secondaryChartType: "area",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis multiple measures with slicingcolumn-column 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const secondaryMeasures: IMeasure[] = [
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    primaryChartType: "column",
    secondaryChartType: "column",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis multiple measures with slicingcolumn-line 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const secondaryMeasures: IMeasure[] = [
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    primaryChartType: "column",
    secondaryChartType: "line",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis multiple measures with slicingline-area 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const secondaryMeasures: IMeasure[] = [
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    primaryChartType: "line",
    secondaryChartType: "area",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis multiple measures with slicingline-column 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const secondaryMeasures: IMeasure[] = [
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    primaryChartType: "line",
    secondaryChartType: "column",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis multiple measures with slicingline-line 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const secondaryMeasures: IMeasure[] = [
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    primaryChartType: "line",
    secondaryChartType: "line",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis multiple measures without slicingarea-area 1`] = `
"import React from "react";
import { idRef, IMeasure, newArithmeticMeasure, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const secondaryMeasures: IMeasure[] = [
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const config: IChartConfig = {
    primaryChartType: "area",
    secondaryChartType: "area",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis multiple measures without slicingarea-column 1`] = `
"import React from "react";
import { idRef, IMeasure, newArithmeticMeasure, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const secondaryMeasures: IMeasure[] = [
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const config: IChartConfig = {
    primaryChartType: "area",
    secondaryChartType: "column",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis multiple measures without slicingarea-line 1`] = `
"import React from "react";
import { idRef, IMeasure, newArithmeticMeasure, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const secondaryMeasures: IMeasure[] = [
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const config: IChartConfig = {
    primaryChartType: "area",
    secondaryChartType: "line",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis multiple measures without slicingcolumn-area 1`] = `
"import React from "react";
import { idRef, IMeasure, newArithmeticMeasure, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const secondaryMeasures: IMeasure[] = [
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const config: IChartConfig = {
    primaryChartType: "column",
    secondaryChartType: "area",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis multiple measures without slicingcolumn-column 1`] = `
"import React from "react";
import { idRef, IMeasure, newArithmeticMeasure, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const secondaryMeasures: IMeasure[] = [
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const config: IChartConfig = {
    primaryChartType: "column",
    secondaryChartType: "column",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis multiple measures without slicingcolumn-line 1`] = `
"import React from "react";
import { idRef, IMeasure, newArithmeticMeasure, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const secondaryMeasures: IMeasure[] = [
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const config: IChartConfig = {
    primaryChartType: "column",
    secondaryChartType: "line",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis multiple measures without slicingline-area 1`] = `
"import React from "react";
import { idRef, IMeasure, newArithmeticMeasure, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const secondaryMeasures: IMeasure[] = [
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const config: IChartConfig = {
    primaryChartType: "line",
    secondaryChartType: "area",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis multiple measures without slicingline-column 1`] = `
"import React from "react";
import { idRef, IMeasure, newArithmeticMeasure, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const secondaryMeasures: IMeasure[] = [
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const config: IChartConfig = {
    primaryChartType: "line",
    secondaryChartType: "column",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis multiple measures without slicingline-line 1`] = `
"import React from "react";
import { idRef, IMeasure, newArithmeticMeasure, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const secondaryMeasures: IMeasure[] = [
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const config: IChartConfig = {
    primaryChartType: "line",
    secondaryChartType: "line",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis two measures with slicingarea-area 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    primaryChartType: "area",
    secondaryChartType: "area",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis two measures with slicingarea-column 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    primaryChartType: "area",
    secondaryChartType: "column",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis two measures with slicingarea-line 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    primaryChartType: "area",
    secondaryChartType: "line",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis two measures with slicingcolumn-area 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    primaryChartType: "column",
    secondaryChartType: "area",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis two measures with slicingcolumn-column 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    primaryChartType: "column",
    secondaryChartType: "column",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis two measures with slicingcolumn-line 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    primaryChartType: "column",
    secondaryChartType: "line",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis two measures with slicingline-area 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    primaryChartType: "line",
    secondaryChartType: "area",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis two measures with slicingline-column 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    primaryChartType: "line",
    secondaryChartType: "column",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis two measures with slicingline-line 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    primaryChartType: "line",
    secondaryChartType: "line",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis two measures without slicingarea-area 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    primaryChartType: "area",
    secondaryChartType: "area",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis two measures without slicingarea-column 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    primaryChartType: "area",
    secondaryChartType: "column",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis two measures without slicingarea-line 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    primaryChartType: "area",
    secondaryChartType: "line",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis two measures without slicingcolumn-area 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    primaryChartType: "column",
    secondaryChartType: "area",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis two measures without slicingcolumn-column 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    primaryChartType: "column",
    secondaryChartType: "column",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis two measures without slicingcolumn-line 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    primaryChartType: "column",
    secondaryChartType: "line",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis two measures without slicingline-area 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    primaryChartType: "line",
    secondaryChartType: "area",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis two measures without slicingline-column 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    primaryChartType: "line",
    secondaryChartType: "column",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - dual axis two measures without slicingline-line 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    primaryChartType: "line",
    secondaryChartType: "line",
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - font 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const secondaryMeasures: IMeasure[] = [
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - legend position - auto legend 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - legend position - disabled 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - legend position - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {position: "bottom"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - legend position - legend on left 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {position: "left"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - legend position - legend on right 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {position: "right"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - legend position - legend on top 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    legend: {position: "top"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - multiple measures and no viewBy 1`] = `
"import React from "react";
import { idRef, IMeasure, newArithmeticMeasure, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const secondaryMeasures: IMeasure[] = [
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - multiple primary and secondary measures with viewBy 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Min Amount").localId("m_f_opportunitysnapshot.f_amount_min").aggregation("min")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Median Amount").localId("m_f_opportunitysnapshot.f_amount_median").aggregation("median")),
    newMeasure(idRef("f_opportunitysnapshot.f_amount", "fact"), m => m.alias("Max Amount").localId("m_f_opportunitysnapshot.f_amount_max").aggregation("max"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - one primary and secondary measure no viewBy 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - one primary and secondary measure with viewBy 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - one primary and secondary measure with viewBy sorted by attr 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - one primary and secondary measure with viewBy sorted by primary measure 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, ISortItem, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - one primary and secondary measure with viewBy sorted by secondary measure 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, ISortItem, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_e519fa2a_86c3_4e32_8313_0c03062348j3", "desc")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - one primary measure 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - one primary measure with viewBy 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - one secondary measure with viewBy 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - stack primary measures to 100% with different chart type - area 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const secondaryMeasures: IMeasure[] = [
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    primaryChartType: "area",
    stackMeasuresToPercent: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - stack primary measures to 100% with different chart type - column 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const secondaryMeasures: IMeasure[] = [
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    primaryChartType: "column",
    stackMeasuresToPercent: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - stack primary measures when both column chart - normal stacking 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const secondaryMeasures: IMeasure[] = [
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    primaryChartType: "column",
    secondaryChartType: "column",
    stackMeasures: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - stack primary measures when both column chart - stack to 100% 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const secondaryMeasures: IMeasure[] = [
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    primaryChartType: "column",
    secondaryChartType: "column",
    stackMeasures: true,
    stackMeasuresToPercent: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - stack primary measures with different chart type - area 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const secondaryMeasures: IMeasure[] = [
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    primaryChartType: "area",
    stackMeasures: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - stack primary measures with different chart type - column 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const secondaryMeasures: IMeasure[] = [
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    primaryChartType: "column",
    stackMeasures: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - themed 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const secondaryMeasures: IMeasure[] = [
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - two measures with null values 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const primaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("dt_closedate_timestamp.year", "displayForm"), a => a.localId("a_dt_closedate_timestamp.year"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ComboChart - two secondary measure with viewBy 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { ComboChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const secondaryMeasures: IMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - default legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        responsive: "autoPositionWithPopup",
        position: "auto"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - default legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        responsive: "autoPositionWithPopup",
        position: "auto"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - default legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        responsive: "autoPositionWithPopup",
        position: "auto"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - default legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        responsive: "autoPositionWithPopup",
        position: "auto"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 610x154 - Force position RIGHT - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 610x154 - Force position RIGHT - default legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        responsive: "autoPositionWithPopup",
        position: "auto"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 610x154 - Force position RIGHT - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 610x154 - Force position RIGHT - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 610x154 - Force position RIGHT - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 610x154 - Force position RIGHT - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - default legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        responsive: "autoPositionWithPopup",
        position: "auto"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - default legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        responsive: "autoPositionWithPopup",
        position: "auto"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - default legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        responsive: "autoPositionWithPopup",
        position: "auto"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - assign color to nodes 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, getColorMappingPredicate, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    colorMapping: [
        {predicate: getColorMappingPredicate("WonderKid"), color: {type: "rgb", value: {b: 0, g: 0, r: 0}}},
        {predicate: getColorMappingPredicate("Explorer"), color: {type: "rgb", value: {b: 0, g: 0, r: 255}}}
    ],
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - coloring - custom palette 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - data labels - auto visibility 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    dataLabels: {visible: "auto"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - data labels - default 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - data labels - forced hidden 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    dataLabels: {visible: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - data labels - forced visible 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    dataLabels: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - data labels - forced visible and german separators 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    dataLabels: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - font 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - legend position - 1 measure and 1 attribute - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {enabled: true, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - legend position - 1 measure and 1 attribute - default legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - legend position - 1 measure and 1 attribute - disabled 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - legend position - 1 measure and 1 attribute - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {enabled: true, position: "bottom"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - legend position - 1 measure and 1 attribute - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {enabled: true, position: "left"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - legend position - 1 measure and 1 attribute - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {enabled: true, position: "right"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - legend position - 1 measure and 1 attribute - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {enabled: true, position: "top"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - legend position - 1 measure and 2 attributes - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {enabled: true, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - legend position - 1 measure and 2 attributes - default legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - legend position - 1 measure and 2 attributes - disabled 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - legend position - 1 measure and 2 attributes - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {enabled: true, position: "bottom"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - legend position - 1 measure and 2 attributes - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {enabled: true, position: "left"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - legend position - 1 measure and 2 attributes - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {enabled: true, position: "right"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - legend position - 1 measure and 2 attributes - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {enabled: true, position: "top"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - measure and attributeFrom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - measure and attributeTo 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - measure only 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - measure, attributeFrom and attributeTo 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DependencyWheelChart - themed 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DependencyWheelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DependencyWheelChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart -  - custom palette 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 200x200 - without data labels 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {visible: true},
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 300x250 - auto data labels 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {visible: true},
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 610x154 - Force position RIGHT - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 610x154 - Force position RIGHT - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 610x154 - Force position RIGHT - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 610x154 - Force position RIGHT - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 610x154 - Force position RIGHT - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - arithmetic measures 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newArithmeticMeasure, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - assign color to attributes 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, getColorMappingPredicate, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    colorMapping: [
        {predicate: getColorMappingPredicate("WonderKid"), color: {type: "rgb", value: {b: 0, g: 0, r: 0}}},
        {predicate: getColorMappingPredicate("Explorer"), color: {type: "rgb", value: {b: 0, g: 0, r: 255}}}
    ],
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - assign color to measures 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, getColorMappingPredicate, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    colorMapping: [
        {predicate: getColorMappingPredicate("m_87a053b0_3947_49f3_b0c5_de53fd01f050"), color: {type: "rgb", value: {b: 0, g: 0, r: 0}}},
        {predicate: getColorMappingPredicate("m_e519fa2a_86c3_4e32_8313_0c03062348j3"), color: {type: "guid", value: "05"}}
    ],
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - data labels - auto visibility 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {visible: "auto"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - data labels - default 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - data labels - forced hidden 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {visible: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - data labels - forced visible 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - data labels - forced visible and german separators 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - font 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - legend position - single measure and viewBy - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - legend position - single measure and viewBy - disabled 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - legend position - single measure and viewBy - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {position: "bottom"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - legend position - single measure and viewBy - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {position: "left"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - legend position - single measure and viewBy - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {position: "right"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - legend position - single measure and viewBy - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {position: "top"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - legend position - two measures - auto legend 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    legend: {position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - legend position - two measures - disabled 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - legend position - two measures - legend at bottom 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    legend: {position: "bottom"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - legend position - two measures - legend on left 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    legend: {position: "left"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - legend position - two measures - legend on right 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    legend: {position: "right"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - legend position - two measures - legend on top 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    legend: {position: "top"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - single measure 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - single measure with viewBy 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - themed 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - two measures 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - vertical alignment - bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - vertical alignment - default 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - vertical alignment - middle 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for DonutChart - vertical alignment - top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { DonutChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 610x154 - Force position RIGHT - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 610x154 - Force position RIGHT - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 610x154 - Force position RIGHT - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 610x154 - Force position RIGHT - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 610x154 - Force position RIGHT - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - arithmetic measures 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newArithmeticMeasure, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - assign color to attributes 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, getColorMappingPredicate, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    colorMapping: [
        {predicate: getColorMappingPredicate("WonderKid"), color: {type: "rgb", value: {b: 0, g: 0, r: 0}}},
        {predicate: getColorMappingPredicate("Explorer"), color: {type: "rgb", value: {b: 0, g: 0, r: 255}}}
    ],
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - assign color to measures 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newArithmeticMeasure, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, getColorMappingPredicate, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    colorMapping: [
        {predicate: getColorMappingPredicate("m_87a053b0_3947_49f3_b0c5_de53fd01f050"), color: {type: "rgb", value: {b: 0, g: 0, r: 0}}},
        {predicate: getColorMappingPredicate("m_e519fa2a_86c3_4e32_8313_0c03062348j3"), color: {type: "guid", value: "05"}}
    ],
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - coloring - custom palette 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - data labels - auto visibility 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {visible: "auto"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - data labels - default 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - data labels - forced hidden 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {visible: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - data labels - forced hidden, percentages visible has no effect 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {percentsVisible: true, visible: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - data labels - forced visible 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - data labels - forced visible and german separators 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - data labels - forced visible with hidden percentages 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {percentsVisible: false, visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - data labels - forced visible with shown percentages 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {percentsVisible: true, visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - font 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - legend position - single measure and viewBy - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - legend position - single measure and viewBy - disabled 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - legend position - single measure and viewBy - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {position: "bottom"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - legend position - single measure and viewBy - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {position: "left"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - legend position - single measure and viewBy - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {position: "right"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - legend position - single measure and viewBy - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {position: "top"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - legend position - two measures - auto legend 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    legend: {position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - legend position - two measures - disabled 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - legend position - two measures - legend at bottom 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    legend: {position: "bottom"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - legend position - two measures - legend on left 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    legend: {position: "left"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - legend position - two measures - legend on right 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    legend: {position: "right"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - legend position - two measures - legend on top 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    legend: {position: "top"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - single measure 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - single measure with viewBy 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - single measure with viewBy sorted by attribute 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    enableChartSorting: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - single measure with viewBy sorted by measure 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "asc")
];
const config: IChartConfig = {
    enableChartSorting: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - themed 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - two measures 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - vertical alignment - bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - vertical alignment - default 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - vertical alignment - middle 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for FunnelChart - vertical alignment - top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { FunnelChart, IChartConfig } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Headline - comparison with calculate as change (difference) and custom format 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { Headline } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const secondaryMeasure: IMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
                secondaryMeasure={secondaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Headline - comparison with calculate as change (difference) and default sub format 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { Headline } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const secondaryMeasure: IMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
                secondaryMeasure={secondaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Headline - comparison with calculate as different and default format 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { Headline } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const secondaryMeasure: IMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
                secondaryMeasure={secondaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Headline - comparison with custom format 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { Headline } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const secondaryMeasure: IMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
                secondaryMeasure={secondaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Headline - comparison with custom label 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { Headline } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const secondaryMeasure: IMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
                secondaryMeasure={secondaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Headline - comparison with decimal-1 format 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { Headline } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const secondaryMeasure: IMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
                secondaryMeasure={secondaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Headline - comparison with default config 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { Headline } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const secondaryMeasure: IMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
                secondaryMeasure={secondaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Headline - comparison with default config with secondary measure is PoP 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure, newPopMeasure } from "@gooddata/sdk-model";
import { Headline } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const secondaryMeasure: IMeasure = newPopMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", idRef("dt_closedate_timestamp.year", "attribute"), m => m.alias("Won Last Year").localId("m_m_e519fa2a_86c3_4e32_8313_0c03062348j3_dt_closedate_timestamp.year"));
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
                secondaryMeasure={secondaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Headline - comparison with equals arrow 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { Headline } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const secondaryMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.alias("Custom Amount").localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050_1"));
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
                secondaryMeasure={secondaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Headline - comparison with equals arrow and color 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { Headline } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const secondaryMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.alias("Custom Amount").localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050_1"));
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
                secondaryMeasure={secondaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Headline - comparison with negative arrow 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { Headline } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const secondaryMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
                secondaryMeasure={secondaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Headline - comparison with negative arrow and color 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { Headline } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const secondaryMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
                secondaryMeasure={secondaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Headline - comparison with position on right 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { Headline } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const secondaryMeasure: IMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
                secondaryMeasure={secondaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Headline - comparison with position on top 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { Headline } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const secondaryMeasure: IMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
                secondaryMeasure={secondaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Headline - comparison with positive arrow 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { Headline } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const secondaryMeasure: IMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
                secondaryMeasure={secondaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Headline - comparison with positive arrow and color 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { Headline } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const secondaryMeasure: IMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
                secondaryMeasure={secondaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Headline - font 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { Headline } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const secondaryMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
                secondaryMeasure={secondaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Headline - multi measures with only primary measure 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { Headline } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Headline - multi measures with three measures 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { Headline } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const secondaryMeasure: IMeasure = newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"));
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
                secondaryMeasure={secondaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Headline - multi measures with two measures 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { Headline } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const secondaryMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
                secondaryMeasure={secondaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Headline - multi measures with two measures one PoP 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure, newPopMeasure } from "@gooddata/sdk-model";
import { Headline } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const secondaryMeasure: IMeasure = newPopMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", idRef("dt_closedate_timestamp.year", "attribute"), m => m.alias("Won Last Year").localId("m_m_e519fa2a_86c3_4e32_8313_0c03062348j3_dt_closedate_timestamp.year"));
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
                secondaryMeasure={secondaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Headline - multi measures with two measures with german separators 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { Headline } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const secondaryMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
                secondaryMeasure={secondaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Headline - single measure 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { Headline } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Headline - themed 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { Headline } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const secondaryMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
                secondaryMeasure={secondaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Headline - two measures 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { Headline } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const secondaryMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
                secondaryMeasure={secondaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Headline - two measures one PoP 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure, newPopMeasure } from "@gooddata/sdk-model";
import { Headline } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const secondaryMeasure: IMeasure = newPopMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", idRef("dt_closedate_timestamp.year", "attribute"), m => m.alias("Won Last Year").localId("m_m_e519fa2a_86c3_4e32_8313_0c03062348j3_dt_closedate_timestamp.year"));
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
                secondaryMeasure={secondaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Headline - two measures with comparison 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { Headline } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const secondaryMeasure: IMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
                secondaryMeasure={secondaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Headline - two measures with german separators 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { Headline } from "@gooddata/sdk-ui-charts";

const primaryMeasure: IMeasure = newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"));
const secondaryMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
                secondaryMeasure={secondaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - 180x400 - Force position TOP, minimised variant - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const rows: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const columns: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - 180x400 - Force position TOP, minimised variant - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const rows: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const columns: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - 180x400 - Force position TOP, minimised variant - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const rows: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const columns: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - 180x400 - Force position TOP, minimised variant - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const rows: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const columns: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - 180x400 - Force position TOP, minimised variant - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const rows: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const columns: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - 620x400 - Position respects configuration, standard variant - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const rows: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const columns: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - 620x400 - Position respects configuration, standard variant - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const rows: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const columns: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - 620x400 - Position respects configuration, standard variant - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const rows: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const columns: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - 620x400 - Position respects configuration, standard variant - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const rows: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const columns: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - 620x400 - Position respects configuration, standard variant - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const rows: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const columns: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - assign color to measures 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { getColorMappingPredicate, Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const rows: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const columns: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    colorMapping: [
        {predicate: getColorMappingPredicate("m_87a053b0_3947_49f3_b0c5_de53fd01f050"), color: {type: "rgb", value: {b: 0, g: 0, r: 0}}}
    ],
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - axis name configuration - high 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const rows: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const columns: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "high"}},
    secondary_yaxis: {name: {position: "high"}},
    xaxis: {name: {position: "high"}},
    yaxis: {name: {position: "high"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - axis name configuration - invisible 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const rows: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const columns: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "middle"}},
    secondary_yaxis: {name: {position: "middle"}},
    xaxis: {name: {position: "middle"}},
    yaxis: {name: {position: "middle"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - axis name configuration - low 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const rows: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const columns: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "low"}},
    secondary_yaxis: {name: {position: "low"}},
    xaxis: {name: {position: "low"}},
    yaxis: {name: {position: "low"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - axis name configuration - middle 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const rows: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const columns: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "middle"}},
    secondary_yaxis: {name: {position: "middle"}},
    xaxis: {name: {position: "middle"}},
    yaxis: {name: {position: "middle"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - coloring - custom palette 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const rows: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const columns: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - data labels - auto visibility 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const rows: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const columns: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    dataLabels: {visible: "auto"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - data labels - default 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const rows: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const columns: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - data labels - forced hidden 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const rows: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const columns: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    dataLabels: {visible: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - data labels - forced visible 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const rows: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const columns: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    dataLabels: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - data labels - forced visible and german separators 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const rows: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const columns: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    dataLabels: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - font 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const rows: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const columns: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - legend position - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const rows: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const columns: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    legend: {position: "right"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - legend position - disabled 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const rows: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const columns: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    legend: {enabled: false, position: "right"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - legend position - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const rows: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const columns: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    legend: {position: "bottom"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - legend position - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const rows: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const columns: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    legend: {position: "left"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - legend position - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const rows: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const columns: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    legend: {position: "right"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - legend position - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const rows: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const columns: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    legend: {position: "top"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - measure and columns 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const columns: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - measure and rows 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const rows: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - measure only 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - measure, rows and columns 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const rows: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const columns: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - measure, rows and columns with null data points 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const rows: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const columns: IAttribute = newAttribute(idRef("dt_closedate_timestamp.year", "displayForm"), a => a.localId("a_dt_closedate_timestamp.year"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - themed 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const rows: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const columns: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Heatmap - themed with null values 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { Heatmap, IChartConfig } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const rows: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const columns: IAttribute = newAttribute(idRef("dt_closedate_timestamp.year", "displayForm"), a => a.localId("a_dt_closedate_timestamp.year"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 40x70 - without x axis, without y axis (very small container) 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 60x354 - without y axis labels 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 60x354 - without y axis labels, with y axis title 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 140x354 - without y axis title 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 610x154 - Force position RIGHT - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 610x154 - Force position RIGHT - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 610x154 - Force position RIGHT - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 610x154 - Force position RIGHT - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 610x154 - Force position RIGHT - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 650x90 - without x axis labels 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 650x140 - without x axis title 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa")),
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba")),
    newMeasure(idRef("c5ee7836-126c-41aa-bd69-1873d379a065", "measure"), m => m.localId("m_c5ee7836_126c_41aa_bd69_1873d379a065")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - Y axis min/max configuration 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    yaxis: {max: "25000000", min: "5000000"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - Y axis on the right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    secondary_yaxis: {
        measures: [
            "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
            "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
        ]
    },
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - arithmetic measures 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - assign color to measures 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { getColorMappingPredicate, IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    colorMapping: [
        {predicate: getColorMappingPredicate("m_87a053b0_3947_49f3_b0c5_de53fd01f050"), color: {type: "rgb", value: {b: 0, g: 0, r: 0}}}
    ],
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - coloring - custom palette 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - data labels - auto visibility 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    dataLabels: {visible: "auto"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - data labels - default 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - data labels - forced hidden 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    dataLabels: {visible: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - data labels - forced visible 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    dataLabels: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - data labels - forced visible and german separators 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    dataLabels: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - data points - dense chart - auto visibility 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, localIdRef, newAttribute, newMeasure, newMeasureValueFilter } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const trendBy: IAttribute = newAttribute(idRef("label.f_opportunity.opportunity.name", "displayForm"), a => a.localId("a_label.f_opportunity.opportunity.name"));
const filters: IFilter[] = [
    newMeasureValueFilter(localIdRef("m_87a053b0_3947_49f3_b0c5_de53fd01f050"), "GREATER_THAN", 100000)
];
const config: IChartConfig = {
    dataPoints: {visible: "auto"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - data points - dense chart - default 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, localIdRef, newAttribute, newMeasure, newMeasureValueFilter } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const trendBy: IAttribute = newAttribute(idRef("label.f_opportunity.opportunity.name", "displayForm"), a => a.localId("a_label.f_opportunity.opportunity.name"));
const filters: IFilter[] = [
    newMeasureValueFilter(localIdRef("m_87a053b0_3947_49f3_b0c5_de53fd01f050"), "GREATER_THAN", 100000)
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - data points - dense chart - forced hidden 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, localIdRef, newAttribute, newMeasure, newMeasureValueFilter } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const trendBy: IAttribute = newAttribute(idRef("label.f_opportunity.opportunity.name", "displayForm"), a => a.localId("a_label.f_opportunity.opportunity.name"));
const filters: IFilter[] = [
    newMeasureValueFilter(localIdRef("m_87a053b0_3947_49f3_b0c5_de53fd01f050"), "GREATER_THAN", 100000)
];
const config: IChartConfig = {
    dataPoints: {visible: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - data points - dense chart - forced visible 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, localIdRef, newAttribute, newMeasure, newMeasureValueFilter } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const trendBy: IAttribute = newAttribute(idRef("label.f_opportunity.opportunity.name", "displayForm"), a => a.localId("a_label.f_opportunity.opportunity.name"));
const filters: IFilter[] = [
    newMeasureValueFilter(localIdRef("m_87a053b0_3947_49f3_b0c5_de53fd01f050"), "GREATER_THAN", 100000)
];
const config: IChartConfig = {
    dataPoints: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - data points - sparse chart - auto visibility 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    dataPoints: {visible: "auto"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - data points - sparse chart - default 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - data points - sparse chart - forced hidden 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    dataPoints: {visible: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - data points - sparse chart - forced visible 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    dataPoints: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - dual axes with one right measure 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    secondary_yaxis: {measures: ["m_aebe46cecdb5eb3b5c069ce97a80535f"]},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - dual axis name configuration - high 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "high"}},
    secondary_yaxis: {
        measures: ["m_e519fa2a_86c3_4e32_8313_0c03062348j3"],
        name: {position: "high"}
    },
    xaxis: {name: {position: "high"}},
    yaxis: {name: {position: "high"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - dual axis name configuration - invisible 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "middle"}},
    secondary_yaxis: {
        measures: ["m_e519fa2a_86c3_4e32_8313_0c03062348j3"],
        name: {position: "middle"}
    },
    xaxis: {name: {position: "middle"}},
    yaxis: {name: {position: "middle"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - dual axis name configuration - low 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "low"}},
    secondary_yaxis: {
        measures: ["m_e519fa2a_86c3_4e32_8313_0c03062348j3"],
        name: {position: "low"}
    },
    xaxis: {name: {position: "low"}},
    yaxis: {name: {position: "low"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - dual axis name configuration - middle 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "middle"}},
    secondary_yaxis: {
        measures: ["m_e519fa2a_86c3_4e32_8313_0c03062348j3"],
        name: {position: "middle"}
    },
    xaxis: {name: {position: "middle"}},
    yaxis: {name: {position: "middle"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - font 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - legend position - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - legend position - disabled 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - legend position - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {position: "bottom"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - legend position - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {position: "left"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - legend position - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {position: "right"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - legend position - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    legend: {position: "top"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - null values with continuous line 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_closedate_timestamp.year", "displayForm"), a => a.localId("a_dt_closedate_timestamp.year"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - single axis name configuration - high 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "high"}},
    secondary_yaxis: {name: {position: "high"}},
    xaxis: {name: {position: "high"}},
    yaxis: {name: {position: "high"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - single axis name configuration - invisible 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "middle"}},
    secondary_yaxis: {name: {position: "middle"}},
    xaxis: {name: {position: "middle"}},
    yaxis: {name: {position: "middle"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - single axis name configuration - low 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "low"}},
    secondary_yaxis: {name: {position: "low"}},
    xaxis: {name: {position: "low"}},
    yaxis: {name: {position: "low"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - single axis name configuration - middle 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "middle"}},
    secondary_yaxis: {name: {position: "middle"}},
    xaxis: {name: {position: "middle"}},
    yaxis: {name: {position: "middle"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - single measure 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - single measure with % and trendBy 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - single measure with trendBy 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - single measure with trendBy and segmentBy 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - themed 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - two measures with trendBy 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - two measures with trendBy and sort by attribute 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_dt_oppcreated_timestamp.quarter", "desc")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - two measures with trendBy and sort by measure 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const sortBy: ISortItem[] = [
    newMeasureSort("m_e519fa2a_86c3_4e32_8313_0c03062348j3", "asc")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - with one measure and segment by date 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const segmentBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.year", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.year"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - with one measure and trend by date and segment by date 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.year", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.year"));
const segmentBy: IAttribute = newAttribute(idRef("dt_closedate_timestamp.year", "displayForm"), a => a.localId("a_dt_closedate_timestamp.year"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for LineChart - with two measures and null values 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, LineChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const trendBy: IAttribute = newAttribute(idRef("dt_closedate_timestamp.year", "displayForm"), a => a.localId("a_dt_closedate_timestamp.year"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 200x200 - without data labels 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {visible: true},
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 300x250 - auto data labels 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {visible: true},
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 610x154 - Force position RIGHT - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 610x154 - Force position RIGHT - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 610x154 - Force position RIGHT - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 610x154 - Force position RIGHT - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 610x154 - Force position RIGHT - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - arithmetic measures 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newArithmeticMeasure, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - assign color to attributes 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { getColorMappingPredicate, IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    colorMapping: [
        {predicate: getColorMappingPredicate("WonderKid"), color: {type: "rgb", value: {b: 0, g: 0, r: 0}}},
        {predicate: getColorMappingPredicate("Explorer"), color: {type: "rgb", value: {b: 0, g: 0, r: 255}}}
    ],
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - assign color to measures 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { getColorMappingPredicate, IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    colorMapping: [
        {predicate: getColorMappingPredicate("m_87a053b0_3947_49f3_b0c5_de53fd01f050"), color: {type: "rgb", value: {b: 0, g: 0, r: 0}}},
        {predicate: getColorMappingPredicate("m_e519fa2a_86c3_4e32_8313_0c03062348j3"), color: {type: "guid", value: "05"}}
    ],
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - coloring - custom palette 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - data labels - auto visibility 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {visible: "auto"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - data labels - default 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - data labels - forced hidden 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {visible: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - data labels - forced visible 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - data labels - forced visible and german separators 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - font 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - legend position - single measure and viewBy - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - legend position - single measure and viewBy - disabled 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - legend position - single measure and viewBy - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {position: "bottom"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - legend position - single measure and viewBy - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {position: "left"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - legend position - single measure and viewBy - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {position: "right"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - legend position - single measure and viewBy - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {position: "top"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - legend position - two measures - auto legend 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    legend: {position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - legend position - two measures - disabled 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - legend position - two measures - legend at bottom 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    legend: {position: "bottom"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - legend position - two measures - legend on left 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    legend: {position: "left"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - legend position - two measures - legend on right 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    legend: {position: "right"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - legend position - two measures - legend on top 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    legend: {position: "top"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - single measure 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - single measure with viewBy 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - themed 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - two measures 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - vertical alignment - bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - vertical alignment - default 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - vertical alignment - middle 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PieChart - vertical alignment - top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PieChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - arithmetic measures 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newArithmeticMeasure([
    "m_9fa7cb9ce4d2947059b490e24a925317",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "ratio", m => m.alias("Ratio of Won and Lost").localId("m_aebe46cecdb5eb3b5c069ce97a80535f"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - empty values 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("attr.f_stage.stagename", "displayForm"), a => a.localId("a_attr.f_stage.stagename")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - font 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("attr.f_stage.stagename", "displayForm"), a => a.localId("a_attr.f_stage.stagename")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - german number format 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("attr.f_stage.stagename", "displayForm"), a => a.localId("a_attr.f_stage.stagename")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - measure format with colors 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.format("[backgroundColor=ffff00][green]#,##0.00 €").localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("attr.f_stage.stagename", "displayForm"), a => a.localId("a_attr.f_stage.stagename")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - multiple measures and no columns, with totals 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ITotal, newAttribute, newMeasure, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAllColumnsForMeasure, newWidthForAttributeColumn, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.department_id"),
    newTotal("min", "m_e519fa2a_86c3_4e32_8313_0c03062348j3", "a_f_owner.department_id"),
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.region_id"),
    newTotal("med", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.region_id"),
    newTotal("med", "m_e519fa2a_86c3_4e32_8313_0c03062348j3", "a_f_owner.region_id")
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAllColumnsForMeasure("m_87a053b0_3947_49f3_b0c5_de53fd01f050", 100),
            newWidthForAllColumnsForMeasure("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa", 100),
            newWidthForAllColumnsForMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", 100),
            newWidthForAttributeColumn("a_f_owner.region_id", 120),
            newWidthForAttributeColumn("a_f_owner.department_id", 120)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","},
    measureGroupDimension: "rows"
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - multiple measures and no rows, with totals 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ITotal, newAttribute, newMeasure, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.region_id"),
    newTotal("med", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.region_id"),
    newTotal("med", "m_e519fa2a_86c3_4e32_8313_0c03062348j3", "a_f_owner.region_id")
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","},
    measureGroupDimension: "rows"
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - multiple measures and row attributes with metrics in rows, with drilling 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","},
    measureGroupDimension: "rows"
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - no totals and max height 200 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("attr.f_stage.stagename", "displayForm"), a => a.localId("a_attr.f_stage.stagename")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - no totals and max height 300 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("attr.f_stage.stagename", "displayForm"), a => a.localId("a_attr.f_stage.stagename")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - no totals and no grouping 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("attr.f_stage.stagename", "displayForm"), a => a.localId("a_attr.f_stage.stagename")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - one measure and repeating row attributes on different positions 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id")),
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name_1"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - simple table with attribute and metric column size 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAttributeColumn, PivotTable, setNewWidthForSelectedColumns } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAttributeColumn("a_label.f_product.product.name", 400),
            setNewWidthForSelectedColumns(["m_87a053b0_3947_49f3_b0c5_de53fd01f050"], [], 60)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - simple table with attribute and metric column size 2`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAttributeColumn, PivotTable, setNewWidthForSelectedColumns } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAttributeColumn("a_label.f_product.product.name", 400),
            setNewWidthForSelectedColumns(["m_87a053b0_3947_49f3_b0c5_de53fd01f050"], [], 60)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - simple table with attribute and metric column size 3`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAttributeColumn, PivotTable, setNewWidthForSelectedColumns } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAttributeColumn("a_label.f_product.product.name", 400),
            setNewWidthForSelectedColumns(["m_87a053b0_3947_49f3_b0c5_de53fd01f050"], [], 60)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - simple table with attribute and metric column size 4`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAttributeColumn, PivotTable, setNewWidthForSelectedColumns } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAttributeColumn("a_label.f_product.product.name", 400),
            setNewWidthForSelectedColumns(["m_87a053b0_3947_49f3_b0c5_de53fd01f050"], [], 60)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - simple table with custom attribute column size 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAttributeColumn, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAttributeColumn("a_label.f_product.product.name", 400)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - simple table with custom attribute column size 2`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAttributeColumn, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAttributeColumn("a_label.f_product.product.name", 400)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - simple table with custom attribute column size 3`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAttributeColumn, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAttributeColumn("a_label.f_product.product.name", 400)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - simple table with custom attribute column size 4`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAttributeColumn, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAttributeColumn("a_label.f_product.product.name", 400)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - simple table with custom metric column size 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable, setNewWidthForSelectedColumns } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            setNewWidthForSelectedColumns(["m_87a053b0_3947_49f3_b0c5_de53fd01f050"], [], 60)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - simple table with custom metric column size 2`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable, setNewWidthForSelectedColumns } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            setNewWidthForSelectedColumns(["m_87a053b0_3947_49f3_b0c5_de53fd01f050"], [], 60)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - simple table with custom metric column size 3`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable, setNewWidthForSelectedColumns } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            setNewWidthForSelectedColumns(["m_87a053b0_3947_49f3_b0c5_de53fd01f050"], [], 60)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - simple table with custom metric column size 4`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable, setNewWidthForSelectedColumns } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            setNewWidthForSelectedColumns(["m_87a053b0_3947_49f3_b0c5_de53fd01f050"], [], 60)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - single attribute 1`] = `
"import React from "react";
import { IAttribute, idRef, newAttribute } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - single column 1`] = `
"import React from "react";
import { IAttribute, idRef, newAttribute } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const columns: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - single measure 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - single measure and multiple column grand totals 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ITotal, newAttribute, newMeasure, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAllColumnsForMeasure, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("attr.f_owner.salesrep", "displayForm"), a => a.localId("a_attr.f_owner.salesrep"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id"))
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_opportunitysnapshot.forecastcategory_id"),
    newTotal("min", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_opportunitysnapshot.forecastcategory_id"),
    newTotal("max", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_opportunitysnapshot.forecastcategory_id")
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAllColumnsForMeasure("m_87a053b0_3947_49f3_b0c5_de53fd01f050", 100),
            newWidthForAllColumnsForMeasure("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa", 100),
            newWidthForAllColumnsForMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", 100)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - single measure and multiple column/row grand totals 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ITotal, newAttribute, newMeasure, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAllColumnsForMeasure, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("attr.f_owner.salesrep", "displayForm"), a => a.localId("a_attr.f_owner.salesrep"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id"))
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_attr.f_owner.salesrep"),
    newTotal("min", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_attr.f_owner.salesrep"),
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_opportunitysnapshot.forecastcategory_id"),
    newTotal("min", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_opportunitysnapshot.forecastcategory_id")
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAllColumnsForMeasure("m_87a053b0_3947_49f3_b0c5_de53fd01f050", 100),
            newWidthForAllColumnsForMeasure("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa", 100),
            newWidthForAllColumnsForMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", 100)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - single measure and multiple grand totals 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ITotal, newAttribute, newMeasure, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("attr.f_stage.stagename", "displayForm"), a => a.localId("a_attr.f_stage.stagename")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_label.f_product.product.name"),
    newTotal("min", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_label.f_product.product.name"),
    newTotal("max", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_label.f_product.product.name")
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - single measure and single column grand total 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ITotal, newAttribute, newMeasure, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAllColumnsForMeasure, newWidthForAttributeColumn, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("attr.f_owner.salesrep", "displayForm"), a => a.localId("a_attr.f_owner.salesrep"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id"))
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_opportunitysnapshot.forecastcategory_id")
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAllColumnsForMeasure("m_87a053b0_3947_49f3_b0c5_de53fd01f050", 100),
            newWidthForAllColumnsForMeasure("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa", 100),
            newWidthForAllColumnsForMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", 100),
            newWidthForAttributeColumn("a_attr.f_owner.salesrep", 120)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - single measure and single column/row grand total 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ITotal, newAttribute, newMeasure, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAllColumnsForMeasure, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("attr.f_owner.salesrep", "displayForm"), a => a.localId("a_attr.f_owner.salesrep"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id"))
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_attr.f_owner.salesrep"),
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_opportunitysnapshot.forecastcategory_id")
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAllColumnsForMeasure("m_87a053b0_3947_49f3_b0c5_de53fd01f050", 100),
            newWidthForAllColumnsForMeasure("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa", 100),
            newWidthForAllColumnsForMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", 100)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - single measure and single grand total 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ITotal, newAttribute, newMeasure, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAllColumnsForMeasure, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("attr.f_stage.stagename", "displayForm"), a => a.localId("a_attr.f_stage.stagename")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_label.f_product.product.name")
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAllColumnsForMeasure("m_87a053b0_3947_49f3_b0c5_de53fd01f050", 100),
            newWidthForAllColumnsForMeasure("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa", 100),
            newWidthForAllColumnsForMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", 100)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - single measure pivot sorted by first row attr 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("attr.f_stage.stagename", "displayForm"), a => a.localId("a_attr.f_stage.stagename")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - single measure pivot sorted by second row attr 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("attr.f_stage.stagename", "displayForm"), a => a.localId("a_attr.f_stage.stagename")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const sortBy: ISortItem[] = [
    newAttributeSort("a_f_owner.department_id", "desc")
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - single measure pivot with both attributes and metrics in rows 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("attr.f_stage.stagename", "displayForm"), a => a.localId("a_attr.f_stage.stagename")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","},
    measureGroupDimension: "rows"
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - single measure pivot with grouping sorted by first row attr 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id")),
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newAttributeSort("a_f_owner.department_id", "desc")
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - single measure pivot with grouping sorted by measure 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id")),
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - single measure pivot with grouping sorted by second row attr 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id")),
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - single measure with column attribute 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - single measure with row and column attributes 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - single measure with row attribute 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - single measure with two row and one column attributes 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - single measure with two row and two column attributes 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("attr.f_stage.stagename", "displayForm"), a => a.localId("a_attr.f_stage.stagename")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - table with multiple measure columns and weak measure size 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAllColumnsForMeasure, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("attr.f_stage.stagename", "displayForm"), a => a.localId("a_attr.f_stage.stagename")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAllColumnsForMeasure("m_87a053b0_3947_49f3_b0c5_de53fd01f050", 60)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - table with multiple measure columns and weak measure size 2`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAllColumnsForMeasure, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("attr.f_stage.stagename", "displayForm"), a => a.localId("a_attr.f_stage.stagename")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAllColumnsForMeasure("m_87a053b0_3947_49f3_b0c5_de53fd01f050", 60)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - table with multiple measure columns and weak measure size 3`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAllColumnsForMeasure, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("attr.f_stage.stagename", "displayForm"), a => a.localId("a_attr.f_stage.stagename")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAllColumnsForMeasure("m_87a053b0_3947_49f3_b0c5_de53fd01f050", 60)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - table with multiple measure columns and weak measure size 4`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAllColumnsForMeasure, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("attr.f_stage.stagename", "displayForm"), a => a.localId("a_attr.f_stage.stagename")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAllColumnsForMeasure("m_87a053b0_3947_49f3_b0c5_de53fd01f050", 60)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - themed 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("attr.f_stage.stagename", "displayForm"), a => a.localId("a_attr.f_stage.stagename")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - totals and max height 200 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ITotal, newAttribute, newMeasure, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_label.f_product.product.name"),
    newTotal("sum", "m_e519fa2a_86c3_4e32_8313_0c03062348j3", "a_label.f_product.product.name")
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - totals and max height 300 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ITotal, newAttribute, newMeasure, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_label.f_product.product.name"),
    newTotal("sum", "m_e519fa2a_86c3_4e32_8313_0c03062348j3", "a_label.f_product.product.name")
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - totals and max height 800 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ITotal, newAttribute, newMeasure, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("attr.f_stage.stagename", "displayForm"), a => a.localId("a_attr.f_stage.stagename")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_label.f_product.product.name")
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures and column grand totals and multiple subtotals 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, ITotal, newAttribute, newMeasure, newPositiveAttributeFilter, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAllColumnsForMeasure, newWidthForAttributeColumn, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("f_owner.region_id", "displayForm"), {values: ["West Coast"]})
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_opportunitysnapshot.forecastcategory_id"),
    newTotal("min", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_opportunitysnapshot.forecastcategory_id"),
    newTotal("max", "m_e519fa2a_86c3_4e32_8313_0c03062348j3", "a_f_opportunitysnapshot.forecastcategory_id"),
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.region_id"),
    newTotal("med", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.region_id"),
    newTotal("med", "m_e519fa2a_86c3_4e32_8313_0c03062348j3", "a_f_owner.region_id")
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAllColumnsForMeasure("m_87a053b0_3947_49f3_b0c5_de53fd01f050", 100),
            newWidthForAllColumnsForMeasure("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa", 100),
            newWidthForAllColumnsForMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", 100),
            newWidthForAttributeColumn("a_label.f_product.product.name", 120),
            newWidthForAttributeColumn("a_f_owner.department_id", 120)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                filters={filters}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures and column single grand total sorted by second attribute 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, ISortItem, ITotal, newAttribute, newAttributeSort, newMeasure, newPositiveAttributeFilter, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAllColumnsForMeasure, newWidthForAttributeColumn, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("f_owner.region_id", "displayForm"), {values: ["West Coast"]})
];
const sortBy: ISortItem[] = [
    newAttributeSort("a_f_owner.department_id", "desc")
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_opportunitysnapshot.forecastcategory_id")
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAllColumnsForMeasure("m_87a053b0_3947_49f3_b0c5_de53fd01f050", 100),
            newWidthForAllColumnsForMeasure("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa", 100),
            newWidthForAllColumnsForMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", 100),
            newWidthForAttributeColumn("a_label.f_product.product.name", 120),
            newWidthForAttributeColumn("a_f_owner.department_id", 120)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                filters={filters}
                sortBy={sortBy}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures and column/row grand totals and multiple subtotals 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ITotal, newAttribute, newMeasure, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAllColumnsForMeasure, newWidthForAttributeColumn, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_label.f_product.product.name"),
    newTotal("min", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_label.f_product.product.name"),
    newTotal("max", "m_e519fa2a_86c3_4e32_8313_0c03062348j3", "a_label.f_product.product.name"),
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.department_id"),
    newTotal("med", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.department_id"),
    newTotal("med", "m_e519fa2a_86c3_4e32_8313_0c03062348j3", "a_f_owner.department_id"),
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_opportunitysnapshot.forecastcategory_id"),
    newTotal("min", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_opportunitysnapshot.forecastcategory_id"),
    newTotal("max", "m_e519fa2a_86c3_4e32_8313_0c03062348j3", "a_f_opportunitysnapshot.forecastcategory_id"),
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.region_id"),
    newTotal("med", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.region_id"),
    newTotal("med", "m_e519fa2a_86c3_4e32_8313_0c03062348j3", "a_f_owner.region_id")
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAllColumnsForMeasure("m_87a053b0_3947_49f3_b0c5_de53fd01f050", 100),
            newWidthForAllColumnsForMeasure("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa", 100),
            newWidthForAllColumnsForMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", 100),
            newWidthForAttributeColumn("a_label.f_product.product.name", 120),
            newWidthForAttributeColumn("a_f_owner.department_id", 120)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures and grand totals and multiple subtotals 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ITotal, newAttribute, newMeasure, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAllColumnsForMeasure, newWidthForAttributeColumn, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_label.f_product.product.name"),
    newTotal("min", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_label.f_product.product.name"),
    newTotal("max", "m_e519fa2a_86c3_4e32_8313_0c03062348j3", "a_label.f_product.product.name"),
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.department_id"),
    newTotal("med", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.department_id"),
    newTotal("med", "m_e519fa2a_86c3_4e32_8313_0c03062348j3", "a_f_owner.department_id")
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAllColumnsForMeasure("m_87a053b0_3947_49f3_b0c5_de53fd01f050", 100),
            newWidthForAllColumnsForMeasure("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa", 100),
            newWidthForAllColumnsForMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", 100),
            newWidthForAttributeColumn("a_label.f_product.product.name", 120),
            newWidthForAttributeColumn("a_f_owner.department_id", 120)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures and multiple column grand totals for each 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ITotal, newAttribute, newMeasure, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAllColumnsForMeasure, newWidthForAttributeColumn, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("attr.f_owner.salesrep", "displayForm"), a => a.localId("a_attr.f_owner.salesrep"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id"))
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_opportunitysnapshot.forecastcategory_id"),
    newTotal("min", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_opportunitysnapshot.forecastcategory_id"),
    newTotal("max", "m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa", "a_f_opportunitysnapshot.forecastcategory_id")
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAllColumnsForMeasure("m_87a053b0_3947_49f3_b0c5_de53fd01f050", 100),
            newWidthForAllColumnsForMeasure("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa", 100),
            newWidthForAllColumnsForMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", 100),
            newWidthForAttributeColumn("a_attr.f_owner.salesrep", 120)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures and multiple column subtotals 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, ITotal, newAttribute, newMeasure, newPositiveAttributeFilter, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAllColumnsForMeasure, newWidthForAttributeColumn, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("f_owner.region_id", "displayForm"), {values: ["West Coast"]})
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.region_id"),
    newTotal("med", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.region_id"),
    newTotal("med", "m_e519fa2a_86c3_4e32_8313_0c03062348j3", "a_f_owner.region_id")
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAllColumnsForMeasure("m_87a053b0_3947_49f3_b0c5_de53fd01f050", 100),
            newWidthForAllColumnsForMeasure("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa", 100),
            newWidthForAllColumnsForMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", 100),
            newWidthForAttributeColumn("a_label.f_product.product.name", 120),
            newWidthForAttributeColumn("a_f_owner.department_id", 120)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                filters={filters}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures and multiple column/row grand totals for each 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ITotal, newAttribute, newMeasure, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAllColumnsForMeasure, newWidthForAttributeColumn, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("attr.f_owner.salesrep", "displayForm"), a => a.localId("a_attr.f_owner.salesrep"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id"))
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_attr.f_owner.salesrep"),
    newTotal("min", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_attr.f_owner.salesrep"),
    newTotal("max", "m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa", "a_attr.f_owner.salesrep"),
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_opportunitysnapshot.forecastcategory_id"),
    newTotal("min", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_opportunitysnapshot.forecastcategory_id"),
    newTotal("max", "m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa", "a_f_opportunitysnapshot.forecastcategory_id")
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAllColumnsForMeasure("m_87a053b0_3947_49f3_b0c5_de53fd01f050", 100),
            newWidthForAllColumnsForMeasure("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa", 100),
            newWidthForAllColumnsForMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", 100),
            newWidthForAttributeColumn("a_attr.f_owner.salesrep", 120)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures and multiple column/row subtotals 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ITotal, newAttribute, newMeasure, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAllColumnsForMeasure, newWidthForAttributeColumn, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.department_id"),
    newTotal("med", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.department_id"),
    newTotal("med", "m_e519fa2a_86c3_4e32_8313_0c03062348j3", "a_f_owner.department_id"),
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.region_id"),
    newTotal("med", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.region_id"),
    newTotal("med", "m_e519fa2a_86c3_4e32_8313_0c03062348j3", "a_f_owner.region_id")
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAllColumnsForMeasure("m_87a053b0_3947_49f3_b0c5_de53fd01f050", 100),
            newWidthForAllColumnsForMeasure("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa", 100),
            newWidthForAllColumnsForMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", 100),
            newWidthForAttributeColumn("a_label.f_product.product.name", 120),
            newWidthForAttributeColumn("a_f_owner.department_id", 120)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures and multiple column/row subtotals with metrics in rows 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ITotal, newAttribute, newMeasure, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAllColumnsForMeasure, newWidthForAttributeColumn, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_label.f_product.product.name"),
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.department_id"),
    newTotal("med", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.department_id"),
    newTotal("sum", "m_e519fa2a_86c3_4e32_8313_0c03062348j3", "a_label.f_product.product.name"),
    newTotal("med", "m_e519fa2a_86c3_4e32_8313_0c03062348j3", "a_f_owner.department_id"),
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.region_id"),
    newTotal("med", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.region_id"),
    newTotal("med", "m_e519fa2a_86c3_4e32_8313_0c03062348j3", "a_f_owner.region_id")
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAllColumnsForMeasure("m_87a053b0_3947_49f3_b0c5_de53fd01f050", 100),
            newWidthForAllColumnsForMeasure("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa", 100),
            newWidthForAllColumnsForMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", 100),
            newWidthForAttributeColumn("a_label.f_product.product.name", 120),
            newWidthForAttributeColumn("a_f_owner.department_id", 120)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","},
    measureGroupDimension: "rows"
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures and multiple grand totals for each 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ITotal, newAttribute, newMeasure, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_label.f_product.product.name"),
    newTotal("min", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_label.f_product.product.name"),
    newTotal("max", "m_e519fa2a_86c3_4e32_8313_0c03062348j3", "a_label.f_product.product.name")
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures and multiple subtotals 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ITotal, newAttribute, newMeasure, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.department_id"),
    newTotal("med", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.department_id"),
    newTotal("med", "m_e519fa2a_86c3_4e32_8313_0c03062348j3", "a_f_owner.department_id")
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures and one column subtotal 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ITotal, newAttribute, newMeasure, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAllColumnsForMeasure, newWidthForAttributeColumn, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.region_id")
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAllColumnsForMeasure("m_87a053b0_3947_49f3_b0c5_de53fd01f050", 100),
            newWidthForAllColumnsForMeasure("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa", 100),
            newWidthForAllColumnsForMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", 100),
            newWidthForAttributeColumn("a_label.f_product.product.name", 120),
            newWidthForAttributeColumn("a_f_owner.department_id", 120)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures and one column/row subtotal 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ITotal, newAttribute, newMeasure, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAllColumnsForMeasure, newWidthForAttributeColumn, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.department_id"),
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.region_id")
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAllColumnsForMeasure("m_87a053b0_3947_49f3_b0c5_de53fd01f050", 100),
            newWidthForAllColumnsForMeasure("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa", 100),
            newWidthForAllColumnsForMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", 100),
            newWidthForAttributeColumn("a_label.f_product.product.name", 120),
            newWidthForAttributeColumn("a_f_owner.department_id", 120)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures and one subtotal 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ITotal, newAttribute, newMeasure, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.department_id")
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures and single column grand total and single subtotal sorted by second attribute 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, ISortItem, ITotal, newAttribute, newAttributeSort, newMeasure, newPositiveAttributeFilter, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAllColumnsForMeasure, newWidthForAttributeColumn, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("f_owner.region_id", "displayForm"), {values: ["West Coast"]})
];
const sortBy: ISortItem[] = [
    newAttributeSort("a_f_owner.department_id", "desc")
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_opportunitysnapshot.forecastcategory_id"),
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.region_id")
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAllColumnsForMeasure("m_87a053b0_3947_49f3_b0c5_de53fd01f050", 100),
            newWidthForAllColumnsForMeasure("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa", 100),
            newWidthForAllColumnsForMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", 100),
            newWidthForAttributeColumn("a_label.f_product.product.name", 120),
            newWidthForAttributeColumn("a_f_owner.department_id", 120)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                filters={filters}
                sortBy={sortBy}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures and single column grand total for each 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ITotal, newAttribute, newMeasure, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAllColumnsForMeasure, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("attr.f_owner.salesrep", "displayForm"), a => a.localId("a_attr.f_owner.salesrep"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id"))
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_opportunitysnapshot.forecastcategory_id"),
    newTotal("max", "m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa", "a_f_opportunitysnapshot.forecastcategory_id")
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAllColumnsForMeasure("m_87a053b0_3947_49f3_b0c5_de53fd01f050", 100),
            newWidthForAllColumnsForMeasure("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa", 100),
            newWidthForAllColumnsForMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", 100)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures and single column grand total for one 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, ITotal, newAttribute, newMeasure, newNegativeAttributeFilter, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAllColumnsForMeasure, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("attr.f_owner.salesrep", "displayForm"), a => a.localId("a_attr.f_owner.salesrep"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id"))
];
const filters: IFilter[] = [
    newNegativeAttributeFilter(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), {values: ["Include"]})
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_opportunitysnapshot.forecastcategory_id")
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAllColumnsForMeasure("m_87a053b0_3947_49f3_b0c5_de53fd01f050", 100),
            newWidthForAllColumnsForMeasure("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa", 100),
            newWidthForAllColumnsForMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", 100)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                filters={filters}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures and single column/row grand total for each 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ITotal, newAttribute, newMeasure, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAllColumnsForMeasure, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("attr.f_owner.salesrep", "displayForm"), a => a.localId("a_attr.f_owner.salesrep"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id"))
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_attr.f_owner.salesrep"),
    newTotal("max", "m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa", "a_attr.f_owner.salesrep"),
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_opportunitysnapshot.forecastcategory_id"),
    newTotal("max", "m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa", "a_f_opportunitysnapshot.forecastcategory_id")
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAllColumnsForMeasure("m_87a053b0_3947_49f3_b0c5_de53fd01f050", 100),
            newWidthForAllColumnsForMeasure("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa", 100),
            newWidthForAllColumnsForMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", 100)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures and single column/row grand total for one 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ITotal, newAttribute, newMeasure, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAllColumnsForMeasure, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("b4e3e3c7-ead3-4d69-8be4-23bcfe5ff7aa", "measure"), m => m.localId("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("attr.f_owner.salesrep", "displayForm"), a => a.localId("a_attr.f_owner.salesrep"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id"))
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_attr.f_owner.salesrep"),
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_opportunitysnapshot.forecastcategory_id")
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAllColumnsForMeasure("m_87a053b0_3947_49f3_b0c5_de53fd01f050", 100),
            newWidthForAllColumnsForMeasure("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa", 100),
            newWidthForAllColumnsForMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", 100)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures and single grand total for each 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ITotal, newAttribute, newMeasure, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, newWidthForAllColumnsForMeasure, newWidthForAttributeColumn, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_label.f_product.product.name"),
    newTotal("sum", "m_e519fa2a_86c3_4e32_8313_0c03062348j3", "a_label.f_product.product.name")
];
const config: IPivotTableConfig = {
    columnSizing: {
        defaultWidth: "autoresizeAll",
        columnWidths: [
            newWidthForAllColumnsForMeasure("m_87a053b0_3947_49f3_b0c5_de53fd01f050", 100),
            newWidthForAllColumnsForMeasure("m_b4e3e3c7_ead3_4d69_8be4_23bcfe5ff7aa", 100),
            newWidthForAllColumnsForMeasure("m_e519fa2a_86c3_4e32_8313_0c03062348j3", 100),
            newWidthForAttributeColumn("a_label.f_product.product.name", 120)
        ]
    },
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures and single grand total for one 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ITotal, newAttribute, newMeasure, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_label.f_product.product.name")
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures and single grand total sorted by second attribute 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, ITotal, newAttribute, newAttributeSort, newMeasure, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const sortBy: ISortItem[] = [
    newAttributeSort("a_f_owner.department_id", "desc")
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_label.f_product.product.name")
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures in rows and column attrs on left, with totals 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ITotal, newAttribute, newMeasure, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.department_id"),
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.region_id")
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","},
    measureGroupDimension: "rows",
    columnHeadersPosition: "left"
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures in rows and column attrs on top, with drilling on metrics 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","},
    measureGroupDimension: "rows",
    columnHeadersPosition: "top"
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures in rows and column attrs on top, with invalid drilling on attributes 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","},
    measureGroupDimension: "rows",
    columnHeadersPosition: "top"
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures in rows and only column attrs on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","},
    measureGroupDimension: "rows",
    columnHeadersPosition: "left"
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures in rows and only column attrs on left, with drilling 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","},
    measureGroupDimension: "rows",
    columnHeadersPosition: "left"
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures in rows and only column attrs on left, with totals 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ITotal, newAttribute, newMeasure, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.region_id"),
    newTotal("med", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.region_id"),
    newTotal("med", "m_e519fa2a_86c3_4e32_8313_0c03062348j3", "a_f_owner.region_id")
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","},
    measureGroupDimension: "rows",
    columnHeadersPosition: "left"
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures with column attribute 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures with row and column attributes 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures with row attribute 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures with single row attr sorted by first measure 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "desc")
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures with single row attr sorted by second measure 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const sortBy: ISortItem[] = [
    newMeasureSort("m_e519fa2a_86c3_4e32_8313_0c03062348j3", "desc")
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures with single row attr with metrics in rows 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","},
    measureGroupDimension: "rows"
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures with three rows and two column attributes 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id")),
    newAttribute(idRef("attr.f_owner.salesrep", "displayForm"), a => a.localId("a_attr.f_owner.salesrep"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures with two row and one column attributes 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - two measures with two row and two column attributes 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - with attributes without measures 1`] = `
"import React from "react";
import { IAttribute, idRef, newAttribute } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const rows: IAttribute[] = [
    newAttribute(idRef("attr.f_stage.stagename", "displayForm"), a => a.localId("a_attr.f_stage.stagename")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - with column attributes only and auto-resizing 1`] = `
"import React from "react";
import { IAttribute, idRef, newAttribute } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const columns: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - with date filter 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAbsoluteDateFilter, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const filters: IFilter[] = [
    newAbsoluteDateFilter(idRef("dt_activity_timestamp", "dataSet"), "2021-01-01", "2021-02-01")
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - with drill on all row atributes 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id")),
    newAttribute(idRef("attr.f_owner.salesrep", "displayForm"), a => a.localId("a_attr.f_owner.salesrep"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - with drill on all row attributes and measures 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id")),
    newAttribute(idRef("attr.f_owner.salesrep", "displayForm"), a => a.localId("a_attr.f_owner.salesrep"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - with small page and auto-resizing 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("attr.f_stage.stagename", "displayForm"), a => a.localId("a_attr.f_stage.stagename")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - with two measures and row attribute with auto-resizing 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - with two measures and row attribute with auto-resizing and grow to fit 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - with two measures, grand totals and subtotals with auto-resizing 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ITotal, newAttribute, newMeasure, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_label.f_product.product.name"),
    newTotal("min", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_label.f_product.product.name"),
    newTotal("max", "m_e519fa2a_86c3_4e32_8313_0c03062348j3", "a_label.f_product.product.name"),
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.department_id"),
    newTotal("med", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.department_id"),
    newTotal("med", "m_e519fa2a_86c3_4e32_8313_0c03062348j3", "a_f_owner.department_id")
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - with two measures, grand totals and subtotals with auto-resizing and grow to fit 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ITotal, newAttribute, newMeasure, newTotal } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name")),
    newAttribute(idRef("f_owner.department_id", "displayForm"), a => a.localId("a_f_owner.department_id"))
];
const columns: IAttribute[] = [
    newAttribute(idRef("f_opportunitysnapshot.forecastcategory_id", "displayForm"), a => a.localId("a_f_opportunitysnapshot.forecastcategory_id")),
    newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"))
];
const totals: ITotal[] = [
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_label.f_product.product.name"),
    newTotal("min", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_label.f_product.product.name"),
    newTotal("max", "m_e519fa2a_86c3_4e32_8313_0c03062348j3", "a_label.f_product.product.name"),
    newTotal("sum", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.department_id"),
    newTotal("med", "m_87a053b0_3947_49f3_b0c5_de53fd01f050", "a_f_owner.department_id"),
    newTotal("med", "m_e519fa2a_86c3_4e32_8313_0c03062348j3", "a_f_owner.department_id")
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PivotTable - with two same dates 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IPivotTableConfig, PivotTable } from "@gooddata/sdk-ui-pivot";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const rows: IAttribute[] = [
    newAttribute(idRef("dt_oppcreated_timestamp.year", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.year")),
    newAttribute(idRef("dt_oppcreated_timestamp.year", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.year_1"))
];
const config: IPivotTableConfig = {
    columnSizing: {defaultWidth: "autoresizeAll"},
    menu: {
        aggregations: true,
        aggregationsSubMenu: true,
        aggregationsSubMenuForRows: true
    },
    separators: {decimal: ".", thousand: ","}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 610x154 - Force position RIGHT - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 610x154 - Force position RIGHT - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 610x154 - Force position RIGHT - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 610x154 - Force position RIGHT - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 610x154 - Force position RIGHT - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - arithmetic measures 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newArithmeticMeasure, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - assign color to attributes 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { getColorMappingPredicate, IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    colorMapping: [
        {predicate: getColorMappingPredicate("WonderKid"), color: {type: "rgb", value: {b: 0, g: 0, r: 0}}},
        {predicate: getColorMappingPredicate("Explorer"), color: {type: "rgb", value: {b: 0, g: 0, r: 255}}}
    ],
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - assign color to measures 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newArithmeticMeasure, newMeasure } from "@gooddata/sdk-model";
import { getColorMappingPredicate, IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    colorMapping: [
        {predicate: getColorMappingPredicate("m_87a053b0_3947_49f3_b0c5_de53fd01f050"), color: {type: "rgb", value: {b: 0, g: 0, r: 0}}},
        {predicate: getColorMappingPredicate("m_e519fa2a_86c3_4e32_8313_0c03062348j3"), color: {type: "guid", value: "05"}}
    ],
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - coloring - custom palette 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - data labels - auto visibility 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {visible: "auto"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - data labels - default 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - data labels - forced hidden 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {visible: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - data labels - forced visible 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - data labels - forced visible and german separators 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - font 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - legend position - single measure and viewBy - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - legend position - single measure and viewBy - disabled 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - legend position - single measure and viewBy - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {position: "bottom"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - legend position - single measure and viewBy - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {position: "left"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - legend position - single measure and viewBy - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {position: "right"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - legend position - single measure and viewBy - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {position: "top"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - legend position - two measures - auto legend 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    legend: {position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - legend position - two measures - disabled 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - legend position - two measures - legend at bottom 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    legend: {position: "bottom"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - legend position - two measures - legend on left 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    legend: {position: "left"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - legend position - two measures - legend on right 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    legend: {position: "right"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - legend position - two measures - legend on top 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    legend: {position: "top"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - single measure 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - single measure with viewBy 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - single measure with viewBy sorted by attribute 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    enableChartSorting: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - single measure with viewBy sorted by measure 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, ISortItem, newAttribute, newMeasure, newMeasureSort } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const sortBy: ISortItem[] = [
    newMeasureSort("m_87a053b0_3947_49f3_b0c5_de53fd01f050", "asc")
];
const config: IChartConfig = {
    enableChartSorting: true,
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - themed 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - two measures 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - vertical alignment - bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - vertical alignment - default 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - vertical alignment - middle 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for PyramidChart - vertical alignment - top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, PyramidChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <PyramidChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - default legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        responsive: "autoPositionWithPopup",
        position: "auto"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - default legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        responsive: "autoPositionWithPopup",
        position: "auto"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - default legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        responsive: "autoPositionWithPopup",
        position: "auto"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - default legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        responsive: "autoPositionWithPopup",
        position: "auto"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 610x154 - Force position RIGHT - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 610x154 - Force position RIGHT - default legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        responsive: "autoPositionWithPopup",
        position: "auto"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 610x154 - Force position RIGHT - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 610x154 - Force position RIGHT - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 610x154 - Force position RIGHT - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 610x154 - Force position RIGHT - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - default legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        responsive: "autoPositionWithPopup",
        position: "auto"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - default legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        responsive: "autoPositionWithPopup",
        position: "auto"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - default legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        responsive: "autoPositionWithPopup",
        position: "auto"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - assign color to nodes 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { getColorMappingPredicate, IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    colorMapping: [
        {predicate: getColorMappingPredicate("WonderKid"), color: {type: "rgb", value: {b: 0, g: 0, r: 0}}},
        {predicate: getColorMappingPredicate("Explorer"), color: {type: "rgb", value: {b: 0, g: 0, r: 255}}}
    ],
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - coloring - custom palette 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - data labels - auto visibility 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    dataLabels: {visible: "auto"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - data labels - default 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - data labels - forced hidden 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    dataLabels: {visible: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - data labels - forced visible 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    dataLabels: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - data labels - forced visible and german separators 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    dataLabels: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - font 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - legend position - 1 measure and 1 attribute - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {enabled: true, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - legend position - 1 measure and 1 attribute - default legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - legend position - 1 measure and 1 attribute - disabled 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - legend position - 1 measure and 1 attribute - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {enabled: true, position: "bottom"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - legend position - 1 measure and 1 attribute - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {enabled: true, position: "left"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - legend position - 1 measure and 1 attribute - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {enabled: true, position: "right"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - legend position - 1 measure and 1 attribute - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {enabled: true, position: "top"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - legend position - 1 measure and 2 attributes - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {enabled: true, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - legend position - 1 measure and 2 attributes - default legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - legend position - 1 measure and 2 attributes - disabled 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - legend position - 1 measure and 2 attributes - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {enabled: true, position: "bottom"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - legend position - 1 measure and 2 attributes - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {enabled: true, position: "left"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - legend position - 1 measure and 2 attributes - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {enabled: true, position: "right"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - legend position - 1 measure and 2 attributes - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {enabled: true, position: "top"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - measure and attributeFrom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - measure and attributeTo 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - measure only 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - measure, attributeFrom and attributeTo 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for SankeyChart - themed 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, SankeyChart } from "@gooddata/sdk-ui-charts";

const measure: IAttributeOrMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attributeFrom: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const attributeTo: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <SankeyChart
                measure={measure}
                attributeFrom={attributeFrom}
                attributeTo={attributeTo}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ScatterPlot - Y axis min/max configuration 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, ScatterPlot } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const attribute: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    xaxis: {max: "15000000", min: "5000000"},
    yaxis: {max: "0.55", min: "0.5"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ScatterPlot - assign color to measures 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { getColorMappingPredicate, IChartConfig, ScatterPlot } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const attribute: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    colorMapping: [
        {predicate: getColorMappingPredicate("m_87a053b0_3947_49f3_b0c5_de53fd01f050"), color: {type: "rgb", value: {b: 0, g: 0, r: 0}}}
    ],
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ScatterPlot - axis name configuration - high 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, ScatterPlot } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const attribute: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "high"}},
    secondary_yaxis: {name: {position: "high"}},
    xaxis: {name: {position: "high"}},
    yaxis: {name: {position: "high"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ScatterPlot - axis name configuration - invisible 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, ScatterPlot } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const attribute: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "middle"}},
    secondary_yaxis: {name: {position: "middle"}},
    xaxis: {name: {position: "middle"}},
    yaxis: {name: {position: "middle"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ScatterPlot - axis name configuration - low 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, ScatterPlot } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const attribute: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "low"}},
    secondary_yaxis: {name: {position: "low"}},
    xaxis: {name: {position: "low"}},
    yaxis: {name: {position: "low"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ScatterPlot - axis name configuration - middle 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, ScatterPlot } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const attribute: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    secondary_xaxis: {name: {position: "middle"}},
    secondary_yaxis: {name: {position: "middle"}},
    xaxis: {name: {position: "middle"}},
    yaxis: {name: {position: "middle"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ScatterPlot - coloring - custom palette 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, ScatterPlot } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const attribute: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ScatterPlot - data labels - auto visibility 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, ScatterPlot } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const attribute: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {visible: "auto"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ScatterPlot - data labels - default 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, ScatterPlot } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const attribute: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ScatterPlot - data labels - forced hidden 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, ScatterPlot } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const attribute: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {visible: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ScatterPlot - data labels - forced visible 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, ScatterPlot } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const attribute: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ScatterPlot - data labels - forced visible and german separators 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, ScatterPlot } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const attribute: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    dataLabels: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ScatterPlot - font 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, ScatterPlot } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const attribute: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ScatterPlot - themed 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, ScatterPlot } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const attribute: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ScatterPlot - x and y axis measures and attribute 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, ScatterPlot } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const attribute: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ScatterPlot - x and y axis measures and attribute with attr sorting 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, ISortItem, newAttribute, newAttributeSort, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, ScatterPlot } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const attribute: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const sortBy: ISortItem[] = [
    newAttributeSort("a_label.f_product.product.name", "desc")
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ScatterPlot - x and y axis measures and attribute with nulls in data 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, ScatterPlot } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const yAxisMeasure: IMeasure = newMeasure(idRef("973a14c4-acb1-45fb-ba52-5d96fa02f7ba", "measure"), m => m.localId("m_973a14c4_acb1_45fb_ba52_5d96fa02f7ba"));
const attribute: IAttribute = newAttribute(idRef("dt_closedate_timestamp.year", "displayForm"), a => a.localId("a_dt_closedate_timestamp.year"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ScatterPlot - x axis measure 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, ScatterPlot } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ScatterPlot - x axis measure and attribute 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, ScatterPlot } from "@gooddata/sdk-ui-charts";

const xAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attribute: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                attribute={attribute}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for ScatterPlot - y axis measure and attribute 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, ScatterPlot } from "@gooddata/sdk-ui-charts";

const yAxisMeasure: IMeasure = newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"));
const attribute: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 440x154 - Force position TOP, max 1 row, Gradient legend normal - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 610x154 - Force position RIGHT - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 610x154 - Force position RIGHT - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 610x154 - Force position RIGHT - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 610x154 - Force position RIGHT - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 610x154 - Force position RIGHT - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - arithmetic measures and segment 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newArithmeticMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3")),
    newArithmeticMeasure([
    "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    "m_e519fa2a_86c3_4e32_8313_0c03062348j3"
], "difference", m => m.alias("Calculated 'Lost' measure").localId("m_9fa7cb9ce4d2947059b490e24a925317"))
];
const segmentBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.quarter", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.quarter"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - assign color to attributes 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { getColorMappingPredicate, IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    colorMapping: [
        {predicate: getColorMappingPredicate("WonderKid"), color: {type: "rgb", value: {b: 0, g: 0, r: 0}}},
        {predicate: getColorMappingPredicate("Explorer"), color: {type: "rgb", value: {b: 0, g: 0, r: 255}}}
    ],
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - coloring - custom palette 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - data labels - auto visibility 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    dataLabels: {visible: "auto"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - data labels - default 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - data labels - forced hidden 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    dataLabels: {visible: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - data labels - forced visible 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    dataLabels: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - data labels - forced visible and german separators 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    dataLabels: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - font 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - legend position - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {position: "right"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - legend position - disabled 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {enabled: false, position: "right"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - legend position - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {position: "bottom"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - legend position - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {position: "left"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - legend position - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {position: "right"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - legend position - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    legend: {position: "top"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - single measure 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - single measure and segment 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - single measure and viewBy 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - single measure and viewBy filtered to one element 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, IFilter, newAttribute, newMeasure, newPositiveAttributeFilter } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const filters: IFilter[] = [
    newPositiveAttributeFilter(idRef("label.f_product.product.name", "displayForm"), {values: ["CompuSci"]})
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - single measure, viewBy and segment 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - themed 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const segmentBy: IAttribute = newAttribute(idRef("f_owner.region_id", "displayForm"), a => a.localId("a_f_owner.region_id"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - two measures 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - two measures and segmentBy 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const segmentBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - two measures and viewBy 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050")),
    newMeasure(idRef("e519fa2a-86c3-4e32-8313-0c03062348j3", "measure"), m => m.localId("m_e519fa2a_86c3_4e32_8313_0c03062348j3"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Treemap - with one measure and view by date and segment by date 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, Treemap } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("dt_closedate_timestamp.year", "displayForm"), a => a.localId("a_dt_closedate_timestamp.year"));
const segmentBy: IAttribute = newAttribute(idRef("dt_oppcreated_timestamp.year", "displayForm"), a => a.localId("a_dt_oppcreated_timestamp.year"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "right"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - default legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        responsive: "autoPositionWithPopup",
        position: "auto"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - default legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        responsive: "autoPositionWithPopup",
        position: "auto"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - default legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        responsive: "autoPositionWithPopup",
        position: "auto"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - default legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        responsive: "autoPositionWithPopup",
        position: "auto"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 610x154 - Force position RIGHT - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 610x154 - Force position RIGHT - default legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        responsive: "autoPositionWithPopup",
        position: "auto"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 610x154 - Force position RIGHT - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 610x154 - Force position RIGHT - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 610x154 - Force position RIGHT - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 610x154 - Force position RIGHT - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - default legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        responsive: "autoPositionWithPopup",
        position: "auto"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - default legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        responsive: "autoPositionWithPopup",
        position: "auto"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "auto",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - default legend 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        responsive: "autoPositionWithPopup",
        position: "auto"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "bottom",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "left",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "right",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    legend: {
        enabled: true,
        position: "top",
        responsive: "autoPositionWithPopup"
    },
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - assign color to measures 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("f_stagehistory.f_velocity", "fact"), m => m.alias("Sum Velocity").format("$#,##0").localId("m_f_stagehistory.f_velocity_sum").aggregation("sum")),
    newMeasure(idRef("f_stagehistory.f_duration", "fact"), m => m.alias("Sum Duration").format("$#,##0").localId("m_f_stagehistory.f_duration_sum").aggregation("sum")),
    newMeasure(idRef("f_density", "fact"), m => m.alias("Sum Density").format("$#,##0").localId("m_f_density_sum").aggregation("sum"))
];
const config: IChartConfig = {
    colorMapping: [
        {color: {type: "rgb", value: {b: 0, g: 0, r: 0}}},
        {
            color: {type: "rgb", value: {b: 0, g: 0, r: 255}}
        },
        {color: {type: "guid", value: "05"}}
    ],
    total: {enabled: true, name: "Total"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - change the orientation configuration 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("f_stagehistory.f_velocity", "fact"), m => m.alias("Sum Velocity").format("$#,##0").localId("m_f_stagehistory.f_velocity_sum").aggregation("sum")),
    newMeasure(idRef("f_stagehistory.f_duration", "fact"), m => m.alias("Sum Duration").format("$#,##0").localId("m_f_stagehistory.f_duration_sum").aggregation("sum")),
    newMeasure(idRef("f_density", "fact"), m => m.alias("Sum Density").format("$#,##0").localId("m_f_density_sum").aggregation("sum"))
];
const config: IChartConfig = {
    orientation: {position: "vertical"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - change the total column name 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("f_stagehistory.f_velocity", "fact"), m => m.alias("Sum Velocity").format("$#,##0").localId("m_f_stagehistory.f_velocity_sum").aggregation("sum")),
    newMeasure(idRef("f_stagehistory.f_duration", "fact"), m => m.alias("Sum Duration").format("$#,##0").localId("m_f_stagehistory.f_duration_sum").aggregation("sum")),
    newMeasure(idRef("f_density", "fact"), m => m.alias("Sum Density").format("$#,##0").localId("m_f_density_sum").aggregation("sum"))
];
const config: IChartConfig = {
    total: {enabled: true, name: "Balance"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - coloring - custom palette 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - data labels - data labels and totals with auto visibility 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("f_stagehistory.f_velocity", "fact"), m => m.alias("Sum Velocity").format("$#,##0").localId("m_f_stagehistory.f_velocity_sum").aggregation("sum")),
    newMeasure(idRef("f_stagehistory.f_duration", "fact"), m => m.alias("Sum Duration").format("$#,##0").localId("m_f_stagehistory.f_duration_sum").aggregation("sum")),
    newMeasure(idRef("f_density", "fact"), m => m.alias("Sum Density").format("$#,##0").localId("m_f_density_sum").aggregation("sum"))
];
const config: IChartConfig = {
    dataLabels: {totalsVisible: "auto", visible: "auto"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - data labels - data labels auto visibility 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("f_stagehistory.f_velocity", "fact"), m => m.alias("Sum Velocity").format("$#,##0").localId("m_f_stagehistory.f_velocity_sum").aggregation("sum")),
    newMeasure(idRef("f_stagehistory.f_duration", "fact"), m => m.alias("Sum Duration").format("$#,##0").localId("m_f_stagehistory.f_duration_sum").aggregation("sum")),
    newMeasure(idRef("f_density", "fact"), m => m.alias("Sum Density").format("$#,##0").localId("m_f_density_sum").aggregation("sum"))
];
const config: IChartConfig = {
    dataLabels: {visible: "auto"},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - data labels - data labels forced hidden 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("f_stagehistory.f_velocity", "fact"), m => m.alias("Sum Velocity").format("$#,##0").localId("m_f_stagehistory.f_velocity_sum").aggregation("sum")),
    newMeasure(idRef("f_stagehistory.f_duration", "fact"), m => m.alias("Sum Duration").format("$#,##0").localId("m_f_stagehistory.f_duration_sum").aggregation("sum")),
    newMeasure(idRef("f_density", "fact"), m => m.alias("Sum Density").format("$#,##0").localId("m_f_density_sum").aggregation("sum"))
];
const config: IChartConfig = {
    dataLabels: {visible: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - data labels - data labels forced hidden totals forced hidden 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("f_stagehistory.f_velocity", "fact"), m => m.alias("Sum Velocity").format("$#,##0").localId("m_f_stagehistory.f_velocity_sum").aggregation("sum")),
    newMeasure(idRef("f_stagehistory.f_duration", "fact"), m => m.alias("Sum Duration").format("$#,##0").localId("m_f_stagehistory.f_duration_sum").aggregation("sum")),
    newMeasure(idRef("f_density", "fact"), m => m.alias("Sum Density").format("$#,##0").localId("m_f_density_sum").aggregation("sum"))
];
const config: IChartConfig = {
    dataLabels: {totalsVisible: false, visible: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - data labels - data labels forced hidden totals forced visible 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("f_stagehistory.f_velocity", "fact"), m => m.alias("Sum Velocity").format("$#,##0").localId("m_f_stagehistory.f_velocity_sum").aggregation("sum")),
    newMeasure(idRef("f_stagehistory.f_duration", "fact"), m => m.alias("Sum Duration").format("$#,##0").localId("m_f_stagehistory.f_duration_sum").aggregation("sum")),
    newMeasure(idRef("f_density", "fact"), m => m.alias("Sum Density").format("$#,##0").localId("m_f_density_sum").aggregation("sum"))
];
const config: IChartConfig = {
    dataLabels: {totalsVisible: true, visible: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - data labels - data labels forced visible 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("f_stagehistory.f_velocity", "fact"), m => m.alias("Sum Velocity").format("$#,##0").localId("m_f_stagehistory.f_velocity_sum").aggregation("sum")),
    newMeasure(idRef("f_stagehistory.f_duration", "fact"), m => m.alias("Sum Duration").format("$#,##0").localId("m_f_stagehistory.f_duration_sum").aggregation("sum")),
    newMeasure(idRef("f_density", "fact"), m => m.alias("Sum Density").format("$#,##0").localId("m_f_density_sum").aggregation("sum"))
];
const config: IChartConfig = {
    dataLabels: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - data labels - default 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("f_stagehistory.f_velocity", "fact"), m => m.alias("Sum Velocity").format("$#,##0").localId("m_f_stagehistory.f_velocity_sum").aggregation("sum")),
    newMeasure(idRef("f_stagehistory.f_duration", "fact"), m => m.alias("Sum Duration").format("$#,##0").localId("m_f_stagehistory.f_duration_sum").aggregation("sum")),
    newMeasure(idRef("f_density", "fact"), m => m.alias("Sum Density").format("$#,##0").localId("m_f_density_sum").aggregation("sum"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - data labels - forced dataLabels visible and german separators 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("f_stagehistory.f_velocity", "fact"), m => m.alias("Sum Velocity").format("$#,##0").localId("m_f_stagehistory.f_velocity_sum").aggregation("sum")),
    newMeasure(idRef("f_stagehistory.f_duration", "fact"), m => m.alias("Sum Duration").format("$#,##0").localId("m_f_stagehistory.f_duration_sum").aggregation("sum")),
    newMeasure(idRef("f_density", "fact"), m => m.alias("Sum Density").format("$#,##0").localId("m_f_density_sum").aggregation("sum"))
];
const config: IChartConfig = {
    dataLabels: {visible: true},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - data labels - labels forced hidden totals auto visibility 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("f_stagehistory.f_velocity", "fact"), m => m.alias("Sum Velocity").format("$#,##0").localId("m_f_stagehistory.f_velocity_sum").aggregation("sum")),
    newMeasure(idRef("f_stagehistory.f_duration", "fact"), m => m.alias("Sum Duration").format("$#,##0").localId("m_f_stagehistory.f_duration_sum").aggregation("sum")),
    newMeasure(idRef("f_density", "fact"), m => m.alias("Sum Density").format("$#,##0").localId("m_f_density_sum").aggregation("sum"))
];
const config: IChartConfig = {
    dataLabels: {totalsVisible: "auto", visible: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - default state 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("f_stagehistory.f_velocity", "fact"), m => m.alias("Sum Velocity").format("$#,##0").localId("m_f_stagehistory.f_velocity_sum").aggregation("sum")),
    newMeasure(idRef("f_stagehistory.f_duration", "fact"), m => m.alias("Sum Duration").format("$#,##0").localId("m_f_stagehistory.f_duration_sum").aggregation("sum")),
    newMeasure(idRef("f_density", "fact"), m => m.alias("Sum Density").format("$#,##0").localId("m_f_density_sum").aggregation("sum"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - disable total column 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("f_stagehistory.f_velocity", "fact"), m => m.alias("Sum Velocity").format("$#,##0").localId("m_f_stagehistory.f_velocity_sum").aggregation("sum")),
    newMeasure(idRef("f_stagehistory.f_duration", "fact"), m => m.alias("Sum Duration").format("$#,##0").localId("m_f_stagehistory.f_duration_sum").aggregation("sum")),
    newMeasure(idRef("f_density", "fact"), m => m.alias("Sum Density").format("$#,##0").localId("m_f_density_sum").aggregation("sum"))
];
const config: IChartConfig = {
    total: {enabled: false},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - font 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - horizontal orientation with custom axes configuration 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    xaxis: {name: {position: "high"}},
    yaxis: {
        max: "130000000",
        min: "0",
        name: {position: "low"}
    },
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - legend position - auto legend 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("f_stagehistory.f_velocity", "fact"), m => m.alias("Sum Velocity").format("$#,##0").localId("m_f_stagehistory.f_velocity_sum").aggregation("sum")),
    newMeasure(idRef("f_stagehistory.f_duration", "fact"), m => m.alias("Sum Duration").format("$#,##0").localId("m_f_stagehistory.f_duration_sum").aggregation("sum")),
    newMeasure(idRef("f_density", "fact"), m => m.alias("Sum Density").format("$#,##0").localId("m_f_density_sum").aggregation("sum"))
];
const config: IChartConfig = {
    legend: {enabled: true, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - legend position - default legend 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("f_stagehistory.f_velocity", "fact"), m => m.alias("Sum Velocity").format("$#,##0").localId("m_f_stagehistory.f_velocity_sum").aggregation("sum")),
    newMeasure(idRef("f_stagehistory.f_duration", "fact"), m => m.alias("Sum Duration").format("$#,##0").localId("m_f_stagehistory.f_duration_sum").aggregation("sum")),
    newMeasure(idRef("f_density", "fact"), m => m.alias("Sum Density").format("$#,##0").localId("m_f_density_sum").aggregation("sum"))
];
const config: IChartConfig = {
    legend: {position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - legend position - disabled 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("f_stagehistory.f_velocity", "fact"), m => m.alias("Sum Velocity").format("$#,##0").localId("m_f_stagehistory.f_velocity_sum").aggregation("sum")),
    newMeasure(idRef("f_stagehistory.f_duration", "fact"), m => m.alias("Sum Duration").format("$#,##0").localId("m_f_stagehistory.f_duration_sum").aggregation("sum")),
    newMeasure(idRef("f_density", "fact"), m => m.alias("Sum Density").format("$#,##0").localId("m_f_density_sum").aggregation("sum"))
];
const config: IChartConfig = {
    legend: {enabled: false, position: "auto"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - legend position - legend at bottom 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("f_stagehistory.f_velocity", "fact"), m => m.alias("Sum Velocity").format("$#,##0").localId("m_f_stagehistory.f_velocity_sum").aggregation("sum")),
    newMeasure(idRef("f_stagehistory.f_duration", "fact"), m => m.alias("Sum Duration").format("$#,##0").localId("m_f_stagehistory.f_duration_sum").aggregation("sum")),
    newMeasure(idRef("f_density", "fact"), m => m.alias("Sum Density").format("$#,##0").localId("m_f_density_sum").aggregation("sum"))
];
const config: IChartConfig = {
    legend: {enabled: true, position: "bottom"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - legend position - legend on left 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("f_stagehistory.f_velocity", "fact"), m => m.alias("Sum Velocity").format("$#,##0").localId("m_f_stagehistory.f_velocity_sum").aggregation("sum")),
    newMeasure(idRef("f_stagehistory.f_duration", "fact"), m => m.alias("Sum Duration").format("$#,##0").localId("m_f_stagehistory.f_duration_sum").aggregation("sum")),
    newMeasure(idRef("f_density", "fact"), m => m.alias("Sum Density").format("$#,##0").localId("m_f_density_sum").aggregation("sum"))
];
const config: IChartConfig = {
    legend: {enabled: true, position: "left"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - legend position - legend on right 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("f_stagehistory.f_velocity", "fact"), m => m.alias("Sum Velocity").format("$#,##0").localId("m_f_stagehistory.f_velocity_sum").aggregation("sum")),
    newMeasure(idRef("f_stagehistory.f_duration", "fact"), m => m.alias("Sum Duration").format("$#,##0").localId("m_f_stagehistory.f_duration_sum").aggregation("sum")),
    newMeasure(idRef("f_density", "fact"), m => m.alias("Sum Density").format("$#,##0").localId("m_f_density_sum").aggregation("sum"))
];
const config: IChartConfig = {
    legend: {enabled: true, position: "right"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - legend position - legend on top 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("f_stagehistory.f_velocity", "fact"), m => m.alias("Sum Velocity").format("$#,##0").localId("m_f_stagehistory.f_velocity_sum").aggregation("sum")),
    newMeasure(idRef("f_stagehistory.f_duration", "fact"), m => m.alias("Sum Duration").format("$#,##0").localId("m_f_stagehistory.f_duration_sum").aggregation("sum")),
    newMeasure(idRef("f_density", "fact"), m => m.alias("Sum Density").format("$#,##0").localId("m_f_density_sum").aggregation("sum"))
];
const config: IChartConfig = {
    legend: {enabled: true, position: "top"},
    separators: {decimal: ".", thousand: ","},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - multi measures 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("f_stagehistory.f_velocity", "fact"), m => m.alias("Sum Velocity").format("$#,##0").localId("m_f_stagehistory.f_velocity_sum").aggregation("sum")),
    newMeasure(idRef("f_stagehistory.f_duration", "fact"), m => m.alias("Sum Duration").format("$#,##0").localId("m_f_stagehistory.f_duration_sum").aggregation("sum")),
    newMeasure(idRef("f_density", "fact"), m => m.alias("Sum Density").format("$#,##0").localId("m_f_density_sum").aggregation("sum"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - multi measures with a total measure 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("f_stagehistory.f_velocity", "fact"), m => m.alias("Sum Velocity").format("$#,##0").localId("m_f_stagehistory.f_velocity_sum").aggregation("sum")),
    newMeasure(idRef("f_stagehistory.f_duration", "fact"), m => m.alias("Sum Duration").format("$#,##0").localId("m_f_stagehistory.f_duration_sum").aggregation("sum")),
    newMeasure(idRef("f_density", "fact"), m => m.alias("Sum Density").format("$#,##0").localId("m_f_density_sum").aggregation("sum"))
];
const config: IChartConfig = {
    total: {measures: ["m_f_density_sum"]},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - multi measures with font 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("f_stagehistory.f_velocity", "fact"), m => m.alias("Sum Velocity").format("$#,##0").localId("m_f_stagehistory.f_velocity_sum").aggregation("sum")),
    newMeasure(idRef("f_stagehistory.f_duration", "fact"), m => m.alias("Sum Duration").format("$#,##0").localId("m_f_stagehistory.f_duration_sum").aggregation("sum")),
    newMeasure(idRef("f_density", "fact"), m => m.alias("Sum Density").format("$#,##0").localId("m_f_density_sum").aggregation("sum"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - multi measures with themed 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("f_stagehistory.f_velocity", "fact"), m => m.alias("Sum Velocity").format("$#,##0").localId("m_f_stagehistory.f_velocity_sum").aggregation("sum")),
    newMeasure(idRef("f_stagehistory.f_duration", "fact"), m => m.alias("Sum Duration").format("$#,##0").localId("m_f_stagehistory.f_duration_sum").aggregation("sum")),
    newMeasure(idRef("f_density", "fact"), m => m.alias("Sum Density").format("$#,##0").localId("m_f_density_sum").aggregation("sum"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - single measure 1`] = `
"import React from "react";
import { IAttributeOrMeasure, idRef, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - single measure with viewBy 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - themed 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for WaterfallChart - vertical orientation with custom axes configuration 1`] = `
"import React from "react";
import { IAttribute, IAttributeOrMeasure, idRef, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { IChartConfig, WaterfallChart } from "@gooddata/sdk-ui-charts";

const measures: IAttributeOrMeasure[] = [
    newMeasure(idRef("87a053b0-3947-49f3-b0c5-de53fd01f050", "measure"), m => m.localId("m_87a053b0_3947_49f3_b0c5_de53fd01f050"))
];
const viewBy: IAttribute = newAttribute(idRef("label.f_product.product.name", "displayForm"), a => a.localId("a_label.f_product.product.name"));
const config: IChartConfig = {
    orientation: {position: "vertical"},
    xaxis: {
        max: "130000000",
        min: "0",
        name: {position: "high"}
    },
    yaxis: {name: {position: "low"}},
    separators: {decimal: ".", thousand: ","},
    legend: {position: "auto"},
    dataPoints: {visible: "auto"}
};
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <WaterfallChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Xirr - correct config 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { Xirr } from "@gooddata/sdk-ui-charts";

const measure: IMeasure = newMeasure(idRef("sample_xirr", "measure"), m => m.localId("m_sample_xirr"));
const attribute: IAttribute = newAttribute(idRef("dt_timeline_timestamp.year", "displayForm"), a => a.localId("a_dt_timeline_timestamp.year"));
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Xirr
                measure={measure}
                attribute={attribute}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Xirr - font 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { Xirr } from "@gooddata/sdk-ui-charts";

const measure: IMeasure = newMeasure(idRef("sample_xirr", "measure"), m => m.localId("m_sample_xirr"));
const attribute: IAttribute = newAttribute(idRef("dt_timeline_timestamp.year", "displayForm"), a => a.localId("a_dt_timeline_timestamp.year"));
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Xirr
                measure={measure}
                attribute={attribute}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Xirr - only measure 1`] = `
"import React from "react";
import { idRef, IMeasure, newMeasure } from "@gooddata/sdk-model";
import { Xirr } from "@gooddata/sdk-ui-charts";

const measure: IMeasure = newMeasure(idRef("sample_xirr", "measure"), m => m.localId("m_sample_xirr"));
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Xirr
                measure={measure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Xirr - semantically wrong measure 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { Xirr } from "@gooddata/sdk-ui-charts";

const measure: IMeasure = newMeasure(idRef("6b1411d5-e253-418e-8fd3-137a9f56ea92", "measure"), m => m.localId("m_6b1411d5_e253_418e_8fd3_137a9f56ea92"));
const attribute: IAttribute = newAttribute(idRef("dt_timeline_timestamp.year", "displayForm"), a => a.localId("a_dt_timeline_timestamp.year"));
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Xirr
                measure={measure}
                attribute={attribute}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality > should generate code for Xirr - themed 1`] = `
"import React from "react";
import { IAttribute, idRef, IMeasure, newAttribute, newMeasure } from "@gooddata/sdk-model";
import { Xirr } from "@gooddata/sdk-ui-charts";

const measure: IMeasure = newMeasure(idRef("sample_xirr", "measure"), m => m.localId("m_sample_xirr"));
const attribute: IAttribute = newAttribute(idRef("dt_timeline_timestamp.year", "displayForm"), a => a.localId("a_dt_timeline_timestamp.year"));
const style = {height: 400};

export function MyComponent() {
    return (
        <div style={style}>
            <Xirr
                measure={measure}
                attribute={attribute}
            />
        </div>
    );
}
"
`;
