// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`bear filter converter from model to AFM > convert absolute date filter > it should convert absolute date filter from model to AFM 1`] = `
{
  "absoluteDateFilter": {
    "dataSet": {
      "identifier": "dt_closedate_timestamp",
    },
    "from": "2019-08-06",
    "to": "2019-08-12",
  },
}
`;

exports[`bear filter converter from model to AFM > convert absolute date filter > it should return null when from is undefined 1`] = `null`;

exports[`bear filter converter from model to AFM > convert absolute date filter > it should return null when to is undefined 1`] = `null`;

exports[`bear filter converter from model to AFM > convert filter > returns AFM measure filter returns absolute date filter 1`] = `
{
  "absoluteDateFilter": {
    "dataSet": {
      "identifier": "dt_closedate_timestamp",
    },
    "from": "2019-08-06",
    "to": "2019-08-12",
  },
}
`;

exports[`bear filter converter from model to AFM > convert filter > returns AFM measure filter returns negative attribute filter 1`] = `
{
  "negativeAttributeFilter": {
    "displayForm": {
      "identifier": "label.f_product.product.name",
    },
    "notIn": {
      "values": [
        "other value",
      ],
    },
  },
}
`;

exports[`bear filter converter from model to AFM > convert filter > returns AFM measure filter returns positive attribute filter 1`] = `
{
  "positiveAttributeFilter": {
    "displayForm": {
      "identifier": "label.f_product.product.name",
    },
    "in": {
      "values": [
        "value",
      ],
    },
  },
}
`;

exports[`bear filter converter from model to AFM > convert filter > returns AFM measure filter returns relative date filter 1`] = `
{
  "relativeDateFilter": {
    "dataSet": {
      "identifier": "dt_closedate_timestamp",
    },
    "from": 2,
    "granularity": "GDC.time.date",
    "to": 55,
  },
}
`;

exports[`bear filter converter from model to AFM > convert filter > returns AFM measure value filter 1`] = `
{
  "measureValueFilter": {
    "condition": {
      "range": {
        "from": 3,
        "operator": "BETWEEN",
        "to": 9,
      },
    },
    "measure": {
      "localIdentifier": "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    },
  },
}
`;

exports[`bear filter converter from model to AFM > convert measure filter > returns AFM measure filter returns absolute date filter 1`] = `
{
  "absoluteDateFilter": {
    "dataSet": {
      "identifier": "dt_closedate_timestamp",
    },
    "from": "2019-08-06",
    "to": "2019-08-12",
  },
}
`;

exports[`bear filter converter from model to AFM > convert measure filter > returns AFM measure filter returns negative attribute filter 1`] = `
{
  "negativeAttributeFilter": {
    "displayForm": {
      "identifier": "label.f_product.product.name",
    },
    "notIn": {
      "values": [
        "other value",
      ],
    },
  },
}
`;

exports[`bear filter converter from model to AFM > convert measure filter > returns AFM measure filter returns positive attribute filter 1`] = `
{
  "positiveAttributeFilter": {
    "displayForm": {
      "identifier": "label.f_product.product.name",
    },
    "in": {
      "values": [
        "value",
      ],
    },
  },
}
`;

exports[`bear filter converter from model to AFM > convert measure filter > returns AFM measure filter returns relative date filter 1`] = `
{
  "relativeDateFilter": {
    "dataSet": {
      "identifier": "dt_closedate_timestamp",
    },
    "from": 5,
    "granularity": "GDC.time.date",
    "to": 22,
  },
}
`;

exports[`bear filter converter from model to AFM > convert measure filter > returns null when attribute filter is negative and empty 1`] = `null`;

exports[`bear filter converter from model to AFM > convert measure value filter > should return AFM measure value filter with between operator 1`] = `
{
  "measureValueFilter": {
    "condition": {
      "range": {
        "from": 3,
        "operator": "BETWEEN",
        "to": 45,
      },
    },
    "measure": {
      "localIdentifier": "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    },
  },
}
`;

exports[`bear filter converter from model to AFM > convert measure value filter > should return AFM measure value filter with equal to operator 1`] = `
{
  "measureValueFilter": {
    "condition": {
      "comparison": {
        "operator": "EQUAL_TO",
        "value": 18,
      },
    },
    "measure": {
      "localIdentifier": "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    },
  },
}
`;

exports[`bear filter converter from model to AFM > convert measure value filter > should return AFM measure value filter with greater than operator 1`] = `
{
  "measureValueFilter": {
    "condition": {
      "comparison": {
        "operator": "GREATER_THAN",
        "value": 10,
      },
    },
    "measure": {
      "localIdentifier": "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    },
  },
}
`;

exports[`bear filter converter from model to AFM > convert measure value filter > should return AFM measure value filter with greater than or equal to operator 1`] = `
{
  "measureValueFilter": {
    "condition": {
      "comparison": {
        "operator": "GREATER_THAN_OR_EQUAL_TO",
        "value": -5,
      },
    },
    "measure": {
      "localIdentifier": "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    },
  },
}
`;

exports[`bear filter converter from model to AFM > convert measure value filter > should return AFM measure value filter with less than operator 1`] = `
{
  "measureValueFilter": {
    "condition": {
      "comparison": {
        "operator": "LESS_THAN",
        "value": 13,
      },
    },
    "measure": {
      "localIdentifier": "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    },
  },
}
`;

exports[`bear filter converter from model to AFM > convert measure value filter > should return AFM measure value filter with less than or equal to operator 1`] = `
{
  "measureValueFilter": {
    "condition": {
      "comparison": {
        "operator": "LESS_THAN_OR_EQUAL_TO",
        "value": 13,
      },
    },
    "measure": {
      "localIdentifier": "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    },
  },
}
`;

exports[`bear filter converter from model to AFM > convert measure value filter > should return AFM measure value filter with not between operator 1`] = `
{
  "measureValueFilter": {
    "condition": {
      "range": {
        "from": 1,
        "operator": "NOT_BETWEEN",
        "to": 5,
      },
    },
    "measure": {
      "localIdentifier": "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    },
  },
}
`;

exports[`bear filter converter from model to AFM > convert measure value filter > should return AFM measure value filter with not equal to operator 1`] = `
{
  "measureValueFilter": {
    "condition": {
      "comparison": {
        "operator": "NOT_EQUAL_TO",
        "value": 3,
      },
    },
    "measure": {
      "localIdentifier": "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
    },
  },
}
`;

exports[`bear filter converter from model to AFM > convert measure value filter > should return null when condition is undefined 1`] = `null`;

exports[`bear filter converter from model to AFM > convert ranking filter > should return Ranking filter with 1 attribute 1`] = `
{
  "rankingFilter": {
    "attributes": [
      {
        "identifier": undefined,
      },
    ],
    "measures": [
      {
        "localIdentifier": "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
      },
    ],
    "operator": "TOP",
    "value": 10,
  },
}
`;

exports[`bear filter converter from model to AFM > convert ranking filter > should return Ranking filter with multiple attributes 1`] = `
{
  "rankingFilter": {
    "attributes": [
      {
        "identifier": undefined,
      },
      {
        "localIdentifier": "a_attr.f_account.account",
      },
    ],
    "measures": [
      {
        "localIdentifier": "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
      },
    ],
    "operator": "TOP",
    "value": 10,
  },
}
`;

exports[`bear filter converter from model to AFM > convert ranking filter > should return Ranking filter without attributes 1`] = `
{
  "rankingFilter": {
    "attributes": undefined,
    "measures": [
      {
        "localIdentifier": "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
      },
    ],
    "operator": "TOP",
    "value": 10,
  },
}
`;

exports[`bear filter converter from model to AFM > convert ranking filter > should return Ranking filter without attributes with bottom operator 1`] = `
{
  "rankingFilter": {
    "attributes": undefined,
    "measures": [
      {
        "localIdentifier": "m_87a053b0_3947_49f3_b0c5_de53fd01f050",
      },
    ],
    "operator": "BOTTOM",
    "value": 3,
  },
}
`;

exports[`bear filter converter from model to AFM > convert relative date filter > should return AFM relative date filter with date granularity 1`] = `
{
  "relativeDateFilter": {
    "dataSet": {
      "identifier": "dt_closedate_timestamp",
    },
    "from": -11,
    "granularity": "GDC.time.date",
    "to": 0,
  },
}
`;

exports[`bear filter converter from model to AFM > convert relative date filter > should return AFM relative date filter with month granularity 1`] = `
{
  "relativeDateFilter": {
    "dataSet": {
      "identifier": "dt_closedate_timestamp",
    },
    "from": -3,
    "granularity": "GDC.time.month",
    "to": 9,
  },
}
`;

exports[`bear filter converter from model to AFM > convert relative date filter > should return AFM relative date filter with quarter granularity 1`] = `
{
  "relativeDateFilter": {
    "dataSet": {
      "identifier": "dt_closedate_timestamp",
    },
    "from": 25,
    "granularity": "GDC.time.quarter",
    "to": -2,
  },
}
`;

exports[`bear filter converter from model to AFM > convert relative date filter > should return AFM relative date filter with week granularity 1`] = `
{
  "relativeDateFilter": {
    "dataSet": {
      "identifier": "dt_closedate_timestamp",
    },
    "from": 50,
    "granularity": "GDC.time.week_us",
    "to": 100,
  },
}
`;

exports[`bear filter converter from model to AFM > convert relative date filter > should return AFM relative date filter with year granularity 1`] = `
{
  "relativeDateFilter": {
    "dataSet": {
      "identifier": "dt_closedate_timestamp",
    },
    "from": 2,
    "granularity": "GDC.time.year",
    "to": 7,
  },
}
`;

exports[`bear filter converter from model to AFM > convert relative date filter > should return null when from is undefined 1`] = `null`;

exports[`bear filter converter from model to AFM > convert relative date filter > should return null when to is undefined 1`] = `
{
  "relativeDateFilter": {
    "dataSet": {
      "identifier": "dt_closedate_timestamp",
    },
    "from": 5,
    "granularity": "GDC.time.date",
    "to": NaN,
  },
}
`;
