// (C) 2007-2025 GoodData Corporation
@use "mixins";
@use "variables";
@use "layout";

/* ==========================================================================
   Messages
   ========================================================================== */

.gd-message-enter,
.gd-message-exit.gd-message-exit-active {
    opacity: 0;
    transition: opacity 0.22s ease-in;
}

.gd-message-enter.gd-message-enter-active,
.gd-message-exit {
    opacity: 1;
}

$gd-messages-space: 5px;
$gd-message-padding-vertical: 4px;

.gd-messages {
    position: fixed;
    z-index: 2;
    top: 30px;
    left: 50%;
    width: 90%;
    margin: 0;
    transform: translateX(-50%);
    pointer-events: none;
    max-width: 620px;
    text-align: center;

    @media #{variables.$small-only} {
        top: 30px;
    }
}

.gd-message-layout {
    margin: 15px 0 20px;
}

%gd-message-link {
    font: inherit;
    color: inherit;
    opacity: 0.85;
    cursor: pointer;

    @include mixins.active-states {
        color: inherit;
        opacity: 1;
    }
}

.gd-message-support {
    @extend %gd-message-link;

    margin-left: 10px;
    text-decoration: underline;
}

.gd-message-dismiss {
    @extend %gd-message-link;

    position: relative;
    padding: 0;
    margin-left: 10px;
    background: none;
    border: 0;
    box-shadow: none;
    height: 20px;

    @include mixins.active-states-and-self {
        text-decoration: none;
    }

    &::before {
        color: variables.$gd-color-text-light;
        font-size: 14px;
    }
}

/* ==========================================================================
   Messages
   ========================================================================== */

.gd-message {
    position: relative;
    box-sizing: border-box;
    display: inline-block;
    padding: $gd-message-padding-vertical 8px $gd-message-padding-vertical 10px;
    @include mixins.clearfix();

    line-height: 1.4em;
    pointer-events: all;
    max-width: 100%;
    font-family: variables.$gd-font-primary;
    font-size: 14px;
    text-align: left;

    --shadow-when-enabled: 0 4px 4px 0 var(--gd-shadow-color);

    a:not(.gd-message-dismiss),
    .gd-message-text-showmorelink {
        color: var(--local_linkButtonColor);
        text-decoration: underline;
    }

    .gd-message-dismiss::before {
        color: var(--local_closeButtonColor);
    }

    color: var(--local_textColor);
    background: var(--local_backgroundColor);
    border-style: solid;
    border-color: var(--local_borderColor);
    border-width: var(--local_borderWidth);
    border-radius: var(--local_borderRadius);
    box-shadow: var(--local_dropShadow, var(--shadow-when-enabled));

    &.contrast {
        &::before {
            content: "";
            position: absolute;
            z-index: -1;
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
            border-radius: inherit;
            background-color: variables.$gd-color-white;
        }
    }

    // Variables
    @mixin local-variables($messageType, $variant) {
        --local_textColor: var(--gd-#{$messageType}-#{$variant}-textColor);
        --local_backgroundColor: var(--gd-#{$messageType}-#{$variant}-backgroundColor);
        --local_borderColor: var(--gd-#{$messageType}-#{$variant}-borderColor);
        --local_borderWidth: var(--gd-#{$messageType}-#{$variant}-borderWidth);
        --local_borderRadius: var(--gd-#{$messageType}-#{$variant}-borderRadius);
        --local_dropShadow: var(--gd-#{$messageType}-#{$variant}-dropShadow);
        --local_linkButtonColor: var(--gd-#{$messageType}-#{$variant}-linkButtonColor);
        --local_closeButtonColor: var(--gd-#{$messageType}-#{$variant}-closeButtonColor);

        @if $messageType == "toastMessage" {
            --local_separatorLineColor: var(--gd-#{$messageType}-#{$variant}-separatorLineColor);
        }
    }
    @mixin local-variables-for-all-variants($messageType) {
        @each $variant in (progress, success, warning, error) {
            &.#{$variant} {
                @include local-variables($messageType, $variant);
            }
        }
    }

    @include local-variables-for-all-variants("message");

    &.gd-message-overlay,
    &.gd-message.intensive {
        @include local-variables-for-all-variants("toastMessage");
    }
}

.gd-message-overlay {
    margin: 0;
    border: 1px solid transparent;

    @include mixins.transition("opacity", 0.25s, "ease-in-out");

    &.is-hidden {
        opacity: 0;
    }

    .gd-message-text {
        display: flex;
        align-items: flex-start;

        > div {
            -ms-flex: 1 1 auto;
            flex: 1 1 auto;
        }

        .gd-message-support,
        &-header {
            margin: 0;
            padding: 5px 10px;
        }

        &-showmorelink {
            color: inherit;
            cursor: pointer;
            font-size: 13px;
            text-decoration: underline;
            padding-left: 5px;
            background-color: transparent;
            border: none;
        }

        &-content {
            padding-top: 5px;
            color: inherit;
            font-size: 13px;
            border-top: 1px solid var(--local_separatorLineColor);

            &.on {
                visibility: visible;
                overflow: auto;
                height: 100%;
                max-height: 100px;
            }

            &.off {
                visibility: hidden;
                height: 0;
                padding: 0;
            }
        }
    }
}
