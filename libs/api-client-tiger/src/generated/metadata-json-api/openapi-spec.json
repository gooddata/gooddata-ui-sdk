{
    "openapi": "3.0.1",
    "info": {
        "title": "OpenAPI definition",
        "version": "v0"
    },
    "servers": [
        {
            "url": "/",
            "description": "GoodData.CN endpoint"
        }
    ],
    "tags": [
        {
            "name": "entities",
            "description": "| interconnected resources representing application state (JSON:API)"
        },
        {
            "name": "layout",
            "description": "| all-in-one declarative interface (set [PUT] & read [GET] over JSON)"
        },
        {
            "name": "actions",
            "description": "| execution of some form of computation (RPC over JSON)"
        },
        {
            "name": "User management",
            "description": "Use case APIs for user management"
        }
    ],
    "paths": {
        "/api/v1/entities/admin/cookieSecurityConfigurations/{id}": {
            "get": {
                "tags": ["Cookie Security Configuration", "entities", "organization-controller"],
                "summary": "Get CookieSecurityConfiguration",
                "operationId": "getEntity@CookieSecurityConfigurations",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=lastRotation==InstantValue;rotationInterval==DurationValue"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiCookieSecurityConfigurationOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["Cookie Security Configuration", "entities", "organization-controller"],
                "summary": "Put CookieSecurityConfiguration",
                "operationId": "updateEntity@CookieSecurityConfigurations",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=lastRotation==InstantValue;rotationInterval==DurationValue"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiCookieSecurityConfigurationInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiCookieSecurityConfigurationOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": ["Cookie Security Configuration", "entities", "organization-controller"],
                "summary": "Patch CookieSecurityConfiguration",
                "operationId": "patchEntity@CookieSecurityConfigurations",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=lastRotation==InstantValue;rotationInterval==DurationValue"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiCookieSecurityConfigurationPatchDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiCookieSecurityConfigurationOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/entities/admin/organizations/{id}": {
            "get": {
                "tags": ["Organization - Entity APIs", "entities", "organization-controller"],
                "summary": "Get Organizations",
                "operationId": "getEntity@Organizations",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;hostname==someString;bootstrapUser.id==321;bootstrapUserGroup.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["users", "userGroups", "bootstrapUser", "bootstrapUserGroup", "ALL"]
                            }
                        },
                        "example": "include=bootstrapUser,bootstrapUserGroup"
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["permissions", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=permissions,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiOrganizationOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains permissions required to manipulate the Organization."
                }
            },
            "put": {
                "tags": ["Organization - Entity APIs", "entities", "organization-controller"],
                "summary": "Put Organization",
                "operationId": "updateEntity@Organizations",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;hostname==someString;bootstrapUser.id==321;bootstrapUserGroup.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["users", "userGroups", "bootstrapUser", "bootstrapUserGroup", "ALL"]
                            }
                        },
                        "example": "include=bootstrapUser,bootstrapUserGroup"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiOrganizationInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiOrganizationOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains permissions required to manipulate the Organization."
                }
            },
            "patch": {
                "tags": ["Organization - Entity APIs", "entities", "organization-controller"],
                "summary": "Patch Organization",
                "operationId": "patchEntity@Organizations",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;hostname==someString;bootstrapUser.id==321;bootstrapUserGroup.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["users", "userGroups", "bootstrapUser", "bootstrapUserGroup", "ALL"]
                            }
                        },
                        "example": "include=bootstrapUser,bootstrapUserGroup"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiOrganizationPatchDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiOrganizationOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains permissions required to manipulate the Organization."
                }
            }
        },
        "/api/v1/entities/colorPalettes": {
            "get": {
                "tags": ["Appearance", "entities", "organization-model-controller"],
                "summary": "Get all Color Pallettes",
                "operationId": "getAllEntities@ColorPalettes",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;content==JsonNodeValue"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/size"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["page", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=page,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiColorPaletteOutList"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Appearance", "entities", "organization-model-controller"],
                "summary": "Post Color Pallettes",
                "operationId": "createEntity@ColorPalettes",
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiColorPaletteInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiColorPaletteOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            }
        },
        "/api/v1/entities/colorPalettes/{id}": {
            "get": {
                "tags": ["Appearance", "entities", "organization-model-controller"],
                "summary": "Get Color Pallette",
                "operationId": "getEntity@ColorPalettes",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;content==JsonNodeValue"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiColorPaletteOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["Appearance", "entities", "organization-model-controller"],
                "summary": "Put Color Pallette",
                "operationId": "updateEntity@ColorPalettes",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;content==JsonNodeValue"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiColorPaletteInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiColorPaletteOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            },
            "delete": {
                "tags": ["Appearance", "entities", "organization-model-controller"],
                "summary": "Delete a Color Pallette",
                "operationId": "deleteEntity@ColorPalettes",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;content==JsonNodeValue"
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/Deleted"
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            },
            "patch": {
                "tags": ["Appearance", "entities", "organization-model-controller"],
                "summary": "Patch Color Pallette",
                "operationId": "patchEntity@ColorPalettes",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;content==JsonNodeValue"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiColorPalettePatchDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiColorPaletteOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            }
        },
        "/api/v1/entities/cspDirectives": {
            "get": {
                "tags": ["CSP Directives", "entities", "organization-model-controller"],
                "summary": "Get CSP Directives",
                "description": " Context Security Police Directive",
                "operationId": "getAllEntities@CspDirectives",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=sources==v1,v2,v3"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/size"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["page", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=page,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiCspDirectiveOutList"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["CSP Directives", "entities", "organization-model-controller"],
                "summary": "Post CSP Directives",
                "description": " Context Security Police Directive",
                "operationId": "createEntity@CspDirectives",
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiCspDirectiveInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiCspDirectiveOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/entities/cspDirectives/{id}": {
            "get": {
                "tags": ["CSP Directives", "entities", "organization-model-controller"],
                "summary": "Get CSP Directives",
                "description": " Context Security Police Directive",
                "operationId": "getEntity@CspDirectives",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=sources==v1,v2,v3"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiCspDirectiveOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["CSP Directives", "entities", "organization-model-controller"],
                "summary": "Put CSP Directives",
                "description": " Context Security Police Directive",
                "operationId": "updateEntity@CspDirectives",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=sources==v1,v2,v3"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiCspDirectiveInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiCspDirectiveOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["CSP Directives", "entities", "organization-model-controller"],
                "summary": "Delete CSP Directives",
                "description": " Context Security Police Directive",
                "operationId": "deleteEntity@CspDirectives",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=sources==v1,v2,v3"
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/Deleted"
                    }
                }
            },
            "patch": {
                "tags": ["CSP Directives", "entities", "organization-model-controller"],
                "summary": "Patch CSP Directives",
                "description": " Context Security Police Directive",
                "operationId": "patchEntity@CspDirectives",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=sources==v1,v2,v3"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiCspDirectivePatchDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiCspDirectiveOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/entities/dataSourceIdentifiers": {
            "get": {
                "tags": ["Data Source - Entity APIs", "entities", "organization-model-controller"],
                "summary": "Get all Data Source Identifiers",
                "operationId": "getAllEntities@DataSourceIdentifiers",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;schema==someString"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/size"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["permissions", "page", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=permissions,page,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiDataSourceIdentifierOutList"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["USE"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            }
        },
        "/api/v1/entities/dataSourceIdentifiers/{id}": {
            "get": {
                "tags": ["Data Source - Entity APIs", "entities", "organization-model-controller"],
                "summary": "Get Data Source Identifier",
                "operationId": "getEntity@DataSourceIdentifiers",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;schema==someString"
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["permissions", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=permissions,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiDataSourceIdentifierOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["USE"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            }
        },
        "/api/v1/entities/dataSources": {
            "get": {
                "tags": ["Data Source - Entity APIs", "entities", "organization-model-controller"],
                "summary": "Get Data Source entities",
                "description": "Data Source - represents data source for the workspace",
                "operationId": "getAllEntities@DataSources",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;type==DatabaseTypeValue"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/size"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["permissions", "page", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=permissions,page,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiDataSourceOutList"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            },
            "post": {
                "tags": ["Data Source - Entity APIs", "entities", "organization-model-controller"],
                "summary": "Post Data Sources",
                "description": "Data Source - represents data source for the workspace",
                "operationId": "createEntity@DataSources",
                "parameters": [
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["permissions", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=permissions,all"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiDataSourceInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiDataSourceOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            }
        },
        "/api/v1/entities/dataSources/{id}": {
            "get": {
                "tags": ["Data Source - Entity APIs", "entities", "organization-model-controller"],
                "summary": "Get Data Source entity",
                "description": "Data Source - represents data source for the workspace",
                "operationId": "getEntity@DataSources",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;type==DatabaseTypeValue"
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["permissions", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=permissions,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiDataSourceOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            },
            "put": {
                "tags": ["Data Source - Entity APIs", "entities", "organization-model-controller"],
                "summary": "Put Data Source entity",
                "description": "Data Source - represents data source for the workspace",
                "operationId": "updateEntity@DataSources",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;type==DatabaseTypeValue"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiDataSourceInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiDataSourceOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            },
            "delete": {
                "tags": ["Data Source - Entity APIs", "entities", "organization-model-controller"],
                "summary": "Delete Data Source entity",
                "description": "Data Source - represents data source for the workspace",
                "operationId": "deleteEntity@DataSources",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;type==DatabaseTypeValue"
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/Deleted"
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            },
            "patch": {
                "tags": ["Data Source - Entity APIs", "entities", "organization-model-controller"],
                "summary": "Patch Data Source entity",
                "description": "Data Source - represents data source for the workspace",
                "operationId": "patchEntity@DataSources",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;type==DatabaseTypeValue"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiDataSourcePatchDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiDataSourceOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            }
        },
        "/api/v1/entities/entitlements": {
            "get": {
                "tags": ["Entitlement", "entities", "organization-model-controller"],
                "summary": "Get Entitlements",
                "description": "Space of the shared interest",
                "operationId": "getAllEntities@Entitlements",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=value==someString;expiry==LocalDateValue"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/size"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["page", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=page,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiEntitlementOutList"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/entities/entitlements/{id}": {
            "get": {
                "tags": ["Entitlement", "entities", "organization-model-controller"],
                "summary": "Get Entitlement",
                "description": "Space of the shared interest",
                "operationId": "getEntity@Entitlements",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=value==someString;expiry==LocalDateValue"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiEntitlementOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/entities/jwks": {
            "get": {
                "tags": ["JWKS", "entities", "organization-model-controller"],
                "summary": "Get all Jwks",
                "description": "Returns all JSON web keys - used to verify JSON web tokens (Jwts)",
                "operationId": "getAllEntities@Jwks",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=content==JwkSpecificationValue"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/size"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["page", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=page,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiJwkOutList"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["JWKS", "entities", "organization-model-controller"],
                "summary": "Post Jwks",
                "description": "Creates JSON web key - used to verify JSON web tokens (Jwts)",
                "operationId": "createEntity@Jwks",
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiJwkInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiJwkOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/entities/jwks/{id}": {
            "get": {
                "tags": ["JWKS", "entities", "organization-model-controller"],
                "summary": "Get Jwk",
                "description": "Returns JSON web key - used to verify JSON web tokens (Jwts)",
                "operationId": "getEntity@Jwks",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=content==JwkSpecificationValue"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiJwkOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["JWKS", "entities", "organization-model-controller"],
                "summary": "Put Jwk",
                "description": "Updates JSON web key - used to verify JSON web tokens (Jwts)",
                "operationId": "updateEntity@Jwks",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=content==JwkSpecificationValue"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiJwkInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiJwkOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["JWKS", "entities", "organization-model-controller"],
                "summary": "Delete Jwk",
                "description": "Deletes JSON web key - used to verify JSON web tokens (Jwts)",
                "operationId": "deleteEntity@Jwks",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=content==JwkSpecificationValue"
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/Deleted"
                    }
                }
            },
            "patch": {
                "tags": ["JWKS", "entities", "organization-model-controller"],
                "summary": "Patch Jwk",
                "description": "Patches JSON web key - used to verify JSON web tokens (Jwts)",
                "operationId": "patchEntity@Jwks",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=content==JwkSpecificationValue"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiJwkPatchDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiJwkOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/entities/organizationSettings": {
            "get": {
                "tags": ["Organization - Entity APIs", "entities", "organization-model-controller"],
                "summary": "Get Organization entities",
                "operationId": "getAllEntities@OrganizationSettings",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=content==JsonNodeValue;type==SettingTypeValue"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/size"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["page", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=page,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiOrganizationSettingOutList"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Organization - Entity APIs", "entities", "organization-model-controller"],
                "summary": "Post Organization Setting entities",
                "operationId": "createEntity@OrganizationSettings",
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiOrganizationSettingInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiOrganizationSettingOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            }
        },
        "/api/v1/entities/organizationSettings/{id}": {
            "get": {
                "tags": ["Organization - Entity APIs", "entities", "organization-model-controller"],
                "summary": "Get Organization entity",
                "operationId": "getEntity@OrganizationSettings",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=content==JsonNodeValue;type==SettingTypeValue"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiOrganizationSettingOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["Organization - Entity APIs", "entities", "organization-model-controller"],
                "summary": "Put Organization entity",
                "operationId": "updateEntity@OrganizationSettings",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=content==JsonNodeValue;type==SettingTypeValue"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiOrganizationSettingInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiOrganizationSettingOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            },
            "delete": {
                "tags": ["Organization - Entity APIs", "entities", "organization-model-controller"],
                "summary": "Delete Organization entity",
                "operationId": "deleteEntity@OrganizationSettings",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=content==JsonNodeValue;type==SettingTypeValue"
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/Deleted"
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            },
            "patch": {
                "tags": ["Organization - Entity APIs", "entities", "organization-model-controller"],
                "summary": "Patch Organization entity",
                "operationId": "patchEntity@OrganizationSettings",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=content==JsonNodeValue;type==SettingTypeValue"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiOrganizationSettingPatchDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiOrganizationSettingOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            }
        },
        "/api/v1/entities/themes": {
            "get": {
                "tags": ["Appearance", "entities", "organization-model-controller"],
                "summary": "Get all Theming entities",
                "operationId": "getAllEntities@Themes",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;content==JsonNodeValue"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/size"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["page", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=page,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiThemeOutList"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Appearance", "entities", "organization-model-controller"],
                "summary": "Post Theming",
                "operationId": "createEntity@Themes",
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiThemeInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiThemeOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            }
        },
        "/api/v1/entities/themes/{id}": {
            "get": {
                "tags": ["Appearance", "entities", "organization-model-controller"],
                "summary": "Get Theming",
                "operationId": "getEntity@Themes",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;content==JsonNodeValue"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiThemeOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["Appearance", "entities", "organization-model-controller"],
                "summary": "Put Theming",
                "operationId": "updateEntity@Themes",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;content==JsonNodeValue"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiThemeInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiThemeOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            },
            "delete": {
                "tags": ["Appearance", "entities", "organization-model-controller"],
                "summary": "Delete Theming",
                "operationId": "deleteEntity@Themes",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;content==JsonNodeValue"
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/Deleted"
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            },
            "patch": {
                "tags": ["Appearance", "entities", "organization-model-controller"],
                "summary": "Patch Theming",
                "operationId": "patchEntity@Themes",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;content==JsonNodeValue"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiThemePatchDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiThemeOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            }
        },
        "/api/v1/entities/userGroups": {
            "get": {
                "tags": ["UserGroups - Entity APIs", "entities", "organization-model-controller"],
                "summary": "Get UserGroup entities",
                "description": "User Group - creates tree-like structure for categorizing users",
                "operationId": "getAllEntities@UserGroups",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["userGroups", "parents", "ALL"]
                            }
                        },
                        "example": "include=parents"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/size"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["page", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=page,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiUserGroupOutList"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            },
            "post": {
                "tags": ["UserGroups - Entity APIs", "entities", "organization-model-controller"],
                "summary": "Post User Group entities",
                "description": "User Group - creates tree-like structure for categorizing users",
                "operationId": "createEntity@UserGroups",
                "parameters": [
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["userGroups", "parents", "ALL"]
                            }
                        },
                        "example": "include=parents"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiUserGroupInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiUserGroupOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            }
        },
        "/api/v1/entities/userGroups/{id}": {
            "get": {
                "tags": ["UserGroups - Entity APIs", "entities", "organization-model-controller"],
                "summary": "Get UserGroup entity",
                "description": "User Group - creates tree-like structure for categorizing users",
                "operationId": "getEntity@UserGroups",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["userGroups", "parents", "ALL"]
                            }
                        },
                        "example": "include=parents"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiUserGroupOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            },
            "put": {
                "tags": ["UserGroups - Entity APIs", "entities", "organization-model-controller"],
                "summary": "Put UserGroup entity",
                "description": "User Group - creates tree-like structure for categorizing users",
                "operationId": "updateEntity@UserGroups",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["userGroups", "parents", "ALL"]
                            }
                        },
                        "example": "include=parents"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiUserGroupInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiUserGroupOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            },
            "delete": {
                "tags": ["UserGroups - Entity APIs", "entities", "organization-model-controller"],
                "summary": "Delete UserGroup entity",
                "description": "User Group - creates tree-like structure for categorizing users",
                "operationId": "deleteEntity@UserGroups",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString"
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/Deleted"
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            },
            "patch": {
                "tags": ["UserGroups - Entity APIs", "entities", "organization-model-controller"],
                "summary": "Patch UserGroup entity",
                "description": "User Group - creates tree-like structure for categorizing users",
                "operationId": "patchEntity@UserGroups",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["userGroups", "parents", "ALL"]
                            }
                        },
                        "example": "include=parents"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiUserGroupPatchDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiUserGroupOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            }
        },
        "/api/v1/entities/userIdentifiers": {
            "get": {
                "tags": ["User Identifiers", "entities", "organization-model-controller"],
                "summary": "Get UserIdentifier entities",
                "description": "UserIdentifier - represents entity interacting with platform",
                "operationId": "getAllEntities@UserIdentifiers",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=firstname==someString;lastname==someString"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/size"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["page", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=page,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiUserIdentifierOutList"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/entities/userIdentifiers/{id}": {
            "get": {
                "tags": ["User Identifiers", "entities", "organization-model-controller"],
                "summary": "Get UserIdentifier entity",
                "description": "UserIdentifier - represents basic information about entity interacting with platform",
                "operationId": "getEntity@UserIdentifiers",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=firstname==someString;lastname==someString"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiUserIdentifierOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/entities/users": {
            "get": {
                "tags": ["Users - Entity APIs", "entities", "organization-model-controller"],
                "summary": "Get User entities",
                "description": "User - represents entity interacting with platform",
                "operationId": "getAllEntities@Users",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=authenticationId==someString;firstname==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["userGroups", "ALL"]
                            }
                        },
                        "example": "include=userGroups"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/size"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["page", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=page,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiUserOutList"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            },
            "post": {
                "tags": ["Users - Entity APIs", "entities", "organization-model-controller"],
                "summary": "Post User entities",
                "description": "User - represents entity interacting with platform",
                "operationId": "createEntity@Users",
                "parameters": [
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["userGroups", "ALL"]
                            }
                        },
                        "example": "include=userGroups"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiUserInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiUserOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            }
        },
        "/api/v1/entities/users/{id}": {
            "get": {
                "tags": ["Users - Entity APIs", "entities", "organization-model-controller"],
                "summary": "Get User entity",
                "description": "User - represents entity interacting with platform",
                "operationId": "getEntity@Users",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=authenticationId==someString;firstname==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["userGroups", "ALL"]
                            }
                        },
                        "example": "include=userGroups"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiUserOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            },
            "put": {
                "tags": ["Users - Entity APIs", "entities", "organization-model-controller"],
                "summary": "Put User entity",
                "description": "User - represents entity interacting with platform",
                "operationId": "updateEntity@Users",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=authenticationId==someString;firstname==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["userGroups", "ALL"]
                            }
                        },
                        "example": "include=userGroups"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiUserInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiUserOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            },
            "delete": {
                "tags": ["Users - Entity APIs", "entities", "organization-model-controller"],
                "summary": "Delete User entity",
                "description": "User - represents entity interacting with platform",
                "operationId": "deleteEntity@Users",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=authenticationId==someString;firstname==someString"
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/Deleted"
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            },
            "patch": {
                "tags": ["Users - Entity APIs", "entities", "organization-model-controller"],
                "summary": "Patch User entity",
                "description": "User - represents entity interacting with platform",
                "operationId": "patchEntity@Users",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=authenticationId==someString;firstname==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["userGroups", "ALL"]
                            }
                        },
                        "example": "include=userGroups"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiUserPatchDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiUserOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            }
        },
        "/api/v1/entities/users/{userId}/apiTokens": {
            "get": {
                "tags": ["API tokens", "entities", "user-model-controller"],
                "summary": "List all api tokens for a user",
                "operationId": "getAllEntities@ApiTokens",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=bearerToken==someString"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/size"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["page", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=page,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiApiTokenOutList"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["API tokens", "entities", "user-model-controller"],
                "summary": "Post a new API token for the user",
                "operationId": "createEntity@ApiTokens",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiApiTokenInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiApiTokenOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/entities/users/{userId}/apiTokens/{id}": {
            "get": {
                "tags": ["API tokens", "entities", "user-model-controller"],
                "summary": "Get an API Token for a user",
                "operationId": "getEntity@ApiTokens",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=bearerToken==someString"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiApiTokenOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["API tokens", "entities", "user-model-controller"],
                "summary": "Delete an API Token for a user",
                "operationId": "deleteEntity@ApiTokens",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=bearerToken==someString"
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/Deleted"
                    }
                }
            }
        },
        "/api/v1/entities/users/{userId}/userSettings": {
            "get": {
                "tags": ["User Settings", "entities", "user-model-controller"],
                "summary": "List all settings for a user",
                "operationId": "getAllEntities@UserSettings",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=content==JsonNodeValue;type==SettingTypeValue"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/size"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["page", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=page,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiUserSettingOutList"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["User Settings", "entities", "user-model-controller"],
                "summary": "Post new user settings for the user",
                "operationId": "createEntity@UserSettings",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiUserSettingInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiUserSettingOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/entities/users/{userId}/userSettings/{id}": {
            "get": {
                "tags": ["User Settings", "entities", "user-model-controller"],
                "summary": "Get a setting for a user",
                "operationId": "getEntity@UserSettings",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=content==JsonNodeValue;type==SettingTypeValue"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiUserSettingOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["User Settings", "entities", "user-model-controller"],
                "summary": "Put new user settings for the user",
                "operationId": "updateEntity@UserSettings",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=content==JsonNodeValue;type==SettingTypeValue"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiUserSettingInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiUserSettingOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["User Settings", "entities", "user-model-controller"],
                "summary": "Delete a setting for a user",
                "operationId": "deleteEntity@UserSettings",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=content==JsonNodeValue;type==SettingTypeValue"
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/Deleted"
                    }
                }
            }
        },
        "/api/v1/entities/workspaces": {
            "get": {
                "tags": ["Workspaces - Entity APIs", "entities", "organization-model-controller"],
                "summary": "Get Workspace entities",
                "description": "Space of the shared interest",
                "operationId": "getAllEntities@Workspaces",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;earlyAccess==someString;parent.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["workspaces", "parent", "ALL"]
                            }
                        },
                        "example": "include=parent"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/size"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "config",
                                    "permissions",
                                    "hierarchy",
                                    "dataModelDatasets",
                                    "page",
                                    "all",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "metaInclude=config,permissions,hierarchy,dataModelDatasets,page,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceOutList"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["VIEW"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            },
            "post": {
                "tags": ["Workspaces - Entity APIs", "entities", "organization-model-controller"],
                "summary": "Post Workspace entities",
                "description": "Space of the shared interest",
                "operationId": "createEntity@Workspaces",
                "parameters": [
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["workspaces", "parent", "ALL"]
                            }
                        },
                        "example": "include=parent"
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "config",
                                    "permissions",
                                    "hierarchy",
                                    "dataModelDatasets",
                                    "all",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "metaInclude=config,permissions,hierarchy,dataModelDatasets,all"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiWorkspaceInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            }
        },
        "/api/v1/entities/workspaces/{id}": {
            "get": {
                "tags": ["Workspaces - Entity APIs", "entities", "organization-model-controller"],
                "summary": "Get Workspace entity",
                "description": "Space of the shared interest",
                "operationId": "getEntity@Workspaces",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;earlyAccess==someString;parent.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["workspaces", "parent", "ALL"]
                            }
                        },
                        "example": "include=parent"
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "config",
                                    "permissions",
                                    "hierarchy",
                                    "dataModelDatasets",
                                    "all",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "metaInclude=config,permissions,hierarchy,dataModelDatasets,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["VIEW"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            },
            "put": {
                "tags": ["Workspaces - Entity APIs", "entities", "organization-model-controller"],
                "summary": "Put Workspace entity",
                "description": "Space of the shared interest",
                "operationId": "updateEntity@Workspaces",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;earlyAccess==someString;parent.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["workspaces", "parent", "ALL"]
                            }
                        },
                        "example": "include=parent"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiWorkspaceInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            },
            "delete": {
                "tags": ["Workspaces - Entity APIs", "entities", "organization-model-controller"],
                "summary": "Delete Workspace entity",
                "description": "Space of the shared interest",
                "operationId": "deleteEntity@Workspaces",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;earlyAccess==someString;parent.id==321"
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/Deleted"
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            },
            "patch": {
                "tags": ["Workspaces - Entity APIs", "entities", "organization-model-controller"],
                "summary": "Patch Workspace entity",
                "description": "Space of the shared interest",
                "operationId": "patchEntity@Workspaces",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/idPathParameter"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;earlyAccess==someString;parent.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["workspaces", "parent", "ALL"]
                            }
                        },
                        "example": "include=parent"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiWorkspacePatchDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            }
        },
        "/api/v1/entities/workspaces/{workspaceId}/analyticalDashboards": {
            "get": {
                "tags": ["Dashboards", "entities", "workspace-object-controller"],
                "summary": "Get all Dashboards",
                "operationId": "getAllEntities@AnalyticalDashboards",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "origin",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Defines scope of origin of objects. All by default.",
                            "default": "ALL",
                            "enum": ["ALL", "PARENTS", "NATIVE"]
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "userIdentifiers",
                                    "visualizationObjects",
                                    "analyticalDashboards",
                                    "labels",
                                    "metrics",
                                    "datasets",
                                    "filterContexts",
                                    "dashboardPlugins",
                                    "createdBy",
                                    "modifiedBy",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "include=createdBy,modifiedBy,visualizationObjects,analyticalDashboards,labels,metrics,datasets,filterContexts,dashboardPlugins"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/size"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["permissions", "origin", "accessInfo", "page", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=permissions,origin,accessInfo,page,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutList"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["VIEW"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            },
            "post": {
                "tags": ["Dashboards", "entities", "workspace-object-controller"],
                "summary": "Post Dashboards",
                "operationId": "createEntity@AnalyticalDashboards",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "userIdentifiers",
                                    "visualizationObjects",
                                    "analyticalDashboards",
                                    "labels",
                                    "metrics",
                                    "datasets",
                                    "filterContexts",
                                    "dashboardPlugins",
                                    "createdBy",
                                    "modifiedBy",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "include=createdBy,modifiedBy,visualizationObjects,analyticalDashboards,labels,metrics,datasets,filterContexts,dashboardPlugins"
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["permissions", "origin", "accessInfo", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=permissions,origin,accessInfo,all"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiAnalyticalDashboardPostOptionalIdDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["ANALYZE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            }
        },
        "/api/v1/entities/workspaces/{workspaceId}/analyticalDashboards/{objectId}": {
            "get": {
                "tags": ["Dashboards", "entities", "workspace-object-controller"],
                "summary": "Get a Dashboard",
                "operationId": "getEntity@AnalyticalDashboards",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "userIdentifiers",
                                    "visualizationObjects",
                                    "analyticalDashboards",
                                    "labels",
                                    "metrics",
                                    "datasets",
                                    "filterContexts",
                                    "dashboardPlugins",
                                    "createdBy",
                                    "modifiedBy",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "include=createdBy,modifiedBy,visualizationObjects,analyticalDashboards,labels,metrics,datasets,filterContexts,dashboardPlugins"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["permissions", "origin", "accessInfo", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=permissions,origin,accessInfo,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["VIEW"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            },
            "put": {
                "tags": ["Dashboards", "entities", "workspace-object-controller"],
                "summary": "Put Dashboards",
                "operationId": "updateEntity@AnalyticalDashboards",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "userIdentifiers",
                                    "visualizationObjects",
                                    "analyticalDashboards",
                                    "labels",
                                    "metrics",
                                    "datasets",
                                    "filterContexts",
                                    "dashboardPlugins",
                                    "createdBy",
                                    "modifiedBy",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "include=createdBy,modifiedBy,visualizationObjects,analyticalDashboards,labels,metrics,datasets,filterContexts,dashboardPlugins"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiAnalyticalDashboardInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["ANALYZE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            },
            "delete": {
                "tags": ["Dashboards", "entities", "workspace-object-controller"],
                "summary": "Delete a Dashboard",
                "operationId": "deleteEntity@AnalyticalDashboards",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321"
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/Deleted"
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["ANALYZE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            },
            "patch": {
                "tags": ["Dashboards", "entities", "workspace-object-controller"],
                "summary": "Patch a Dashboard",
                "operationId": "patchEntity@AnalyticalDashboards",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "userIdentifiers",
                                    "visualizationObjects",
                                    "analyticalDashboards",
                                    "labels",
                                    "metrics",
                                    "datasets",
                                    "filterContexts",
                                    "dashboardPlugins",
                                    "createdBy",
                                    "modifiedBy",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "include=createdBy,modifiedBy,visualizationObjects,analyticalDashboards,labels,metrics,datasets,filterContexts,dashboardPlugins"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiAnalyticalDashboardPatchDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["ANALYZE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            }
        },
        "/api/v1/entities/workspaces/{workspaceId}/attributeHierarchies": {
            "get": {
                "tags": ["Attribute Hierarchies", "entities", "workspace-object-controller"],
                "summary": "Get all Attribute Hierarchies",
                "operationId": "getAllEntities@AttributeHierarchies",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "origin",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Defines scope of origin of objects. All by default.",
                            "default": "ALL",
                            "enum": ["ALL", "PARENTS", "NATIVE"]
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["userIdentifiers", "attributes", "createdBy", "modifiedBy", "ALL"]
                            }
                        },
                        "example": "include=createdBy,modifiedBy,attributes"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/size"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "page", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,page,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiAttributeHierarchyOutList"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["VIEW"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            },
            "post": {
                "tags": ["Attribute Hierarchies", "entities", "workspace-object-controller"],
                "summary": "Post Attribute Hierarchies",
                "operationId": "createEntity@AttributeHierarchies",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["userIdentifiers", "attributes", "createdBy", "modifiedBy", "ALL"]
                            }
                        },
                        "example": "include=createdBy,modifiedBy,attributes"
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,all"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiAttributeHierarchyInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiAttributeHierarchyOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["ANALYZE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            }
        },
        "/api/v1/entities/workspaces/{workspaceId}/attributeHierarchies/{objectId}": {
            "get": {
                "tags": ["Attribute Hierarchies", "entities", "workspace-object-controller"],
                "summary": "Get an Attribute Hierarchy",
                "operationId": "getEntity@AttributeHierarchies",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["userIdentifiers", "attributes", "createdBy", "modifiedBy", "ALL"]
                            }
                        },
                        "example": "include=createdBy,modifiedBy,attributes"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiAttributeHierarchyOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["VIEW"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            },
            "put": {
                "tags": ["Attribute Hierarchies", "entities", "workspace-object-controller"],
                "summary": "Put an Attribute Hierarchy",
                "operationId": "updateEntity@AttributeHierarchies",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["userIdentifiers", "attributes", "createdBy", "modifiedBy", "ALL"]
                            }
                        },
                        "example": "include=createdBy,modifiedBy,attributes"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiAttributeHierarchyInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiAttributeHierarchyOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["ANALYZE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            },
            "delete": {
                "tags": ["Attribute Hierarchies", "entities", "workspace-object-controller"],
                "summary": "Delete an Attribute Hierarchy",
                "operationId": "deleteEntity@AttributeHierarchies",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321"
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/Deleted"
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["ANALYZE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            },
            "patch": {
                "tags": ["Attribute Hierarchies", "entities", "workspace-object-controller"],
                "summary": "Patch an Attribute Hierarchy",
                "operationId": "patchEntity@AttributeHierarchies",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["userIdentifiers", "attributes", "createdBy", "modifiedBy", "ALL"]
                            }
                        },
                        "example": "include=createdBy,modifiedBy,attributes"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiAttributeHierarchyPatchDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiAttributeHierarchyOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["ANALYZE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            }
        },
        "/api/v1/entities/workspaces/{workspaceId}/attributes": {
            "get": {
                "tags": ["Attributes", "entities", "workspace-object-controller"],
                "summary": "Get all Attributes",
                "operationId": "getAllEntities@Attributes",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "origin",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Defines scope of origin of objects. All by default.",
                            "default": "ALL",
                            "enum": ["ALL", "PARENTS", "NATIVE"]
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;dataset.id==321;defaultView.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "datasets",
                                    "labels",
                                    "attributeHierarchies",
                                    "dataset",
                                    "defaultView",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "include=dataset,defaultView,labels,attributeHierarchies"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/size"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "page", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,page,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiAttributeOutList"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/entities/workspaces/{workspaceId}/attributes/{objectId}": {
            "get": {
                "tags": ["Attributes", "entities", "workspace-object-controller"],
                "summary": "Get an Attribute",
                "operationId": "getEntity@Attributes",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;dataset.id==321;defaultView.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "datasets",
                                    "labels",
                                    "attributeHierarchies",
                                    "dataset",
                                    "defaultView",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "include=dataset,defaultView,labels,attributeHierarchies"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiAttributeOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/entities/workspaces/{workspaceId}/customApplicationSettings": {
            "get": {
                "tags": ["Workspaces - Settings", "entities", "workspace-object-controller"],
                "summary": "Get all Custom Application Settings",
                "operationId": "getAllEntities@CustomApplicationSettings",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "origin",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Defines scope of origin of objects. All by default.",
                            "default": "ALL",
                            "enum": ["ALL", "PARENTS", "NATIVE"]
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=applicationName==someString;content==JsonNodeValue"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/size"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "page", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,page,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiCustomApplicationSettingOutList"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["VIEW"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            },
            "post": {
                "tags": ["Workspaces - Settings", "entities", "workspace-object-controller"],
                "summary": "Post Custom Application Settings",
                "operationId": "createEntity@CustomApplicationSettings",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,all"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiCustomApplicationSettingPostOptionalIdDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiCustomApplicationSettingOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/entities/workspaces/{workspaceId}/customApplicationSettings/{objectId}": {
            "get": {
                "tags": ["Workspaces - Settings", "entities", "workspace-object-controller"],
                "summary": "Get a Custom Application Setting",
                "operationId": "getEntity@CustomApplicationSettings",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=applicationName==someString;content==JsonNodeValue"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiCustomApplicationSettingOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["VIEW"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            },
            "put": {
                "tags": ["Workspaces - Settings", "entities", "workspace-object-controller"],
                "summary": "Put a Custom Application Setting",
                "operationId": "updateEntity@CustomApplicationSettings",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=applicationName==someString;content==JsonNodeValue"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiCustomApplicationSettingInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiCustomApplicationSettingOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Workspaces - Settings", "entities", "workspace-object-controller"],
                "summary": "Delete a Custom Application Setting",
                "operationId": "deleteEntity@CustomApplicationSettings",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=applicationName==someString;content==JsonNodeValue"
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/Deleted"
                    }
                }
            },
            "patch": {
                "tags": ["Workspaces - Settings", "entities", "workspace-object-controller"],
                "summary": "Patch a Custom Application Setting",
                "operationId": "patchEntity@CustomApplicationSettings",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=applicationName==someString;content==JsonNodeValue"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiCustomApplicationSettingPatchDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiCustomApplicationSettingOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/entities/workspaces/{workspaceId}/dashboardPlugins": {
            "get": {
                "tags": ["Plugins", "entities", "workspace-object-controller"],
                "summary": "Get all Plugins",
                "operationId": "getAllEntities@DashboardPlugins",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "origin",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Defines scope of origin of objects. All by default.",
                            "default": "ALL",
                            "enum": ["ALL", "PARENTS", "NATIVE"]
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["userIdentifiers", "createdBy", "modifiedBy", "ALL"]
                            }
                        },
                        "example": "include=createdBy,modifiedBy"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/size"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "page", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,page,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiDashboardPluginOutList"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["VIEW"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            },
            "post": {
                "tags": ["Plugins", "entities", "workspace-object-controller"],
                "summary": "Post Plugins",
                "operationId": "createEntity@DashboardPlugins",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["userIdentifiers", "createdBy", "modifiedBy", "ALL"]
                            }
                        },
                        "example": "include=createdBy,modifiedBy"
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,all"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiDashboardPluginPostOptionalIdDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiDashboardPluginOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["ANALYZE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            }
        },
        "/api/v1/entities/workspaces/{workspaceId}/dashboardPlugins/{objectId}": {
            "get": {
                "tags": ["Plugins", "entities", "workspace-object-controller"],
                "summary": "Get a Plugin",
                "operationId": "getEntity@DashboardPlugins",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["userIdentifiers", "createdBy", "modifiedBy", "ALL"]
                            }
                        },
                        "example": "include=createdBy,modifiedBy"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiDashboardPluginOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["VIEW"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            },
            "put": {
                "tags": ["Plugins", "entities", "workspace-object-controller"],
                "summary": "Put a Plugin",
                "operationId": "updateEntity@DashboardPlugins",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["userIdentifiers", "createdBy", "modifiedBy", "ALL"]
                            }
                        },
                        "example": "include=createdBy,modifiedBy"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiDashboardPluginInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiDashboardPluginOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["ANALYZE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            },
            "delete": {
                "tags": ["Plugins", "entities", "workspace-object-controller"],
                "summary": "Delete a Plugin",
                "operationId": "deleteEntity@DashboardPlugins",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321"
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/Deleted"
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["ANALYZE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            },
            "patch": {
                "tags": ["Plugins", "entities", "workspace-object-controller"],
                "summary": "Patch a Plugin",
                "operationId": "patchEntity@DashboardPlugins",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["userIdentifiers", "createdBy", "modifiedBy", "ALL"]
                            }
                        },
                        "example": "include=createdBy,modifiedBy"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiDashboardPluginPatchDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiDashboardPluginOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["ANALYZE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            }
        },
        "/api/v1/entities/workspaces/{workspaceId}/datasets": {
            "get": {
                "tags": ["Datasets", "entities", "workspace-object-controller"],
                "summary": "Get all Datasets",
                "operationId": "getAllEntities@Datasets",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "origin",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Defines scope of origin of objects. All by default.",
                            "default": "ALL",
                            "enum": ["ALL", "PARENTS", "NATIVE"]
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "attributes",
                                    "facts",
                                    "datasets",
                                    "workspaceDataFilters",
                                    "references",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "include=attributes,facts,references,workspaceDataFilters"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/size"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "page", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,page,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiDatasetOutList"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/entities/workspaces/{workspaceId}/datasets/{objectId}": {
            "get": {
                "tags": ["Datasets", "entities", "workspace-object-controller"],
                "summary": "Get a Dataset",
                "operationId": "getEntity@Datasets",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "attributes",
                                    "facts",
                                    "datasets",
                                    "workspaceDataFilters",
                                    "references",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "include=attributes,facts,references,workspaceDataFilters"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiDatasetOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/entities/workspaces/{workspaceId}/exportDefinitions": {
            "get": {
                "tags": ["entities", "workspace-object-controller"],
                "operationId": "getAllEntities@ExportDefinitions",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "origin",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Defines scope of origin of objects. All by default.",
                            "default": "ALL",
                            "enum": ["ALL", "PARENTS", "NATIVE"]
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;visualizationObject.id==321;createdBy.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "visualizationObjects",
                                    "userIdentifiers",
                                    "visualizationObject",
                                    "createdBy",
                                    "modifiedBy",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "include=visualizationObject,createdBy,modifiedBy"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/size"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["page", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=page,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiExportDefinitionOutList"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["entities", "workspace-object-controller"],
                "summary": "Post Export Definitions",
                "operationId": "createEntity@ExportDefinitions",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "visualizationObjects",
                                    "userIdentifiers",
                                    "visualizationObject",
                                    "createdBy",
                                    "modifiedBy",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "include=visualizationObject,createdBy,modifiedBy"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiExportDefinitionInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiExportDefinitionOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/entities/workspaces/{workspaceId}/exportDefinitions/{objectId}": {
            "get": {
                "tags": ["entities", "workspace-object-controller"],
                "operationId": "getEntity@ExportDefinitions",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;visualizationObject.id==321;createdBy.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "visualizationObjects",
                                    "userIdentifiers",
                                    "visualizationObject",
                                    "createdBy",
                                    "modifiedBy",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "include=visualizationObject,createdBy,modifiedBy"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiExportDefinitionOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["entities", "workspace-object-controller"],
                "operationId": "updateEntity@ExportDefinitions",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;visualizationObject.id==321;createdBy.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "visualizationObjects",
                                    "userIdentifiers",
                                    "visualizationObject",
                                    "createdBy",
                                    "modifiedBy",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "include=visualizationObject,createdBy,modifiedBy"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiExportDefinitionInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiExportDefinitionOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["entities", "workspace-object-controller"],
                "operationId": "deleteEntity@ExportDefinitions",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;visualizationObject.id==321;createdBy.id==321"
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/Deleted"
                    }
                }
            },
            "patch": {
                "tags": ["entities", "workspace-object-controller"],
                "operationId": "patchEntity@ExportDefinitions",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;visualizationObject.id==321;createdBy.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "visualizationObjects",
                                    "userIdentifiers",
                                    "visualizationObject",
                                    "createdBy",
                                    "modifiedBy",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "include=visualizationObject,createdBy,modifiedBy"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiExportDefinitionPatchDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiExportDefinitionOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/entities/workspaces/{workspaceId}/facts": {
            "get": {
                "tags": ["Facts", "entities", "workspace-object-controller"],
                "summary": "Get all Facts",
                "operationId": "getAllEntities@Facts",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "origin",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Defines scope of origin of objects. All by default.",
                            "default": "ALL",
                            "enum": ["ALL", "PARENTS", "NATIVE"]
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;dataset.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["datasets", "dataset", "ALL"]
                            }
                        },
                        "example": "include=dataset"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/size"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "page", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,page,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiFactOutList"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["VIEW"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            }
        },
        "/api/v1/entities/workspaces/{workspaceId}/facts/{objectId}": {
            "get": {
                "tags": ["Facts", "entities", "workspace-object-controller"],
                "summary": "Get a Fact",
                "operationId": "getEntity@Facts",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;dataset.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["datasets", "dataset", "ALL"]
                            }
                        },
                        "example": "include=dataset"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiFactOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["VIEW"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            }
        },
        "/api/v1/entities/workspaces/{workspaceId}/filterContexts": {
            "get": {
                "tags": ["Context Filters", "entities", "workspace-object-controller"],
                "summary": "Get all Context Filters",
                "operationId": "getAllEntities@FilterContexts",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "origin",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Defines scope of origin of objects. All by default.",
                            "default": "ALL",
                            "enum": ["ALL", "PARENTS", "NATIVE"]
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["attributes", "datasets", "labels", "ALL"]
                            }
                        },
                        "example": "include=attributes,datasets,labels"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/size"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "page", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,page,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiFilterContextOutList"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["VIEW"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            },
            "post": {
                "tags": ["Context Filters", "entities", "workspace-object-controller"],
                "summary": "Post Context Filters",
                "operationId": "createEntity@FilterContexts",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["attributes", "datasets", "labels", "ALL"]
                            }
                        },
                        "example": "include=attributes,datasets,labels"
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,all"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiFilterContextPostOptionalIdDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiFilterContextOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["ANALYZE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            }
        },
        "/api/v1/entities/workspaces/{workspaceId}/filterContexts/{objectId}": {
            "get": {
                "tags": ["Context Filters", "entities", "workspace-object-controller"],
                "summary": "Get a Context Filter",
                "operationId": "getEntity@FilterContexts",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["attributes", "datasets", "labels", "ALL"]
                            }
                        },
                        "example": "include=attributes,datasets,labels"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiFilterContextOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["VIEW"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            },
            "put": {
                "tags": ["Context Filters", "entities", "workspace-object-controller"],
                "summary": "Put a Context Filter",
                "operationId": "updateEntity@FilterContexts",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["attributes", "datasets", "labels", "ALL"]
                            }
                        },
                        "example": "include=attributes,datasets,labels"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiFilterContextInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiFilterContextOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["ANALYZE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            },
            "delete": {
                "tags": ["Context Filters", "entities", "workspace-object-controller"],
                "summary": "Delete a Context Filter",
                "operationId": "deleteEntity@FilterContexts",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/Deleted"
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["ANALYZE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            },
            "patch": {
                "tags": ["Context Filters", "entities", "workspace-object-controller"],
                "summary": "Patch a Context Filter",
                "operationId": "patchEntity@FilterContexts",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["attributes", "datasets", "labels", "ALL"]
                            }
                        },
                        "example": "include=attributes,datasets,labels"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiFilterContextPatchDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiFilterContextOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["ANALYZE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            }
        },
        "/api/v1/entities/workspaces/{workspaceId}/labels": {
            "get": {
                "tags": ["Labels", "entities", "workspace-object-controller"],
                "summary": "Get all Labels",
                "operationId": "getAllEntities@Labels",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "origin",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Defines scope of origin of objects. All by default.",
                            "default": "ALL",
                            "enum": ["ALL", "PARENTS", "NATIVE"]
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;attribute.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["attributes", "attribute", "ALL"]
                            }
                        },
                        "example": "include=attribute"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/size"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "page", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,page,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiLabelOutList"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["VIEW"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            }
        },
        "/api/v1/entities/workspaces/{workspaceId}/labels/{objectId}": {
            "get": {
                "tags": ["Labels", "entities", "workspace-object-controller"],
                "summary": "Get a Label",
                "operationId": "getEntity@Labels",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;attribute.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["attributes", "attribute", "ALL"]
                            }
                        },
                        "example": "include=attribute"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiLabelOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["VIEW"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            }
        },
        "/api/v1/entities/workspaces/{workspaceId}/metrics": {
            "get": {
                "tags": ["Metrics", "entities", "workspace-object-controller"],
                "summary": "Get all Metrics",
                "operationId": "getAllEntities@Metrics",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "origin",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Defines scope of origin of objects. All by default.",
                            "default": "ALL",
                            "enum": ["ALL", "PARENTS", "NATIVE"]
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "userIdentifiers",
                                    "facts",
                                    "attributes",
                                    "labels",
                                    "metrics",
                                    "datasets",
                                    "createdBy",
                                    "modifiedBy",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "include=createdBy,modifiedBy,facts,attributes,labels,metrics,datasets"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/size"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "page", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,page,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiMetricOutList"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["VIEW"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            },
            "post": {
                "tags": ["Metrics", "entities", "workspace-object-controller"],
                "summary": "Post Metrics",
                "operationId": "createEntity@Metrics",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "userIdentifiers",
                                    "facts",
                                    "attributes",
                                    "labels",
                                    "metrics",
                                    "datasets",
                                    "createdBy",
                                    "modifiedBy",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "include=createdBy,modifiedBy,facts,attributes,labels,metrics,datasets"
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,all"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiMetricPostOptionalIdDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiMetricOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            }
        },
        "/api/v1/entities/workspaces/{workspaceId}/metrics/{objectId}": {
            "get": {
                "tags": ["Metrics", "entities", "workspace-object-controller"],
                "summary": "Get a Metric",
                "operationId": "getEntity@Metrics",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "userIdentifiers",
                                    "facts",
                                    "attributes",
                                    "labels",
                                    "metrics",
                                    "datasets",
                                    "createdBy",
                                    "modifiedBy",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "include=createdBy,modifiedBy,facts,attributes,labels,metrics,datasets"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiMetricOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["VIEW"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            },
            "put": {
                "tags": ["Metrics", "entities", "workspace-object-controller"],
                "summary": "Put a Metric",
                "operationId": "updateEntity@Metrics",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "userIdentifiers",
                                    "facts",
                                    "attributes",
                                    "labels",
                                    "metrics",
                                    "datasets",
                                    "createdBy",
                                    "modifiedBy",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "include=createdBy,modifiedBy,facts,attributes,labels,metrics,datasets"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiMetricInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiMetricOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            },
            "delete": {
                "tags": ["Metrics", "entities", "workspace-object-controller"],
                "summary": "Delete a Metric",
                "operationId": "deleteEntity@Metrics",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321"
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/Deleted"
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            },
            "patch": {
                "tags": ["Metrics", "entities", "workspace-object-controller"],
                "summary": "Patch a Metric",
                "operationId": "patchEntity@Metrics",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "userIdentifiers",
                                    "facts",
                                    "attributes",
                                    "labels",
                                    "metrics",
                                    "datasets",
                                    "createdBy",
                                    "modifiedBy",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "include=createdBy,modifiedBy,facts,attributes,labels,metrics,datasets"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiMetricPatchDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiMetricOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            }
        },
        "/api/v1/entities/workspaces/{workspaceId}/userDataFilters": {
            "get": {
                "tags": ["Data Filters", "entities", "workspace-object-controller"],
                "summary": "Get all User Data Filters",
                "operationId": "getAllEntities@UserDataFilters",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "origin",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Defines scope of origin of objects. All by default.",
                            "default": "ALL",
                            "enum": ["ALL", "PARENTS", "NATIVE"]
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;user.id==321;userGroup.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "users",
                                    "userGroups",
                                    "facts",
                                    "attributes",
                                    "labels",
                                    "metrics",
                                    "datasets",
                                    "user",
                                    "userGroup",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "include=user,userGroup,facts,attributes,labels,metrics,datasets"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/size"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "page", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,page,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiUserDataFilterOutList"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Data Filters", "entities", "workspace-object-controller"],
                "summary": "Post User Data Filters",
                "operationId": "createEntity@UserDataFilters",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "users",
                                    "userGroups",
                                    "facts",
                                    "attributes",
                                    "labels",
                                    "metrics",
                                    "datasets",
                                    "user",
                                    "userGroup",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "include=user,userGroup,facts,attributes,labels,metrics,datasets"
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,all"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiUserDataFilterPostOptionalIdDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiUserDataFilterOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/entities/workspaces/{workspaceId}/userDataFilters/{objectId}": {
            "get": {
                "tags": ["Data Filters", "entities", "workspace-object-controller"],
                "summary": "Get a User Data Filter",
                "operationId": "getEntity@UserDataFilters",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;user.id==321;userGroup.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "users",
                                    "userGroups",
                                    "facts",
                                    "attributes",
                                    "labels",
                                    "metrics",
                                    "datasets",
                                    "user",
                                    "userGroup",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "include=user,userGroup,facts,attributes,labels,metrics,datasets"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiUserDataFilterOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["Data Filters", "entities", "workspace-object-controller"],
                "summary": "Put a User Data Filter",
                "operationId": "updateEntity@UserDataFilters",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;user.id==321;userGroup.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "users",
                                    "userGroups",
                                    "facts",
                                    "attributes",
                                    "labels",
                                    "metrics",
                                    "datasets",
                                    "user",
                                    "userGroup",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "include=user,userGroup,facts,attributes,labels,metrics,datasets"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiUserDataFilterInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiUserDataFilterOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Data Filters", "entities", "workspace-object-controller"],
                "summary": "Delete a User Data Filter",
                "operationId": "deleteEntity@UserDataFilters",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;user.id==321;userGroup.id==321"
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/Deleted"
                    }
                }
            },
            "patch": {
                "tags": ["Data Filters", "entities", "workspace-object-controller"],
                "summary": "Patch a User Data Filter",
                "operationId": "patchEntity@UserDataFilters",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;user.id==321;userGroup.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "users",
                                    "userGroups",
                                    "facts",
                                    "attributes",
                                    "labels",
                                    "metrics",
                                    "datasets",
                                    "user",
                                    "userGroup",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "include=user,userGroup,facts,attributes,labels,metrics,datasets"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiUserDataFilterPatchDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiUserDataFilterOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/entities/workspaces/{workspaceId}/visualizationObjects": {
            "get": {
                "tags": ["Visualization Object", "entities", "workspace-object-controller"],
                "summary": "Get all Visualization Objects",
                "operationId": "getAllEntities@VisualizationObjects",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "origin",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Defines scope of origin of objects. All by default.",
                            "default": "ALL",
                            "enum": ["ALL", "PARENTS", "NATIVE"]
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "userIdentifiers",
                                    "facts",
                                    "attributes",
                                    "labels",
                                    "metrics",
                                    "datasets",
                                    "createdBy",
                                    "modifiedBy",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "include=createdBy,modifiedBy,facts,attributes,labels,metrics,datasets"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/size"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "page", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,page,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiVisualizationObjectOutList"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["VIEW"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            },
            "post": {
                "tags": ["Visualization Object", "entities", "workspace-object-controller"],
                "summary": "Post Visualization Objects",
                "operationId": "createEntity@VisualizationObjects",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "userIdentifiers",
                                    "facts",
                                    "attributes",
                                    "labels",
                                    "metrics",
                                    "datasets",
                                    "createdBy",
                                    "modifiedBy",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "include=createdBy,modifiedBy,facts,attributes,labels,metrics,datasets"
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,all"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiVisualizationObjectPostOptionalIdDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiVisualizationObjectOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["ANALYZE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            }
        },
        "/api/v1/entities/workspaces/{workspaceId}/visualizationObjects/{objectId}": {
            "get": {
                "tags": ["Visualization Object", "entities", "workspace-object-controller"],
                "summary": "Get a Visualization Object",
                "operationId": "getEntity@VisualizationObjects",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "userIdentifiers",
                                    "facts",
                                    "attributes",
                                    "labels",
                                    "metrics",
                                    "datasets",
                                    "createdBy",
                                    "modifiedBy",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "include=createdBy,modifiedBy,facts,attributes,labels,metrics,datasets"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiVisualizationObjectOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["VIEW"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            },
            "put": {
                "tags": ["Visualization Object", "entities", "workspace-object-controller"],
                "summary": "Put a Visualization Object",
                "operationId": "updateEntity@VisualizationObjects",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "userIdentifiers",
                                    "facts",
                                    "attributes",
                                    "labels",
                                    "metrics",
                                    "datasets",
                                    "createdBy",
                                    "modifiedBy",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "include=createdBy,modifiedBy,facts,attributes,labels,metrics,datasets"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiVisualizationObjectInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiVisualizationObjectOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["ANALYZE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            },
            "delete": {
                "tags": ["Visualization Object", "entities", "workspace-object-controller"],
                "summary": "Delete a Visualization Object",
                "operationId": "deleteEntity@VisualizationObjects",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321"
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/Deleted"
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["ANALYZE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            },
            "patch": {
                "tags": ["Visualization Object", "entities", "workspace-object-controller"],
                "summary": "Patch a Visualization Object",
                "operationId": "patchEntity@VisualizationObjects",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "userIdentifiers",
                                    "facts",
                                    "attributes",
                                    "labels",
                                    "metrics",
                                    "datasets",
                                    "createdBy",
                                    "modifiedBy",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "include=createdBy,modifiedBy,facts,attributes,labels,metrics,datasets"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiVisualizationObjectPatchDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiVisualizationObjectOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["ANALYZE"],
                    "description": "Contains minimal permission level required to manage this object type."
                }
            }
        },
        "/api/v1/entities/workspaces/{workspaceId}/workspaceDataFilterSettings": {
            "get": {
                "tags": ["Data Filters", "entities", "workspace-object-controller"],
                "summary": "Get all Settings for Workspace Data Filters",
                "operationId": "getAllEntities@WorkspaceDataFilterSettings",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "origin",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Defines scope of origin of objects. All by default.",
                            "default": "ALL",
                            "enum": ["ALL", "PARENTS", "NATIVE"]
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;workspaceDataFilter.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["workspaceDataFilters", "workspaceDataFilter", "ALL"]
                            }
                        },
                        "example": "include=workspaceDataFilter"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/size"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "page", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,page,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOutList"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["VIEW"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            },
            "post": {
                "tags": ["Data Filters", "entities", "workspace-object-controller"],
                "summary": "Post Settings for Workspace Data Filters",
                "operationId": "createEntity@WorkspaceDataFilterSettings",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["workspaceDataFilters", "workspaceDataFilter", "ALL"]
                            }
                        },
                        "example": "include=workspaceDataFilter"
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,all"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage WorkspaceDataFilter/Settings for the workspace the WDF originates and related workspace hierarchy."
                }
            }
        },
        "/api/v1/entities/workspaces/{workspaceId}/workspaceDataFilterSettings/{objectId}": {
            "get": {
                "tags": ["Data Filters", "entities", "workspace-object-controller"],
                "summary": "Get a Setting for Workspace Data Filter",
                "operationId": "getEntity@WorkspaceDataFilterSettings",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;workspaceDataFilter.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["workspaceDataFilters", "workspaceDataFilter", "ALL"]
                            }
                        },
                        "example": "include=workspaceDataFilter"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["VIEW"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            },
            "put": {
                "tags": ["Data Filters", "entities", "workspace-object-controller"],
                "summary": "Put a Settings for Workspace Data Filter",
                "operationId": "updateEntity@WorkspaceDataFilterSettings",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;workspaceDataFilter.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["workspaceDataFilters", "workspaceDataFilter", "ALL"]
                            }
                        },
                        "example": "include=workspaceDataFilter"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage WorkspaceDataFilter/Settings for the workspace the WDF originates and related workspace hierarchy."
                }
            },
            "delete": {
                "tags": ["Data Filters", "entities", "workspace-object-controller"],
                "summary": "Delete a Settings for Workspace Data Filter",
                "operationId": "deleteEntity@WorkspaceDataFilterSettings",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;workspaceDataFilter.id==321"
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/Deleted"
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage WorkspaceDataFilter/Settings for the workspace the WDF originates and related workspace hierarchy."
                }
            },
            "patch": {
                "tags": ["Data Filters", "entities", "workspace-object-controller"],
                "summary": "Patch a Settings for Workspace Data Filter",
                "operationId": "patchEntity@WorkspaceDataFilterSettings",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;workspaceDataFilter.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["workspaceDataFilters", "workspaceDataFilter", "ALL"]
                            }
                        },
                        "example": "include=workspaceDataFilter"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingPatchDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage WorkspaceDataFilter/Settings for the workspace the WDF originates and related workspace hierarchy."
                }
            }
        },
        "/api/v1/entities/workspaces/{workspaceId}/workspaceDataFilters": {
            "get": {
                "tags": ["Data Filters", "entities", "workspace-object-controller"],
                "summary": "Get all Workspace Data Filters",
                "operationId": "getAllEntities@WorkspaceDataFilters",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "origin",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Defines scope of origin of objects. All by default.",
                            "default": "ALL",
                            "enum": ["ALL", "PARENTS", "NATIVE"]
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["workspaceDataFilterSettings", "filterSettings", "ALL"]
                            }
                        },
                        "example": "include=filterSettings"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/size"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "page", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,page,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOutList"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["VIEW"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            },
            "post": {
                "tags": ["Data Filters", "entities", "workspace-object-controller"],
                "summary": "Post Workspace Data Filters",
                "operationId": "createEntity@WorkspaceDataFilters",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["workspaceDataFilterSettings", "filterSettings", "ALL"]
                            }
                        },
                        "example": "include=filterSettings"
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,all"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage WorkspaceDataFilter/Settings for the workspace the WDF originates and related workspace hierarchy."
                }
            }
        },
        "/api/v1/entities/workspaces/{workspaceId}/workspaceDataFilters/{objectId}": {
            "get": {
                "tags": ["Data Filters", "entities", "workspace-object-controller"],
                "summary": "Get a Workspace Data Filter",
                "operationId": "getEntity@WorkspaceDataFilters",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["workspaceDataFilterSettings", "filterSettings", "ALL"]
                            }
                        },
                        "example": "include=filterSettings"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["VIEW"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            },
            "put": {
                "tags": ["Data Filters", "entities", "workspace-object-controller"],
                "summary": "Put a Workspace Data Filter",
                "operationId": "updateEntity@WorkspaceDataFilters",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["workspaceDataFilterSettings", "filterSettings", "ALL"]
                            }
                        },
                        "example": "include=filterSettings"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage WorkspaceDataFilter/Settings for the workspace the WDF originates and related workspace hierarchy."
                }
            },
            "delete": {
                "tags": ["Data Filters", "entities", "workspace-object-controller"],
                "summary": "Delete a Workspace Data Filter",
                "operationId": "deleteEntity@WorkspaceDataFilters",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/Deleted"
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage WorkspaceDataFilter/Settings for the workspace the WDF originates and related workspace hierarchy."
                }
            },
            "patch": {
                "tags": ["Data Filters", "entities", "workspace-object-controller"],
                "summary": "Patch a Workspace Data Filter",
                "operationId": "patchEntity@WorkspaceDataFilters",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["workspaceDataFilterSettings", "filterSettings", "ALL"]
                            }
                        },
                        "example": "include=filterSettings"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterPatchDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Contains minimal permission level required to manage WorkspaceDataFilter/Settings for the workspace the WDF originates and related workspace hierarchy."
                }
            }
        },
        "/api/v1/entities/workspaces/{workspaceId}/workspaceSettings": {
            "get": {
                "tags": ["Workspaces - Settings", "entities", "workspace-object-controller"],
                "summary": "Get all Setting for Workspaces",
                "operationId": "getAllEntities@WorkspaceSettings",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "origin",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Defines scope of origin of objects. All by default.",
                            "default": "ALL",
                            "enum": ["ALL", "PARENTS", "NATIVE"]
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=content==JsonNodeValue;type==SettingTypeValue"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/size"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "page", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,page,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceSettingOutList"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["VIEW"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            },
            "post": {
                "tags": ["Workspaces - Settings", "entities", "workspace-object-controller"],
                "summary": "Post Settings for Workspaces",
                "operationId": "createEntity@WorkspaceSettings",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,all"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiWorkspaceSettingPostOptionalIdDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceSettingOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/entities/workspaces/{workspaceId}/workspaceSettings/{objectId}": {
            "get": {
                "tags": ["Workspaces - Settings", "entities", "workspace-object-controller"],
                "summary": "Get a Setting for Workspace",
                "operationId": "getEntity@WorkspaceSettings",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=content==JsonNodeValue;type==SettingTypeValue"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Include Meta objects.",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Included meta objects",
                            "items": {
                                "type": "string",
                                "enum": ["origin", "all", "ALL"]
                            }
                        },
                        "example": "metaInclude=origin,all"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceSettingOutDocument"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["VIEW"],
                    "description": "Contains minimal permission level required to view this object type."
                }
            },
            "put": {
                "tags": ["Workspaces - Settings", "entities", "workspace-object-controller"],
                "summary": "Put a Setting for a Workspace",
                "operationId": "updateEntity@WorkspaceSettings",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=content==JsonNodeValue;type==SettingTypeValue"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiWorkspaceSettingInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceSettingOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Workspaces - Settings", "entities", "workspace-object-controller"],
                "summary": "Delete a Setting for Workspace",
                "operationId": "deleteEntity@WorkspaceSettings",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=content==JsonNodeValue;type==SettingTypeValue"
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/Deleted"
                    }
                }
            },
            "patch": {
                "tags": ["Workspaces - Settings", "entities", "workspace-object-controller"],
                "summary": "Patch a Setting for Workspace",
                "operationId": "patchEntity@WorkspaceSettings",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=content==JsonNodeValue;type==SettingTypeValue"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiWorkspaceSettingPatchDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceSettingOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/layout/workspaces/{workspaceId}/userDataFilters": {
            "get": {
                "tags": ["layout", "User Data Filters"],
                "summary": "Get user data filters",
                "description": "Retrieve current user data filters assigned to the workspace.",
                "operationId": "getUserDataFilters",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved current user data filters.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeclarativeUserDataFilters"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Permissions to read the user data filters."
                }
            },
            "put": {
                "tags": ["layout", "User Data Filters"],
                "summary": "Set user data filters",
                "description": "Set user data filters assigned to the workspace.",
                "operationId": "setUserDataFilters",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeclarativeUserDataFilters"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "User data filters successfully set."
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Permissions to modify the user data filters."
                }
            }
        },
        "/api/v1/layout/workspaces/{workspaceId}/permissions": {
            "get": {
                "tags": ["layout", "Permissions"],
                "summary": "Get permissions for the workspace",
                "description": "Retrieve current set of permissions of the workspace in a declarative form.",
                "operationId": "getWorkspacePermissions",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved current set of permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeclarativeWorkspacePermissions"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Permissions required to manipulate permissions."
                }
            },
            "put": {
                "tags": ["layout", "Permissions"],
                "summary": "Set permissions for the workspace",
                "description": "Set effective permissions for the workspace",
                "operationId": "setWorkspacePermissions",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeclarativeWorkspacePermissions"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Workspace permissions successfully set."
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Permissions required to manipulate permissions."
                }
            }
        },
        "/api/v1/layout/workspaces/{workspaceId}/logicalModel": {
            "get": {
                "tags": ["LDM - Declarative APIs", "layout"],
                "summary": "Get logical model",
                "description": "Retrieve current logical model of the workspace in declarative form.",
                "operationId": "getLogicalModel",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "includeParents",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved current logical model.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeclarativeModel"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["ANALYZE"],
                    "description": "Permissions required to read the logical model."
                }
            },
            "put": {
                "tags": ["LDM - Declarative APIs", "layout"],
                "summary": "Set logical model",
                "description": "Set effective logical model of the workspace.",
                "operationId": "setLogicalModel",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeclarativeModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Logical model successfully set."
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Permissions required to alter the logical model."
                }
            }
        },
        "/api/v1/layout/workspaces/{workspaceId}/analyticsModel": {
            "get": {
                "tags": ["layout", "Analytics Model"],
                "summary": "Get analytics model",
                "description": "Retrieve current analytics model of the workspace.",
                "operationId": "getAnalyticsModel",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "exclude",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "description": "Defines properties which should not be included in the payload.",
                                "enum": ["ACTIVITY_INFO"]
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved current analytics model.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeclarativeAnalytics"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["ANALYZE"],
                    "description": "Permissions to read the analytics layout."
                }
            },
            "put": {
                "tags": ["layout", "Analytics Model"],
                "summary": "Set analytics model",
                "description": "Set effective analytics model of the workspace.",
                "operationId": "setAnalyticsModel",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeclarativeAnalytics"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Analytics model successfully set."
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["ANALYZE"],
                    "description": "Permissions to modify the analytics layout."
                }
            }
        },
        "/api/v1/layout/workspaces/{workspaceId}": {
            "get": {
                "tags": ["layout", "Workspaces - Declarative APIs"],
                "summary": "Get workspace layout",
                "description": "Retrieve current model of the workspace in declarative form.",
                "operationId": "getWorkspaceLayout",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "exclude",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "description": "Defines properties which should not be included in the payload.",
                                "enum": ["ACTIVITY_INFO"]
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved the workspace model.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeclarativeWorkspaceModel"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["ANALYZE"],
                    "description": "Permissions required to read the layout."
                }
            },
            "put": {
                "tags": ["layout", "Workspaces - Declarative APIs"],
                "summary": "Set workspace layout",
                "description": "Set complete layout of workspace, like model, authorization, etc.",
                "operationId": "putWorkspaceLayout",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeclarativeWorkspaceModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "The model of the workspace was set."
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Permissions required to modify the layout."
                }
            }
        },
        "/api/v1/layout/workspaces": {
            "get": {
                "tags": ["layout", "Workspaces - Declarative APIs"],
                "summary": "Get all workspaces layout",
                "description": "Gets complete layout of workspaces, their hierarchy, models.",
                "operationId": "getWorkspacesLayout",
                "parameters": [
                    {
                        "name": "exclude",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "description": "Defines properties which should not be included in the payload.",
                                "enum": ["ACTIVITY_INFO"]
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved layout of all workspaces.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeclarativeWorkspaces"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Permission required to get workspaces layout."
                }
            },
            "put": {
                "tags": ["layout", "Workspaces - Declarative APIs"],
                "summary": "Set all workspaces layout",
                "description": "Sets complete layout of workspaces, their hierarchy, models.",
                "operationId": "setWorkspacesLayout",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeclarativeWorkspaces"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "All workspaces layout set."
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Permission required to set workspaces layout."
                }
            }
        },
        "/api/v1/layout/workspaceDataFilters": {
            "get": {
                "tags": ["layout", "Data Filters"],
                "summary": "Get workspace data filters for all workspaces",
                "description": "Retrieve all workspaces and related workspace data filters (and their settings / values).",
                "operationId": "getWorkspaceDataFiltersLayout",
                "responses": {
                    "200": {
                        "description": "Retrieved all workspace data filters.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeclarativeWorkspaceDataFilters"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Permission required to get data filters layout."
                }
            },
            "put": {
                "tags": ["layout", "Data Filters"],
                "summary": "Set all workspace data filters",
                "description": "Sets workspace data filters in all workspaces in entire organization.",
                "operationId": "setWorkspaceDataFiltersLayout",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeclarativeWorkspaceDataFilters"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "All workspace data filters set."
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Permission required to set data filters layout."
                }
            }
        },
        "/api/v1/layout/usersAndUserGroups": {
            "get": {
                "tags": ["layout", "UserGroups - Declarative APIs"],
                "summary": "Get all users and user groups",
                "description": "Retrieve all users and user groups with theirs properties.",
                "operationId": "getUsersUserGroupsLayout",
                "responses": {
                    "200": {
                        "description": "Retrieved all users and user groups.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeclarativeUsersUserGroups"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Permission required to get user/groups layout."
                }
            },
            "put": {
                "tags": ["layout", "UserGroups - Declarative APIs"],
                "summary": "Put all users and user groups",
                "description": "Define all users and user groups with theirs properties.",
                "operationId": "putUsersUserGroupsLayout",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeclarativeUsersUserGroups"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Defined all users and user groups."
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Permission required to set user/groups layout."
                }
            }
        },
        "/api/v1/layout/users/{userId}/permissions": {
            "get": {
                "tags": ["layout", "Permissions"],
                "summary": "Get permissions for the user",
                "description": "Retrieve current set of permissions of the user in a declarative form.",
                "operationId": "getUserPermissions",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved current set of permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeclarativeUserPermissions"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Permissions required to manipulate permissions."
                }
            },
            "put": {
                "tags": ["layout", "Permissions"],
                "summary": "Set permissions for the user",
                "description": "Set effective permissions for the user",
                "operationId": "setUserPermissions",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeclarativeUserPermissions"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "User permissions successfully set."
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Permissions required to manipulate permissions."
                }
            }
        },
        "/api/v1/layout/users": {
            "get": {
                "tags": ["layout", "Users - Declarative APIs"],
                "summary": "Get all users",
                "description": "Retrieve all users including authentication properties.",
                "operationId": "getUsersLayout",
                "responses": {
                    "200": {
                        "description": "Retrieved all users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeclarativeUsers"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Permission required to get users layout."
                }
            },
            "put": {
                "tags": ["layout", "Users - Declarative APIs"],
                "summary": "Put all users",
                "description": "Set all users and their authentication properties.",
                "operationId": "putUsersLayout",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeclarativeUsers"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Defined all users."
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Permission required to set users layout."
                }
            }
        },
        "/api/v1/layout/userGroups/{userGroupId}/permissions": {
            "get": {
                "tags": ["layout", "Permissions"],
                "summary": "Get permissions for the user-group",
                "description": "Retrieve current set of permissions of the user-group in a declarative form.",
                "operationId": "getUserGroupPermissions",
                "parameters": [
                    {
                        "name": "userGroupId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved current set of permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeclarativeUserGroupPermissions"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Permissions required to manipulate permissions."
                }
            },
            "put": {
                "tags": ["layout", "Permissions"],
                "summary": "Set permissions for the user-group",
                "description": "Set effective permissions for the user-group",
                "operationId": "setUserGroupPermissions",
                "parameters": [
                    {
                        "name": "userGroupId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeclarativeUserGroupPermissions"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "User-group permissions successfully set."
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Permissions required to manipulate permissions."
                }
            }
        },
        "/api/v1/layout/userGroups": {
            "get": {
                "tags": ["layout", "UserGroups - Declarative APIs"],
                "summary": "Get all user groups",
                "description": "Retrieve all user-groups eventually with parent group.",
                "operationId": "getUserGroupsLayout",
                "responses": {
                    "200": {
                        "description": "Retrieved all user groups.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeclarativeUserGroups"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Permission required to get groups layout."
                }
            },
            "put": {
                "tags": ["layout", "UserGroups - Declarative APIs"],
                "summary": "Put all user groups",
                "description": "Define all user groups with their parents eventually.",
                "operationId": "putUserGroupsLayout",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeclarativeUserGroups"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Defined all user groups."
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Permission required to set groups layout."
                }
            }
        },
        "/api/v1/layout/organization/permissions": {
            "get": {
                "tags": ["layout", "Permissions"],
                "summary": "Get organization permissions",
                "description": "Retrieve organization permissions",
                "operationId": "getOrganizationPermissions",
                "responses": {
                    "200": {
                        "description": "Retrieved all organization permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DeclarativeOrganizationPermission"
                                    }
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Permission required to get organization permissions."
                }
            },
            "put": {
                "tags": ["layout", "Permissions"],
                "summary": "Set organization permissions",
                "description": "Sets organization permissions",
                "operationId": "setOrganizationPermissions",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "description": "An array of declarative organization permissions assignments",
                                "items": {
                                    "$ref": "#/components/schemas/DeclarativeOrganizationPermission"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Organization permissions set."
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Permission required to set organization permissions."
                }
            }
        },
        "/api/v1/layout/organization": {
            "get": {
                "tags": ["layout", "Organization - Declarative APIs"],
                "summary": "Get organization layout",
                "description": "Retrieve complete layout of organization, workspaces, user-groups, etc.",
                "operationId": "getOrganizationLayout",
                "parameters": [
                    {
                        "name": "exclude",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "description": "Defines properties which should not be included in the payload.",
                                "enum": ["ACTIVITY_INFO"]
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved all parts of an organization.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeclarativeOrganization"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Permission required to get organization layout."
                }
            },
            "put": {
                "tags": ["layout", "Organization - Declarative APIs"],
                "summary": "Set organization layout",
                "description": "Sets complete layout of organization, like workspaces, user-groups, etc.",
                "operationId": "setOrganizationLayout",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeclarativeOrganization"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Defined all parts of an organization."
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Permission required to set organization layout."
                }
            }
        },
        "/api/v1/layout/dataSources/{dataSourceId}/permissions": {
            "get": {
                "tags": ["layout"],
                "summary": "Get permissions for the data source",
                "description": "Retrieve current set of permissions of the data source in a declarative form.",
                "operationId": "getDataSourcePermissions",
                "parameters": [
                    {
                        "name": "dataSourceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved current set of permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeclarativeDataSourcePermissions"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Permissions required to manipulate permissions."
                }
            },
            "put": {
                "tags": ["layout"],
                "summary": "Set data source permissions.",
                "description": "et data source permissions.",
                "operationId": "setDataSourcePermissions",
                "parameters": [
                    {
                        "name": "dataSourceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeclarativeDataSourcePermissions"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Permissions to modify the user data filters."
                }
            }
        },
        "/api/v1/layout/dataSources": {
            "get": {
                "tags": ["layout", "Data Source - Declarative APIs"],
                "summary": "Get all data sources",
                "description": "Retrieve all data sources including related physical model.",
                "operationId": "getDataSourcesLayout",
                "responses": {
                    "200": {
                        "description": "Retrieved all data sources.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeclarativeDataSources"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Permission required to get data sources layout."
                }
            },
            "put": {
                "tags": ["layout", "Data Source - Declarative APIs"],
                "summary": "Put all data sources",
                "description": "Set all data sources including related physical model.",
                "operationId": "putDataSourcesLayout",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeclarativeDataSources"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Defined all data sources."
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Permission required to set data sources layout."
                }
            }
        },
        "/api/v1/actions/workspaces/{workspaceId}/translations/set": {
            "post": {
                "tags": ["Translations", "actions"],
                "summary": "Set translations for entities.",
                "description": "Set translation for existing entities in a particular locale.",
                "operationId": "setTranslations",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Xliff"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Translations were successfully set."
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Minimal permission required to use this endpoint."
                }
            }
        },
        "/api/v1/actions/workspaces/{workspaceId}/translations/retrieve": {
            "post": {
                "tags": ["Translations", "actions"],
                "summary": "Retrieve translations for entities.",
                "description": "Retrieve all translation for existing entities in a particular locale. The source translations returned by this endpoint are always original, not translated, texts. Because the XLIFF schema definition has the 'xs:language' constraint for the 'srcLang' attribute, it is always set to 'en-US' value.",
                "operationId": "retrieveTranslations",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LocaleRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "XLIFF file containing translations for a particular locale.",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Xliff"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Minimal permission required to use this endpoint."
                }
            }
        },
        "/api/v1/actions/workspaces/{workspaceId}/translations/clean": {
            "post": {
                "tags": ["Translations", "actions"],
                "summary": "Cleans up translations.",
                "description": "Cleans up all translations for a particular locale.",
                "operationId": "cleanTranslations",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LocaleRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Translations were successfully removed."
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Minimal permission required to use this endpoint."
                }
            }
        },
        "/api/v1/actions/workspaces/{workspaceId}/resolveSettings": {
            "get": {
                "tags": ["Workspaces - Settings", "actions"],
                "summary": "Values for all settings.",
                "description": "Resolves values for all settings in a workspace by current user, workspace, organization, or default settings.",
                "operationId": "workspaceResolveAllSettings",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Values for selected settings.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ResolvedSetting"
                                    }
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["VIEW"],
                    "description": "Minimal permission required to use this endpoint."
                }
            },
            "post": {
                "tags": ["Workspaces - Settings", "actions"],
                "summary": "Values for selected settings.",
                "description": "Resolves value for selected settings in a workspace by current user, workspace, organization, or default settings.",
                "operationId": "workspaceResolveSettings",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ResolveSettingsRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Values for selected settings.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ResolvedSetting"
                                    }
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["VIEW"],
                    "description": "Minimal permission required to use this endpoint."
                }
            }
        },
        "/api/v1/actions/workspaces/{workspaceId}/managePermissions": {
            "post": {
                "tags": ["Permissions", "actions"],
                "summary": "Manage Permissions for a Workspace",
                "description": "Manage Permissions for a Workspace and its Workspace Hierarchy",
                "operationId": "manageWorkspacePermissions",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "description": "An array of workspace permissions assignments",
                                "items": {
                                    "$ref": "#/components/schemas/WorkspacePermissionAssignment"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/v1/actions/workspaces/{workspaceId}/dependentEntitiesGraph": {
            "get": {
                "tags": ["Dependency Graph", "actions"],
                "summary": "Computes the dependent entities graph",
                "description": "Computes the dependent entities graph",
                "operationId": "getDependentEntitiesGraph",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Computes the dependent entities graph",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DependentEntitiesResponse"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["VIEW"],
                    "description": "Permissions required to read the graph."
                }
            },
            "post": {
                "tags": ["Dependency Graph", "actions"],
                "summary": "Computes the dependent entities graph from given entry points",
                "description": "Computes the dependent entities graph from given entry points",
                "operationId": "getDependentEntitiesGraphFromEntryPoints",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DependentEntitiesRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Computes the dependent entities graph from given entry points",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DependentEntitiesResponse"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["VIEW"],
                    "description": "Permissions required to read the graph."
                }
            }
        },
        "/api/v1/actions/workspaces/{workspaceId}/checkEntityOverrides": {
            "post": {
                "tags": ["Hierarchy", "actions"],
                "summary": "Finds entities with given ID in hierarchy.",
                "description": "Finds entities with given ID in hierarchy (e.g. to check possible future conflicts).",
                "operationId": "checkEntityOverrides",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "description": "An array of object identifications",
                                "items": {
                                    "$ref": "#/components/schemas/HierarchyObjectIdentification"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Searching for entities finished successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/IdentifierDuplications"
                                    }
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["ANALYZE"],
                    "description": "Minimal permission required to use this endpoint."
                }
            }
        },
        "/api/v1/actions/workspaces/{workspaceId}/analyticalDashboards/{dashboardId}/managePermissions": {
            "post": {
                "tags": ["Permissions", "actions"],
                "summary": "Manage Permissions for a Dashboard",
                "operationId": "manageDashboardPermissions",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dashboardId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "description": "An array of dashboard permissions assignments",
                                "items": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/PermissionsForAssignee"
                                        },
                                        {
                                            "$ref": "#/components/schemas/PermissionsForAssigneeRule"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/v1/actions/userManagement/users/{userId}/permissions": {
            "get": {
                "tags": ["User management"],
                "operationId": "listPermissionsForUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserManagementPermissionAssignments"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["User management"],
                "operationId": "managePermissionsForUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserManagementPermissionAssignments"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/v1/actions/userManagement/userGroups/{userGroupId}/removeMembers": {
            "post": {
                "tags": ["User management"],
                "operationId": "removeGroupMembers",
                "parameters": [
                    {
                        "name": "userGroupId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserManagementUserGroupMembers"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/v1/actions/userManagement/userGroups/{userGroupId}/permissions": {
            "get": {
                "tags": ["User management"],
                "operationId": "listPermissionsForUserGroup",
                "parameters": [
                    {
                        "name": "userGroupId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserManagementPermissionAssignments"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["User management"],
                "operationId": "managePermissionsForUserGroup",
                "parameters": [
                    {
                        "name": "userGroupId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserManagementPermissionAssignments"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/v1/actions/userManagement/userGroups/{userGroupId}/addMembers": {
            "post": {
                "tags": ["User management"],
                "operationId": "addGroupMembers",
                "parameters": [
                    {
                        "name": "userGroupId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserManagementUserGroupMembers"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/v1/actions/userManagement/revokePermissions": {
            "post": {
                "tags": ["User management"],
                "operationId": "revokePermissions",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PermissionsAssignment"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/v1/actions/userManagement/removeUsersUserGroups": {
            "post": {
                "tags": ["User management"],
                "operationId": "removeUsersUserGroups",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/AssigneeIdentifier"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/v1/actions/userManagement/assignPermissions": {
            "post": {
                "tags": ["User management"],
                "operationId": "assignPermissions",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PermissionsAssignment"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/v1/actions/resolveSettings": {
            "get": {
                "tags": ["Reporting - Settings", "actions"],
                "summary": "Values for all settings without workspace.",
                "description": "Resolves values for all settings without workspace by current user, organization, or default settings.",
                "operationId": "resolveAllSettingsWithoutWorkspace",
                "responses": {
                    "200": {
                        "description": "Values for selected settings.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ResolvedSetting"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Reporting - Settings", "actions"],
                "summary": "Values for selected settings without workspace.",
                "description": "Resolves values for selected settings without workspace by current user, organization, or default settings.",
                "operationId": "resolveSettingsWithoutWorkspace",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ResolveSettingsRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Values for selected settings.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ResolvedSetting"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/actions/resolveEntitlements": {
            "get": {
                "tags": ["Entitlement", "actions"],
                "summary": "Values for all public entitlements.",
                "description": "Resolves values of available entitlements for the organization.",
                "operationId": "resolveAllEntitlements",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ApiEntitlement"
                                    }
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["VIEW"],
                    "description": "Minimal permission required to use this endpoint."
                }
            },
            "post": {
                "tags": ["Entitlement", "actions"],
                "summary": "Values for requested public entitlements.",
                "description": "Resolves values for requested entitlements in the organization.",
                "operationId": "resolveRequestedEntitlements",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EntitlementsRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ApiEntitlement"
                                    }
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["VIEW"],
                    "description": "Minimal permission required to use this endpoint."
                }
            }
        },
        "/api/v1/actions/organization/managePermissions": {
            "post": {
                "tags": ["Permissions", "actions"],
                "summary": "Manage Permissions for a Organization",
                "description": "Manage Permissions for a Organization",
                "operationId": "manageOrganizationPermissions",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "description": "An array of organization permissions assignments",
                                "items": {
                                    "$ref": "#/components/schemas/OrganizationPermissionAssignment"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/v1/actions/dataSources/{dataSourceId}/uploadNotification": {
            "post": {
                "tags": ["Invalidate Cache", "actions"],
                "summary": "Register an upload notification",
                "description": "Notification sets up all reports to be computed again with new data.",
                "operationId": "registerUploadNotification",
                "parameters": [
                    {
                        "name": "dataSourceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "An upload notification has been successfully registered."
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Minimal permission required to use this endpoint."
                }
            }
        },
        "/api/v1/actions/dataSources/{dataSourceId}/managePermissions": {
            "post": {
                "tags": ["Permissions", "actions"],
                "summary": "Manage Permissions for a Data Source",
                "description": "Manage Permissions for a Data Source",
                "operationId": "manageDataSourcePermissions",
                "parameters": [
                    {
                        "name": "dataSourceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "description": "An array of data source permissions assignments",
                                "items": {
                                    "$ref": "#/components/schemas/DataSourcePermissionAssignment"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/v1/actions/dataSources/{dataSourceId}/generateLogicalModel": {
            "post": {
                "tags": ["Generate Logical Data Model", "actions"],
                "summary": "Generate logical data model (LDM) from physical data model (PDM)",
                "description": "Generate logical data model (LDM) from physical data model (PDM) stored in data source.",
                "operationId": "generateLogicalModel",
                "parameters": [
                    {
                        "name": "dataSourceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GenerateLdmRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "LDM generated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeclarativeModel"
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Minimal permission required to use this endpoint."
                }
            }
        },
        "/api/v1/actions/collectUsage": {
            "get": {
                "tags": ["Usage", "actions"],
                "summary": "Info about the platform usage.",
                "description": "Provides information about platform usage, like amount of users, workspaces, ...",
                "operationId": "allPlatformUsage",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PlatformUsage"
                                    }
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Minimal permission required to use this endpoint."
                }
            },
            "post": {
                "tags": ["Usage", "actions"],
                "summary": "Info about the platform usage for particular items.",
                "description": "Provides information about platform usage, like amount of users, workspaces, ...",
                "operationId": "particularPlatformUsage",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PlatformUsageRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PlatformUsage"
                                    }
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Minimal permission required to use this endpoint."
                }
            }
        },
        "/api/v1/options/availableDrivers": {
            "get": {
                "tags": ["entities", "Available Drivers"],
                "summary": "Get all available data source drivers",
                "description": "Retrieves a list of all supported data sources along with information about the used drivers.",
                "operationId": "getDataSourceDrivers",
                "responses": {
                    "200": {
                        "description": "A list of all available data source drivers.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                },
                                "examples": {
                                    "All available drivers": {
                                        "description": "All available drivers",
                                        "value": {
                                            "POSTGRESQL": "org.postgresql.Driver",
                                            "REDSHIFT": "com.amazon.redshift.jdbc42.Driver"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/options": {
            "get": {
                "tags": ["Options", "entities"],
                "summary": "Links for all configuration options",
                "description": "Retrieves links for all options for different configurations.",
                "operationId": "getAllOptions",
                "responses": {
                    "200": {
                        "description": "Links for all configuration options.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                },
                                "examples": {
                                    "All options": {
                                        "description": "All options",
                                        "value": {
                                            "options": {
                                                "description": "Options resources",
                                                "links": {
                                                    "availableDrivers": "/api/v1/options/availableDrivers"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/entities/organization": {
            "get": {
                "tags": ["Organization - Entity APIs", "entities"],
                "summary": "Get current organization info",
                "description": "Gets a basic information about organization.",
                "operationId": "getOrganization",
                "parameters": [
                    {
                        "name": "metaInclude",
                        "in": "query",
                        "description": "Return list of permissions available to logged user.",
                        "explode": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                                "type": "string",
                                "description": "Available meta objects to include.",
                                "enum": ["permissions", "all"]
                            }
                        },
                        "example": "metaInclude=permissions"
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Redirect to entity URI."
                    }
                }
            }
        },
        "/api/v1/actions/workspaces/{workspaceId}/translations": {
            "get": {
                "tags": ["Translations", "actions"],
                "summary": "Get translation tags.",
                "description": "Provides a list of effective translation tags.",
                "operationId": "getTranslationTags",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved list of translation tags.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Minimal permission required to use this endpoint."
                }
            }
        },
        "/api/v1/actions/workspaces/{workspaceId}/overriddenChildEntities": {
            "get": {
                "tags": ["Hierarchy", "actions"],
                "summary": "Finds identifier overrides in workspace hierarchy.",
                "description": "Finds API identifier overrides in given workspace hierarchy.",
                "operationId": "overriddenChildEntities",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Searching for overridden identifiers finished successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/IdentifierDuplications"
                                    }
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Minimal permission required to use this endpoint."
                }
            }
        },
        "/api/v1/actions/workspaces/{workspaceId}/inheritedEntityPrefixes": {
            "get": {
                "tags": ["Hierarchy", "actions"],
                "summary": "Get used entity prefixes in hierarchy",
                "description": "Get used entity prefixes in hierarchy of parent workspaces",
                "operationId": "inheritedEntityPrefixes",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Prefixes used in parent entities",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["VIEW"],
                    "description": "Minimal permission required to use this endpoint."
                }
            }
        },
        "/api/v1/actions/workspaces/{workspaceId}/inheritedEntityConflicts": {
            "get": {
                "tags": ["Hierarchy", "actions"],
                "summary": "Finds identifier conflicts in workspace hierarchy.",
                "description": "Finds API identifier conflicts in given workspace hierarchy.",
                "operationId": "inheritedEntityConflicts",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Searching for conflicting identifiers finished successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/IdentifierDuplications"
                                    }
                                }
                            }
                        }
                    }
                },
                "x-gdc-security-info": {
                    "permissions": ["MANAGE"],
                    "description": "Minimal permission required to use this endpoint."
                }
            }
        },
        "/api/v1/actions/workspaces/{workspaceId}/analyticalDashboards/{dashboardId}/permissions": {
            "get": {
                "tags": ["Permissions", "actions"],
                "summary": "Get Dashboard Permissions",
                "operationId": "dashboardPermissions",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dashboardId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DashboardPermissions"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/actions/workspaces/{workspaceId}/analyticalDashboards/{dashboardId}/availableAssignees": {
            "get": {
                "tags": ["Permissions", "actions"],
                "summary": "Get Available Assignees",
                "operationId": "availableAssignees",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dashboardId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AvailableAssignees"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/actions/userManagement/users": {
            "get": {
                "tags": ["User management"],
                "operationId": "listUsers",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Zero-based page index (0..N)",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        },
                        "example": "page=0"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of the page to be returned.",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 20
                        },
                        "example": "size=20"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filter by user name. Note that user name is case insensitive.",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        },
                        "example": "name=charles"
                    },
                    {
                        "name": "workspace",
                        "in": "query",
                        "description": "Filter by workspaceId.",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        },
                        "example": "workspace=demo"
                    },
                    {
                        "name": "group",
                        "in": "query",
                        "description": "Filter by userGroupId.",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        },
                        "example": "group=admin"
                    },
                    {
                        "name": "dataSource",
                        "in": "query",
                        "description": "Filter by dataSourceId.",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        },
                        "example": "dataSource=demo-test-ds"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserManagementUsers"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/actions/userManagement/userGroups/{userGroupId}/members": {
            "get": {
                "tags": ["User management"],
                "operationId": "getGroupMembers",
                "parameters": [
                    {
                        "name": "userGroupId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserManagementUserGroupMembers"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/actions/userManagement/userGroups": {
            "get": {
                "tags": ["User management"],
                "operationId": "listUserGroups",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Zero-based page index (0..N)",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        },
                        "example": "page=0"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of the page to be returned.",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 20
                        },
                        "example": "size=20"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filter by user name. Note that user name is case insensitive.",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        },
                        "example": "name=charles"
                    },
                    {
                        "name": "workspace",
                        "in": "query",
                        "description": "Filter by workspaceId.",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        },
                        "example": "workspace=demo"
                    },
                    {
                        "name": "dataSource",
                        "in": "query",
                        "description": "Filter by dataSourceId.",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "string"
                        },
                        "example": "dataSource=demo-test-ds"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserManagementUserGroups"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "ObjectLinks": {
                "required": ["self"],
                "type": "object",
                "properties": {
                    "self": {
                        "type": "string",
                        "description": "A string containing the link's URL.",
                        "format": "uri"
                    }
                }
            },
            "ObjectLinksContainer": {
                "type": "object",
                "properties": {
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    }
                }
            },
            "ListLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "next": {
                                "type": "string",
                                "description": "A string containing the link's URL for the next page of data.",
                                "format": "uri"
                            }
                        }
                    }
                ]
            },
            "PageMetadata": {
                "type": "object",
                "properties": {
                    "number": {
                        "type": "integer",
                        "description": "The number of the current page",
                        "format": "int32"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of the current page",
                        "format": "int32"
                    },
                    "totalElements": {
                        "type": "integer",
                        "description": "The total number of elements",
                        "format": "int32"
                    },
                    "totalPages": {
                        "type": "integer",
                        "description": "The total number of pages",
                        "format": "int32"
                    }
                }
            },
            "JsonApiApiTokenOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiApiTokenOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiApiTokenOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiApiTokenOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "page": {
                                "$ref": "#/components/schemas/PageMetadata"
                            }
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiApiTokenOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "apiToken",
                        "enum": ["apiToken"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "bearerToken": {
                                "type": "string"
                            }
                        }
                    }
                },
                "description": "JSON:API representation of apiToken entity."
            },
            "JsonApiUserSettingOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiUserSettingOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiUserSettingOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiUserSettingOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "page": {
                                "$ref": "#/components/schemas/PageMetadata"
                            }
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiUserSettingOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "userSetting",
                        "enum": ["userSetting"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                                "example": {}
                            },
                            "type": {
                                "type": "string",
                                "enum": [
                                    "TIMEZONE",
                                    "ACTIVE_THEME",
                                    "ACTIVE_COLOR_PALETTE",
                                    "WHITE_LABELING",
                                    "LOCALE",
                                    "METADATA_LOCALE",
                                    "FORMAT_LOCALE",
                                    "MAPBOX_TOKEN",
                                    "WEEK_START",
                                    "SHOW_HIDDEN_CATALOG_ITEMS",
                                    "OPERATOR_OVERRIDES",
                                    "TIMEZONE_VALIDATION_ENABLED"
                                ]
                            }
                        }
                    }
                },
                "description": "JSON:API representation of userSetting entity."
            },
            "JsonApiApiTokenOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiApiTokenOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    }
                }
            },
            "JsonApiUserSettingOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiUserSettingOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    }
                }
            },
            "JsonApiCookieSecurityConfigurationOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiCookieSecurityConfigurationOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    }
                }
            },
            "JsonApiCookieSecurityConfigurationOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "cookieSecurityConfiguration",
                        "enum": ["cookieSecurityConfiguration"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "lastRotation": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "rotationInterval": {
                                "type": "string",
                                "description": "Length of interval between automatic rotations expressed in format of ISO 8601 duration",
                                "example": "P30D"
                            }
                        }
                    }
                },
                "description": "JSON:API representation of cookieSecurityConfiguration entity."
            },
            "JsonApiOrganizationOutIncludes": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiUserOutWithLinks"
                    },
                    {
                        "$ref": "#/components/schemas/JsonApiUserGroupOutWithLinks"
                    }
                ]
            },
            "JsonApiOrganizationOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiOrganizationOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiOrganizationOutIncludes"
                        }
                    }
                }
            },
            "JsonApiOrganizationOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "organization",
                        "enum": ["organization"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "permissions": {
                                "type": "array",
                                "description": "List of valid permissions for a logged-in user.",
                                "items": {
                                    "type": "string",
                                    "enum": ["MANAGE", "SELF_CREATE_TOKEN"]
                                }
                            }
                        }
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "hostname": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "allowedOrigins": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "oauthIssuerLocation": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "oauthClientId": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "earlyAccess": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "oauthIssuerId": {
                                "maxLength": 255,
                                "type": "string",
                                "description": "Any string identifying the OIDC provider. This value is used as suffix for OAuth2 callback (redirect) URL. If not defined, the standard callback URL is used. This value is valid only for external OIDC providers, not for the internal DEX provider.",
                                "example": "myOidcProvider"
                            },
                            "cacheSettings": {
                                "type": "object",
                                "properties": {
                                    "extraCacheBudget": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "cacheStrategy": {
                                        "maxLength": 255,
                                        "type": "string",
                                        "enum": ["DURABLE", "EPHEMERAL"]
                                    }
                                }
                            },
                            "oauthSubjectIdClaim": {
                                "maxLength": 255,
                                "type": "string",
                                "description": "Any string identifying the claim in ID token, that should be used for user identification. The default value is 'sub'.",
                                "example": "oid"
                            },
                            "jitEnabled": {
                                "type": "boolean",
                                "description": "Flag to enable/disable JIT provisioning in the given organization"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "bootstrapUser": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserToOneLinkage"
                                    }
                                }
                            },
                            "bootstrapUserGroup": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserGroupToOneLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of organization entity."
            },
            "JsonApiUserGroupLinkage": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["userGroup"]
                    }
                },
                "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members."
            },
            "JsonApiUserGroupToOneLinkage": {
                "description": "References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "nullable": true,
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiUserGroupLinkage"
                    }
                ]
            },
            "JsonApiUserLinkage": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["user"]
                    }
                },
                "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members."
            },
            "JsonApiUserToOneLinkage": {
                "description": "References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "nullable": true,
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiUserLinkage"
                    }
                ]
            },
            "JsonApiAnalyticalDashboardInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiAnalyticalDashboardIn"
                    }
                }
            },
            "JsonApiAnalyticalDashboardIn": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "analyticalDashboard",
                        "enum": ["analyticalDashboard"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "required": ["content"],
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 250000 characters.",
                                "example": {
                                    "identifier": {
                                        "id": "label.leaf",
                                        "type": "label"
                                    },
                                    "someBoolProp": false
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of analyticalDashboard entity."
            },
            "JsonApiAnalyticalDashboardOutIncludes": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiUserIdentifierOutWithLinks"
                    },
                    {
                        "$ref": "#/components/schemas/JsonApiVisualizationObjectOutWithLinks"
                    },
                    {
                        "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutWithLinks"
                    },
                    {
                        "$ref": "#/components/schemas/JsonApiLabelOutWithLinks"
                    },
                    {
                        "$ref": "#/components/schemas/JsonApiMetricOutWithLinks"
                    },
                    {
                        "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
                    },
                    {
                        "$ref": "#/components/schemas/JsonApiFilterContextOutWithLinks"
                    },
                    {
                        "$ref": "#/components/schemas/JsonApiDashboardPluginOutWithLinks"
                    }
                ]
            },
            "JsonApiAnalyticalDashboardOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutIncludes"
                        }
                    }
                }
            },
            "JsonApiAnalyticalDashboardOut": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "analyticalDashboard",
                        "enum": ["analyticalDashboard"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "permissions": {
                                "type": "array",
                                "description": "List of valid permissions for a logged-in user.",
                                "items": {
                                    "type": "string",
                                    "enum": ["EDIT", "SHARE", "VIEW"]
                                }
                            },
                            "origin": {
                                "required": ["originId", "originType"],
                                "type": "object",
                                "properties": {
                                    "originType": {
                                        "type": "string",
                                        "description": "defines type of the origin of the entity",
                                        "enum": ["NATIVE", "PARENT"]
                                    },
                                    "originId": {
                                        "type": "string",
                                        "description": "defines id of the workspace where the entity comes from"
                                    }
                                }
                            },
                            "accessInfo": {
                                "required": ["private"],
                                "type": "object",
                                "properties": {
                                    "private": {
                                        "type": "boolean",
                                        "description": "is the entity private to the currently logged-in user"
                                    }
                                }
                            }
                        }
                    },
                    "attributes": {
                        "required": ["content"],
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 250000 characters.",
                                "example": {
                                    "identifier": {
                                        "id": "label.leaf",
                                        "type": "label"
                                    },
                                    "someBoolProp": false
                                }
                            },
                            "createdAt": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "modifiedAt": {
                                "type": "string",
                                "format": "date-time"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "createdBy": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserIdentifierToOneLinkage"
                                    }
                                }
                            },
                            "modifiedBy": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserIdentifierToOneLinkage"
                                    }
                                }
                            },
                            "visualizationObjects": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiVisualizationObjectToManyLinkage"
                                    }
                                }
                            },
                            "analyticalDashboards": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiAnalyticalDashboardToManyLinkage"
                                    }
                                }
                            },
                            "labels": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiLabelToManyLinkage"
                                    }
                                }
                            },
                            "metrics": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiMetricToManyLinkage"
                                    }
                                }
                            },
                            "datasets": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiDatasetToManyLinkage"
                                    }
                                }
                            },
                            "filterContexts": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiFilterContextToManyLinkage"
                                    }
                                }
                            },
                            "dashboardPlugins": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiDashboardPluginToManyLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of analyticalDashboard entity."
            },
            "JsonApiAnalyticalDashboardLinkage": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["analyticalDashboard"]
                    }
                },
                "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members."
            },
            "JsonApiAnalyticalDashboardToManyLinkage": {
                "type": "array",
                "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "items": {
                    "$ref": "#/components/schemas/JsonApiAnalyticalDashboardLinkage"
                }
            },
            "JsonApiDashboardPluginLinkage": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["dashboardPlugin"]
                    }
                },
                "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members."
            },
            "JsonApiDashboardPluginToManyLinkage": {
                "type": "array",
                "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "items": {
                    "$ref": "#/components/schemas/JsonApiDashboardPluginLinkage"
                }
            },
            "JsonApiDatasetLinkage": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["dataset"]
                    }
                },
                "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members."
            },
            "JsonApiDatasetToManyLinkage": {
                "type": "array",
                "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "items": {
                    "$ref": "#/components/schemas/JsonApiDatasetLinkage"
                }
            },
            "JsonApiFilterContextLinkage": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["filterContext"]
                    }
                },
                "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members."
            },
            "JsonApiFilterContextToManyLinkage": {
                "type": "array",
                "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "items": {
                    "$ref": "#/components/schemas/JsonApiFilterContextLinkage"
                }
            },
            "JsonApiLabelLinkage": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["label"]
                    }
                },
                "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members."
            },
            "JsonApiLabelToManyLinkage": {
                "type": "array",
                "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "items": {
                    "$ref": "#/components/schemas/JsonApiLabelLinkage"
                }
            },
            "JsonApiMetricLinkage": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["metric"]
                    }
                },
                "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members."
            },
            "JsonApiMetricToManyLinkage": {
                "type": "array",
                "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "items": {
                    "$ref": "#/components/schemas/JsonApiMetricLinkage"
                }
            },
            "JsonApiUserIdentifierLinkage": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["userIdentifier"]
                    }
                },
                "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members."
            },
            "JsonApiUserIdentifierToOneLinkage": {
                "description": "References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "nullable": true,
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiUserIdentifierLinkage"
                    }
                ]
            },
            "JsonApiVisualizationObjectLinkage": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["visualizationObject"]
                    }
                },
                "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members."
            },
            "JsonApiVisualizationObjectToManyLinkage": {
                "type": "array",
                "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "items": {
                    "$ref": "#/components/schemas/JsonApiVisualizationObjectLinkage"
                }
            },
            "JsonApiAttributeHierarchyInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiAttributeHierarchyIn"
                    }
                }
            },
            "JsonApiAttributeHierarchyIn": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "attributeHierarchy",
                        "enum": ["attributeHierarchy"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                                "example": {
                                    "attributes": [
                                        {
                                            "identifier": {
                                                "type": "attribute",
                                                "id": "country"
                                            }
                                        },
                                        {
                                            "identifier": {
                                                "type": "attribute",
                                                "id": "city"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of attributeHierarchy entity."
            },
            "JsonApiAttributeHierarchyOutIncludes": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiUserIdentifierOutWithLinks"
                    },
                    {
                        "$ref": "#/components/schemas/JsonApiAttributeOutWithLinks"
                    }
                ]
            },
            "JsonApiAttributeHierarchyOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiAttributeHierarchyOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiAttributeHierarchyOutIncludes"
                        }
                    }
                }
            },
            "JsonApiAttributeHierarchyOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "attributeHierarchy",
                        "enum": ["attributeHierarchy"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "origin": {
                                "required": ["originId", "originType"],
                                "type": "object",
                                "properties": {
                                    "originType": {
                                        "type": "string",
                                        "description": "defines type of the origin of the entity",
                                        "enum": ["NATIVE", "PARENT"]
                                    },
                                    "originId": {
                                        "type": "string",
                                        "description": "defines id of the workspace where the entity comes from"
                                    }
                                }
                            }
                        }
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                                "example": {
                                    "attributes": [
                                        {
                                            "identifier": {
                                                "type": "attribute",
                                                "id": "country"
                                            }
                                        },
                                        {
                                            "identifier": {
                                                "type": "attribute",
                                                "id": "city"
                                            }
                                        }
                                    ]
                                }
                            },
                            "createdAt": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "modifiedAt": {
                                "type": "string",
                                "format": "date-time"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "createdBy": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserIdentifierToOneLinkage"
                                    }
                                }
                            },
                            "modifiedBy": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserIdentifierToOneLinkage"
                                    }
                                }
                            },
                            "attributes": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiAttributeToManyLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of attributeHierarchy entity."
            },
            "JsonApiAttributeLinkage": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["attribute"]
                    }
                },
                "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members."
            },
            "JsonApiAttributeToManyLinkage": {
                "type": "array",
                "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "items": {
                    "$ref": "#/components/schemas/JsonApiAttributeLinkage"
                }
            },
            "JsonApiCustomApplicationSettingInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiCustomApplicationSettingIn"
                    }
                }
            },
            "JsonApiCustomApplicationSettingIn": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "customApplicationSetting",
                        "enum": ["customApplicationSetting"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "required": ["applicationName", "content"],
                        "type": "object",
                        "properties": {
                            "applicationName": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                                "example": {}
                            }
                        }
                    }
                },
                "description": "JSON:API representation of customApplicationSetting entity."
            },
            "JsonApiCustomApplicationSettingOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiCustomApplicationSettingOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    }
                }
            },
            "JsonApiCustomApplicationSettingOut": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "customApplicationSetting",
                        "enum": ["customApplicationSetting"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "origin": {
                                "required": ["originId", "originType"],
                                "type": "object",
                                "properties": {
                                    "originType": {
                                        "type": "string",
                                        "description": "defines type of the origin of the entity",
                                        "enum": ["NATIVE", "PARENT"]
                                    },
                                    "originId": {
                                        "type": "string",
                                        "description": "defines id of the workspace where the entity comes from"
                                    }
                                }
                            }
                        }
                    },
                    "attributes": {
                        "required": ["applicationName", "content"],
                        "type": "object",
                        "properties": {
                            "applicationName": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                                "example": {}
                            }
                        }
                    }
                },
                "description": "JSON:API representation of customApplicationSetting entity."
            },
            "JsonApiDashboardPluginInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiDashboardPluginIn"
                    }
                }
            },
            "JsonApiDashboardPluginIn": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "dashboardPlugin",
                        "enum": ["dashboardPlugin"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 250000 characters.",
                                "example": {
                                    "url": "<plugin-url>"
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of dashboardPlugin entity."
            },
            "JsonApiDashboardPluginOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiDashboardPluginOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiUserIdentifierOutWithLinks"
                        }
                    }
                }
            },
            "JsonApiDashboardPluginOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "dashboardPlugin",
                        "enum": ["dashboardPlugin"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "origin": {
                                "required": ["originId", "originType"],
                                "type": "object",
                                "properties": {
                                    "originType": {
                                        "type": "string",
                                        "description": "defines type of the origin of the entity",
                                        "enum": ["NATIVE", "PARENT"]
                                    },
                                    "originId": {
                                        "type": "string",
                                        "description": "defines id of the workspace where the entity comes from"
                                    }
                                }
                            }
                        }
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "createdAt": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "modifiedAt": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 250000 characters.",
                                "example": {
                                    "url": "<plugin-url>"
                                }
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "createdBy": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserIdentifierToOneLinkage"
                                    }
                                }
                            },
                            "modifiedBy": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserIdentifierToOneLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of dashboardPlugin entity."
            },
            "JsonApiExportDefinitionInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiExportDefinitionIn"
                    }
                }
            },
            "JsonApiExportDefinitionIn": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "exportDefinition",
                        "enum": ["exportDefinition"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "required": ["requestPayload"],
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "requestPayload": {
                                "type": "object",
                                "description": "Free-form JSON content to be used as export request payload for /export/tabular endpoint. Maximum supported length is 15000 characters.",
                                "example": {
                                    "format": "PDF",
                                    "visualizationObjectId": "<id>"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "visualizationObject": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiVisualizationObjectToOneLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of exportDefinition entity."
            },
            "JsonApiVisualizationObjectToOneLinkage": {
                "description": "References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "nullable": true,
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiVisualizationObjectLinkage"
                    }
                ]
            },
            "JsonApiExportDefinitionOutIncludes": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiVisualizationObjectOutWithLinks"
                    },
                    {
                        "$ref": "#/components/schemas/JsonApiUserIdentifierOutWithLinks"
                    }
                ]
            },
            "JsonApiExportDefinitionOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiExportDefinitionOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiExportDefinitionOutIncludes"
                        }
                    }
                }
            },
            "JsonApiExportDefinitionOut": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "exportDefinition",
                        "enum": ["exportDefinition"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "required": ["requestPayload"],
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "requestPayload": {
                                "type": "object",
                                "description": "Free-form JSON content to be used as export request payload for /export/tabular endpoint. Maximum supported length is 15000 characters.",
                                "example": {
                                    "format": "PDF",
                                    "visualizationObjectId": "<id>"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "createdAt": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "modifiedAt": {
                                "type": "string",
                                "format": "date-time"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "visualizationObject": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiVisualizationObjectToOneLinkage"
                                    }
                                }
                            },
                            "createdBy": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserIdentifierToOneLinkage"
                                    }
                                }
                            },
                            "modifiedBy": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserIdentifierToOneLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of exportDefinition entity."
            },
            "JsonApiFilterContextInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiFilterContextIn"
                    }
                }
            },
            "JsonApiFilterContextIn": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "filterContext",
                        "enum": ["filterContext"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "required": ["content"],
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 250000 characters.",
                                "example": {
                                    "identifier": {
                                        "id": "label.leaf",
                                        "type": "label"
                                    },
                                    "someBoolProp": false
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of filterContext entity."
            },
            "JsonApiFilterContextOutIncludes": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiAttributeOutWithLinks"
                    },
                    {
                        "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
                    },
                    {
                        "$ref": "#/components/schemas/JsonApiLabelOutWithLinks"
                    }
                ]
            },
            "JsonApiFilterContextOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiFilterContextOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiFilterContextOutIncludes"
                        }
                    }
                }
            },
            "JsonApiFilterContextOut": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "filterContext",
                        "enum": ["filterContext"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "origin": {
                                "required": ["originId", "originType"],
                                "type": "object",
                                "properties": {
                                    "originType": {
                                        "type": "string",
                                        "description": "defines type of the origin of the entity",
                                        "enum": ["NATIVE", "PARENT"]
                                    },
                                    "originId": {
                                        "type": "string",
                                        "description": "defines id of the workspace where the entity comes from"
                                    }
                                }
                            }
                        }
                    },
                    "attributes": {
                        "required": ["content"],
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 250000 characters.",
                                "example": {
                                    "identifier": {
                                        "id": "label.leaf",
                                        "type": "label"
                                    },
                                    "someBoolProp": false
                                }
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "attributes": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiAttributeToManyLinkage"
                                    }
                                }
                            },
                            "datasets": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiDatasetToManyLinkage"
                                    }
                                }
                            },
                            "labels": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiLabelToManyLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of filterContext entity."
            },
            "JsonApiMetricInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiMetricIn"
                    }
                }
            },
            "JsonApiMetricIn": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "metric",
                        "enum": ["metric"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "required": ["content"],
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "content": {
                                "required": ["maql"],
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "maxLength": 2048,
                                        "type": "string"
                                    },
                                    "maql": {
                                        "maxLength": 10000,
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of metric entity."
            },
            "JsonApiMetricOutIncludes": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiUserIdentifierOutWithLinks"
                    },
                    {
                        "$ref": "#/components/schemas/JsonApiFactOutWithLinks"
                    },
                    {
                        "$ref": "#/components/schemas/JsonApiAttributeOutWithLinks"
                    },
                    {
                        "$ref": "#/components/schemas/JsonApiLabelOutWithLinks"
                    },
                    {
                        "$ref": "#/components/schemas/JsonApiMetricOutWithLinks"
                    },
                    {
                        "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
                    }
                ]
            },
            "JsonApiMetricOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiMetricOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiMetricOutIncludes"
                        }
                    }
                }
            },
            "JsonApiMetricOut": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "metric",
                        "enum": ["metric"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "origin": {
                                "required": ["originId", "originType"],
                                "type": "object",
                                "properties": {
                                    "originType": {
                                        "type": "string",
                                        "description": "defines type of the origin of the entity",
                                        "enum": ["NATIVE", "PARENT"]
                                    },
                                    "originId": {
                                        "type": "string",
                                        "description": "defines id of the workspace where the entity comes from"
                                    }
                                }
                            }
                        }
                    },
                    "attributes": {
                        "required": ["content"],
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "content": {
                                "required": ["maql"],
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "maxLength": 2048,
                                        "type": "string"
                                    },
                                    "maql": {
                                        "maxLength": 10000,
                                        "type": "string"
                                    }
                                }
                            },
                            "createdAt": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "modifiedAt": {
                                "type": "string",
                                "format": "date-time"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "createdBy": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserIdentifierToOneLinkage"
                                    }
                                }
                            },
                            "modifiedBy": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserIdentifierToOneLinkage"
                                    }
                                }
                            },
                            "facts": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiFactToManyLinkage"
                                    }
                                }
                            },
                            "attributes": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiAttributeToManyLinkage"
                                    }
                                }
                            },
                            "labels": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiLabelToManyLinkage"
                                    }
                                }
                            },
                            "metrics": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiMetricToManyLinkage"
                                    }
                                }
                            },
                            "datasets": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiDatasetToManyLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of metric entity."
            },
            "JsonApiFactLinkage": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["fact"]
                    }
                },
                "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members."
            },
            "JsonApiFactToManyLinkage": {
                "type": "array",
                "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "items": {
                    "$ref": "#/components/schemas/JsonApiFactLinkage"
                }
            },
            "JsonApiUserDataFilterInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiUserDataFilterIn"
                    }
                }
            },
            "JsonApiUserDataFilterIn": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "userDataFilter",
                        "enum": ["userDataFilter"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "required": ["maql"],
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "maql": {
                                "maxLength": 10000,
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "user": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserToOneLinkage"
                                    }
                                }
                            },
                            "userGroup": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserGroupToOneLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of userDataFilter entity."
            },
            "JsonApiUserDataFilterOutIncludes": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiUserOutWithLinks"
                    },
                    {
                        "$ref": "#/components/schemas/JsonApiUserGroupOutWithLinks"
                    },
                    {
                        "$ref": "#/components/schemas/JsonApiFactOutWithLinks"
                    },
                    {
                        "$ref": "#/components/schemas/JsonApiAttributeOutWithLinks"
                    },
                    {
                        "$ref": "#/components/schemas/JsonApiLabelOutWithLinks"
                    },
                    {
                        "$ref": "#/components/schemas/JsonApiMetricOutWithLinks"
                    },
                    {
                        "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
                    }
                ]
            },
            "JsonApiUserDataFilterOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiUserDataFilterOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiUserDataFilterOutIncludes"
                        }
                    }
                }
            },
            "JsonApiUserDataFilterOut": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "userDataFilter",
                        "enum": ["userDataFilter"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "origin": {
                                "required": ["originId", "originType"],
                                "type": "object",
                                "properties": {
                                    "originType": {
                                        "type": "string",
                                        "description": "defines type of the origin of the entity",
                                        "enum": ["NATIVE", "PARENT"]
                                    },
                                    "originId": {
                                        "type": "string",
                                        "description": "defines id of the workspace where the entity comes from"
                                    }
                                }
                            }
                        }
                    },
                    "attributes": {
                        "required": ["maql"],
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "maql": {
                                "maxLength": 10000,
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "user": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserToOneLinkage"
                                    }
                                }
                            },
                            "userGroup": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserGroupToOneLinkage"
                                    }
                                }
                            },
                            "facts": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiFactToManyLinkage"
                                    }
                                }
                            },
                            "attributes": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiAttributeToManyLinkage"
                                    }
                                }
                            },
                            "labels": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiLabelToManyLinkage"
                                    }
                                }
                            },
                            "metrics": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiMetricToManyLinkage"
                                    }
                                }
                            },
                            "datasets": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiDatasetToManyLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of userDataFilter entity."
            },
            "JsonApiVisualizationObjectInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiVisualizationObjectIn"
                    }
                }
            },
            "JsonApiVisualizationObjectIn": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "visualizationObject",
                        "enum": ["visualizationObject"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "required": ["content"],
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 250000 characters.",
                                "example": {
                                    "identifier": {
                                        "id": "label.leaf",
                                        "type": "label"
                                    },
                                    "someBoolProp": false
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of visualizationObject entity."
            },
            "JsonApiVisualizationObjectOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiVisualizationObjectOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiMetricOutIncludes"
                        }
                    }
                }
            },
            "JsonApiVisualizationObjectOut": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "visualizationObject",
                        "enum": ["visualizationObject"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "origin": {
                                "required": ["originId", "originType"],
                                "type": "object",
                                "properties": {
                                    "originType": {
                                        "type": "string",
                                        "description": "defines type of the origin of the entity",
                                        "enum": ["NATIVE", "PARENT"]
                                    },
                                    "originId": {
                                        "type": "string",
                                        "description": "defines id of the workspace where the entity comes from"
                                    }
                                }
                            }
                        }
                    },
                    "attributes": {
                        "required": ["content"],
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 250000 characters.",
                                "example": {
                                    "identifier": {
                                        "id": "label.leaf",
                                        "type": "label"
                                    },
                                    "someBoolProp": false
                                }
                            },
                            "createdAt": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "modifiedAt": {
                                "type": "string",
                                "format": "date-time"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "createdBy": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserIdentifierToOneLinkage"
                                    }
                                }
                            },
                            "modifiedBy": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserIdentifierToOneLinkage"
                                    }
                                }
                            },
                            "facts": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiFactToManyLinkage"
                                    }
                                }
                            },
                            "attributes": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiAttributeToManyLinkage"
                                    }
                                }
                            },
                            "labels": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiLabelToManyLinkage"
                                    }
                                }
                            },
                            "metrics": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiMetricToManyLinkage"
                                    }
                                }
                            },
                            "datasets": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiDatasetToManyLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of visualizationObject entity."
            },
            "JsonApiWorkspaceDataFilterSettingInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingIn"
                    }
                }
            },
            "JsonApiWorkspaceDataFilterSettingIn": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "workspaceDataFilterSetting",
                        "enum": ["workspaceDataFilterSetting"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "filterValues": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "workspaceDataFilter": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterToOneLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of workspaceDataFilterSetting entity."
            },
            "JsonApiWorkspaceDataFilterLinkage": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["workspaceDataFilter"]
                    }
                },
                "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members."
            },
            "JsonApiWorkspaceDataFilterToOneLinkage": {
                "description": "References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "nullable": true,
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterLinkage"
                    }
                ]
            },
            "JsonApiWorkspaceDataFilterSettingOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOutWithLinks"
                        }
                    }
                }
            },
            "JsonApiWorkspaceDataFilterSettingOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "workspaceDataFilterSetting",
                        "enum": ["workspaceDataFilterSetting"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "origin": {
                                "required": ["originId", "originType"],
                                "type": "object",
                                "properties": {
                                    "originType": {
                                        "type": "string",
                                        "description": "defines type of the origin of the entity",
                                        "enum": ["NATIVE", "PARENT"]
                                    },
                                    "originId": {
                                        "type": "string",
                                        "description": "defines id of the workspace where the entity comes from"
                                    }
                                }
                            }
                        }
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "filterValues": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "workspaceDataFilter": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterToOneLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of workspaceDataFilterSetting entity."
            },
            "JsonApiWorkspaceDataFilterInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterIn"
                    }
                }
            },
            "JsonApiWorkspaceDataFilterIn": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "workspaceDataFilter",
                        "enum": ["workspaceDataFilter"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "columnName": {
                                "maxLength": 255,
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "filterSettings": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingToManyLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of workspaceDataFilter entity."
            },
            "JsonApiWorkspaceDataFilterSettingLinkage": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["workspaceDataFilterSetting"]
                    }
                },
                "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members."
            },
            "JsonApiWorkspaceDataFilterSettingToManyLinkage": {
                "type": "array",
                "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "items": {
                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingLinkage"
                }
            },
            "JsonApiWorkspaceDataFilterOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOutWithLinks"
                        }
                    }
                }
            },
            "JsonApiWorkspaceDataFilterOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "workspaceDataFilter",
                        "enum": ["workspaceDataFilter"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "origin": {
                                "required": ["originId", "originType"],
                                "type": "object",
                                "properties": {
                                    "originType": {
                                        "type": "string",
                                        "description": "defines type of the origin of the entity",
                                        "enum": ["NATIVE", "PARENT"]
                                    },
                                    "originId": {
                                        "type": "string",
                                        "description": "defines id of the workspace where the entity comes from"
                                    }
                                }
                            }
                        }
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "columnName": {
                                "maxLength": 255,
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "filterSettings": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingToManyLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of workspaceDataFilter entity."
            },
            "JsonApiWorkspaceSettingInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiWorkspaceSettingIn"
                    }
                }
            },
            "JsonApiWorkspaceSettingIn": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "workspaceSetting",
                        "enum": ["workspaceSetting"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                                "example": {}
                            },
                            "type": {
                                "type": "string",
                                "enum": [
                                    "TIMEZONE",
                                    "ACTIVE_THEME",
                                    "ACTIVE_COLOR_PALETTE",
                                    "WHITE_LABELING",
                                    "LOCALE",
                                    "METADATA_LOCALE",
                                    "FORMAT_LOCALE",
                                    "MAPBOX_TOKEN",
                                    "WEEK_START",
                                    "SHOW_HIDDEN_CATALOG_ITEMS",
                                    "OPERATOR_OVERRIDES",
                                    "TIMEZONE_VALIDATION_ENABLED"
                                ]
                            }
                        }
                    }
                },
                "description": "JSON:API representation of workspaceSetting entity."
            },
            "JsonApiWorkspaceSettingOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiWorkspaceSettingOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    }
                }
            },
            "JsonApiWorkspaceSettingOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "workspaceSetting",
                        "enum": ["workspaceSetting"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "origin": {
                                "required": ["originId", "originType"],
                                "type": "object",
                                "properties": {
                                    "originType": {
                                        "type": "string",
                                        "description": "defines type of the origin of the entity",
                                        "enum": ["NATIVE", "PARENT"]
                                    },
                                    "originId": {
                                        "type": "string",
                                        "description": "defines id of the workspace where the entity comes from"
                                    }
                                }
                            }
                        }
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                                "example": {}
                            },
                            "type": {
                                "type": "string",
                                "enum": [
                                    "TIMEZONE",
                                    "ACTIVE_THEME",
                                    "ACTIVE_COLOR_PALETTE",
                                    "WHITE_LABELING",
                                    "LOCALE",
                                    "METADATA_LOCALE",
                                    "FORMAT_LOCALE",
                                    "MAPBOX_TOKEN",
                                    "WEEK_START",
                                    "SHOW_HIDDEN_CATALOG_ITEMS",
                                    "OPERATOR_OVERRIDES",
                                    "TIMEZONE_VALIDATION_ENABLED"
                                ]
                            }
                        }
                    }
                },
                "description": "JSON:API representation of workspaceSetting entity."
            },
            "JsonApiColorPalettePatchDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiColorPalettePatch"
                    }
                }
            },
            "JsonApiColorPalettePatch": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "colorPalette",
                        "enum": ["colorPalette"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                                "example": {}
                            }
                        }
                    }
                },
                "description": "JSON:API representation of patching colorPalette entity."
            },
            "JsonApiColorPaletteOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiColorPaletteOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    }
                }
            },
            "JsonApiColorPaletteOut": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "colorPalette",
                        "enum": ["colorPalette"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "required": ["content", "name"],
                        "type": "object",
                        "properties": {
                            "name": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                                "example": {}
                            }
                        }
                    }
                },
                "description": "JSON:API representation of colorPalette entity."
            },
            "JsonApiCspDirectivePatchDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiCspDirectivePatch"
                    }
                }
            },
            "JsonApiCspDirectivePatch": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "cspDirective",
                        "enum": ["cspDirective"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "sources": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of patching cspDirective entity."
            },
            "JsonApiCspDirectiveOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiCspDirectiveOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    }
                }
            },
            "JsonApiCspDirectiveOut": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "cspDirective",
                        "enum": ["cspDirective"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "required": ["sources"],
                        "type": "object",
                        "properties": {
                            "sources": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of cspDirective entity."
            },
            "JsonApiDataSourcePatchDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiDataSourcePatch"
                    }
                }
            },
            "JsonApiDataSourcePatch": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "dataSource",
                        "enum": ["dataSource"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "maxLength": 255,
                                "type": "string",
                                "description": "User-facing name of the data source."
                            },
                            "type": {
                                "type": "string",
                                "description": "Type of the database providing the data for the data source.",
                                "enum": [
                                    "POSTGRESQL",
                                    "REDSHIFT",
                                    "VERTICA",
                                    "SNOWFLAKE",
                                    "ADS",
                                    "BIGQUERY",
                                    "MSSQL",
                                    "PRESTO",
                                    "DREMIO",
                                    "DRILL",
                                    "GREENPLUM",
                                    "AZURESQL",
                                    "SYNAPSESQL",
                                    "DATABRICKS",
                                    "GDSTORAGE",
                                    "CLICKHOUSE",
                                    "MYSQL",
                                    "MARIADB"
                                ]
                            },
                            "url": {
                                "maxLength": 255,
                                "type": "string",
                                "description": "The URL of the database providing the data for the data source.",
                                "nullable": true
                            },
                            "schema": {
                                "maxLength": 255,
                                "type": "string",
                                "description": "The schema to use as the root of the data for the data source."
                            },
                            "username": {
                                "maxLength": 255,
                                "type": "string",
                                "description": "The username to use to connect to the database providing the data for the data source.",
                                "nullable": true
                            },
                            "password": {
                                "maxLength": 255,
                                "type": "string",
                                "description": "The password to use to connect to the database providing the data for the data source.",
                                "nullable": true
                            },
                            "token": {
                                "maxLength": 10000,
                                "type": "string",
                                "description": "The token to use to connect to the database providing the data for the data source (for example a BigQuery Sevice Acount).",
                                "nullable": true
                            },
                            "enableCaching": {
                                "type": "boolean",
                                "description": "Enable CTAS caching of intermediate results in the database.",
                                "nullable": true,
                                "example": false
                            },
                            "cachePath": {
                                "type": "array",
                                "description": "Path to schema, where intermediate caches are stored.",
                                "nullable": true,
                                "items": {
                                    "type": "string"
                                }
                            },
                            "parameters": {
                                "type": "array",
                                "description": "Additional parameters to be used when connecting to the database providing the data for the data source.",
                                "nullable": true,
                                "items": {
                                    "required": ["name", "value"],
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "cacheStrategy": {
                                "type": "string",
                                "description": "Determines how the results coming from a particular datasource should be cached.",
                                "nullable": true,
                                "enum": ["ALWAYS", "NEVER"]
                            }
                        }
                    }
                },
                "description": "JSON:API representation of patching dataSource entity."
            },
            "JsonApiDataSourceOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiDataSourceOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    }
                }
            },
            "JsonApiDataSourceOut": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "dataSource",
                        "enum": ["dataSource"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "permissions": {
                                "type": "array",
                                "description": "List of valid permissions for a logged-in user.",
                                "items": {
                                    "type": "string",
                                    "enum": ["MANAGE", "USE"]
                                }
                            }
                        }
                    },
                    "attributes": {
                        "required": ["name", "schema", "type"],
                        "type": "object",
                        "properties": {
                            "name": {
                                "maxLength": 255,
                                "type": "string",
                                "description": "User-facing name of the data source."
                            },
                            "type": {
                                "type": "string",
                                "description": "Type of the database providing the data for the data source.",
                                "enum": [
                                    "POSTGRESQL",
                                    "REDSHIFT",
                                    "VERTICA",
                                    "SNOWFLAKE",
                                    "ADS",
                                    "BIGQUERY",
                                    "MSSQL",
                                    "PRESTO",
                                    "DREMIO",
                                    "DRILL",
                                    "GREENPLUM",
                                    "AZURESQL",
                                    "SYNAPSESQL",
                                    "DATABRICKS",
                                    "GDSTORAGE",
                                    "CLICKHOUSE",
                                    "MYSQL",
                                    "MARIADB"
                                ]
                            },
                            "url": {
                                "maxLength": 255,
                                "type": "string",
                                "description": "The URL of the database providing the data for the data source.",
                                "nullable": true
                            },
                            "schema": {
                                "maxLength": 255,
                                "type": "string",
                                "description": "The schema to use as the root of the data for the data source."
                            },
                            "username": {
                                "maxLength": 255,
                                "type": "string",
                                "description": "The username to use to connect to the database providing the data for the data source.",
                                "nullable": true
                            },
                            "enableCaching": {
                                "type": "boolean",
                                "description": "Enable CTAS caching of intermediate results in the database.",
                                "nullable": true,
                                "example": false
                            },
                            "cachePath": {
                                "type": "array",
                                "description": "Path to schema, where intermediate caches are stored.",
                                "nullable": true,
                                "items": {
                                    "type": "string"
                                }
                            },
                            "parameters": {
                                "type": "array",
                                "description": "Additional parameters to be used when connecting to the database providing the data for the data source.",
                                "nullable": true,
                                "items": {
                                    "required": ["name", "value"],
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "decodedParameters": {
                                "type": "array",
                                "description": "Decoded parameters to be used when connecting to the database providing the data for the data source.",
                                "nullable": true,
                                "items": {
                                    "required": ["name", "value"],
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "cacheStrategy": {
                                "type": "string",
                                "description": "Determines how the results coming from a particular datasource should be cached.",
                                "nullable": true,
                                "enum": ["ALWAYS", "NEVER"]
                            }
                        }
                    }
                },
                "description": "JSON:API representation of dataSource entity."
            },
            "JsonApiJwkPatchDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiJwkPatch"
                    }
                }
            },
            "JsonApiJwkPatch": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "jwk",
                        "enum": ["jwk"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "object",
                                "description": "Specification of the cryptographic key",
                                "example": {
                                    "kyt": "RSA",
                                    "alg": "RS256",
                                    "use": "sig"
                                },
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/RsaSpecification"
                                    }
                                ]
                            }
                        }
                    }
                },
                "description": "JSON:API representation of patching jwk entity."
            },
            "RsaSpecification": {
                "required": ["alg", "e", "kid", "kty", "n", "use"],
                "type": "object",
                "properties": {
                    "kty": {
                        "type": "string",
                        "enum": ["RSA"]
                    },
                    "alg": {
                        "type": "string",
                        "enum": ["RS256", "RS384", "RS512"]
                    },
                    "use": {
                        "type": "string",
                        "enum": ["sig"]
                    },
                    "x5c": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "n": {
                        "type": "string"
                    },
                    "e": {
                        "type": "string"
                    },
                    "kid": {
                        "maxLength": 255,
                        "minLength": 0,
                        "pattern": "^[^.]",
                        "type": "string"
                    },
                    "x5t": {
                        "type": "string"
                    }
                }
            },
            "JsonApiJwkOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiJwkOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    }
                }
            },
            "JsonApiJwkOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "jwk",
                        "enum": ["jwk"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "object",
                                "description": "Specification of the cryptographic key",
                                "example": {
                                    "kyt": "RSA",
                                    "alg": "RS256",
                                    "use": "sig"
                                },
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/RsaSpecification"
                                    }
                                ]
                            }
                        }
                    }
                },
                "description": "JSON:API representation of jwk entity."
            },
            "JsonApiOrganizationSettingPatchDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiOrganizationSettingPatch"
                    }
                }
            },
            "JsonApiOrganizationSettingPatch": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "organizationSetting",
                        "enum": ["organizationSetting"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                                "example": {}
                            },
                            "type": {
                                "type": "string",
                                "enum": [
                                    "TIMEZONE",
                                    "ACTIVE_THEME",
                                    "ACTIVE_COLOR_PALETTE",
                                    "WHITE_LABELING",
                                    "LOCALE",
                                    "METADATA_LOCALE",
                                    "FORMAT_LOCALE",
                                    "MAPBOX_TOKEN",
                                    "WEEK_START",
                                    "SHOW_HIDDEN_CATALOG_ITEMS",
                                    "OPERATOR_OVERRIDES",
                                    "TIMEZONE_VALIDATION_ENABLED"
                                ]
                            }
                        }
                    }
                },
                "description": "JSON:API representation of patching organizationSetting entity."
            },
            "JsonApiOrganizationSettingOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiOrganizationSettingOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    }
                }
            },
            "JsonApiOrganizationSettingOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "organizationSetting",
                        "enum": ["organizationSetting"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                                "example": {}
                            },
                            "type": {
                                "type": "string",
                                "enum": [
                                    "TIMEZONE",
                                    "ACTIVE_THEME",
                                    "ACTIVE_COLOR_PALETTE",
                                    "WHITE_LABELING",
                                    "LOCALE",
                                    "METADATA_LOCALE",
                                    "FORMAT_LOCALE",
                                    "MAPBOX_TOKEN",
                                    "WEEK_START",
                                    "SHOW_HIDDEN_CATALOG_ITEMS",
                                    "OPERATOR_OVERRIDES",
                                    "TIMEZONE_VALIDATION_ENABLED"
                                ]
                            }
                        }
                    }
                },
                "description": "JSON:API representation of organizationSetting entity."
            },
            "JsonApiThemePatchDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiThemePatch"
                    }
                }
            },
            "JsonApiThemePatch": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "theme",
                        "enum": ["theme"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                                "example": {}
                            }
                        }
                    }
                },
                "description": "JSON:API representation of patching theme entity."
            },
            "JsonApiThemeOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiThemeOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    }
                }
            },
            "JsonApiThemeOut": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "theme",
                        "enum": ["theme"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "required": ["content", "name"],
                        "type": "object",
                        "properties": {
                            "name": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                                "example": {}
                            }
                        }
                    }
                },
                "description": "JSON:API representation of theme entity."
            },
            "JsonApiUserGroupPatchDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiUserGroupPatch"
                    }
                }
            },
            "JsonApiUserGroupPatch": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "userGroup",
                        "enum": ["userGroup"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "maxLength": 255,
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "parents": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserGroupToManyLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of patching userGroup entity."
            },
            "JsonApiUserGroupToManyLinkage": {
                "type": "array",
                "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "items": {
                    "$ref": "#/components/schemas/JsonApiUserGroupLinkage"
                }
            },
            "JsonApiUserGroupOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiUserGroupOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiUserGroupOutWithLinks"
                        }
                    }
                }
            },
            "JsonApiUserGroupOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "userGroup",
                        "enum": ["userGroup"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "maxLength": 255,
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "parents": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserGroupToManyLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of userGroup entity."
            },
            "JsonApiUserPatchDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiUserPatch"
                    }
                }
            },
            "JsonApiUserPatch": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "user",
                        "enum": ["user"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "authenticationId": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "firstname": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "lastname": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "email": {
                                "maxLength": 255,
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "userGroups": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserGroupToManyLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of patching user entity."
            },
            "JsonApiUserOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiUserOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiUserGroupOutWithLinks"
                        }
                    }
                }
            },
            "JsonApiUserOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "user",
                        "enum": ["user"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "authenticationId": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "firstname": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "lastname": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "email": {
                                "maxLength": 255,
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "userGroups": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserGroupToManyLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of user entity."
            },
            "JsonApiWorkspacePatchDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiWorkspacePatch"
                    }
                }
            },
            "JsonApiWorkspacePatch": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "workspace",
                        "enum": ["workspace"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "earlyAccess": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "prefix": {
                                "maxLength": 255,
                                "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                                "type": "string",
                                "description": "Custom prefix of entity identifiers in workspace"
                            },
                            "cacheExtraLimit": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "dataSource": {
                                "required": ["id"],
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "type": "string",
                                        "description": "The ID of the used data source.",
                                        "example": "snowflake.instance.1"
                                    },
                                    "schemaPath": {
                                        "type": "array",
                                        "description": "The full schema path as array of its path parts. Will be rendered as subPath1.subPath2...",
                                        "items": {
                                            "type": "string",
                                            "description": "The part of the schema path.",
                                            "example": "subPath"
                                        }
                                    }
                                },
                                "description": "The data source used for the particular workspace instead of the one defined in the LDM inherited from its parent workspace. Such data source cannot be defined for a single or a top-parent workspace."
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "parent": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiWorkspaceToOneLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of patching workspace entity."
            },
            "JsonApiWorkspaceLinkage": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["workspace"]
                    }
                },
                "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members."
            },
            "JsonApiWorkspaceToOneLinkage": {
                "description": "References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "nullable": true,
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiWorkspaceLinkage"
                    }
                ]
            },
            "JsonApiWorkspaceOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiWorkspaceOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiWorkspaceOutWithLinks"
                        }
                    }
                }
            },
            "JsonApiWorkspaceOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "workspace",
                        "enum": ["workspace"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "config": {
                                "type": "object",
                                "properties": {
                                    "dataSamplingAvailable": {
                                        "type": "boolean",
                                        "description": "is sampling enabled - based on type of data-source connected to this workspace",
                                        "default": false
                                    },
                                    "approximateCountAvailable": {
                                        "type": "boolean",
                                        "description": "is approximate count enabled - based on type of data-source connected to this workspace",
                                        "default": false
                                    },
                                    "showAllValuesOnDatesAvailable": {
                                        "type": "boolean",
                                        "description": "is 'show all values' displayed for dates - based on type of data-source connected to this workspace",
                                        "default": false
                                    }
                                }
                            },
                            "permissions": {
                                "type": "array",
                                "description": "List of valid permissions for a logged-in user.",
                                "items": {
                                    "type": "string",
                                    "enum": [
                                        "MANAGE",
                                        "ANALYZE",
                                        "EXPORT",
                                        "EXPORT_TABULAR",
                                        "EXPORT_PDF",
                                        "VIEW"
                                    ]
                                }
                            },
                            "hierarchy": {
                                "required": ["childrenCount"],
                                "type": "object",
                                "properties": {
                                    "childrenCount": {
                                        "type": "integer",
                                        "description": "include the number of direct children of each workspace",
                                        "format": "int32"
                                    }
                                }
                            },
                            "dataModel": {
                                "required": ["datasetCount"],
                                "type": "object",
                                "properties": {
                                    "datasetCount": {
                                        "type": "integer",
                                        "description": "include the number of dataset of each workspace",
                                        "format": "int32"
                                    }
                                }
                            }
                        }
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "earlyAccess": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "prefix": {
                                "maxLength": 255,
                                "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                                "type": "string",
                                "description": "Custom prefix of entity identifiers in workspace"
                            },
                            "cacheExtraLimit": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "dataSource": {
                                "required": ["id"],
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "type": "string",
                                        "description": "The ID of the used data source.",
                                        "example": "snowflake.instance.1"
                                    },
                                    "schemaPath": {
                                        "type": "array",
                                        "description": "The full schema path as array of its path parts. Will be rendered as subPath1.subPath2...",
                                        "items": {
                                            "type": "string",
                                            "description": "The part of the schema path.",
                                            "example": "subPath"
                                        }
                                    }
                                },
                                "description": "The data source used for the particular workspace instead of the one defined in the LDM inherited from its parent workspace. Such data source cannot be defined for a single or a top-parent workspace."
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "parent": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiWorkspaceToOneLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of workspace entity."
            },
            "JsonApiAnalyticalDashboardPatchDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiAnalyticalDashboardPatch"
                    }
                }
            },
            "JsonApiAnalyticalDashboardPatch": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "analyticalDashboard",
                        "enum": ["analyticalDashboard"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 250000 characters.",
                                "example": {
                                    "identifier": {
                                        "id": "label.leaf",
                                        "type": "label"
                                    },
                                    "someBoolProp": false
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of patching analyticalDashboard entity."
            },
            "JsonApiAttributeHierarchyPatchDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiAttributeHierarchyPatch"
                    }
                }
            },
            "JsonApiAttributeHierarchyPatch": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "attributeHierarchy",
                        "enum": ["attributeHierarchy"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                                "example": {
                                    "attributes": [
                                        {
                                            "identifier": {
                                                "type": "attribute",
                                                "id": "country"
                                            }
                                        },
                                        {
                                            "identifier": {
                                                "type": "attribute",
                                                "id": "city"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of patching attributeHierarchy entity."
            },
            "JsonApiCustomApplicationSettingPatchDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiCustomApplicationSettingPatch"
                    }
                }
            },
            "JsonApiCustomApplicationSettingPatch": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "customApplicationSetting",
                        "enum": ["customApplicationSetting"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "applicationName": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                                "example": {}
                            }
                        }
                    }
                },
                "description": "JSON:API representation of patching customApplicationSetting entity."
            },
            "JsonApiDashboardPluginPatchDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiDashboardPluginPatch"
                    }
                }
            },
            "JsonApiDashboardPluginPatch": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "dashboardPlugin",
                        "enum": ["dashboardPlugin"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 250000 characters.",
                                "example": {
                                    "url": "<plugin-url>"
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of patching dashboardPlugin entity."
            },
            "JsonApiExportDefinitionPatchDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiExportDefinitionPatch"
                    }
                }
            },
            "JsonApiExportDefinitionPatch": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "exportDefinition",
                        "enum": ["exportDefinition"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "requestPayload": {
                                "type": "object",
                                "description": "Free-form JSON content to be used as export request payload for /export/tabular endpoint. Maximum supported length is 15000 characters.",
                                "example": {
                                    "format": "PDF",
                                    "visualizationObjectId": "<id>"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "visualizationObject": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiVisualizationObjectToOneLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of patching exportDefinition entity."
            },
            "JsonApiFilterContextPatchDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiFilterContextPatch"
                    }
                }
            },
            "JsonApiFilterContextPatch": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "filterContext",
                        "enum": ["filterContext"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 250000 characters.",
                                "example": {
                                    "identifier": {
                                        "id": "label.leaf",
                                        "type": "label"
                                    },
                                    "someBoolProp": false
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of patching filterContext entity."
            },
            "JsonApiMetricPatchDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiMetricPatch"
                    }
                }
            },
            "JsonApiMetricPatch": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "metric",
                        "enum": ["metric"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "content": {
                                "required": ["maql"],
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "maxLength": 2048,
                                        "type": "string"
                                    },
                                    "maql": {
                                        "maxLength": 10000,
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of patching metric entity."
            },
            "JsonApiUserDataFilterPatchDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiUserDataFilterPatch"
                    }
                }
            },
            "JsonApiUserDataFilterPatch": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "userDataFilter",
                        "enum": ["userDataFilter"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "maql": {
                                "maxLength": 10000,
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "user": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserToOneLinkage"
                                    }
                                }
                            },
                            "userGroup": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserGroupToOneLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of patching userDataFilter entity."
            },
            "JsonApiVisualizationObjectPatchDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiVisualizationObjectPatch"
                    }
                }
            },
            "JsonApiVisualizationObjectPatch": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "visualizationObject",
                        "enum": ["visualizationObject"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 250000 characters.",
                                "example": {
                                    "identifier": {
                                        "id": "label.leaf",
                                        "type": "label"
                                    },
                                    "someBoolProp": false
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of patching visualizationObject entity."
            },
            "JsonApiWorkspaceDataFilterSettingPatchDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingPatch"
                    }
                }
            },
            "JsonApiWorkspaceDataFilterSettingPatch": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "workspaceDataFilterSetting",
                        "enum": ["workspaceDataFilterSetting"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "filterValues": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "workspaceDataFilter": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterToOneLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of patching workspaceDataFilterSetting entity."
            },
            "JsonApiWorkspaceDataFilterPatchDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterPatch"
                    }
                }
            },
            "JsonApiWorkspaceDataFilterPatch": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "workspaceDataFilter",
                        "enum": ["workspaceDataFilter"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "columnName": {
                                "maxLength": 255,
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "filterSettings": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingToManyLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of patching workspaceDataFilter entity."
            },
            "JsonApiWorkspaceSettingPatchDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiWorkspaceSettingPatch"
                    }
                }
            },
            "JsonApiWorkspaceSettingPatch": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "workspaceSetting",
                        "enum": ["workspaceSetting"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                                "example": {}
                            },
                            "type": {
                                "type": "string",
                                "enum": [
                                    "TIMEZONE",
                                    "ACTIVE_THEME",
                                    "ACTIVE_COLOR_PALETTE",
                                    "WHITE_LABELING",
                                    "LOCALE",
                                    "METADATA_LOCALE",
                                    "FORMAT_LOCALE",
                                    "MAPBOX_TOKEN",
                                    "WEEK_START",
                                    "SHOW_HIDDEN_CATALOG_ITEMS",
                                    "OPERATOR_OVERRIDES",
                                    "TIMEZONE_VALIDATION_ENABLED"
                                ]
                            }
                        }
                    }
                },
                "description": "JSON:API representation of patching workspaceSetting entity."
            },
            "JsonApiAttributeOutIncludes": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
                    },
                    {
                        "$ref": "#/components/schemas/JsonApiLabelOutWithLinks"
                    },
                    {
                        "$ref": "#/components/schemas/JsonApiAttributeHierarchyOutWithLinks"
                    }
                ]
            },
            "JsonApiAttributeOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiAttributeOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiAttributeOutIncludes"
                        }
                    }
                }
            },
            "JsonApiAttributeOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "attribute",
                        "enum": ["attribute"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "origin": {
                                "required": ["originId", "originType"],
                                "type": "object",
                                "properties": {
                                    "originType": {
                                        "type": "string",
                                        "description": "defines type of the origin of the entity",
                                        "enum": ["NATIVE", "PARENT"]
                                    },
                                    "originId": {
                                        "type": "string",
                                        "description": "defines id of the workspace where the entity comes from"
                                    }
                                }
                            }
                        }
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "granularity": {
                                "type": "string",
                                "enum": [
                                    "MINUTE",
                                    "HOUR",
                                    "DAY",
                                    "WEEK",
                                    "MONTH",
                                    "QUARTER",
                                    "YEAR",
                                    "MINUTE_OF_HOUR",
                                    "HOUR_OF_DAY",
                                    "DAY_OF_WEEK",
                                    "DAY_OF_MONTH",
                                    "DAY_OF_YEAR",
                                    "WEEK_OF_YEAR",
                                    "MONTH_OF_YEAR",
                                    "QUARTER_OF_YEAR"
                                ]
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "sortColumn": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "sortDirection": {
                                "type": "string",
                                "enum": ["ASC", "DESC"]
                            },
                            "sourceColumn": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "sourceColumnDataType": {
                                "type": "string",
                                "enum": [
                                    "INT",
                                    "STRING",
                                    "DATE",
                                    "NUMERIC",
                                    "TIMESTAMP",
                                    "TIMESTAMP_TZ",
                                    "BOOLEAN"
                                ]
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "dataset": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiDatasetToOneLinkage"
                                    }
                                }
                            },
                            "defaultView": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiLabelToOneLinkage"
                                    }
                                }
                            },
                            "labels": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiLabelToManyLinkage"
                                    }
                                }
                            },
                            "attributeHierarchies": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiAttributeHierarchyToManyLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of attribute entity."
            },
            "JsonApiAttributeHierarchyLinkage": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["attributeHierarchy"]
                    }
                },
                "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members."
            },
            "JsonApiAttributeHierarchyToManyLinkage": {
                "type": "array",
                "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "items": {
                    "$ref": "#/components/schemas/JsonApiAttributeHierarchyLinkage"
                }
            },
            "JsonApiDatasetToOneLinkage": {
                "description": "References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "nullable": true,
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiDatasetLinkage"
                    }
                ]
            },
            "JsonApiLabelToOneLinkage": {
                "description": "References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "nullable": true,
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiLabelLinkage"
                    }
                ]
            },
            "JsonApiDatasetOutIncludes": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiAttributeOutWithLinks"
                    },
                    {
                        "$ref": "#/components/schemas/JsonApiFactOutWithLinks"
                    },
                    {
                        "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
                    },
                    {
                        "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOutWithLinks"
                    }
                ]
            },
            "JsonApiDatasetOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiDatasetOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiDatasetOutIncludes"
                        }
                    }
                }
            },
            "JsonApiDatasetOut": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "dataset",
                        "enum": ["dataset"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "origin": {
                                "required": ["originId", "originType"],
                                "type": "object",
                                "properties": {
                                    "originType": {
                                        "type": "string",
                                        "description": "defines type of the origin of the entity",
                                        "enum": ["NATIVE", "PARENT"]
                                    },
                                    "originId": {
                                        "type": "string",
                                        "description": "defines id of the workspace where the entity comes from"
                                    }
                                }
                            }
                        }
                    },
                    "attributes": {
                        "required": ["type"],
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "type": {
                                "type": "string",
                                "enum": ["NORMAL", "DATE"]
                            },
                            "grain": {
                                "type": "array",
                                "items": {
                                    "required": ["id", "type"],
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "type": "string"
                                        },
                                        "type": {
                                            "type": "string",
                                            "enum": ["attribute", "date"]
                                        }
                                    }
                                }
                            },
                            "referenceProperties": {
                                "type": "array",
                                "items": {
                                    "required": ["identifier", "multivalue"],
                                    "type": "object",
                                    "properties": {
                                        "identifier": {
                                            "$ref": "#/components/schemas/DatasetReferenceIdentifier"
                                        },
                                        "multivalue": {
                                            "type": "boolean"
                                        },
                                        "sources": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ReferenceSourceColumn"
                                            }
                                        },
                                        "sourceColumns": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "sourceColumnDataTypes": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "enum": [
                                                    "INT",
                                                    "STRING",
                                                    "DATE",
                                                    "NUMERIC",
                                                    "TIMESTAMP",
                                                    "TIMESTAMP_TZ",
                                                    "BOOLEAN"
                                                ]
                                            }
                                        }
                                    }
                                }
                            },
                            "dataSourceTableId": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "dataSourceTablePath": {
                                "type": "array",
                                "description": "Path to database table.",
                                "example": ["schema", "table"],
                                "items": {
                                    "maxLength": 255,
                                    "type": "string"
                                }
                            },
                            "sql": {
                                "required": ["dataSourceId", "statement"],
                                "type": "object",
                                "properties": {
                                    "statement": {
                                        "type": "string"
                                    },
                                    "dataSourceId": {
                                        "type": "string"
                                    }
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "workspaceDataFilterColumns": {
                                "type": "array",
                                "items": {
                                    "required": ["dataType", "name"],
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string"
                                        },
                                        "dataType": {
                                            "type": "string",
                                            "enum": [
                                                "INT",
                                                "STRING",
                                                "DATE",
                                                "NUMERIC",
                                                "TIMESTAMP",
                                                "TIMESTAMP_TZ",
                                                "BOOLEAN"
                                            ]
                                        }
                                    }
                                }
                            },
                            "workspaceDataFilterReferences": {
                                "type": "array",
                                "items": {
                                    "required": ["filterColumn", "filterColumnDataType", "filterId"],
                                    "type": "object",
                                    "properties": {
                                        "filterId": {
                                            "$ref": "#/components/schemas/DatasetWorkspaceDataFilterIdentifier"
                                        },
                                        "filterColumn": {
                                            "type": "string"
                                        },
                                        "filterColumnDataType": {
                                            "type": "string",
                                            "enum": [
                                                "INT",
                                                "STRING",
                                                "DATE",
                                                "NUMERIC",
                                                "TIMESTAMP",
                                                "TIMESTAMP_TZ",
                                                "BOOLEAN"
                                            ]
                                        }
                                    },
                                    "description": "Workspace data filter reference."
                                }
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "attributes": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiAttributeToManyLinkage"
                                    }
                                }
                            },
                            "facts": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiFactToManyLinkage"
                                    }
                                }
                            },
                            "references": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiDatasetToManyLinkage"
                                    }
                                }
                            },
                            "workspaceDataFilters": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterToManyLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of dataset entity."
            },
            "DatasetGrain": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["attribute", "date"]
                    }
                }
            },
            "DatasetReferenceIdentifier": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["dataset"]
                    }
                }
            },
            "DatasetWorkspaceDataFilterIdentifier": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "Workspace Data Filters ID.",
                        "example": "country_id"
                    },
                    "type": {
                        "type": "string",
                        "description": "Filter type.",
                        "example": "workspaceDataFilter",
                        "enum": ["workspaceDataFilter"]
                    }
                },
                "description": "Identifier of a workspace data filter."
            },
            "JsonApiWorkspaceDataFilterToManyLinkage": {
                "type": "array",
                "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "items": {
                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterLinkage"
                }
            },
            "ReferenceSourceColumn": {
                "required": ["column", "target"],
                "type": "object",
                "properties": {
                    "column": {
                        "type": "string"
                    },
                    "dataType": {
                        "type": "string",
                        "enum": ["INT", "STRING", "DATE", "NUMERIC", "TIMESTAMP", "TIMESTAMP_TZ", "BOOLEAN"]
                    },
                    "target": {
                        "$ref": "#/components/schemas/DatasetGrain"
                    }
                }
            },
            "JsonApiFactOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiFactOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
                        }
                    }
                }
            },
            "JsonApiFactOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "fact",
                        "enum": ["fact"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "origin": {
                                "required": ["originId", "originType"],
                                "type": "object",
                                "properties": {
                                    "originType": {
                                        "type": "string",
                                        "description": "defines type of the origin of the entity",
                                        "enum": ["NATIVE", "PARENT"]
                                    },
                                    "originId": {
                                        "type": "string",
                                        "description": "defines id of the workspace where the entity comes from"
                                    }
                                }
                            }
                        }
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "sourceColumn": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "sourceColumnDataType": {
                                "type": "string",
                                "enum": [
                                    "INT",
                                    "STRING",
                                    "DATE",
                                    "NUMERIC",
                                    "TIMESTAMP",
                                    "TIMESTAMP_TZ",
                                    "BOOLEAN"
                                ]
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "dataset": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiDatasetToOneLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of fact entity."
            },
            "JsonApiLabelOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiLabelOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiAttributeOutWithLinks"
                        }
                    }
                }
            },
            "JsonApiLabelOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "label",
                        "enum": ["label"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "origin": {
                                "required": ["originId", "originType"],
                                "type": "object",
                                "properties": {
                                    "originType": {
                                        "type": "string",
                                        "description": "defines type of the origin of the entity",
                                        "enum": ["NATIVE", "PARENT"]
                                    },
                                    "originId": {
                                        "type": "string",
                                        "description": "defines id of the workspace where the entity comes from"
                                    }
                                }
                            }
                        }
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "primary": {
                                "type": "boolean"
                            },
                            "sourceColumn": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "sourceColumnDataType": {
                                "type": "string",
                                "enum": [
                                    "INT",
                                    "STRING",
                                    "DATE",
                                    "NUMERIC",
                                    "TIMESTAMP",
                                    "TIMESTAMP_TZ",
                                    "BOOLEAN"
                                ]
                            },
                            "valueType": {
                                "type": "string",
                                "enum": ["TEXT", "HYPERLINK", "GEO", "GEO_LONGITUDE", "GEO_LATITUDE", "IMAGE"]
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "attribute": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiAttributeToOneLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of label entity."
            },
            "JsonApiAttributeToOneLinkage": {
                "description": "References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "nullable": true,
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiAttributeLinkage"
                    }
                ]
            },
            "JsonApiApiTokenInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiApiTokenIn"
                    }
                }
            },
            "JsonApiApiTokenIn": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "apiToken",
                        "enum": ["apiToken"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    }
                },
                "description": "JSON:API representation of apiToken entity."
            },
            "JsonApiUserSettingInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiUserSettingIn"
                    }
                }
            },
            "JsonApiUserSettingIn": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "userSetting",
                        "enum": ["userSetting"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                                "example": {}
                            },
                            "type": {
                                "type": "string",
                                "enum": [
                                    "TIMEZONE",
                                    "ACTIVE_THEME",
                                    "ACTIVE_COLOR_PALETTE",
                                    "WHITE_LABELING",
                                    "LOCALE",
                                    "METADATA_LOCALE",
                                    "FORMAT_LOCALE",
                                    "MAPBOX_TOKEN",
                                    "WEEK_START",
                                    "SHOW_HIDDEN_CATALOG_ITEMS",
                                    "OPERATOR_OVERRIDES",
                                    "TIMEZONE_VALIDATION_ENABLED"
                                ]
                            }
                        }
                    }
                },
                "description": "JSON:API representation of userSetting entity."
            },
            "JsonApiColorPaletteInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiColorPaletteIn"
                    }
                }
            },
            "JsonApiColorPaletteIn": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "colorPalette",
                        "enum": ["colorPalette"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "required": ["content", "name"],
                        "type": "object",
                        "properties": {
                            "name": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                                "example": {}
                            }
                        }
                    }
                },
                "description": "JSON:API representation of colorPalette entity."
            },
            "JsonApiCspDirectiveInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiCspDirectiveIn"
                    }
                }
            },
            "JsonApiCspDirectiveIn": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "cspDirective",
                        "enum": ["cspDirective"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "required": ["sources"],
                        "type": "object",
                        "properties": {
                            "sources": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of cspDirective entity."
            },
            "JsonApiDataSourceInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiDataSourceIn"
                    }
                }
            },
            "JsonApiDataSourceIn": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "dataSource",
                        "enum": ["dataSource"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "required": ["name", "schema", "type"],
                        "type": "object",
                        "properties": {
                            "name": {
                                "maxLength": 255,
                                "type": "string",
                                "description": "User-facing name of the data source."
                            },
                            "type": {
                                "type": "string",
                                "description": "Type of the database providing the data for the data source.",
                                "enum": [
                                    "POSTGRESQL",
                                    "REDSHIFT",
                                    "VERTICA",
                                    "SNOWFLAKE",
                                    "ADS",
                                    "BIGQUERY",
                                    "MSSQL",
                                    "PRESTO",
                                    "DREMIO",
                                    "DRILL",
                                    "GREENPLUM",
                                    "AZURESQL",
                                    "SYNAPSESQL",
                                    "DATABRICKS",
                                    "GDSTORAGE",
                                    "CLICKHOUSE",
                                    "MYSQL",
                                    "MARIADB"
                                ]
                            },
                            "url": {
                                "maxLength": 255,
                                "type": "string",
                                "description": "The URL of the database providing the data for the data source.",
                                "nullable": true
                            },
                            "schema": {
                                "maxLength": 255,
                                "type": "string",
                                "description": "The schema to use as the root of the data for the data source."
                            },
                            "username": {
                                "maxLength": 255,
                                "type": "string",
                                "description": "The username to use to connect to the database providing the data for the data source.",
                                "nullable": true
                            },
                            "password": {
                                "maxLength": 255,
                                "type": "string",
                                "description": "The password to use to connect to the database providing the data for the data source.",
                                "nullable": true
                            },
                            "token": {
                                "maxLength": 10000,
                                "type": "string",
                                "description": "The token to use to connect to the database providing the data for the data source (for example a BigQuery Sevice Acount).",
                                "nullable": true
                            },
                            "enableCaching": {
                                "type": "boolean",
                                "description": "Enable CTAS caching of intermediate results in the database.",
                                "nullable": true,
                                "example": false
                            },
                            "cachePath": {
                                "type": "array",
                                "description": "Path to schema, where intermediate caches are stored.",
                                "nullable": true,
                                "items": {
                                    "type": "string"
                                }
                            },
                            "parameters": {
                                "type": "array",
                                "description": "Additional parameters to be used when connecting to the database providing the data for the data source.",
                                "nullable": true,
                                "items": {
                                    "required": ["name", "value"],
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "cacheStrategy": {
                                "type": "string",
                                "description": "Determines how the results coming from a particular datasource should be cached.",
                                "nullable": true,
                                "enum": ["ALWAYS", "NEVER"]
                            }
                        }
                    }
                },
                "description": "JSON:API representation of dataSource entity."
            },
            "JsonApiJwkInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiJwkIn"
                    }
                }
            },
            "JsonApiJwkIn": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "jwk",
                        "enum": ["jwk"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "object",
                                "description": "Specification of the cryptographic key",
                                "example": {
                                    "kyt": "RSA",
                                    "alg": "RS256",
                                    "use": "sig"
                                },
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/RsaSpecification"
                                    }
                                ]
                            }
                        }
                    }
                },
                "description": "JSON:API representation of jwk entity."
            },
            "JsonApiOrganizationSettingInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiOrganizationSettingIn"
                    }
                }
            },
            "JsonApiOrganizationSettingIn": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "organizationSetting",
                        "enum": ["organizationSetting"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                                "example": {}
                            },
                            "type": {
                                "type": "string",
                                "enum": [
                                    "TIMEZONE",
                                    "ACTIVE_THEME",
                                    "ACTIVE_COLOR_PALETTE",
                                    "WHITE_LABELING",
                                    "LOCALE",
                                    "METADATA_LOCALE",
                                    "FORMAT_LOCALE",
                                    "MAPBOX_TOKEN",
                                    "WEEK_START",
                                    "SHOW_HIDDEN_CATALOG_ITEMS",
                                    "OPERATOR_OVERRIDES",
                                    "TIMEZONE_VALIDATION_ENABLED"
                                ]
                            }
                        }
                    }
                },
                "description": "JSON:API representation of organizationSetting entity."
            },
            "JsonApiThemeInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiThemeIn"
                    }
                }
            },
            "JsonApiThemeIn": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "theme",
                        "enum": ["theme"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "required": ["content", "name"],
                        "type": "object",
                        "properties": {
                            "name": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                                "example": {}
                            }
                        }
                    }
                },
                "description": "JSON:API representation of theme entity."
            },
            "JsonApiUserGroupInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiUserGroupIn"
                    }
                }
            },
            "JsonApiUserGroupIn": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "userGroup",
                        "enum": ["userGroup"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "maxLength": 255,
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "parents": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserGroupToManyLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of userGroup entity."
            },
            "JsonApiUserInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiUserIn"
                    }
                }
            },
            "JsonApiUserIn": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "user",
                        "enum": ["user"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "authenticationId": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "firstname": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "lastname": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "email": {
                                "maxLength": 255,
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "userGroups": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserGroupToManyLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of user entity."
            },
            "JsonApiWorkspaceInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiWorkspaceIn"
                    }
                }
            },
            "JsonApiWorkspaceIn": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "workspace",
                        "enum": ["workspace"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "earlyAccess": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "prefix": {
                                "maxLength": 255,
                                "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                                "type": "string",
                                "description": "Custom prefix of entity identifiers in workspace"
                            },
                            "cacheExtraLimit": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "dataSource": {
                                "required": ["id"],
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "type": "string",
                                        "description": "The ID of the used data source.",
                                        "example": "snowflake.instance.1"
                                    },
                                    "schemaPath": {
                                        "type": "array",
                                        "description": "The full schema path as array of its path parts. Will be rendered as subPath1.subPath2...",
                                        "items": {
                                            "type": "string",
                                            "description": "The part of the schema path.",
                                            "example": "subPath"
                                        }
                                    }
                                },
                                "description": "The data source used for the particular workspace instead of the one defined in the LDM inherited from its parent workspace. Such data source cannot be defined for a single or a top-parent workspace."
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "parent": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiWorkspaceToOneLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of workspace entity."
            },
            "JsonApiAnalyticalDashboardOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiAnalyticalDashboardOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "page": {
                                "$ref": "#/components/schemas/PageMetadata"
                            }
                        }
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutIncludes"
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiAttributeHierarchyOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiAttributeHierarchyOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiAttributeHierarchyOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiAttributeHierarchyOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "page": {
                                "$ref": "#/components/schemas/PageMetadata"
                            }
                        }
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiAttributeHierarchyOutIncludes"
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiAttributeOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiAttributeOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiAttributeOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiAttributeOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "page": {
                                "$ref": "#/components/schemas/PageMetadata"
                            }
                        }
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiAttributeOutIncludes"
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiCustomApplicationSettingOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiCustomApplicationSettingOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiCustomApplicationSettingOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiCustomApplicationSettingOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "page": {
                                "$ref": "#/components/schemas/PageMetadata"
                            }
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiDashboardPluginOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiDashboardPluginOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiDashboardPluginOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiDashboardPluginOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "page": {
                                "$ref": "#/components/schemas/PageMetadata"
                            }
                        }
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiUserIdentifierOutWithLinks"
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiDatasetOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiDatasetOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiDatasetOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "page": {
                                "$ref": "#/components/schemas/PageMetadata"
                            }
                        }
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiDatasetOutIncludes"
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiExportDefinitionOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiExportDefinitionOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiExportDefinitionOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiExportDefinitionOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "page": {
                                "$ref": "#/components/schemas/PageMetadata"
                            }
                        }
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiExportDefinitionOutIncludes"
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiFactOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiFactOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiFactOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiFactOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "page": {
                                "$ref": "#/components/schemas/PageMetadata"
                            }
                        }
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiFilterContextOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiFilterContextOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiFilterContextOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiFilterContextOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "page": {
                                "$ref": "#/components/schemas/PageMetadata"
                            }
                        }
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiFilterContextOutIncludes"
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiLabelOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiLabelOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiLabelOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiLabelOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "page": {
                                "$ref": "#/components/schemas/PageMetadata"
                            }
                        }
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiAttributeOutWithLinks"
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiMetricOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiMetricOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiMetricOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiMetricOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "page": {
                                "$ref": "#/components/schemas/PageMetadata"
                            }
                        }
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiMetricOutIncludes"
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiUserDataFilterOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiUserDataFilterOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiUserDataFilterOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiUserDataFilterOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "page": {
                                "$ref": "#/components/schemas/PageMetadata"
                            }
                        }
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiUserDataFilterOutIncludes"
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiVisualizationObjectOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiVisualizationObjectOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiVisualizationObjectOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiVisualizationObjectOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "page": {
                                "$ref": "#/components/schemas/PageMetadata"
                            }
                        }
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiMetricOutIncludes"
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiWorkspaceDataFilterSettingOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiWorkspaceDataFilterSettingOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "page": {
                                "$ref": "#/components/schemas/PageMetadata"
                            }
                        }
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOutWithLinks"
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiWorkspaceDataFilterOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiWorkspaceDataFilterOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "page": {
                                "$ref": "#/components/schemas/PageMetadata"
                            }
                        }
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOutWithLinks"
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiWorkspaceSettingOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiWorkspaceSettingOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiWorkspaceSettingOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiWorkspaceSettingOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "page": {
                                "$ref": "#/components/schemas/PageMetadata"
                            }
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiCookieSecurityConfigurationInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiCookieSecurityConfigurationIn"
                    }
                }
            },
            "JsonApiCookieSecurityConfigurationIn": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "cookieSecurityConfiguration",
                        "enum": ["cookieSecurityConfiguration"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "lastRotation": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "rotationInterval": {
                                "type": "string",
                                "description": "Length of interval between automatic rotations expressed in format of ISO 8601 duration",
                                "example": "P30D"
                            }
                        }
                    }
                },
                "description": "JSON:API representation of cookieSecurityConfiguration entity."
            },
            "JsonApiOrganizationInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiOrganizationIn"
                    }
                }
            },
            "JsonApiOrganizationIn": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "organization",
                        "enum": ["organization"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "hostname": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "allowedOrigins": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "oauthIssuerLocation": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "oauthClientId": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "oauthClientSecret": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "earlyAccess": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "oauthIssuerId": {
                                "maxLength": 255,
                                "type": "string",
                                "description": "Any string identifying the OIDC provider. This value is used as suffix for OAuth2 callback (redirect) URL. If not defined, the standard callback URL is used. This value is valid only for external OIDC providers, not for the internal DEX provider.",
                                "example": "myOidcProvider"
                            },
                            "oauthSubjectIdClaim": {
                                "maxLength": 255,
                                "type": "string",
                                "description": "Any string identifying the claim in ID token, that should be used for user identification. The default value is 'sub'.",
                                "example": "oid"
                            },
                            "jitEnabled": {
                                "type": "boolean",
                                "description": "Flag to enable/disable JIT provisioning in the given organization"
                            }
                        }
                    }
                },
                "description": "JSON:API representation of organization entity."
            },
            "JsonApiColorPaletteOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiColorPaletteOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiColorPaletteOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiColorPaletteOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "page": {
                                "$ref": "#/components/schemas/PageMetadata"
                            }
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiCspDirectiveOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiCspDirectiveOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiCspDirectiveOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiCspDirectiveOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "page": {
                                "$ref": "#/components/schemas/PageMetadata"
                            }
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiDataSourceIdentifierOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiDataSourceIdentifierOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiDataSourceIdentifierOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiDataSourceIdentifierOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "page": {
                                "$ref": "#/components/schemas/PageMetadata"
                            }
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiDataSourceIdentifierOut": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "dataSourceIdentifier",
                        "enum": ["dataSourceIdentifier"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "permissions": {
                                "type": "array",
                                "description": "List of valid permissions for a logged-in user.",
                                "items": {
                                    "type": "string",
                                    "enum": ["MANAGE", "USE"]
                                }
                            }
                        }
                    },
                    "attributes": {
                        "required": ["name", "schema", "type"],
                        "type": "object",
                        "properties": {
                            "name": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "schema": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "type": {
                                "type": "string",
                                "enum": [
                                    "POSTGRESQL",
                                    "REDSHIFT",
                                    "VERTICA",
                                    "SNOWFLAKE",
                                    "ADS",
                                    "BIGQUERY",
                                    "MSSQL",
                                    "PRESTO",
                                    "DREMIO",
                                    "DRILL",
                                    "GREENPLUM",
                                    "AZURESQL",
                                    "SYNAPSESQL",
                                    "DATABRICKS",
                                    "GDSTORAGE",
                                    "CLICKHOUSE",
                                    "MYSQL",
                                    "MARIADB"
                                ]
                            }
                        }
                    }
                },
                "description": "JSON:API representation of dataSourceIdentifier entity."
            },
            "JsonApiDataSourceOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiDataSourceOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiDataSourceOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiDataSourceOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "page": {
                                "$ref": "#/components/schemas/PageMetadata"
                            }
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiEntitlementOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiEntitlementOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiEntitlementOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiEntitlementOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "page": {
                                "$ref": "#/components/schemas/PageMetadata"
                            }
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiEntitlementOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "entitlement",
                        "enum": ["entitlement"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "value": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "expiry": {
                                "type": "string",
                                "format": "date"
                            }
                        }
                    }
                },
                "description": "JSON:API representation of entitlement entity."
            },
            "JsonApiJwkOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiJwkOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiJwkOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiJwkOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "page": {
                                "$ref": "#/components/schemas/PageMetadata"
                            }
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiOrganizationSettingOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiOrganizationSettingOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiOrganizationSettingOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiOrganizationSettingOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "page": {
                                "$ref": "#/components/schemas/PageMetadata"
                            }
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiThemeOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiThemeOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiThemeOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiThemeOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "page": {
                                "$ref": "#/components/schemas/PageMetadata"
                            }
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiUserGroupOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiUserGroupOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiUserGroupOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiUserGroupOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "page": {
                                "$ref": "#/components/schemas/PageMetadata"
                            }
                        }
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiUserGroupOutWithLinks"
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiUserIdentifierOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiUserIdentifierOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiUserIdentifierOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiUserIdentifierOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "page": {
                                "$ref": "#/components/schemas/PageMetadata"
                            }
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiUserIdentifierOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "userIdentifier",
                        "enum": ["userIdentifier"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "firstname": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "lastname": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "email": {
                                "maxLength": 255,
                                "type": "string"
                            }
                        }
                    }
                },
                "description": "JSON:API representation of userIdentifier entity."
            },
            "JsonApiUserOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiUserOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiUserOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiUserOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "page": {
                                "$ref": "#/components/schemas/PageMetadata"
                            }
                        }
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiUserGroupOutWithLinks"
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiWorkspaceOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiWorkspaceOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiWorkspaceOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiWorkspaceOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "meta": {
                        "type": "object",
                        "properties": {
                            "page": {
                                "$ref": "#/components/schemas/PageMetadata"
                            }
                        }
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiWorkspaceOutWithLinks"
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiAnalyticalDashboardPostOptionalIdDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiAnalyticalDashboardPostOptionalId"
                    }
                }
            },
            "JsonApiAnalyticalDashboardPostOptionalId": {
                "required": ["attributes", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "analyticalDashboard",
                        "enum": ["analyticalDashboard"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "required": ["content"],
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 250000 characters.",
                                "example": {
                                    "identifier": {
                                        "id": "label.leaf",
                                        "type": "label"
                                    },
                                    "someBoolProp": false
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of analyticalDashboard entity."
            },
            "JsonApiCustomApplicationSettingPostOptionalIdDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiCustomApplicationSettingPostOptionalId"
                    }
                }
            },
            "JsonApiCustomApplicationSettingPostOptionalId": {
                "required": ["attributes", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "customApplicationSetting",
                        "enum": ["customApplicationSetting"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "required": ["applicationName", "content"],
                        "type": "object",
                        "properties": {
                            "applicationName": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                                "example": {}
                            }
                        }
                    }
                },
                "description": "JSON:API representation of customApplicationSetting entity."
            },
            "JsonApiDashboardPluginPostOptionalIdDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiDashboardPluginPostOptionalId"
                    }
                }
            },
            "JsonApiDashboardPluginPostOptionalId": {
                "required": ["type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "dashboardPlugin",
                        "enum": ["dashboardPlugin"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 250000 characters.",
                                "example": {
                                    "url": "<plugin-url>"
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of dashboardPlugin entity."
            },
            "JsonApiFilterContextPostOptionalIdDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiFilterContextPostOptionalId"
                    }
                }
            },
            "JsonApiFilterContextPostOptionalId": {
                "required": ["attributes", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "filterContext",
                        "enum": ["filterContext"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "required": ["content"],
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 250000 characters.",
                                "example": {
                                    "identifier": {
                                        "id": "label.leaf",
                                        "type": "label"
                                    },
                                    "someBoolProp": false
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of filterContext entity."
            },
            "JsonApiMetricPostOptionalIdDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiMetricPostOptionalId"
                    }
                }
            },
            "JsonApiMetricPostOptionalId": {
                "required": ["attributes", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "metric",
                        "enum": ["metric"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "required": ["content"],
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "content": {
                                "required": ["maql"],
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "maxLength": 2048,
                                        "type": "string"
                                    },
                                    "maql": {
                                        "maxLength": 10000,
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of metric entity."
            },
            "JsonApiUserDataFilterPostOptionalIdDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiUserDataFilterPostOptionalId"
                    }
                }
            },
            "JsonApiUserDataFilterPostOptionalId": {
                "required": ["attributes", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "userDataFilter",
                        "enum": ["userDataFilter"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "required": ["maql"],
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "maql": {
                                "maxLength": 10000,
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "user": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserToOneLinkage"
                                    }
                                }
                            },
                            "userGroup": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserGroupToOneLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of userDataFilter entity."
            },
            "JsonApiVisualizationObjectPostOptionalIdDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiVisualizationObjectPostOptionalId"
                    }
                }
            },
            "JsonApiVisualizationObjectPostOptionalId": {
                "required": ["attributes", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "visualizationObject",
                        "enum": ["visualizationObject"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "required": ["content"],
                        "type": "object",
                        "properties": {
                            "title": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "description": {
                                "maxLength": 10000,
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 250000 characters.",
                                "example": {
                                    "identifier": {
                                        "id": "label.leaf",
                                        "type": "label"
                                    },
                                    "someBoolProp": false
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of visualizationObject entity."
            },
            "JsonApiWorkspaceSettingPostOptionalIdDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiWorkspaceSettingPostOptionalId"
                    }
                }
            },
            "JsonApiWorkspaceSettingPostOptionalId": {
                "required": ["type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "workspaceSetting",
                        "enum": ["workspaceSetting"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                                "example": {}
                            },
                            "type": {
                                "type": "string",
                                "enum": [
                                    "TIMEZONE",
                                    "ACTIVE_THEME",
                                    "ACTIVE_COLOR_PALETTE",
                                    "WHITE_LABELING",
                                    "LOCALE",
                                    "METADATA_LOCALE",
                                    "FORMAT_LOCALE",
                                    "MAPBOX_TOKEN",
                                    "WEEK_START",
                                    "SHOW_HIDDEN_CATALOG_ITEMS",
                                    "OPERATOR_OVERRIDES",
                                    "TIMEZONE_VALIDATION_ENABLED"
                                ]
                            }
                        }
                    }
                },
                "description": "JSON:API representation of workspaceSetting entity."
            },
            "JsonApiDataSourceIdentifierOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiDataSourceIdentifierOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    }
                }
            },
            "JsonApiEntitlementOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiEntitlementOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    }
                }
            },
            "JsonApiUserIdentifierOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiUserIdentifierOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    }
                }
            },
            "JsonApiCookieSecurityConfigurationPatchDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiCookieSecurityConfigurationPatch"
                    }
                }
            },
            "JsonApiCookieSecurityConfigurationPatch": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "cookieSecurityConfiguration",
                        "enum": ["cookieSecurityConfiguration"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "lastRotation": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "rotationInterval": {
                                "type": "string",
                                "description": "Length of interval between automatic rotations expressed in format of ISO 8601 duration",
                                "example": "P30D"
                            }
                        }
                    }
                },
                "description": "JSON:API representation of patching cookieSecurityConfiguration entity."
            },
            "JsonApiOrganizationPatchDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiOrganizationPatch"
                    }
                }
            },
            "JsonApiOrganizationPatch": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "organization",
                        "enum": ["organization"]
                    },
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "hostname": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "allowedOrigins": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "oauthIssuerLocation": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "oauthClientId": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "oauthClientSecret": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "earlyAccess": {
                                "maxLength": 255,
                                "type": "string"
                            },
                            "oauthIssuerId": {
                                "maxLength": 255,
                                "type": "string",
                                "description": "Any string identifying the OIDC provider. This value is used as suffix for OAuth2 callback (redirect) URL. If not defined, the standard callback URL is used. This value is valid only for external OIDC providers, not for the internal DEX provider.",
                                "example": "myOidcProvider"
                            },
                            "oauthSubjectIdClaim": {
                                "maxLength": 255,
                                "type": "string",
                                "description": "Any string identifying the claim in ID token, that should be used for user identification. The default value is 'sub'.",
                                "example": "oid"
                            },
                            "jitEnabled": {
                                "type": "boolean",
                                "description": "Flag to enable/disable JIT provisioning in the given organization"
                            }
                        }
                    }
                },
                "description": "JSON:API representation of patching organization entity."
            },
            "DeclarativeUserDataFilter": {
                "required": ["id", "maql", "title"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "User Data Filters ID. This ID is further used to refer to this instance.",
                        "example": "country_id_setting"
                    },
                    "title": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "User Data Filters setting title.",
                        "example": "Country ID setting"
                    },
                    "description": {
                        "maxLength": 10000,
                        "type": "string",
                        "description": "User Data Filters setting description.",
                        "example": "ID of country setting"
                    },
                    "maql": {
                        "maxLength": 10000,
                        "type": "string",
                        "description": "Expression in MAQL specifying the User Data Filter",
                        "example": "{label/country} = \"USA\" AND {label/date.year} = THIS(YEAR)"
                    },
                    "user": {
                        "$ref": "#/components/schemas/DeclarativeUserIdentifier"
                    },
                    "userGroup": {
                        "$ref": "#/components/schemas/DeclarativeUserGroupIdentifier"
                    },
                    "tags": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "A list of tags.",
                        "example": ["Revenues"],
                        "items": {
                            "type": "string",
                            "description": "A list of tags.",
                            "example": "[\"Revenues\"]"
                        }
                    }
                },
                "description": "User Data Filters serving the filtering of what data users can see in workspaces."
            },
            "DeclarativeUserDataFilters": {
                "required": ["userDataFilters"],
                "type": "object",
                "properties": {
                    "userDataFilters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeUserDataFilter"
                        }
                    }
                },
                "description": "Declarative form of user data filters."
            },
            "DeclarativeUserGroupIdentifier": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "Identifier of the user group.",
                        "example": "group.admins"
                    },
                    "type": {
                        "type": "string",
                        "description": "A type.",
                        "example": "userGroup",
                        "enum": ["userGroup"]
                    }
                },
                "description": "A user group identifier.",
                "example": {
                    "id": "admins",
                    "type": "userGroup"
                }
            },
            "DeclarativeUserIdentifier": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "User identifier.",
                        "example": "employee123"
                    },
                    "type": {
                        "type": "string",
                        "description": "A type.",
                        "example": "user",
                        "enum": ["user"]
                    }
                },
                "description": "A user identifier.",
                "example": {
                    "id": "example123",
                    "type": "user"
                }
            },
            "AssigneeIdentifier": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["user", "userGroup"]
                    }
                },
                "description": "Identifier of a user or user-group."
            },
            "DeclarativeSingleWorkspacePermission": {
                "required": ["assignee", "name"],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Permission name.",
                        "enum": ["MANAGE", "ANALYZE", "EXPORT", "EXPORT_TABULAR", "EXPORT_PDF", "VIEW"]
                    },
                    "assignee": {
                        "$ref": "#/components/schemas/AssigneeIdentifier"
                    }
                }
            },
            "DeclarativeWorkspaceHierarchyPermission": {
                "required": ["assignee", "name"],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Permission name.",
                        "enum": ["MANAGE", "ANALYZE", "EXPORT", "EXPORT_TABULAR", "EXPORT_PDF", "VIEW"]
                    },
                    "assignee": {
                        "$ref": "#/components/schemas/AssigneeIdentifier"
                    }
                }
            },
            "DeclarativeWorkspacePermissions": {
                "type": "object",
                "properties": {
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeSingleWorkspacePermission"
                        }
                    },
                    "hierarchyPermissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeWorkspaceHierarchyPermission"
                        }
                    }
                },
                "description": "Definition of permissions associated with a workspace."
            },
            "DataSourceTableIdentifier": {
                "required": ["dataSourceId", "id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "ID of table.",
                        "example": "customers"
                    },
                    "dataSourceId": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Data source ID.",
                        "example": "my-postgres"
                    },
                    "type": {
                        "type": "string",
                        "description": "Data source entity type.",
                        "example": "dataSource",
                        "enum": ["dataSource"]
                    },
                    "path": {
                        "type": "array",
                        "description": "Path to table.",
                        "nullable": true,
                        "example": ["table_schema", "table_name"],
                        "items": {
                            "type": "string",
                            "example": "table_name"
                        }
                    }
                },
                "description": "An id of the table. Including ID of data source.",
                "example": {
                    "id": "customers",
                    "dataSourceId": "my-postgres",
                    "type": "DATA_SOURCE"
                }
            },
            "DeclarativeAttribute": {
                "required": ["id", "labels", "sourceColumn", "title"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "Attribute ID.",
                        "example": "attr.customers.customer_name"
                    },
                    "title": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Attribute title.",
                        "example": "Customer Name"
                    },
                    "description": {
                        "maxLength": 10000,
                        "type": "string",
                        "description": "Attribute description.",
                        "example": "Customer name including first and last name."
                    },
                    "labels": {
                        "type": "array",
                        "description": "An array of attribute labels.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeLabel"
                        }
                    },
                    "tags": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "A list of tags.",
                        "example": ["Customers"],
                        "items": {
                            "type": "string",
                            "description": "A list of tags.",
                            "example": "[\"Customers\"]"
                        }
                    },
                    "sortColumn": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Attribute sort column.",
                        "example": "customer_name"
                    },
                    "sortDirection": {
                        "type": "string",
                        "description": "Attribute sort direction.",
                        "example": "\"ASC\" | \"DESC\"",
                        "enum": ["ASC", "DESC"]
                    },
                    "defaultView": {
                        "$ref": "#/components/schemas/LabelIdentifier"
                    },
                    "sourceColumn": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "A name of the source column that is the primary label",
                        "example": "customer_name"
                    },
                    "sourceColumnDataType": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "A type of the source column",
                        "example": "STRING",
                        "enum": ["INT", "STRING", "DATE", "NUMERIC", "TIMESTAMP", "TIMESTAMP_TZ", "BOOLEAN"]
                    }
                },
                "description": "A dataset attribute."
            },
            "DeclarativeDataset": {
                "required": ["grain", "id", "references", "title"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "The Dataset ID. This ID is further used to refer to this instance of dataset.",
                        "example": "customers"
                    },
                    "title": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "A dataset title.",
                        "example": "Customers"
                    },
                    "description": {
                        "maxLength": 10000,
                        "type": "string",
                        "description": "A dataset description.",
                        "example": "The customers of ours."
                    },
                    "grain": {
                        "type": "array",
                        "description": "An array of grain identifiers.",
                        "items": {
                            "$ref": "#/components/schemas/GrainIdentifier"
                        }
                    },
                    "attributes": {
                        "type": "array",
                        "description": "An array of attributes.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeAttribute"
                        }
                    },
                    "facts": {
                        "type": "array",
                        "description": "An array of facts.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeFact"
                        }
                    },
                    "references": {
                        "type": "array",
                        "description": "An array of references.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeReference"
                        }
                    },
                    "dataSourceTableId": {
                        "$ref": "#/components/schemas/DataSourceTableIdentifier"
                    },
                    "sql": {
                        "$ref": "#/components/schemas/DeclarativeDatasetSql"
                    },
                    "tags": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "A list of tags.",
                        "example": ["Customers"],
                        "items": {
                            "type": "string",
                            "description": "A list of tags.",
                            "example": "[\"Customers\"]"
                        }
                    },
                    "workspaceDataFilterColumns": {
                        "type": "array",
                        "description": "An array of columns which are available for match to implicit workspace data filters.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeWorkspaceDataFilterColumn"
                        }
                    },
                    "workspaceDataFilterReferences": {
                        "type": "array",
                        "description": "An array of explicit workspace data filters.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeWorkspaceDataFilterReferences"
                        }
                    }
                },
                "description": "A dataset defined by its properties."
            },
            "DeclarativeDatasetExtension": {
                "required": ["id"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "The Dataset ID. This ID is further used to refer to this instance of dataset.",
                        "example": "customers"
                    },
                    "workspaceDataFilterReferences": {
                        "type": "array",
                        "description": "An array of explicit workspace data filters.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeWorkspaceDataFilterReferences"
                        }
                    }
                },
                "description": "A dataset extension properties."
            },
            "DeclarativeDatasetSql": {
                "required": ["dataSourceId", "statement"],
                "type": "object",
                "properties": {
                    "statement": {
                        "type": "string",
                        "description": "SQL statement.",
                        "example": "SELECT * FROM some_table"
                    },
                    "dataSourceId": {
                        "type": "string",
                        "description": "Data source ID.",
                        "example": "my-postgres"
                    }
                },
                "description": "SQL defining this dataset.",
                "example": {
                    "statement": "SELECT * FROM some_table",
                    "dataSourceId": "my-postgres"
                }
            },
            "DeclarativeDateDataset": {
                "required": ["granularities", "granularitiesFormatting", "id", "title"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "Date dataset ID.",
                        "example": "date"
                    },
                    "title": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Date dataset title.",
                        "example": "Date"
                    },
                    "description": {
                        "maxLength": 10000,
                        "type": "string",
                        "description": "Date dataset description.",
                        "example": "A customer order date"
                    },
                    "granularitiesFormatting": {
                        "$ref": "#/components/schemas/GranularitiesFormatting"
                    },
                    "granularities": {
                        "type": "array",
                        "description": "An array of date granularities. All listed granularities will be available for date dataset.",
                        "items": {
                            "type": "string",
                            "enum": [
                                "MINUTE",
                                "HOUR",
                                "DAY",
                                "WEEK",
                                "MONTH",
                                "QUARTER",
                                "YEAR",
                                "MINUTE_OF_HOUR",
                                "HOUR_OF_DAY",
                                "DAY_OF_WEEK",
                                "DAY_OF_MONTH",
                                "DAY_OF_YEAR",
                                "WEEK_OF_YEAR",
                                "MONTH_OF_YEAR",
                                "QUARTER_OF_YEAR"
                            ]
                        }
                    },
                    "tags": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "A list of tags.",
                        "example": ["Customer dates"],
                        "items": {
                            "type": "string",
                            "description": "A list of tags.",
                            "example": "[\"Customer dates\"]"
                        }
                    }
                },
                "description": "A date dataset."
            },
            "DeclarativeFact": {
                "required": ["id", "sourceColumn", "title"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "Fact ID.",
                        "example": "fact.customer_order_count"
                    },
                    "title": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Fact title.",
                        "example": "Customer order count"
                    },
                    "description": {
                        "maxLength": 10000,
                        "type": "string",
                        "description": "Fact description.",
                        "example": "A number of orders created by the customer - including all orders, even the non-delivered ones."
                    },
                    "sourceColumn": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "A name of the source column in the table.",
                        "example": "customer_order_count"
                    },
                    "sourceColumnDataType": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "A type of the source column",
                        "example": "NUMERIC",
                        "enum": ["INT", "STRING", "DATE", "NUMERIC", "TIMESTAMP", "TIMESTAMP_TZ", "BOOLEAN"]
                    },
                    "tags": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "A list of tags.",
                        "example": ["Customers"],
                        "items": {
                            "type": "string",
                            "description": "A list of tags.",
                            "example": "[\"Customers\"]"
                        }
                    }
                },
                "description": "A dataset fact."
            },
            "DeclarativeLabel": {
                "required": ["id", "sourceColumn", "title"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "Label ID.",
                        "example": "label.customer_name"
                    },
                    "title": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Label title.",
                        "example": "Customer name"
                    },
                    "description": {
                        "maxLength": 10000,
                        "type": "string",
                        "description": "Label description.",
                        "example": "Customer name"
                    },
                    "sourceColumn": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "A name of the source column in the table.",
                        "example": "customer_name"
                    },
                    "sourceColumnDataType": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "A type of the source column",
                        "example": "STRING",
                        "enum": ["INT", "STRING", "DATE", "NUMERIC", "TIMESTAMP", "TIMESTAMP_TZ", "BOOLEAN"]
                    },
                    "tags": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "A list of tags.",
                        "example": ["Customers"],
                        "items": {
                            "type": "string",
                            "description": "A list of tags.",
                            "example": "[\"Customers\"]"
                        }
                    },
                    "valueType": {
                        "type": "string",
                        "description": "Specific type of label",
                        "enum": ["TEXT", "HYPERLINK", "GEO", "GEO_LONGITUDE", "GEO_LATITUDE", "IMAGE"]
                    }
                },
                "description": "A attribute label."
            },
            "DeclarativeLdm": {
                "type": "object",
                "properties": {
                    "datasets": {
                        "type": "array",
                        "description": "An array containing datasets.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeDataset"
                        }
                    },
                    "dateInstances": {
                        "type": "array",
                        "description": "An array containing date-related datasets.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeDateDataset"
                        }
                    },
                    "datasetExtensions": {
                        "type": "array",
                        "description": "An array containing extensions for datasets defined in parent workspaces.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeDatasetExtension"
                        }
                    }
                },
                "description": "A logical data model (LDM) representation."
            },
            "DeclarativeModel": {
                "type": "object",
                "properties": {
                    "ldm": {
                        "$ref": "#/components/schemas/DeclarativeLdm"
                    }
                },
                "description": "A data model structured as a set of its attributes."
            },
            "DeclarativeReference": {
                "required": ["identifier", "multivalue"],
                "type": "object",
                "properties": {
                    "identifier": {
                        "$ref": "#/components/schemas/ReferenceIdentifier"
                    },
                    "multivalue": {
                        "type": "boolean",
                        "description": "The multi-value flag enables many-to-many cardinality for references.",
                        "example": false
                    },
                    "sourceColumns": {
                        "type": "array",
                        "description": "An array of source column names for a given reference. Deprecated, use 'sources' instead.",
                        "example": ["customer_id"],
                        "deprecated": true,
                        "items": {
                            "type": "string"
                        }
                    },
                    "sourceColumnDataTypes": {
                        "type": "array",
                        "description": "An array of source column data types for a given reference. Deprecated, use 'sources' instead.",
                        "deprecated": true,
                        "items": {
                            "type": "string",
                            "enum": [
                                "INT",
                                "STRING",
                                "DATE",
                                "NUMERIC",
                                "TIMESTAMP",
                                "TIMESTAMP_TZ",
                                "BOOLEAN"
                            ]
                        }
                    },
                    "sources": {
                        "type": "array",
                        "description": "An array of source columns for a given reference.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeReferenceSource"
                        }
                    }
                },
                "description": "A dataset reference."
            },
            "DeclarativeReferenceSource": {
                "required": ["column", "target"],
                "type": "object",
                "properties": {
                    "column": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "A name of the source column in the table.",
                        "example": "customer_id"
                    },
                    "dataType": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "A type of the source column.",
                        "example": "STRING",
                        "enum": ["INT", "STRING", "DATE", "NUMERIC", "TIMESTAMP", "TIMESTAMP_TZ", "BOOLEAN"]
                    },
                    "target": {
                        "$ref": "#/components/schemas/GrainIdentifier"
                    }
                },
                "description": "A dataset reference source column description."
            },
            "DeclarativeWorkspaceDataFilterColumn": {
                "required": ["dataType", "name"],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the column",
                        "example": "customer_id"
                    },
                    "dataType": {
                        "type": "string",
                        "description": "Data type of the column",
                        "example": "INT",
                        "enum": ["INT", "STRING", "DATE", "NUMERIC", "TIMESTAMP", "TIMESTAMP_TZ", "BOOLEAN"]
                    }
                }
            },
            "DeclarativeWorkspaceDataFilterReferences": {
                "required": ["filterColumn", "filterColumnDataType", "filterId"],
                "type": "object",
                "properties": {
                    "filterId": {
                        "$ref": "#/components/schemas/DatasetWorkspaceDataFilterIdentifier"
                    },
                    "filterColumn": {
                        "type": "string",
                        "description": "Filter column name",
                        "example": "filter_id"
                    },
                    "filterColumnDataType": {
                        "type": "string",
                        "description": "Filter column data type",
                        "example": "INT",
                        "enum": ["INT", "STRING", "DATE", "NUMERIC", "TIMESTAMP", "TIMESTAMP_TZ", "BOOLEAN"]
                    }
                }
            },
            "GrainIdentifier": {
                "maxLength": 255,
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "Grain ID.",
                        "example": "attr.customers.customer_name"
                    },
                    "type": {
                        "type": "string",
                        "description": "A type of the grain.",
                        "example": "ATTRIBUTE",
                        "enum": ["attribute", "date"]
                    }
                },
                "description": "A grain identifier.",
                "example": {
                    "id": "customer_id",
                    "type": "attribute"
                }
            },
            "GranularitiesFormatting": {
                "required": ["titleBase", "titlePattern"],
                "type": "object",
                "properties": {
                    "titleBase": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Title base is used as a token in title pattern. If left empty, it is replaced by date dataset title."
                    },
                    "titlePattern": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "This pattern is used to generate the title of attributes and labels that result from the granularities.\nThere are two tokens available: \n* `%titleBase` - represents shared part by all titles, or title of Date Dataset if left empty\n* `%granularityTitle` - represents `DateGranularity` built-in title",
                        "example": "%titleBase - %granularityTitle"
                    }
                },
                "description": "A date dataset granularities title formatting rules."
            },
            "LabelIdentifier": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "Label ID.",
                        "example": "label_id"
                    },
                    "type": {
                        "type": "string",
                        "description": "A type of the label.",
                        "example": "label",
                        "enum": ["label"]
                    }
                },
                "description": "A label identifier."
            },
            "ReferenceIdentifier": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "Reference ID.",
                        "example": "customers"
                    },
                    "type": {
                        "type": "string",
                        "description": "A type of the reference.",
                        "example": "DATASET",
                        "enum": ["dataset"]
                    }
                },
                "description": "A reference identifier."
            },
            "AssigneeRule": {
                "required": ["type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": ["allWorkspaceUsers"]
                    }
                },
                "description": "Identifier of an assignee rule."
            },
            "DeclarativeAnalyticalDashboard": {
                "required": ["content", "id", "title"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "Analytical dashboard ID.",
                        "example": "revenues-analysis"
                    },
                    "title": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Analytical dashboard title.",
                        "example": "Revenues analysis"
                    },
                    "description": {
                        "maxLength": 10000,
                        "type": "string",
                        "description": "Analytical dashboard description.",
                        "example": "Period to period comparison of revenues in main sectors."
                    },
                    "content": {
                        "$ref": "#/components/schemas/JsonNode"
                    },
                    "tags": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "A list of tags.",
                        "example": ["Revenues"],
                        "items": {
                            "type": "string",
                            "description": "A list of tags.",
                            "example": "[\"Revenues\"]"
                        }
                    },
                    "permissions": {
                        "type": "array",
                        "description": "A list of permissions.",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/DeclarativeAnalyticalDashboardPermissionForAssignee"
                                },
                                {
                                    "$ref": "#/components/schemas/DeclarativeAnalyticalDashboardPermissionForAssigneeRule"
                                }
                            ]
                        }
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/DeclarativeUserIdentifier"
                    },
                    "modifiedBy": {
                        "$ref": "#/components/schemas/DeclarativeUserIdentifier"
                    },
                    "modifiedAt": {
                        "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}",
                        "type": "string",
                        "description": "Time of the last entity modification.",
                        "nullable": true,
                        "example": "2023-07-20 12:30"
                    },
                    "createdAt": {
                        "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}",
                        "type": "string",
                        "description": "Time of the entity creation.",
                        "nullable": true,
                        "example": "2023-07-20 12:30"
                    }
                }
            },
            "DeclarativeAnalyticalDashboardExtension": {
                "required": ["id", "permissions"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "Analytical dashboard ID.",
                        "example": "revenues-analysis"
                    },
                    "permissions": {
                        "type": "array",
                        "description": "A list of permissions.",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/DeclarativeAnalyticalDashboardPermissionForAssignee"
                                },
                                {
                                    "$ref": "#/components/schemas/DeclarativeAnalyticalDashboardPermissionForAssigneeRule"
                                }
                            ]
                        }
                    }
                }
            },
            "DeclarativeAnalyticalDashboardPermissionAssignment": {
                "required": ["name"],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Permission name.",
                        "enum": ["EDIT", "SHARE", "VIEW"]
                    }
                },
                "description": "Analytical dashboard permission."
            },
            "DeclarativeAnalyticalDashboardPermissionForAssignee": {
                "required": ["assignee", "name"],
                "type": "object",
                "description": "Analytical dashboard permission for an assignee.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/DeclarativeAnalyticalDashboardPermissionAssignment"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "assignee": {
                                "$ref": "#/components/schemas/AssigneeIdentifier"
                            }
                        }
                    }
                ]
            },
            "DeclarativeAnalyticalDashboardPermissionForAssigneeRule": {
                "required": ["assigneeRule", "name"],
                "type": "object",
                "description": "Analytical dashboard permission for a collection of assignees identified by a rule.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/DeclarativeAnalyticalDashboardPermissionAssignment"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "assigneeRule": {
                                "$ref": "#/components/schemas/AssigneeRule"
                            }
                        }
                    }
                ]
            },
            "DeclarativeAnalytics": {
                "type": "object",
                "properties": {
                    "analytics": {
                        "$ref": "#/components/schemas/DeclarativeAnalyticsLayer"
                    }
                },
                "description": "Entities describing users' view on data."
            },
            "DeclarativeAnalyticsLayer": {
                "type": "object",
                "properties": {
                    "analyticalDashboards": {
                        "type": "array",
                        "description": "A list of analytical dashboards available in the model.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeAnalyticalDashboard"
                        }
                    },
                    "filterContexts": {
                        "type": "array",
                        "description": "A list of filter contexts available in the model.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeFilterContext"
                        }
                    },
                    "metrics": {
                        "type": "array",
                        "description": "A list of metrics available in the model.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeMetric"
                        }
                    },
                    "visualizationObjects": {
                        "type": "array",
                        "description": "A list of visualization objects available in the model.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeVisualizationObject"
                        }
                    },
                    "dashboardPlugins": {
                        "type": "array",
                        "description": "A list of dashboard plugins available in the model.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeDashboardPlugin"
                        }
                    },
                    "analyticalDashboardExtensions": {
                        "type": "array",
                        "description": "A list of dashboard permissions assigned to a related dashboard.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeAnalyticalDashboardExtension"
                        }
                    },
                    "attributeHierarchies": {
                        "type": "array",
                        "description": "A list of attribute hierarchies.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeAttributeHierarchy"
                        }
                    }
                }
            },
            "DeclarativeAttributeHierarchy": {
                "required": ["content", "id", "title"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "Attribute hierarchy object ID.",
                        "example": "hierarchy-1"
                    },
                    "title": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Attribute hierarchy object title.",
                        "example": "Count of goods"
                    },
                    "description": {
                        "maxLength": 10000,
                        "type": "string",
                        "description": "Attribute hierarchy object description.",
                        "example": "Simple number for total goods in current production."
                    },
                    "content": {
                        "$ref": "#/components/schemas/JsonNode"
                    },
                    "tags": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "A list of tags.",
                        "example": ["Revenues"],
                        "items": {
                            "type": "string",
                            "description": "A list of tags.",
                            "example": "[\"Revenues\"]"
                        }
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/DeclarativeUserIdentifier"
                    },
                    "modifiedBy": {
                        "$ref": "#/components/schemas/DeclarativeUserIdentifier"
                    },
                    "modifiedAt": {
                        "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}",
                        "type": "string",
                        "description": "Time of the last entity modification.",
                        "nullable": true,
                        "example": "[\"2023-07-20 12:30\"]"
                    },
                    "createdAt": {
                        "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}",
                        "type": "string",
                        "description": "Time of the entity creation.",
                        "nullable": true,
                        "example": "[\"2023-07-20 12:30\"]"
                    }
                }
            },
            "DeclarativeDashboardPlugin": {
                "required": ["content", "id", "title"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "Dashboard plugin object ID.",
                        "example": "dashboard-plugin-1"
                    },
                    "title": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Dashboard plugin object title.",
                        "example": "3D map renderer"
                    },
                    "description": {
                        "maxLength": 10000,
                        "type": "string",
                        "description": "Dashboard plugin description.",
                        "example": "Three dimensional view of data."
                    },
                    "content": {
                        "$ref": "#/components/schemas/JsonNode"
                    },
                    "tags": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "A list of tags.",
                        "example": ["Revenues"],
                        "items": {
                            "type": "string",
                            "description": "A list of tags.",
                            "example": "[\"Revenues\"]"
                        }
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/DeclarativeUserIdentifier"
                    },
                    "modifiedBy": {
                        "$ref": "#/components/schemas/DeclarativeUserIdentifier"
                    },
                    "modifiedAt": {
                        "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}",
                        "type": "string",
                        "description": "Time of the last entity modification.",
                        "nullable": true,
                        "example": "[\"2023-07-20 12:30\"]"
                    },
                    "createdAt": {
                        "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}",
                        "type": "string",
                        "description": "Time of the entity creation.",
                        "nullable": true,
                        "example": "[\"2023-07-20 12:30\"]"
                    }
                }
            },
            "DeclarativeFilterContext": {
                "required": ["content", "id", "title"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "Filter Context ID.",
                        "example": "filter-sales"
                    },
                    "title": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Filter Context title.",
                        "example": "Filter Context for Sales team"
                    },
                    "description": {
                        "maxLength": 10000,
                        "type": "string",
                        "description": "Filter Context description.",
                        "example": "Filter Context for Sales team."
                    },
                    "content": {
                        "$ref": "#/components/schemas/JsonNode"
                    },
                    "tags": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "A list of tags.",
                        "example": ["Revenues"],
                        "items": {
                            "type": "string",
                            "description": "A list of tags.",
                            "example": "[\"Revenues\"]"
                        }
                    }
                }
            },
            "DeclarativeMetric": {
                "required": ["content", "id", "title"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "Metric ID.",
                        "example": "total-sales"
                    },
                    "title": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Metric title.",
                        "example": "Total sales"
                    },
                    "description": {
                        "maxLength": 10000,
                        "type": "string",
                        "description": "Metric description.",
                        "example": "Sales for all the data available."
                    },
                    "content": {
                        "$ref": "#/components/schemas/JsonNode"
                    },
                    "tags": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "A list of tags.",
                        "example": ["Revenues"],
                        "items": {
                            "type": "string",
                            "description": "A list of tags.",
                            "example": "[\"Revenues\"]"
                        }
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/DeclarativeUserIdentifier"
                    },
                    "modifiedBy": {
                        "$ref": "#/components/schemas/DeclarativeUserIdentifier"
                    },
                    "modifiedAt": {
                        "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}",
                        "type": "string",
                        "description": "Time of the last entity modification.",
                        "nullable": true,
                        "example": "[\"2023-07-20 12:30\"]"
                    },
                    "createdAt": {
                        "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}",
                        "type": "string",
                        "description": "Time of the entity creation.",
                        "nullable": true,
                        "example": "[\"2023-07-20 12:30\"]"
                    }
                }
            },
            "DeclarativeVisualizationObject": {
                "required": ["content", "id", "title"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "Visualization object ID.",
                        "example": "visualization-1"
                    },
                    "title": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Visualization object title.",
                        "example": "Count of goods"
                    },
                    "description": {
                        "maxLength": 10000,
                        "type": "string",
                        "description": "Visualization object description.",
                        "example": "Simple number for total goods in current production."
                    },
                    "content": {
                        "$ref": "#/components/schemas/JsonNode"
                    },
                    "tags": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "A list of tags.",
                        "example": ["Revenues"],
                        "items": {
                            "type": "string",
                            "description": "A list of tags.",
                            "example": "[\"Revenues\"]"
                        }
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/DeclarativeUserIdentifier"
                    },
                    "modifiedBy": {
                        "$ref": "#/components/schemas/DeclarativeUserIdentifier"
                    },
                    "modifiedAt": {
                        "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}",
                        "type": "string",
                        "description": "Time of the last entity modification.",
                        "nullable": true,
                        "example": "[\"2023-07-20 12:30\"]"
                    },
                    "createdAt": {
                        "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}",
                        "type": "string",
                        "description": "Time of the entity creation.",
                        "nullable": true,
                        "example": "[\"2023-07-20 12:30\"]"
                    }
                }
            },
            "JsonNode": {
                "type": "object",
                "description": "A definition of the metric in JSON format.",
                "example": "{ \"content\": { \"maql\": \"SELECT 1\", \"format\": \"%0.2f\" } \"}"
            },
            "DeclarativeWorkspaceModel": {
                "type": "object",
                "properties": {
                    "ldm": {
                        "$ref": "#/components/schemas/DeclarativeLdm"
                    },
                    "analytics": {
                        "$ref": "#/components/schemas/DeclarativeAnalyticsLayer"
                    }
                },
                "description": "A declarative form of a model and analytics for a workspace."
            },
            "DeclarativeCustomApplicationSetting": {
                "required": ["applicationName", "content", "id"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "Custom Application Setting ID.",
                        "example": "modeler.demo"
                    },
                    "content": {
                        "$ref": "#/components/schemas/JsonNode"
                    },
                    "applicationName": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "The application id",
                        "example": "Modeler"
                    }
                },
                "description": "Custom application setting and its value."
            },
            "DeclarativeSetting": {
                "required": ["id"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "Setting ID."
                    },
                    "content": {
                        "$ref": "#/components/schemas/JsonNode"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the setting.",
                        "example": "TIMEZONE",
                        "enum": [
                            "TIMEZONE",
                            "ACTIVE_THEME",
                            "ACTIVE_COLOR_PALETTE",
                            "WHITE_LABELING",
                            "LOCALE",
                            "METADATA_LOCALE",
                            "FORMAT_LOCALE",
                            "MAPBOX_TOKEN",
                            "WEEK_START",
                            "SHOW_HIDDEN_CATALOG_ITEMS",
                            "OPERATOR_OVERRIDES",
                            "TIMEZONE_VALIDATION_ENABLED"
                        ]
                    }
                },
                "description": "Setting and its value."
            },
            "DeclarativeWorkspace": {
                "required": ["id", "name"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "Identifier of a workspace",
                        "example": "alpha.sales"
                    },
                    "name": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Name of a workspace to view.",
                        "example": "Alpha Sales"
                    },
                    "model": {
                        "$ref": "#/components/schemas/DeclarativeWorkspaceModel"
                    },
                    "parent": {
                        "$ref": "#/components/schemas/WorkspaceIdentifier"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeSingleWorkspacePermission"
                        }
                    },
                    "hierarchyPermissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeWorkspaceHierarchyPermission"
                        }
                    },
                    "earlyAccess": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Early access defined on level Workspace"
                    },
                    "description": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Description of the workspace"
                    },
                    "prefix": {
                        "maxLength": 255,
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "Custom prefix of entity identifiers in workspace"
                    },
                    "settings": {
                        "type": "array",
                        "description": "A list of workspace settings.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeSetting"
                        }
                    },
                    "customApplicationSettings": {
                        "type": "array",
                        "description": "A list of workspace custom settings.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeCustomApplicationSetting"
                        }
                    },
                    "userDataFilters": {
                        "type": "array",
                        "description": "A list of workspace user data filters.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeUserDataFilter"
                        }
                    },
                    "cacheExtraLimit": {
                        "type": "integer",
                        "description": "Extra cache limit allocated to specific workspace. In case there is extra cache budget setup for organization, it can be split between multiple workspaces.",
                        "format": "int64"
                    },
                    "dataSource": {
                        "$ref": "#/components/schemas/WorkspaceDataSource"
                    }
                },
                "description": "A declarative form of a particular workspace."
            },
            "DeclarativeWorkspaceDataFilter": {
                "required": ["columnName", "id", "title", "workspaceDataFilterSettings"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "Workspace Data Filters ID. This ID is further used to refer to this instance.",
                        "example": "country_id"
                    },
                    "title": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Workspace Data Filters title.",
                        "example": "Country ID"
                    },
                    "description": {
                        "maxLength": 10000,
                        "type": "string",
                        "description": "Workspace Data Filters description.",
                        "example": "ID of country"
                    },
                    "columnName": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Workspace Data Filters column name. Data are filtered using this physical column.",
                        "example": "country_id"
                    },
                    "workspaceDataFilterSettings": {
                        "type": "array",
                        "description": "Filter settings specifying values of filters valid for the workspace.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeWorkspaceDataFilterSetting"
                        }
                    },
                    "workspace": {
                        "$ref": "#/components/schemas/WorkspaceIdentifier"
                    }
                },
                "description": "Workspace Data Filters serving the filtering of what data users can see in workspaces."
            },
            "DeclarativeWorkspaceDataFilterSetting": {
                "required": ["filterValues", "id", "title", "workspace"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "Workspace Data Filters ID. This ID is further used to refer to this instance.",
                        "example": "country_id_setting"
                    },
                    "title": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Workspace Data Filters setting title.",
                        "example": "Country ID setting"
                    },
                    "description": {
                        "maxLength": 10000,
                        "type": "string",
                        "description": "Workspace Data Filters setting description.",
                        "example": "ID of country setting"
                    },
                    "filterValues": {
                        "type": "array",
                        "description": "Only those rows are returned, where columnName from filter matches those values.",
                        "example": ["US"],
                        "items": {
                            "type": "string",
                            "description": "Only those rows are returned, where columnName from filter matches those values.",
                            "example": "[\"US\"]"
                        }
                    },
                    "workspace": {
                        "$ref": "#/components/schemas/WorkspaceIdentifier"
                    }
                },
                "description": "Workspace Data Filters serving the filtering of what data users can see in workspaces."
            },
            "DeclarativeWorkspaces": {
                "required": ["workspaceDataFilters", "workspaces"],
                "type": "object",
                "properties": {
                    "workspaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeWorkspace"
                        }
                    },
                    "workspaceDataFilters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeWorkspaceDataFilter"
                        }
                    }
                },
                "description": "A declarative form of a all workspace layout."
            },
            "WorkspaceDataSource": {
                "required": ["id"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the used data source.",
                        "example": "snowflake.instance.1"
                    },
                    "schemaPath": {
                        "type": "array",
                        "description": "The full schema path as array of its path parts. Will be rendered as subPath1.subPath2...",
                        "items": {
                            "type": "string",
                            "description": "The part of the schema path.",
                            "example": "subPath"
                        }
                    }
                },
                "description": "The data source used for the particular workspace instead of the one defined in the LDM inherited from its parent workspace. Such data source cannot be defined for a single or a top-parent workspace."
            },
            "WorkspaceIdentifier": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "Identifier of the workspace.",
                        "example": "alpha.sales"
                    },
                    "type": {
                        "type": "string",
                        "description": "A type.",
                        "example": "workspace",
                        "enum": ["workspace"]
                    }
                },
                "description": "A workspace identifier.",
                "example": "{ id: demo, type: workspace }"
            },
            "DeclarativeWorkspaceDataFilters": {
                "required": ["workspaceDataFilters"],
                "type": "object",
                "properties": {
                    "workspaceDataFilters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeWorkspaceDataFilter"
                        }
                    }
                },
                "description": "Declarative form of data filters."
            },
            "DeclarativeUser": {
                "required": ["id"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "User identifier.",
                        "example": "employee123"
                    },
                    "authId": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "User identification in the authentication manager."
                    },
                    "userGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeUserGroupIdentifier"
                        }
                    },
                    "settings": {
                        "type": "array",
                        "description": "A list of user settings.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeSetting"
                        }
                    },
                    "firstname": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "User first name",
                        "example": "John"
                    },
                    "lastname": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "User last name",
                        "example": "Wick"
                    },
                    "email": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "User email address",
                        "example": "user@example.com"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeUserPermission"
                        }
                    }
                },
                "description": "A user and its properties"
            },
            "DeclarativeUserGroup": {
                "required": ["id"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "UserGroup identifier.",
                        "example": "employees.all"
                    },
                    "parents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeUserGroupIdentifier"
                        }
                    },
                    "name": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Name of UserGroup",
                        "example": "admins"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeUserGroupPermission"
                        }
                    }
                },
                "description": "A user-group and its properties"
            },
            "DeclarativeUserGroupPermission": {
                "required": ["assignee", "name"],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Permission name.",
                        "enum": ["SEE"]
                    },
                    "assignee": {
                        "$ref": "#/components/schemas/AssigneeIdentifier"
                    }
                },
                "description": "Definition of a user-group permission assigned to a user/user-group."
            },
            "DeclarativeUserPermission": {
                "required": ["assignee", "name"],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Permission name.",
                        "enum": ["SEE"]
                    },
                    "assignee": {
                        "$ref": "#/components/schemas/AssigneeIdentifier"
                    }
                },
                "description": "Definition of a user permission assigned to a user/user-group."
            },
            "DeclarativeUsersUserGroups": {
                "required": ["userGroups", "users"],
                "type": "object",
                "properties": {
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeUser"
                        }
                    },
                    "userGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeUserGroup"
                        }
                    }
                },
                "description": "Declarative form of both users and user groups and theirs properties."
            },
            "DeclarativeUserPermissions": {
                "type": "object",
                "properties": {
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeUserPermission"
                        }
                    }
                },
                "description": "Definition of permissions associated with a user."
            },
            "DeclarativeUsers": {
                "required": ["users"],
                "type": "object",
                "properties": {
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeUser"
                        }
                    }
                },
                "description": "Declarative form of users and its properties."
            },
            "DeclarativeUserGroupPermissions": {
                "type": "object",
                "properties": {
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeUserGroupPermission"
                        }
                    }
                },
                "description": "Definition of permissions associated with a user-group."
            },
            "DeclarativeUserGroups": {
                "required": ["userGroups"],
                "type": "object",
                "properties": {
                    "userGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeUserGroup"
                        }
                    }
                },
                "description": "Declarative form of userGroups and its properties."
            },
            "DeclarativeOrganizationPermission": {
                "required": ["assignee", "name"],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Permission name.",
                        "enum": ["MANAGE", "SELF_CREATE_TOKEN"]
                    },
                    "assignee": {
                        "$ref": "#/components/schemas/AssigneeIdentifier"
                    }
                },
                "description": "Definition of an organization permission assigned to a user/user-group."
            },
            "DeclarativeColorPalette": {
                "required": ["content", "id", "name"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "content": {
                        "$ref": "#/components/schemas/JsonNode"
                    }
                },
                "description": "Color palette and its properties."
            },
            "DeclarativeCspDirective": {
                "required": ["directive", "sources"],
                "type": "object",
                "properties": {
                    "directive": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "sources": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "DeclarativeDataSource": {
                "required": ["id", "name", "schema", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "Data source ID.",
                        "example": "pg_local_docker-demo"
                    },
                    "name": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Name of the data source.",
                        "example": "postgres demo"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of database.",
                        "example": "POSTGRESQL",
                        "enum": [
                            "POSTGRESQL",
                            "REDSHIFT",
                            "VERTICA",
                            "SNOWFLAKE",
                            "ADS",
                            "BIGQUERY",
                            "MSSQL",
                            "PRESTO",
                            "DREMIO",
                            "DRILL",
                            "GREENPLUM",
                            "AZURESQL",
                            "SYNAPSESQL",
                            "DATABRICKS",
                            "GDSTORAGE",
                            "CLICKHOUSE",
                            "MYSQL",
                            "MARIADB"
                        ]
                    },
                    "url": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "An connection string relevant to type of database.",
                        "example": "jdbc:postgresql://postgres:5432/gooddata"
                    },
                    "schema": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "A scheme/database with the data.",
                        "example": "demo"
                    },
                    "username": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "User with permission connect the data source/database.",
                        "example": "demo"
                    },
                    "password": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Password for the data-source user, property is never returned back.",
                        "example": "*****"
                    },
                    "token": {
                        "maxLength": 10000,
                        "type": "string",
                        "description": "Token as an alternative to username and password.",
                        "example": "Bigquery service account JSON. Encode it using base64!"
                    },
                    "enableCaching": {
                        "type": "boolean",
                        "description": "Enable caching of intermediate results.",
                        "example": false
                    },
                    "cachePath": {
                        "type": "array",
                        "description": "Path to schema, where intermediate caches are stored.",
                        "example": "[ \"dfs\", \"data\" ]. Example used in Apache Drill.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Parameter"
                        }
                    },
                    "decodedParameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Parameter"
                        }
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeDataSourcePermission"
                        }
                    },
                    "cacheStrategy": {
                        "type": "string",
                        "description": "Determines how the results coming from a particular datasource should be cached.\n- ALWAYS: The results from the datasource should be cached normally (the default).\n- NEVER: The results from the datasource should never be cached.",
                        "enum": ["ALWAYS", "NEVER"]
                    }
                },
                "description": "A data source and its properties."
            },
            "DeclarativeDataSourcePermission": {
                "required": ["assignee", "name"],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Permission name.",
                        "enum": ["MANAGE", "USE"]
                    },
                    "assignee": {
                        "$ref": "#/components/schemas/AssigneeIdentifier"
                    }
                }
            },
            "DeclarativeJwk": {
                "required": ["content", "id"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "JWK object ID.",
                        "example": "jwk-1"
                    },
                    "content": {
                        "$ref": "#/components/schemas/DeclarativeJwkSpecification"
                    }
                },
                "description": "A declarative form of the JWK."
            },
            "DeclarativeJwkSpecification": {
                "type": "object",
                "description": "Declarative specification of the cryptographic key.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/DeclarativeRsaSpecification"
                    }
                ]
            },
            "DeclarativeOrganization": {
                "required": ["organization"],
                "type": "object",
                "properties": {
                    "organization": {
                        "$ref": "#/components/schemas/DeclarativeOrganizationInfo"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeUser"
                        }
                    },
                    "userGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeUserGroup"
                        }
                    },
                    "dataSources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeDataSource"
                        }
                    },
                    "workspaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeWorkspace"
                        }
                    },
                    "workspaceDataFilters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeWorkspaceDataFilter"
                        }
                    },
                    "jwks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeJwk"
                        }
                    }
                },
                "description": "Complete definition of an organization in a declarative form."
            },
            "DeclarativeOrganizationInfo": {
                "required": ["hostname", "id", "name", "permissions"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "Identifier of the organization.",
                        "example": "Alpha corporation"
                    },
                    "name": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Formal name of the organization.",
                        "example": "Alpha corporation"
                    },
                    "hostname": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Formal hostname used in deployment.",
                        "example": "alpha.com"
                    },
                    "oauthIssuerLocation": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "URI of the authentication provider."
                    },
                    "oauthClientId": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Identifier of the authentication provider"
                    },
                    "oauthClientSecret": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Communication secret of the authentication provider (never returned back)."
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeOrganizationPermission"
                        }
                    },
                    "earlyAccess": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Early access defined on level Organization"
                    },
                    "oauthIssuerId": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Any string identifying the OIDC provider. This value is used as suffix for OAuth2 callback (redirect) URL. If not defined, the standard callback URL is used. This value is valid only for external OIDC providers, not for the internal DEX provider.",
                        "example": "myOidcProvider"
                    },
                    "oauthSubjectIdClaim": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Any string identifying the claim in ID token, that should be used for user identification. The default value is 'sub'.",
                        "example": "oid"
                    },
                    "settings": {
                        "type": "array",
                        "description": "A list of organization settings.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeSetting"
                        }
                    },
                    "themes": {
                        "type": "array",
                        "description": "A list of themes.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeTheme"
                        }
                    },
                    "colorPalettes": {
                        "type": "array",
                        "description": "A list of color palettes.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeColorPalette"
                        }
                    },
                    "cspDirectives": {
                        "type": "array",
                        "description": "A list of CSP directives.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeCspDirective"
                        }
                    }
                },
                "description": "Information available about an organization."
            },
            "DeclarativeRsaSpecification": {
                "required": ["alg", "e", "kid", "kty", "n", "use"],
                "type": "object",
                "properties": {
                    "kty": {
                        "type": "string",
                        "description": "Key type parameter",
                        "example": "RSA",
                        "enum": ["RSA"]
                    },
                    "alg": {
                        "type": "string",
                        "description": "Algorithm intended for use with the key.",
                        "example": "RS256",
                        "enum": ["RS256", "RS384", "RS512"]
                    },
                    "use": {
                        "type": "string",
                        "description": "Parameter identifies the intended use of the public key.",
                        "example": "sig",
                        "enum": ["sig"]
                    },
                    "x5c": {
                        "type": "array",
                        "description": "Parameter contains a chain of one or more PKIX certificates.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "n": {
                        "type": "string",
                        "description": "Parameter contains the modulus value for the RSA public key."
                    },
                    "e": {
                        "type": "string",
                        "description": "parameter contains the exponent value for the RSA public key."
                    },
                    "kid": {
                        "maxLength": 255,
                        "pattern": "^[^.]",
                        "type": "string",
                        "description": "Parameter is used to match a specific key.",
                        "example": "key.001"
                    },
                    "x5t": {
                        "type": "string",
                        "description": "Parameter is a base64url-encoded SHA-1 thumbprint of the DER encoding of an X.509 certificate."
                    }
                },
                "description": "Declarative specification of the cryptographic key."
            },
            "DeclarativeTheme": {
                "required": ["content", "id", "name"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "content": {
                        "$ref": "#/components/schemas/JsonNode"
                    }
                },
                "description": "Theme and its properties."
            },
            "Parameter": {
                "required": ["name", "value"],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                }
            },
            "DeclarativeDataSourcePermissions": {
                "type": "object",
                "properties": {
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeDataSourcePermission"
                        }
                    }
                },
                "description": "Data source permissions."
            },
            "DeclarativeDataSources": {
                "required": ["dataSources"],
                "type": "object",
                "properties": {
                    "dataSources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeDataSource"
                        }
                    }
                },
                "description": "A data source and its properties."
            },
            "File": {
                "type": "object",
                "properties": {
                    "skeleton": {
                        "$ref": "#/components/schemas/Skeleton"
                    },
                    "any": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "notes": {
                        "$ref": "#/components/schemas/Notes"
                    },
                    "unitOrGroup": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "id": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "canResegment": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "enum": ["YES", "NO"]
                    },
                    "original": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "translate": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "enum": ["YES", "NO"]
                    },
                    "srcDir": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "enum": ["LTR", "RTL", "AUTO"]
                    },
                    "trgDir": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "enum": ["LTR", "RTL", "AUTO"]
                    },
                    "space": {
                        "type": "string",
                        "xml": {
                            "namespace": "http://www.w3.org/XML/1998/namespace",
                            "attribute": true
                        }
                    },
                    "otherAttributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "xml": {
                    "name": "file",
                    "namespace": "urn:oasis:names:tc:xliff:document:2.0"
                }
            },
            "Note": {
                "type": "object",
                "properties": {
                    "content": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "appliesTo": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        },
                        "enum": ["SOURCE", "TARGET"]
                    },
                    "category": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "priority": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "otherAttributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "xml": {
                    "name": "note",
                    "namespace": "urn:oasis:names:tc:xliff:document:2.0"
                }
            },
            "Notes": {
                "required": ["note"],
                "type": "object",
                "properties": {
                    "note": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Note"
                        }
                    }
                },
                "xml": {
                    "name": "notes",
                    "namespace": "urn:oasis:names:tc:xliff:document:2.0"
                }
            },
            "Skeleton": {
                "type": "object",
                "properties": {
                    "content": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "href": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "xml": {
                    "name": "skeleton",
                    "namespace": "urn:oasis:names:tc:xliff:document:2.0"
                }
            },
            "Xliff": {
                "required": ["file"],
                "type": "object",
                "properties": {
                    "file": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/File"
                        }
                    },
                    "version": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "srcLang": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "trgLang": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "space": {
                        "type": "string",
                        "xml": {
                            "namespace": "http://www.w3.org/XML/1998/namespace",
                            "attribute": true
                        }
                    },
                    "otherAttributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "xml": {
                    "name": "xliff",
                    "namespace": "urn:oasis:names:tc:xliff:document:2.0"
                }
            },
            "LocaleRequest": {
                "required": ["locale"],
                "type": "object",
                "properties": {
                    "locale": {
                        "type": "string",
                        "description": "Requested locale in the form of language tag (see RFC 5646).",
                        "example": "en-US"
                    }
                }
            },
            "ResolveSettingsRequest": {
                "required": ["settings"],
                "type": "object",
                "properties": {
                    "settings": {
                        "type": "array",
                        "description": "An array of setting IDs to resolve.",
                        "example": ["timezone"],
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "A request containing setting IDs to resolve."
            },
            "ResolvedSetting": {
                "required": ["id"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Setting ID. Formerly used to identify a type of a particular setting, going to be removed in a favor of setting's type.",
                        "deprecated": true
                    },
                    "content": {
                        "$ref": "#/components/schemas/JsonNode"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the setting.",
                        "example": "TIMEZONE",
                        "enum": [
                            "TIMEZONE",
                            "ACTIVE_THEME",
                            "ACTIVE_COLOR_PALETTE",
                            "WHITE_LABELING",
                            "LOCALE",
                            "METADATA_LOCALE",
                            "FORMAT_LOCALE",
                            "MAPBOX_TOKEN",
                            "WEEK_START",
                            "SHOW_HIDDEN_CATALOG_ITEMS",
                            "OPERATOR_OVERRIDES",
                            "TIMEZONE_VALIDATION_ENABLED"
                        ]
                    }
                },
                "description": "Setting and its value."
            },
            "WorkspacePermissionAssignment": {
                "required": ["assigneeIdentifier"],
                "type": "object",
                "properties": {
                    "assigneeIdentifier": {
                        "$ref": "#/components/schemas/AssigneeIdentifier"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": ["MANAGE", "ANALYZE", "EXPORT", "EXPORT_TABULAR", "EXPORT_PDF", "VIEW"]
                        }
                    },
                    "hierarchyPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": ["MANAGE", "ANALYZE", "EXPORT", "EXPORT_TABULAR", "EXPORT_PDF", "VIEW"]
                        }
                    }
                },
                "description": "Workspace permission assignments"
            },
            "DependentEntitiesRequest": {
                "required": ["identifiers"],
                "type": "object",
                "properties": {
                    "identifiers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EntityIdentifier"
                        }
                    }
                }
            },
            "EntityIdentifier": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "Object identifier."
                    },
                    "type": {
                        "type": "string",
                        "example": "metric",
                        "enum": [
                            "analyticalDashboard",
                            "attribute",
                            "dashboardPlugin",
                            "dataset",
                            "fact",
                            "label",
                            "metric",
                            "userDataFilter",
                            "prompt",
                            "visualizationObject",
                            "filterContext"
                        ]
                    }
                }
            },
            "DependentEntitiesGraph": {
                "required": ["edges", "nodes"],
                "type": "object",
                "properties": {
                    "nodes": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DependentEntitiesNode"
                        }
                    },
                    "edges": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/EntityIdentifier"
                            }
                        }
                    }
                }
            },
            "DependentEntitiesNode": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "example": "metric",
                        "enum": [
                            "analyticalDashboard",
                            "attribute",
                            "dashboardPlugin",
                            "dataset",
                            "fact",
                            "label",
                            "metric",
                            "userDataFilter",
                            "prompt",
                            "visualizationObject",
                            "filterContext"
                        ]
                    },
                    "title": {
                        "type": "string"
                    }
                }
            },
            "DependentEntitiesResponse": {
                "required": ["graph"],
                "type": "object",
                "properties": {
                    "graph": {
                        "$ref": "#/components/schemas/DependentEntitiesGraph"
                    }
                }
            },
            "HierarchyObjectIdentification": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "example": "metric",
                        "enum": [
                            "analyticalDashboard",
                            "attribute",
                            "dashboardPlugin",
                            "dataset",
                            "fact",
                            "label",
                            "metric",
                            "prompt",
                            "visualizationObject",
                            "filterContext",
                            "workspaceDataFilter",
                            "workspaceDataFilterSettings"
                        ]
                    }
                },
                "description": "Represents objects with given ID and type in workspace hierarchy (more than one can exists in different workspaces)."
            },
            "IdentifierDuplications": {
                "required": ["id", "origins", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "example": "metric",
                        "enum": [
                            "analyticalDashboard",
                            "attribute",
                            "dashboardPlugin",
                            "dataset",
                            "fact",
                            "label",
                            "metric",
                            "prompt",
                            "visualizationObject",
                            "filterContext",
                            "workspaceDataFilter",
                            "workspaceDataFilterSettings"
                        ]
                    },
                    "origins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Contains information about conflicting IDs in workspace hierarchy"
            },
            "DashboardPermissionsAssignment": {
                "required": ["permissions"],
                "type": "object",
                "properties": {
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": ["EDIT", "SHARE", "VIEW"]
                        }
                    }
                },
                "description": "Desired levels of permissions for an assignee."
            },
            "PermissionsForAssignee": {
                "required": ["assigneeIdentifier", "permissions"],
                "type": "object",
                "description": "Desired levels of permissions for an assignee identified by an identifier.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/DashboardPermissionsAssignment"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "assigneeIdentifier": {
                                "$ref": "#/components/schemas/AssigneeIdentifier"
                            }
                        }
                    }
                ]
            },
            "PermissionsForAssigneeRule": {
                "required": ["assigneeRule", "permissions"],
                "type": "object",
                "description": "Desired levels of permissions for a collection of assignees identified by a rule.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/DashboardPermissionsAssignment"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "assigneeRule": {
                                "$ref": "#/components/schemas/AssigneeRule"
                            }
                        }
                    }
                ]
            },
            "UserManagementDataSourcePermissionAssignment": {
                "required": ["id", "permissions"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Id of the datasource"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the datasource",
                        "readOnly": true
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": ["MANAGE", "USE"]
                        }
                    }
                },
                "description": "Datasource permission assignments for users and userGroups"
            },
            "UserManagementPermissionAssignments": {
                "required": ["dataSources", "workspaces"],
                "type": "object",
                "properties": {
                    "workspaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserManagementWorkspacePermissionAssignment"
                        }
                    },
                    "dataSources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserManagementDataSourcePermissionAssignment"
                        }
                    }
                }
            },
            "UserManagementWorkspacePermissionAssignment": {
                "required": ["hierarchyPermissions", "id", "permissions"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "readOnly": true
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": ["MANAGE", "ANALYZE", "EXPORT", "EXPORT_TABULAR", "EXPORT_PDF", "VIEW"]
                        }
                    },
                    "hierarchyPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": ["MANAGE", "ANALYZE", "EXPORT", "EXPORT_TABULAR", "EXPORT_PDF", "VIEW"]
                        }
                    }
                },
                "description": "Workspace permission assignments for users and userGroups"
            },
            "UserManagementUserGroupMember": {
                "required": ["id"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "UserManagementUserGroupMembers": {
                "required": ["members"],
                "type": "object",
                "properties": {
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserManagementUserGroupMember"
                        }
                    }
                }
            },
            "PermissionsAssignment": {
                "required": ["assignees"],
                "type": "object",
                "properties": {
                    "assignees": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AssigneeIdentifier"
                        }
                    },
                    "workspaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserManagementWorkspacePermissionAssignment"
                        }
                    },
                    "dataSources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserManagementDataSourcePermissionAssignment"
                        }
                    }
                }
            },
            "EntitlementsRequest": {
                "required": ["entitlementsName"],
                "type": "object",
                "properties": {
                    "entitlementsName": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "CacheStrategy",
                                "Contract",
                                "CustomTheming",
                                "ExtraCache",
                                "Hipaa",
                                "PdfExports",
                                "ManagedOIDC",
                                "UiLocalization",
                                "Tier",
                                "UserCount",
                                "UnlimitedUsers",
                                "UnlimitedWorkspaces",
                                "WhiteLabeling",
                                "WorkspaceCount",
                                "UserTelemetryDisabled"
                            ]
                        }
                    }
                }
            },
            "ApiEntitlement": {
                "required": ["name"],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "enum": [
                            "CacheStrategy",
                            "Contract",
                            "CustomTheming",
                            "ExtraCache",
                            "Hipaa",
                            "PdfExports",
                            "ManagedOIDC",
                            "UiLocalization",
                            "Tier",
                            "UserCount",
                            "UnlimitedUsers",
                            "UnlimitedWorkspaces",
                            "WhiteLabeling",
                            "WorkspaceCount",
                            "UserTelemetryDisabled"
                        ]
                    },
                    "value": {
                        "type": "string"
                    },
                    "expiry": {
                        "type": "string",
                        "format": "date"
                    }
                }
            },
            "OrganizationPermissionAssignment": {
                "required": ["assigneeIdentifier", "permissions"],
                "type": "object",
                "properties": {
                    "assigneeIdentifier": {
                        "$ref": "#/components/schemas/AssigneeIdentifier"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": ["MANAGE", "SELF_CREATE_TOKEN"]
                        }
                    }
                },
                "description": "Organization permission assignments"
            },
            "DataSourcePermissionAssignment": {
                "required": ["assigneeIdentifier", "permissions"],
                "type": "object",
                "properties": {
                    "assigneeIdentifier": {
                        "$ref": "#/components/schemas/AssigneeIdentifier"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": ["MANAGE", "USE"]
                        }
                    }
                },
                "description": "Data source permission assignments"
            },
            "DeclarativeColumn": {
                "required": ["dataType", "name"],
                "type": "object",
                "properties": {
                    "name": {
                        "maxLength": 255,
                        "pattern": "^[^\u0000]*$",
                        "type": "string",
                        "description": "Column name",
                        "example": "customer_id"
                    },
                    "dataType": {
                        "type": "string",
                        "description": "Column type",
                        "example": "INT",
                        "enum": ["INT", "STRING", "DATE", "NUMERIC", "TIMESTAMP", "TIMESTAMP_TZ", "BOOLEAN"]
                    },
                    "isPrimaryKey": {
                        "type": "boolean",
                        "description": "Is column part of primary key?"
                    },
                    "referencedTableId": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Referenced table (Foreign key)",
                        "example": "customers"
                    },
                    "referencedTableColumn": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Referenced table (Foreign key)",
                        "example": "customer_id"
                    }
                },
                "description": "A table column."
            },
            "DeclarativeTable": {
                "required": ["columns", "id", "path", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "Table id.",
                        "example": "customers"
                    },
                    "path": {
                        "type": "array",
                        "description": "Path to table.",
                        "example": ["table_schema", "table_name"],
                        "items": {
                            "type": "string",
                            "example": "table_name"
                        }
                    },
                    "type": {
                        "type": "string",
                        "description": "Table type: TABLE or VIEW.",
                        "example": "TABLE"
                    },
                    "namePrefix": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Table or view name prefix used in scan. Will be stripped when generating LDM.",
                        "example": "out_gooddata"
                    },
                    "columns": {
                        "type": "array",
                        "description": "An array of physical columns",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeColumn"
                        }
                    }
                },
                "description": "A database table."
            },
            "GenerateLdmRequest": {
                "type": "object",
                "properties": {
                    "generateLongIds": {
                        "type": "boolean",
                        "description": "A flag dictating how the attribute, fact and label ids are generated. By default their ids are derived only from the column name, unless there would be a conflict (e.g. category coming from two different tables). In that case a long id format of `<table>.<column>` is used. If the flag is set to true, then all ids will be generated in the long form."
                    },
                    "separator": {
                        "type": "string",
                        "description": "A separator between prefixes and the names. Default is \"__\".",
                        "example": "__",
                        "default": "__"
                    },
                    "tablePrefix": {
                        "type": "string",
                        "description": "Tables starting with this prefix will be included. The prefix is then followed by the value of `separator` parameter. Given the table prefix is `out_table` and separator is `__`, the table with name like `out_table__customers` will be scanned.",
                        "example": "out_table",
                        "deprecated": true
                    },
                    "viewPrefix": {
                        "type": "string",
                        "description": "Views starting with this prefix will be included. The prefix is then followed by the value of `separator` parameter. Given the view prefix is `out_view` and separator is `__`, the table with name like `out_view__us_customers` will be scanned.",
                        "example": "out_view",
                        "deprecated": true
                    },
                    "primaryLabelPrefix": {
                        "type": "string",
                        "description": "Columns starting with this prefix will be considered as primary labels. The prefix is then followed by the value of `separator` parameter. Given the primary label prefix is `pl` and separator is `__`, the columns with name like `pl__country_id` will be considered as primary labels.",
                        "example": "pl"
                    },
                    "secondaryLabelPrefix": {
                        "type": "string",
                        "description": "Columns starting with this prefix will be considered as secondary labels. The prefix is then followed by the value of `separator` parameter. Given the secondary label prefix is `sl` and separator is `__`, the columns with name like `sl__country_id_country_name` will be considered as secondary labels.",
                        "example": "sl"
                    },
                    "factPrefix": {
                        "type": "string",
                        "description": "Columns starting with this prefix will be considered as facts. The prefix is then followed by the value of `separator` parameter. Given the fact prefix is `f` and separator is `__`, the columns with name like `f__sold` will be considered as facts.",
                        "example": "f"
                    },
                    "dateGranularities": {
                        "type": "string",
                        "description": "Option to control date granularities for date datasets. Empty value enables common date granularities (DAY, WEEK, MONTH, QUARTER, YEAR). Default value is `all` which enables all available date granularities, including time granularities (like hours, minutes).",
                        "example": "all"
                    },
                    "grainPrefix": {
                        "type": "string",
                        "description": "Columns starting with this prefix will be considered as grains. The prefix is then followed by the value of `separator` parameter. Given the grain prefix is `g` and separator is `__`, the columns with name like `g__name` will be considered as grains.",
                        "example": "g"
                    },
                    "referencePrefix": {
                        "type": "string",
                        "description": "Columns starting with this prefix will be considered as references. The prefix is then followed by the value of `separator` parameter. Given the reference prefix is `r` and separator is `__`, the columns with name like `r__customer_name` will be considered as references.",
                        "example": "r"
                    },
                    "grainReferencePrefix": {
                        "type": "string",
                        "description": "Columns starting with this prefix will be considered as grain references. The prefix is then followed by the value of `separator` parameter. Given the reference prefix is `gr` and separator is `__`, the columns with name like `gr__customer_name` will be considered as grain references.",
                        "example": "gr"
                    },
                    "denormPrefix": {
                        "type": "string",
                        "description": "Columns starting with this prefix will be considered as denormalization references. The prefix is then followed by the value of `separator` parameter. Given the denormalization reference prefix is `dr` and separator is `__`, the columns with name like `dr__customer_name` will be considered as denormalization references.",
                        "example": "dr"
                    },
                    "wdfPrefix": {
                        "type": "string",
                        "description": "Column serving as workspace data filter. No labels are auto generated for such columns.",
                        "example": "wdf"
                    },
                    "pdm": {
                        "$ref": "#/components/schemas/PdmLdmRequest"
                    },
                    "workspaceId": {
                        "type": "string",
                        "description": "Optional workspace id."
                    }
                },
                "description": "A request containing all information needed for generation of logical model."
            },
            "PdmLdmRequest": {
                "type": "object",
                "properties": {
                    "sqls": {
                        "type": "array",
                        "description": "List of SQL datasets.",
                        "items": {
                            "$ref": "#/components/schemas/PdmSql"
                        }
                    },
                    "tables": {
                        "type": "array",
                        "description": "List of physical database tables.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeTable"
                        }
                    }
                },
                "description": "PDM additions wrapper."
            },
            "PdmSql": {
                "required": ["statement", "title"],
                "type": "object",
                "properties": {
                    "statement": {
                        "type": "string",
                        "description": "SQL statement.",
                        "example": "select * from abc"
                    },
                    "title": {
                        "type": "string",
                        "description": "SQL dataset title.",
                        "example": "My special dataset"
                    },
                    "columns": {
                        "type": "array",
                        "description": "Columns defining SQL dataset.",
                        "items": {
                            "$ref": "#/components/schemas/SqlColumn"
                        }
                    }
                },
                "description": "SQL dataset definition."
            },
            "SqlColumn": {
                "required": ["dataType", "name"],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Column name.",
                        "example": "ABC"
                    },
                    "dataType": {
                        "type": "string",
                        "description": "Column data type.",
                        "example": "STRING",
                        "enum": ["INT", "STRING", "DATE", "NUMERIC", "TIMESTAMP", "TIMESTAMP_TZ", "BOOLEAN"]
                    }
                },
                "description": "Columns defining SQL dataset."
            },
            "PlatformUsageRequest": {
                "required": ["usageItemNames"],
                "type": "object",
                "properties": {
                    "usageItemNames": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": ["UserCount", "WorkspaceCount"]
                        }
                    }
                }
            },
            "PlatformUsage": {
                "required": ["name"],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "enum": ["UserCount", "WorkspaceCount"]
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "DashboardPermissions": {
                "required": ["rules", "userGroups", "users"],
                "type": "object",
                "properties": {
                    "rules": {
                        "type": "array",
                        "description": "List of rules",
                        "items": {
                            "$ref": "#/components/schemas/RulePermission"
                        }
                    },
                    "users": {
                        "type": "array",
                        "description": "List of users",
                        "items": {
                            "$ref": "#/components/schemas/UserPermission"
                        }
                    },
                    "userGroups": {
                        "type": "array",
                        "description": "List of user groups",
                        "items": {
                            "$ref": "#/components/schemas/UserGroupPermission"
                        }
                    }
                }
            },
            "GrantedPermission": {
                "required": ["level", "source"],
                "type": "object",
                "properties": {
                    "level": {
                        "type": "string",
                        "description": "Level of permission",
                        "example": "VIEW, SHARE, EDIT"
                    },
                    "source": {
                        "type": "string",
                        "description": "Source of permission",
                        "example": "direct/indirect"
                    }
                },
                "description": "Permissions granted to the user group"
            },
            "RulePermission": {
                "required": ["type"],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Type of the rule",
                        "example": "allWorkspaceUsers"
                    },
                    "permissions": {
                        "type": "array",
                        "description": "Permissions granted by the rule",
                        "items": {
                            "$ref": "#/components/schemas/GrantedPermission"
                        }
                    }
                },
                "description": "List of rules"
            },
            "UserGroupPermission": {
                "required": ["id"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the user group",
                        "example": "admins"
                    },
                    "permissions": {
                        "type": "array",
                        "description": "Permissions granted to the user group",
                        "items": {
                            "$ref": "#/components/schemas/GrantedPermission"
                        }
                    }
                },
                "description": "List of user groups"
            },
            "UserPermission": {
                "required": ["id"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of user",
                        "example": "John Wick"
                    },
                    "email": {
                        "type": "string",
                        "description": "User email address",
                        "example": "user@example.com"
                    },
                    "permissions": {
                        "type": "array",
                        "description": "Permissions granted to the user",
                        "items": {
                            "$ref": "#/components/schemas/GrantedPermission"
                        }
                    }
                },
                "description": "List of users"
            },
            "AvailableAssignees": {
                "required": ["userGroups", "users"],
                "type": "object",
                "properties": {
                    "users": {
                        "type": "array",
                        "description": "List of users",
                        "items": {
                            "$ref": "#/components/schemas/UserAssignee"
                        }
                    },
                    "userGroups": {
                        "type": "array",
                        "description": "List of user groups",
                        "items": {
                            "$ref": "#/components/schemas/UserGroupAssignee"
                        }
                    }
                }
            },
            "UserAssignee": {
                "required": ["id"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "User name",
                        "example": "John Wick"
                    },
                    "email": {
                        "type": "string",
                        "description": "User email address",
                        "example": "user@example.com"
                    }
                },
                "description": "List of users"
            },
            "UserGroupAssignee": {
                "required": ["id"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "User group name",
                        "example": "admins"
                    }
                },
                "description": "List of user groups"
            },
            "UserGroupIdentifier": {
                "required": ["id"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "description": "A list of groups where user is a member"
            },
            "UserManagementUsers": {
                "required": ["totalCount", "users"],
                "type": "object",
                "properties": {
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserManagementUsersItem"
                        }
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total number of users is based on applied filters.",
                        "format": "int32"
                    }
                }
            },
            "UserManagementUsersItem": {
                "required": ["dataSources", "id", "organizationAdmin", "userGroups", "workspaces"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "User name",
                        "example": "John Wick"
                    },
                    "email": {
                        "type": "string",
                        "description": "User email address",
                        "example": "user@example.com"
                    },
                    "organizationAdmin": {
                        "type": "boolean",
                        "description": "Is user organization admin",
                        "example": false
                    },
                    "userGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserGroupIdentifier"
                        }
                    },
                    "workspaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserManagementWorkspacePermissionAssignment"
                        }
                    },
                    "dataSources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserManagementDataSourcePermissionAssignment"
                        }
                    }
                },
                "description": "List of users"
            },
            "UserManagementUserGroups": {
                "required": ["totalCount", "userGroups"],
                "type": "object",
                "properties": {
                    "userGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserManagementUserGroupsItem"
                        }
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of groups",
                        "format": "int32"
                    }
                }
            },
            "UserManagementUserGroupsItem": {
                "required": ["dataSources", "id", "organizationAdmin", "userCount", "workspaces"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "Group name",
                        "example": "admins"
                    },
                    "organizationAdmin": {
                        "type": "boolean",
                        "description": "Is group organization admin",
                        "example": false
                    },
                    "userCount": {
                        "type": "integer",
                        "description": "The number of users belonging to the group",
                        "format": "int32"
                    },
                    "workspaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserManagementWorkspacePermissionAssignment"
                        }
                    },
                    "dataSources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserManagementDataSourcePermissionAssignment"
                        }
                    }
                },
                "description": "List of groups"
            }
        },
        "responses": {
            "Deleted": {
                "description": "Successfully deleted"
            }
        },
        "parameters": {
            "page": {
                "name": "page",
                "in": "query",
                "description": "Zero-based page index (0..N)",
                "schema": {
                    "type": "integer",
                    "default": 0
                }
            },
            "size": {
                "name": "size",
                "in": "query",
                "description": "The size of the page to be returned",
                "schema": {
                    "type": "integer",
                    "default": 20
                }
            },
            "sort": {
                "name": "sort",
                "in": "query",
                "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "idPathParameter": {
                "name": "id",
                "in": "path",
                "required": true,
                "schema": {
                    "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                    "type": "string"
                }
            }
        }
    }
}
