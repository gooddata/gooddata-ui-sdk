{
    "openapi": "3.0.1",
    "info": {
        "title": "OpenAPI definition",
        "version": "v0"
    },
    "servers": [
        {
            "url": "/",
            "description": "GoodData.CN endpoint"
        }
    ],
    "paths": {
        "/api/layout/workspaces": {
            "get": {
                "tags": ["declarative-layout-controller"],
                "summary": "Get all workspaces layout",
                "description": "Gets complete layout of workspaces, their hierarchy, models.",
                "operationId": "getWorkspacesLayout",
                "responses": {
                    "200": {
                        "description": "Retrieved layout of all workspaces.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeclarativeWorkspaces"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["declarative-layout-controller"],
                "summary": "Set all workspaces layout",
                "description": "Sets complete layout of workspaces, their hierarchy, models.",
                "operationId": "setWorkspacesLayout",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeclarativeWorkspaces"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "All workspaces layout set."
                    }
                }
            }
        },
        "/api/layout/workspaces/{workspaceId}": {
            "get": {
                "tags": ["declarative-layout-controller"],
                "summary": "Get workspace layout",
                "description": "Retrieve current model of the workspace in declarative form.",
                "operationId": "getWorkspaceLayout",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved the workspace model.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeclarativeWorkspaceModel"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["declarative-layout-controller"],
                "summary": "Set workspace layout",
                "description": "Set complete layout of workspace, like model, ACLs, etc.",
                "operationId": "putWorkspaceLayout",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeclarativeWorkspaceModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "The model of the workspace was set."
                    }
                }
            }
        },
        "/api/layout/workspaces/{workspaceId}/logicalModel": {
            "get": {
                "tags": ["declarative-layout-controller"],
                "summary": "Get logical model",
                "description": "Retrieve current logical model of the workspace in declarative form.",
                "operationId": "getLogicalModel",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved current logical model.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeclarativeModel"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["declarative-layout-controller"],
                "summary": "Set logical model",
                "description": "Set effective logical model of the workspace.",
                "operationId": "setLogicalModel",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeclarativeModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Logical model successfully set."
                    }
                }
            }
        },
        "/api/layout/workspaces/{workspaceId}/analyticsModel": {
            "get": {
                "tags": ["declarative-layout-controller"],
                "summary": "Get analytics model",
                "description": "Retrieve current analytics model of the workspace.",
                "operationId": "getAnalyticsModel",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved current analytics model.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeclarativeAnalytics"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["declarative-layout-controller"],
                "summary": "Set analytics model",
                "description": "Set effective analytics model of the workspace.",
                "operationId": "setAnalyticsModel",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeclarativeAnalytics"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Analytics model successfully set."
                    }
                }
            }
        },
        "/api/layout/workspaceDataFilters": {
            "get": {
                "tags": ["declarative-layout-controller"],
                "summary": "Get workspace data filters for all workspaces",
                "description": "Retrieve all workspaces and related workspace data filters (and their settings / values).",
                "operationId": "getWorkspaceDataFiltersLayout",
                "responses": {
                    "200": {
                        "description": "Retrieved all workspace data filters.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeclarativeWorkspaceDataFilters"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["declarative-layout-controller"],
                "summary": "Set all workspace data filters",
                "description": "Sets workspace data filters in all workspaces in entire organization.",
                "operationId": "setWorkspaceDataFiltersLayout",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeclarativeWorkspaceDataFilters"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "All workspace data filters set."
                    }
                }
            }
        },
        "/api/layout/data": {
            "put": {
                "tags": ["declarative-layout-controller"],
                "summary": "Set organization layout",
                "description": "Sets complete layout of organization, like workspaces, user-groups, etc.",
                "operationId": "setOrganizationLayout",
                "responses": {
                    "501": {
                        "description": "Resource was not implemented yet."
                    }
                }
            }
        },
        "/api/layout/dataSources": {
            "get": {
                "tags": ["declarative-layout-controller"],
                "summary": "Get all data sources",
                "description": "Retrieve all data sources including related physical model.",
                "operationId": "getDataSourcesLayout",
                "responses": {
                    "200": {
                        "description": "Retrieved all data sources.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeclarativeDataSources"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["declarative-layout-controller"],
                "summary": "Put all data sources",
                "description": "Set all data sources including related physical model.",
                "operationId": "putDataSourcesLayout",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeclarativeDataSources"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Defined all data sources."
                    }
                }
            }
        },
        "/api/layout/dataSources/{dataSourceId}/physicalModel": {
            "get": {
                "tags": ["data-source-layout-controller"],
                "summary": "Get data source physical model layout",
                "description": "Retrieve complete layout of tables with their columns",
                "operationId": "getPdmLayout",
                "parameters": [
                    {
                        "name": "dataSourceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved data source physical mode layout.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeclarativePdm"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["data-source-layout-controller"],
                "summary": "Set data source physical model layout",
                "description": "Sets complete layout of tables with their columns under corresponding Data Source.",
                "operationId": "setPdmLayout",
                "parameters": [
                    {
                        "name": "dataSourceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeclarativePdm"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Data source physical mode layout set successfully."
                    }
                }
            }
        },
        "/api/actions/dataSources/{dataSourceId}/uploadNotification": {
            "post": {
                "tags": ["data-source-actions-controller"],
                "summary": "Register an upload notification",
                "description": "Notification sets up all reports to be computed again with new data.",
                "operationId": "registerUploadNotification",
                "parameters": [
                    {
                        "name": "dataSourceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "An upload notification has been successfully registered."
                    },
                    "404": {
                        "description": "Data source with given name does not exist."
                    }
                }
            }
        },
        "/api/actions/dataSources/{dataSourceId}/generateLogicalModel": {
            "post": {
                "tags": ["data-source-actions-controller"],
                "summary": "Generate LDM from PDM",
                "description": "Generate LDM from PDM stored in data source.",
                "operationId": "generateLogicalModel",
                "parameters": [
                    {
                        "name": "dataSourceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GenerateLdmRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "LDM generated successfully.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeclarativeModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Data source with given name does not exist.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeclarativeModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/options": {
            "get": {
                "tags": ["options-controller"],
                "summary": "Links for all configuration options",
                "description": "Retrieves links for all options for different configurations.",
                "operationId": "getAllOptions",
                "responses": {
                    "200": {
                        "description": "Links for all configuration options.",
                        "content": {
                            "application/json": {
                                "examples": {
                                    "All options": {
                                        "description": "All options",
                                        "value": {
                                            "options": {
                                                "description": "Options resources",
                                                "links": {
                                                    "availableDrivers": "/api/options/availableDrivers"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/options/availableDrivers": {
            "get": {
                "tags": ["options-controller"],
                "summary": "Get all available data source drivers",
                "description": "Retrieves a list of all supported data sources along with information about the used drivers.",
                "operationId": "getDataSourceDrivers",
                "responses": {
                    "200": {
                        "description": "A list of all available data source drivers.",
                        "content": {
                            "application/json": {
                                "examples": {
                                    "All available drivers": {
                                        "description": "All available drivers",
                                        "value": {
                                            "POSTGRESQL": "org.postgresql.Driver",
                                            "REDSHIFT": "com.amazon.redshift.jdbc42.Driver"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/layout/organization": {
            "get": {
                "tags": ["declarative-layout-controller"],
                "summary": "Get organization layout",
                "description": "Retrieve complete layout of organization, workspaces, user-groups, etc.",
                "operationId": "getOrganizationLayout",
                "responses": {
                    "501": {
                        "description": "Resource was not implemented yet."
                    }
                }
            }
        },
        "/api/entities/acls": {
            "get": {
                "tags": ["organization-model-controller"],
                "operationId": "getAllEntities@Acls",
                "parameters": [
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "access": "ACLAccessValue",
                            "priority": 123
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=access==ACLAccessValue;priority==123"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["users", "userGroups", "ALL"]
                            }
                        },
                        "example": "include=users,userGroups"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Zero-based page index (0..N)",
                        "schema": {
                            "type": "integer",
                            "default": "0"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of the page to be returned",
                        "schema": {
                            "type": "integer",
                            "default": "20"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiACLOutList"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["organization-model-controller"],
                "operationId": "createEntity@Acls",
                "parameters": [
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "access": "ACLAccessValue",
                            "priority": 123
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=access==ACLAccessValue;priority==123"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["users", "userGroups", "ALL"]
                            }
                        },
                        "example": "include=users,userGroups"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiACLInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiACLOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/entities/acls/{id}": {
            "get": {
                "tags": ["organization-model-controller"],
                "operationId": "getEntity@Acls",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "access": "ACLAccessValue",
                            "priority": 123
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=access==ACLAccessValue;priority==123"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["users", "userGroups", "ALL"]
                            }
                        },
                        "example": "include=users,userGroups"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiACLOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["organization-model-controller"],
                "operationId": "updateEntity@Acls",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "access": "ACLAccessValue",
                            "priority": 123
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=access==ACLAccessValue;priority==123"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["users", "userGroups", "ALL"]
                            }
                        },
                        "example": "include=users,userGroups"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiACLInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiACLOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["organization-model-controller"],
                "operationId": "deleteEntity@Acls",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "access": "ACLAccessValue",
                            "priority": 123
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=access==ACLAccessValue;priority==123"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted"
                    }
                }
            }
        },
        "/api/entities/admin/organizations/{id}": {
            "get": {
                "tags": ["organization-controller"],
                "operationId": "getEntity@Organizations",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "name": "someString",
                            "hostname": "someString",
                            "bootstrapUser.id": 321,
                            "bootstrapUserGroup.id": 321
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;hostname==someString;bootstrapUser.id==321;bootstrapUserGroup.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["users", "userGroups", "ALL"]
                            }
                        },
                        "example": "include=users,userGroups"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiOrganizationOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["organization-controller"],
                "operationId": "updateEntity@Organizations",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "name": "someString",
                            "hostname": "someString",
                            "bootstrapUser.id": 321,
                            "bootstrapUserGroup.id": 321
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;hostname==someString;bootstrapUser.id==321;bootstrapUserGroup.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["users", "userGroups", "ALL"]
                            }
                        },
                        "example": "include=users,userGroups"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiOrganizationInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiOrganizationOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/entities/cookieSecurityPropertieses": {
            "get": {
                "tags": ["organization-model-controller"],
                "operationId": "getAllEntities@CookieSecurityPropertieses",
                "parameters": [
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "keySet": "KeysetHandleValue",
                            "lastRotation": "InstantValue"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=keySet==KeysetHandleValue;lastRotation==InstantValue"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Zero-based page index (0..N)",
                        "schema": {
                            "type": "integer",
                            "default": "0"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of the page to be returned",
                        "schema": {
                            "type": "integer",
                            "default": "20"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiCookieSecurityPropertiesOutList"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["organization-model-controller"],
                "operationId": "createEntity@CookieSecurityPropertieses",
                "parameters": [
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "keySet": "KeysetHandleValue",
                            "lastRotation": "InstantValue"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=keySet==KeysetHandleValue;lastRotation==InstantValue"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiCookieSecurityPropertiesInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiCookieSecurityPropertiesOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/entities/cookieSecurityPropertieses/{id}": {
            "get": {
                "tags": ["organization-model-controller"],
                "operationId": "getEntity@CookieSecurityPropertieses",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "keySet": "KeysetHandleValue",
                            "lastRotation": "InstantValue"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=keySet==KeysetHandleValue;lastRotation==InstantValue"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiCookieSecurityPropertiesOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["organization-model-controller"],
                "operationId": "updateEntity@CookieSecurityPropertieses",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "keySet": "KeysetHandleValue",
                            "lastRotation": "InstantValue"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=keySet==KeysetHandleValue;lastRotation==InstantValue"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiCookieSecurityPropertiesInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiCookieSecurityPropertiesOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["organization-model-controller"],
                "operationId": "deleteEntity@CookieSecurityPropertieses",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "keySet": "KeysetHandleValue",
                            "lastRotation": "InstantValue"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=keySet==KeysetHandleValue;lastRotation==InstantValue"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted"
                    }
                }
            }
        },
        "/api/entities/dataSources": {
            "get": {
                "tags": ["organization-model-controller"],
                "operationId": "getAllEntities@DataSources",
                "parameters": [
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "name": "someString",
                            "type": "DatabaseTypeValue"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;type==DatabaseTypeValue"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Zero-based page index (0..N)",
                        "schema": {
                            "type": "integer",
                            "default": "0"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of the page to be returned",
                        "schema": {
                            "type": "integer",
                            "default": "20"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiDataSourceOutList"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["organization-model-controller"],
                "operationId": "createEntity@DataSources",
                "parameters": [
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "name": "someString",
                            "type": "DatabaseTypeValue"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;type==DatabaseTypeValue"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiDataSourceInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiDataSourceOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/entities/dataSources/{dataSourceId}/dataSourceTables": {
            "get": {
                "tags": ["data-source-entities-controller"],
                "operationId": "getAllEntities@DataSourceTables",
                "parameters": [
                    {
                        "name": "dataSourceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "path": "v1,v2,v3",
                            "columns": "v1,v2,v3"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=path==v1,v2,v3;columns==v1,v2,v3"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Zero-based page index (0..N)",
                        "schema": {
                            "type": "integer",
                            "default": "0"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of the page to be returned",
                        "schema": {
                            "type": "integer",
                            "default": "20"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiDataSourceTableOutList"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/entities/dataSources/{dataSourceId}/dataSourceTables/{id}": {
            "get": {
                "tags": ["data-source-entities-controller"],
                "operationId": "getEntity@DataSourceTables",
                "parameters": [
                    {
                        "name": "dataSourceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "path": "v1,v2,v3",
                            "columns": "v1,v2,v3"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=path==v1,v2,v3;columns==v1,v2,v3"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiDataSourceTableOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/entities/dataSources/{id}": {
            "get": {
                "tags": ["organization-model-controller"],
                "operationId": "getEntity@DataSources",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "name": "someString",
                            "type": "DatabaseTypeValue"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;type==DatabaseTypeValue"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiDataSourceOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["organization-model-controller"],
                "operationId": "updateEntity@DataSources",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "name": "someString",
                            "type": "DatabaseTypeValue"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;type==DatabaseTypeValue"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiDataSourceInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiDataSourceOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["organization-model-controller"],
                "operationId": "deleteEntity@DataSources",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "name": "someString",
                            "type": "DatabaseTypeValue"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;type==DatabaseTypeValue"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted"
                    }
                }
            }
        },
        "/api/entities/organization": {
            "get": {
                "tags": ["organization-controller"],
                "operationId": "getOrganization@Organizations",
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiOrganizationOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/entities/userGroups": {
            "get": {
                "tags": ["organization-model-controller"],
                "operationId": "getAllEntities@UserGroups",
                "parameters": [
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "parent.id": 321
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=parent.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["userGroups", "acls", "ALL"]
                            }
                        },
                        "example": "include=userGroups,acls"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Zero-based page index (0..N)",
                        "schema": {
                            "type": "integer",
                            "default": "0"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of the page to be returned",
                        "schema": {
                            "type": "integer",
                            "default": "20"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiUserGroupOutList"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["organization-model-controller"],
                "operationId": "createEntity@UserGroups",
                "parameters": [
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "parent.id": 321
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=parent.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["userGroups", "acls", "ALL"]
                            }
                        },
                        "example": "include=userGroups,acls"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiUserGroupInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiUserGroupOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/entities/userGroups/{id}": {
            "get": {
                "tags": ["organization-model-controller"],
                "operationId": "getEntity@UserGroups",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "parent.id": 321
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=parent.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["userGroups", "acls", "ALL"]
                            }
                        },
                        "example": "include=userGroups,acls"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiUserGroupOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["organization-model-controller"],
                "operationId": "updateEntity@UserGroups",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "parent.id": 321
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=parent.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["userGroups", "acls", "ALL"]
                            }
                        },
                        "example": "include=userGroups,acls"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiUserGroupInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiUserGroupOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["organization-model-controller"],
                "operationId": "deleteEntity@UserGroups",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "parent.id": 321
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=parent.id==321"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted"
                    }
                }
            }
        },
        "/api/entities/users": {
            "get": {
                "tags": ["organization-model-controller"],
                "operationId": "getAllEntities@Users",
                "parameters": [
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "authenticationId": "someString",
                            "lastLogoutAllTimestamp": "InstantValue",
                            "userGroup.id": 321
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=authenticationId==someString;lastLogoutAllTimestamp==InstantValue;userGroup.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["userGroups", "acls", "ALL"]
                            }
                        },
                        "example": "include=userGroups,acls"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Zero-based page index (0..N)",
                        "schema": {
                            "type": "integer",
                            "default": "0"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of the page to be returned",
                        "schema": {
                            "type": "integer",
                            "default": "20"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiUserOutList"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["organization-model-controller"],
                "operationId": "createEntity@Users",
                "parameters": [
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "authenticationId": "someString",
                            "lastLogoutAllTimestamp": "InstantValue",
                            "userGroup.id": 321
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=authenticationId==someString;lastLogoutAllTimestamp==InstantValue;userGroup.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["userGroups", "acls", "ALL"]
                            }
                        },
                        "example": "include=userGroups,acls"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiUserInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiUserOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/entities/users/{id}": {
            "get": {
                "tags": ["organization-model-controller"],
                "operationId": "getEntity@Users",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "authenticationId": "someString",
                            "lastLogoutAllTimestamp": "InstantValue",
                            "userGroup.id": 321
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=authenticationId==someString;lastLogoutAllTimestamp==InstantValue;userGroup.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["userGroups", "acls", "ALL"]
                            }
                        },
                        "example": "include=userGroups,acls"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiUserOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["organization-model-controller"],
                "operationId": "updateEntity@Users",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "authenticationId": "someString",
                            "lastLogoutAllTimestamp": "InstantValue",
                            "userGroup.id": 321
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=authenticationId==someString;lastLogoutAllTimestamp==InstantValue;userGroup.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["userGroups", "acls", "ALL"]
                            }
                        },
                        "example": "include=userGroups,acls"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiUserInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiUserOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["organization-model-controller"],
                "operationId": "deleteEntity@Users",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "authenticationId": "someString",
                            "lastLogoutAllTimestamp": "InstantValue",
                            "userGroup.id": 321
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=authenticationId==someString;lastLogoutAllTimestamp==InstantValue;userGroup.id==321"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted"
                    }
                }
            }
        },
        "/api/entities/users/{userId}/apiTokens": {
            "get": {
                "tags": ["user-model-controller"],
                "operationId": "getAllEntities@ApiTokens",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "cryptedToken": "someString",
                            "bearerToken": "someString"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=cryptedToken==someString;bearerToken==someString"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Zero-based page index (0..N)",
                        "schema": {
                            "type": "integer",
                            "default": "0"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of the page to be returned",
                        "schema": {
                            "type": "integer",
                            "default": "20"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiApiTokenOutList"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["user-model-controller"],
                "operationId": "createEntity@ApiTokens",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "cryptedToken": "someString",
                            "bearerToken": "someString"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=cryptedToken==someString;bearerToken==someString"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiApiTokenInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiApiTokenOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/entities/users/{userId}/apiTokens/{id}": {
            "get": {
                "tags": ["user-model-controller"],
                "operationId": "getEntity@ApiTokens",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "cryptedToken": "someString",
                            "bearerToken": "someString"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=cryptedToken==someString;bearerToken==someString"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Zero-based page index (0..N)",
                        "schema": {
                            "type": "integer",
                            "default": "0"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of the page to be returned",
                        "schema": {
                            "type": "integer",
                            "default": "20"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiApiTokenOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["user-model-controller"],
                "operationId": "deleteEntity@ApiTokens",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "cryptedToken": "someString",
                            "bearerToken": "someString"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=cryptedToken==someString;bearerToken==someString"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted"
                    }
                }
            }
        },
        "/api/entities/workspaces": {
            "get": {
                "tags": ["organization-model-controller"],
                "operationId": "getAllEntities@Workspaces",
                "parameters": [
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "name": "someString",
                            "parent.id": 321
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;parent.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["workspaces", "ALL"]
                            }
                        },
                        "example": "include=workspaces"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Zero-based page index (0..N)",
                        "schema": {
                            "type": "integer",
                            "default": "0"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of the page to be returned",
                        "schema": {
                            "type": "integer",
                            "default": "20"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceOutList"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["organization-model-controller"],
                "operationId": "createEntity@Workspaces",
                "parameters": [
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "name": "someString",
                            "parent.id": 321
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;parent.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["workspaces", "ALL"]
                            }
                        },
                        "example": "include=workspaces"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiWorkspaceInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/entities/workspaces/{id}": {
            "get": {
                "tags": ["organization-model-controller"],
                "operationId": "getEntity@Workspaces",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "name": "someString",
                            "parent.id": 321
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;parent.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["workspaces", "ALL"]
                            }
                        },
                        "example": "include=workspaces"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["organization-model-controller"],
                "operationId": "updateEntity@Workspaces",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "name": "someString",
                            "parent.id": 321
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;parent.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["workspaces", "ALL"]
                            }
                        },
                        "example": "include=workspaces"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiWorkspaceInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["organization-model-controller"],
                "operationId": "deleteEntity@Workspaces",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "name": "someString",
                            "parent.id": 321
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=name==someString;parent.id==321"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted"
                    }
                }
            }
        },
        "/api/entities/workspaces/{workspaceId}/analyticalDashboards": {
            "get": {
                "tags": ["workspace-object-controller"],
                "operationId": "getAllEntities@AnalyticalDashboards",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "visualizationObjects",
                                    "analyticalDashboards",
                                    "labels",
                                    "metrics",
                                    "datasets",
                                    "filterContexts",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "include=visualizationObjects,analyticalDashboards,labels,metrics,datasets,filterContexts"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Zero-based page index (0..N)",
                        "schema": {
                            "type": "integer",
                            "default": "0"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of the page to be returned",
                        "schema": {
                            "type": "integer",
                            "default": "20"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutList"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["workspace-object-controller"],
                "operationId": "createEntity@AnalyticalDashboards",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "visualizationObjects",
                                    "analyticalDashboards",
                                    "labels",
                                    "metrics",
                                    "datasets",
                                    "filterContexts",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "include=visualizationObjects,analyticalDashboards,labels,metrics,datasets,filterContexts"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiAnalyticalDashboardInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/entities/workspaces/{workspaceId}/analyticalDashboards/{objectId}": {
            "get": {
                "tags": ["workspace-object-controller"],
                "operationId": "getEntity@AnalyticalDashboards",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "visualizationObjects",
                                    "analyticalDashboards",
                                    "labels",
                                    "metrics",
                                    "datasets",
                                    "filterContexts",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "include=visualizationObjects,analyticalDashboards,labels,metrics,datasets,filterContexts"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["workspace-object-controller"],
                "operationId": "updateEntity@AnalyticalDashboards",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "visualizationObjects",
                                    "analyticalDashboards",
                                    "labels",
                                    "metrics",
                                    "datasets",
                                    "filterContexts",
                                    "ALL"
                                ]
                            }
                        },
                        "example": "include=visualizationObjects,analyticalDashboards,labels,metrics,datasets,filterContexts"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiAnalyticalDashboardInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["workspace-object-controller"],
                "operationId": "deleteEntity@AnalyticalDashboards",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted"
                    }
                }
            }
        },
        "/api/entities/workspaces/{workspaceId}/attributes": {
            "get": {
                "tags": ["workspace-object-controller"],
                "operationId": "getAllEntities@Attributes",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString",
                            "dataset.id": 321
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;dataset.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["datasets", "labels", "ALL"]
                            }
                        },
                        "example": "include=datasets,labels"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Zero-based page index (0..N)",
                        "schema": {
                            "type": "integer",
                            "default": "0"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of the page to be returned",
                        "schema": {
                            "type": "integer",
                            "default": "20"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiAttributeOutList"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/entities/workspaces/{workspaceId}/attributes/{objectId}": {
            "get": {
                "tags": ["workspace-object-controller"],
                "operationId": "getEntity@Attributes",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString",
                            "dataset.id": 321
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;dataset.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["datasets", "labels", "ALL"]
                            }
                        },
                        "example": "include=datasets,labels"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiAttributeOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/entities/workspaces/{workspaceId}/datasets": {
            "get": {
                "tags": ["workspace-object-controller"],
                "operationId": "getAllEntities@Datasets",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["attributes", "facts", "datasets", "ALL"]
                            }
                        },
                        "example": "include=attributes,facts,datasets"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Zero-based page index (0..N)",
                        "schema": {
                            "type": "integer",
                            "default": "0"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of the page to be returned",
                        "schema": {
                            "type": "integer",
                            "default": "20"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiDatasetOutList"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/entities/workspaces/{workspaceId}/datasets/{objectId}": {
            "get": {
                "tags": ["workspace-object-controller"],
                "operationId": "getEntity@Datasets",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["attributes", "facts", "datasets", "ALL"]
                            }
                        },
                        "example": "include=attributes,facts,datasets"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiDatasetOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/entities/workspaces/{workspaceId}/facts": {
            "get": {
                "tags": ["workspace-object-controller"],
                "operationId": "getAllEntities@Facts",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString",
                            "dataset.id": 321
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;dataset.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["datasets", "ALL"]
                            }
                        },
                        "example": "include=datasets"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Zero-based page index (0..N)",
                        "schema": {
                            "type": "integer",
                            "default": "0"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of the page to be returned",
                        "schema": {
                            "type": "integer",
                            "default": "20"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiFactOutList"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/entities/workspaces/{workspaceId}/facts/{objectId}": {
            "get": {
                "tags": ["workspace-object-controller"],
                "operationId": "getEntity@Facts",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString",
                            "dataset.id": 321
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;dataset.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["datasets", "ALL"]
                            }
                        },
                        "example": "include=datasets"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiFactOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/entities/workspaces/{workspaceId}/filterContexts": {
            "get": {
                "tags": ["workspace-object-controller"],
                "operationId": "getAllEntities@FilterContexts",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["attributes", "datasets", "labels", "ALL"]
                            }
                        },
                        "example": "include=attributes,datasets,labels"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Zero-based page index (0..N)",
                        "schema": {
                            "type": "integer",
                            "default": "0"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of the page to be returned",
                        "schema": {
                            "type": "integer",
                            "default": "20"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiFilterContextOutList"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["workspace-object-controller"],
                "operationId": "createEntity@FilterContexts",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["attributes", "datasets", "labels", "ALL"]
                            }
                        },
                        "example": "include=attributes,datasets,labels"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiFilterContextInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiFilterContextOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/entities/workspaces/{workspaceId}/filterContexts/{objectId}": {
            "get": {
                "tags": ["workspace-object-controller"],
                "operationId": "getEntity@FilterContexts",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["attributes", "datasets", "labels", "ALL"]
                            }
                        },
                        "example": "include=attributes,datasets,labels"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiFilterContextOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["workspace-object-controller"],
                "operationId": "updateEntity@FilterContexts",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["attributes", "datasets", "labels", "ALL"]
                            }
                        },
                        "example": "include=attributes,datasets,labels"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiFilterContextInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiFilterContextOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["workspace-object-controller"],
                "operationId": "deleteEntity@FilterContexts",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted"
                    }
                }
            }
        },
        "/api/entities/workspaces/{workspaceId}/labels": {
            "get": {
                "tags": ["workspace-object-controller"],
                "operationId": "getAllEntities@Labels",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString",
                            "attribute.id": 321
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;attribute.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["attributes", "ALL"]
                            }
                        },
                        "example": "include=attributes"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Zero-based page index (0..N)",
                        "schema": {
                            "type": "integer",
                            "default": "0"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of the page to be returned",
                        "schema": {
                            "type": "integer",
                            "default": "20"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiLabelOutList"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/entities/workspaces/{workspaceId}/labels/{objectId}": {
            "get": {
                "tags": ["workspace-object-controller"],
                "operationId": "getEntity@Labels",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString",
                            "attribute.id": 321
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;attribute.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["attributes", "ALL"]
                            }
                        },
                        "example": "include=attributes"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiLabelOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/entities/workspaces/{workspaceId}/metrics": {
            "get": {
                "tags": ["workspace-object-controller"],
                "operationId": "getAllEntities@Metrics",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["facts", "attributes", "labels", "metrics", "ALL"]
                            }
                        },
                        "example": "include=facts,attributes,labels,metrics"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Zero-based page index (0..N)",
                        "schema": {
                            "type": "integer",
                            "default": "0"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of the page to be returned",
                        "schema": {
                            "type": "integer",
                            "default": "20"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiMetricOutList"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["workspace-object-controller"],
                "operationId": "createEntity@Metrics",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["facts", "attributes", "labels", "metrics", "ALL"]
                            }
                        },
                        "example": "include=facts,attributes,labels,metrics"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiMetricInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiMetricOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/entities/workspaces/{workspaceId}/metrics/{objectId}": {
            "get": {
                "tags": ["workspace-object-controller"],
                "operationId": "getEntity@Metrics",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["facts", "attributes", "labels", "metrics", "ALL"]
                            }
                        },
                        "example": "include=facts,attributes,labels,metrics"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiMetricOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["workspace-object-controller"],
                "operationId": "updateEntity@Metrics",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["facts", "attributes", "labels", "metrics", "ALL"]
                            }
                        },
                        "example": "include=facts,attributes,labels,metrics"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiMetricInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiMetricOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["workspace-object-controller"],
                "operationId": "deleteEntity@Metrics",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted"
                    }
                }
            }
        },
        "/api/entities/workspaces/{workspaceId}/visualizationObjects": {
            "get": {
                "tags": ["workspace-object-controller"],
                "operationId": "getAllEntities@VisualizationObjects",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["facts", "attributes", "labels", "metrics", "datasets", "ALL"]
                            }
                        },
                        "example": "include=facts,attributes,labels,metrics,datasets"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Zero-based page index (0..N)",
                        "schema": {
                            "type": "integer",
                            "default": "0"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of the page to be returned",
                        "schema": {
                            "type": "integer",
                            "default": "20"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiVisualizationObjectOutList"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["workspace-object-controller"],
                "operationId": "createEntity@VisualizationObjects",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["facts", "attributes", "labels", "metrics", "datasets", "ALL"]
                            }
                        },
                        "example": "include=facts,attributes,labels,metrics,datasets"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiVisualizationObjectInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiVisualizationObjectOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/entities/workspaces/{workspaceId}/visualizationObjects/{objectId}": {
            "get": {
                "tags": ["workspace-object-controller"],
                "operationId": "getEntity@VisualizationObjects",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["facts", "attributes", "labels", "metrics", "datasets", "ALL"]
                            }
                        },
                        "example": "include=facts,attributes,labels,metrics,datasets"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiVisualizationObjectOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["workspace-object-controller"],
                "operationId": "updateEntity@VisualizationObjects",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["facts", "attributes", "labels", "metrics", "datasets", "ALL"]
                            }
                        },
                        "example": "include=facts,attributes,labels,metrics,datasets"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiVisualizationObjectInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiVisualizationObjectOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["workspace-object-controller"],
                "operationId": "deleteEntity@VisualizationObjects",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted"
                    }
                }
            }
        },
        "/api/entities/workspaces/{workspaceId}/workspaceDataFilterSettings": {
            "get": {
                "tags": ["workspace-object-controller"],
                "operationId": "getAllEntities@WorkspaceDataFilterSettings",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString",
                            "workspaceDataFilter.id": 321
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;workspaceDataFilter.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["workspaceDataFilters", "ALL"]
                            }
                        },
                        "example": "include=workspaceDataFilters"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Zero-based page index (0..N)",
                        "schema": {
                            "type": "integer",
                            "default": "0"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of the page to be returned",
                        "schema": {
                            "type": "integer",
                            "default": "20"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOutList"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/entities/workspaces/{workspaceId}/workspaceDataFilterSettings/{objectId}": {
            "get": {
                "tags": ["workspace-object-controller"],
                "operationId": "getEntity@WorkspaceDataFilterSettings",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString",
                            "workspaceDataFilter.id": 321
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString;workspaceDataFilter.id==321"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["workspaceDataFilters", "ALL"]
                            }
                        },
                        "example": "include=workspaceDataFilters"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/entities/workspaces/{workspaceId}/workspaceDataFilters": {
            "get": {
                "tags": ["workspace-object-controller"],
                "operationId": "getAllEntities@WorkspaceDataFilters",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["workspaceDataFilterSettings", "ALL"]
                            }
                        },
                        "example": "include=workspaceDataFilterSettings"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Zero-based page index (0..N)",
                        "schema": {
                            "type": "integer",
                            "default": "0"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The size of the page to be returned",
                        "schema": {
                            "type": "integer",
                            "default": "20"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOutList"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["workspace-object-controller"],
                "operationId": "createEntity@WorkspaceDataFilters",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["workspaceDataFilterSettings", "ALL"]
                            }
                        },
                        "example": "include=workspaceDataFilterSettings"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOutDocument"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/entities/workspaces/{workspaceId}/workspaceDataFilters/{objectId}": {
            "get": {
                "tags": ["workspace-object-controller"],
                "operationId": "getEntity@WorkspaceDataFilters",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["workspaceDataFilterSettings", "ALL"]
                            }
                        },
                        "example": "include=workspaceDataFilterSettings"
                    },
                    {
                        "name": "X-GDC-VALIDATE-RELATIONS",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["workspace-object-controller"],
                "operationId": "updateEntity@WorkspaceDataFilters",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Array of included entities. Entities are separated by commas (e.g. include=entity1,entity2). If single parameter \"ALL\" is present, all possible includes are used (include=ALL).",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": ["workspaceDataFilterSettings", "ALL"]
                            }
                        },
                        "example": "include=workspaceDataFilterSettings"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/vnd.gooddata.api+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterInDocument"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Request successfully processed",
                        "content": {
                            "application/vnd.gooddata.api+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOutDocument"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["workspace-object-controller"],
                "operationId": "deleteEntity@WorkspaceDataFilters",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "predicate",
                        "in": "query",
                        "description": "Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John&language=english,czech&address.city=London&father.id=123).",
                        "deprecated": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        },
                        "example": {
                            "title": "someString",
                            "description": "someString"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title=='Some Title';description=='desc')",
                        "schema": {
                            "type": "string"
                        },
                        "example": "filter=title==someString;description==someString"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "DataSourceTableIdentifier": {
                "required": ["dataSourceId", "id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of table.",
                        "example": "customers"
                    },
                    "dataSourceId": {
                        "type": "string",
                        "description": "Data source ID.",
                        "example": "my-postgres"
                    },
                    "type": {
                        "type": "string",
                        "description": "Data source entity type.",
                        "example": "dataSource",
                        "enum": ["dataSource"]
                    }
                },
                "description": "An id of the table from PDM mapped to this dataset. Including ID of data source.",
                "example": {
                    "id": "customers",
                    "dataSourceId": "my-postgres",
                    "type": "DATA_SOURCE"
                }
            },
            "DeclarativeAnalyticalDashboard": {
                "required": ["content", "id", "title"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Analytical dashboard ID.",
                        "example": "revenues-analysis"
                    },
                    "title": {
                        "type": "string",
                        "description": "Analytical dashboard title.",
                        "example": "Revenues analysis"
                    },
                    "description": {
                        "type": "string",
                        "description": "Analytical dashboard description.",
                        "example": "Period to period comparison of revenues in main sectors."
                    },
                    "content": {
                        "$ref": "#/components/schemas/JsonNode"
                    },
                    "tags": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "A list of tags.",
                        "example": ["Revenues"],
                        "items": {
                            "type": "string",
                            "description": "A list of tags.",
                            "example": "[\"Revenues\"]"
                        }
                    }
                }
            },
            "DeclarativeAnalyticsLayer": {
                "required": ["analyticalDashboards", "filterContexts", "metrics", "visualizationObjects"],
                "type": "object",
                "properties": {
                    "analyticalDashboards": {
                        "type": "array",
                        "description": "A list of analytical dashboards available in the model.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeAnalyticalDashboard"
                        }
                    },
                    "filterContexts": {
                        "type": "array",
                        "description": "A list of filter contexts available in the model.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeFilterContext"
                        }
                    },
                    "metrics": {
                        "type": "array",
                        "description": "A list of metrics available in the model.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeMetric"
                        }
                    },
                    "visualizationObjects": {
                        "type": "array",
                        "description": "A list of visualization objects available in the model.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeVisualizationObject"
                        }
                    }
                }
            },
            "DeclarativeAttribute": {
                "required": ["id", "labels", "title"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Attribute ID.",
                        "example": "attr.customers.customer_name"
                    },
                    "title": {
                        "type": "string",
                        "description": "Attribute title.",
                        "example": "Customer name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Attribute description.",
                        "example": "Customer name including first and last name."
                    },
                    "labels": {
                        "type": "array",
                        "description": "An array of attribute labels.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeLabel"
                        }
                    },
                    "tags": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "A list of tags.",
                        "example": ["Customers"],
                        "items": {
                            "type": "string",
                            "description": "A list of tags.",
                            "example": "[\"Customers\"]"
                        }
                    }
                },
                "description": "A dataset attribute."
            },
            "DeclarativeDataset": {
                "required": ["attributes", "facts", "grain", "id", "references", "title"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The Dataset ID. This ID is further used to refer to this instance of dataset.",
                        "example": "customers"
                    },
                    "title": {
                        "type": "string",
                        "description": "A dataset title.",
                        "example": "Customers"
                    },
                    "description": {
                        "type": "string",
                        "description": "A dataset description.",
                        "example": "The customers of ours."
                    },
                    "grain": {
                        "type": "array",
                        "description": "An array of grain identifiers.",
                        "items": {
                            "$ref": "#/components/schemas/GrainIdentifier"
                        }
                    },
                    "attributes": {
                        "type": "array",
                        "description": "An array of attributes.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeAttribute"
                        }
                    },
                    "facts": {
                        "type": "array",
                        "description": "An array of facts.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeFact"
                        }
                    },
                    "references": {
                        "type": "array",
                        "description": "An array of references.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeReference"
                        }
                    },
                    "dataSourceTableId": {
                        "$ref": "#/components/schemas/DataSourceTableIdentifier"
                    },
                    "tags": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "A list of tags.",
                        "example": ["Customers"],
                        "items": {
                            "type": "string",
                            "description": "A list of tags.",
                            "example": "[\"Customers\"]"
                        }
                    }
                },
                "description": "A dataset defined by its properties."
            },
            "DeclarativeDateDataset": {
                "required": ["granularities", "granularitiesFormatting", "id", "title"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Date dataset ID.",
                        "example": "date"
                    },
                    "title": {
                        "type": "string",
                        "description": "Date dataset title.",
                        "example": "Date"
                    },
                    "description": {
                        "type": "string",
                        "description": "Date dataset description.",
                        "example": "A customer order date"
                    },
                    "granularitiesFormatting": {
                        "$ref": "#/components/schemas/GranularitiesFormatting"
                    },
                    "granularities": {
                        "type": "array",
                        "description": "An array of date granularities. All listed granularities will be available for date dataset.",
                        "items": {
                            "type": "string",
                            "enum": [
                                "MINUTE",
                                "HOUR",
                                "DAY",
                                "WEEK",
                                "MONTH",
                                "QUARTER",
                                "YEAR",
                                "MINUTE_OF_HOUR",
                                "HOUR_OF_DAY",
                                "DAY_OF_WEEK",
                                "DAY_OF_MONTH",
                                "DAY_OF_YEAR",
                                "WEEK_OF_YEAR",
                                "MONTH_OF_YEAR",
                                "QUARTER_OF_YEAR"
                            ]
                        }
                    },
                    "tags": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "A list of tags.",
                        "example": ["Customer dates"],
                        "items": {
                            "type": "string",
                            "description": "A list of tags.",
                            "example": "[\"Customer dates\"]"
                        }
                    }
                },
                "description": "A date dataset."
            },
            "DeclarativeFact": {
                "required": ["id", "sourceColumn", "title"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Fact ID.",
                        "example": "fact.customer_order_count"
                    },
                    "title": {
                        "type": "string",
                        "description": "Fact title.",
                        "example": "Customer order count"
                    },
                    "description": {
                        "type": "string",
                        "description": "Fact description.",
                        "example": "A number of orders created by the customer - including all orders, even the non-delivered ones."
                    },
                    "sourceColumn": {
                        "type": "string",
                        "description": "A name of the source column in the table.",
                        "example": "customer_order_count"
                    },
                    "tags": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "A list of tags.",
                        "example": ["Customers"],
                        "items": {
                            "type": "string",
                            "description": "A list of tags.",
                            "example": "[\"Customers\"]"
                        }
                    }
                },
                "description": "A dataset fact."
            },
            "DeclarativeFilterContext": {
                "required": ["content", "id", "title"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Filter Context ID.",
                        "example": "filter-sales"
                    },
                    "title": {
                        "type": "string",
                        "description": "Filter Context title.",
                        "example": "Filter Context for Sales team"
                    },
                    "description": {
                        "type": "string",
                        "description": "Filter Context description.",
                        "example": "Filter Context for Sales team."
                    },
                    "content": {
                        "$ref": "#/components/schemas/JsonNode"
                    },
                    "tags": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "A list of tags.",
                        "example": ["Revenues"],
                        "items": {
                            "type": "string",
                            "description": "A list of tags.",
                            "example": "[\"Revenues\"]"
                        }
                    }
                }
            },
            "DeclarativeLabel": {
                "required": ["id", "primary", "sourceColumn", "title"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Label ID.",
                        "example": "label.customer_name"
                    },
                    "title": {
                        "type": "string",
                        "description": "Label title.",
                        "example": "Customer name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Label description.",
                        "example": "Customer name"
                    },
                    "primary": {
                        "type": "boolean",
                        "description": "A flag indicating whether the label should be treated as a primary one.",
                        "example": false
                    },
                    "sourceColumn": {
                        "type": "string",
                        "description": "A name of the source column in the table.",
                        "example": "customer_name"
                    },
                    "tags": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "A list of tags.",
                        "example": ["Customers"],
                        "items": {
                            "type": "string",
                            "description": "A list of tags.",
                            "example": "[\"Customers\"]"
                        }
                    }
                },
                "description": "A attribute label."
            },
            "DeclarativeLdm": {
                "required": ["datasets", "dateInstances"],
                "type": "object",
                "properties": {
                    "datasets": {
                        "type": "array",
                        "description": "An array containing datasets.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeDataset"
                        }
                    },
                    "dateInstances": {
                        "type": "array",
                        "description": "An array containing date-related datasets.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeDateDataset"
                        }
                    }
                },
                "description": "A logical data model (LDM) representation."
            },
            "DeclarativeMetric": {
                "required": ["content", "id", "title"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Metric ID.",
                        "example": "total-sales"
                    },
                    "title": {
                        "type": "string",
                        "description": "Metric title.",
                        "example": "Total sales"
                    },
                    "description": {
                        "type": "string",
                        "description": "Metric description.",
                        "example": "Sales for all the data available."
                    },
                    "content": {
                        "$ref": "#/components/schemas/JsonNode"
                    },
                    "tags": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "A list of tags.",
                        "example": ["Revenues"],
                        "items": {
                            "type": "string",
                            "description": "A list of tags.",
                            "example": "[\"Revenues\"]"
                        }
                    }
                }
            },
            "DeclarativeReference": {
                "required": ["identifier", "multivalue", "sourceColumns"],
                "type": "object",
                "properties": {
                    "identifier": {
                        "$ref": "#/components/schemas/ReferenceIdentifier"
                    },
                    "multivalue": {
                        "type": "boolean",
                        "description": "The multi-value flag enables many-to-many cardinality for references.",
                        "example": false
                    },
                    "sourceColumns": {
                        "type": "array",
                        "description": "An array of source column names for a given reference.",
                        "example": ["customer_id"],
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "A dataset reference."
            },
            "DeclarativeVisualizationObject": {
                "required": ["content", "id", "title"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Visualization object ID.",
                        "example": "visualization-1"
                    },
                    "title": {
                        "type": "string",
                        "description": "Visualization object title.",
                        "example": "Count of goods"
                    },
                    "description": {
                        "type": "string",
                        "description": "Visualization object description.",
                        "example": "Simple number for total goods in current production."
                    },
                    "content": {
                        "$ref": "#/components/schemas/JsonNode"
                    },
                    "tags": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "A list of tags.",
                        "example": ["Revenues"],
                        "items": {
                            "type": "string",
                            "description": "A list of tags.",
                            "example": "[\"Revenues\"]"
                        }
                    }
                }
            },
            "DeclarativeWorkspace": {
                "required": ["id", "model", "name"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "model": {
                        "$ref": "#/components/schemas/DeclarativeWorkspaceModel"
                    },
                    "parent": {
                        "$ref": "#/components/schemas/WorkspaceIdentifier"
                    }
                }
            },
            "DeclarativeWorkspaceDataFilter": {
                "required": ["columnName", "dataSourceId", "id", "title", "workspaceDataFilterSettings"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Workspace Data Filters ID. This ID is further used to refer to this instance.",
                        "example": "country_id"
                    },
                    "title": {
                        "type": "string",
                        "description": "Workspace Data Filters title.",
                        "example": "Country ID"
                    },
                    "description": {
                        "type": "string",
                        "description": "Workspace Data Filters description.",
                        "example": "ID of country"
                    },
                    "columnName": {
                        "type": "string",
                        "description": "Workspace Data Filters column name. Data are filtered using this physical column.",
                        "example": "country_id"
                    },
                    "dataSourceId": {
                        "type": "string",
                        "description": "Data source ID. Workspace Data Filters must always be connected to single data source.",
                        "example": "sampleDataSource"
                    },
                    "workspaceDataFilterSettings": {
                        "type": "array",
                        "description": "Filter settings specifying values of filters valid for the workspace.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeWorkspaceDataFilterSetting"
                        }
                    },
                    "workspace": {
                        "$ref": "#/components/schemas/WorkspaceIdentifier"
                    }
                },
                "description": "Workspace Data Filters serving the filtering of what data users can see in workspaces."
            },
            "DeclarativeWorkspaceDataFilterSetting": {
                "required": ["filterValues", "id", "title", "workspace"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Workspace Data Filters ID. This ID is further used to refer to this instance.",
                        "example": "country_id_setting"
                    },
                    "title": {
                        "type": "string",
                        "description": "Workspace Data Filters setting title.",
                        "example": "Country ID setting"
                    },
                    "description": {
                        "type": "string",
                        "description": "Workspace Data Filters setting description.",
                        "example": "ID of country setting"
                    },
                    "filterValues": {
                        "type": "array",
                        "description": "Only those rows are returned, where columnName from filter matches those values.",
                        "example": ["US"],
                        "items": {
                            "type": "string",
                            "description": "Only those rows are returned, where columnName from filter matches those values.",
                            "example": "[\"US\"]"
                        }
                    },
                    "workspace": {
                        "$ref": "#/components/schemas/WorkspaceIdentifier"
                    }
                },
                "description": "Workspace Data Filters serving the filtering of what data users can see in workspaces."
            },
            "DeclarativeWorkspaceModel": {
                "required": ["analytics", "ldm"],
                "type": "object",
                "properties": {
                    "ldm": {
                        "$ref": "#/components/schemas/DeclarativeLdm"
                    },
                    "analytics": {
                        "$ref": "#/components/schemas/DeclarativeAnalyticsLayer"
                    }
                }
            },
            "DeclarativeWorkspaces": {
                "required": ["workspaceDataFilters", "workspaces"],
                "type": "object",
                "properties": {
                    "workspaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeWorkspace"
                        }
                    },
                    "workspaceDataFilters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeWorkspaceDataFilter"
                        }
                    }
                }
            },
            "GrainIdentifier": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Grain ID.",
                        "example": "attr.customers.customer_name"
                    },
                    "type": {
                        "type": "string",
                        "description": "A type of the grain.",
                        "example": "ATTRIBUTE",
                        "enum": ["attribute", "dataset"]
                    }
                },
                "description": "A grain identifier."
            },
            "GranularitiesFormatting": {
                "required": ["titleBase", "titlePattern"],
                "type": "object",
                "properties": {
                    "titleBase": {
                        "type": "string",
                        "description": "Title base is used as a token in title pattern. If left empty, it is replaced by date dataset title."
                    },
                    "titlePattern": {
                        "type": "string",
                        "description": "This pattern is used to generate the title of attributes and labels that result from the granularities.\nThere are two tokens available: \n* `%titleBase` - represents shared part by all titles, or title of Date Dataset if left empty\n* `%granularityTitle` - represents `DateGranularity` built-in title",
                        "example": "%titleBase - %granularityTitle"
                    }
                },
                "description": "A date dataset granularities title formatting rules."
            },
            "JsonNode": {
                "type": "object",
                "description": "A server agnostic definition of the visualization object in JSON format.",
                "example": {}
            },
            "ReferenceIdentifier": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Reference ID.",
                        "example": "customers"
                    },
                    "type": {
                        "type": "string",
                        "description": "A type of the reference.",
                        "example": "DATASET",
                        "enum": ["dataset"]
                    }
                },
                "description": "A reference identifier."
            },
            "WorkspaceIdentifier": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["workspace"]
                    }
                },
                "description": "Store filter into this workspace. Empty if it is part of layout of workspaces.",
                "example": "{ id: demo, type: workspace }"
            },
            "DeclarativeModel": {
                "required": ["ldm"],
                "type": "object",
                "properties": {
                    "ldm": {
                        "$ref": "#/components/schemas/DeclarativeLdm"
                    }
                },
                "description": "A data model structured as a set of its attributes."
            },
            "DeclarativeAnalytics": {
                "required": ["analytics"],
                "type": "object",
                "properties": {
                    "analytics": {
                        "$ref": "#/components/schemas/DeclarativeAnalyticsLayer"
                    }
                },
                "description": "Entities describing users' view on data."
            },
            "DeclarativeWorkspaceDataFilters": {
                "required": ["workspaceDataFilters"],
                "type": "object",
                "properties": {
                    "workspaceDataFilters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeWorkspaceDataFilter"
                        }
                    }
                }
            },
            "DeclarativeColumn": {
                "required": ["dataType", "name"],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Column name",
                        "example": "customer_id"
                    },
                    "dataType": {
                        "type": "string",
                        "description": "Column type",
                        "example": "INT",
                        "enum": ["INT", "STRING", "DATE", "NUMERIC", "TIMESTAMP", "BOOLEAN"]
                    },
                    "isPrimaryKey": {
                        "type": "boolean",
                        "description": "Is column part of primary key?"
                    },
                    "referencedTableId": {
                        "type": "string",
                        "description": "Referenced table (Foreign key)",
                        "example": "customers"
                    },
                    "referencedTableColumn": {
                        "type": "string",
                        "description": "Referenced table (Foreign key)",
                        "example": "customer_id"
                    }
                },
                "description": "A table column."
            },
            "DeclarativeDataSource": {
                "required": ["id", "name", "pdm", "schema", "type", "url"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Data source ID.",
                        "example": "pg_local_docker-demo"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the data source.",
                        "example": "postgres demo"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of database.",
                        "example": "POSTGRESQL",
                        "enum": [
                            "POSTGRESQL",
                            "REDSHIFT",
                            "VERTICA",
                            "SNOWFLAKE",
                            "ADS",
                            "BIGQUERY",
                            "MSSQL",
                            "PRESTO"
                        ]
                    },
                    "url": {
                        "type": "string",
                        "description": "An connection string relevant to type of database.",
                        "example": "jdbc:postgresql://postgres:5432/gooddata"
                    },
                    "schema": {
                        "type": "string",
                        "description": "A scheme/database with the data.",
                        "example": "demo"
                    },
                    "username": {
                        "type": "string",
                        "description": "User with permission connect the data source/database.",
                        "example": "demo"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for the data-source user, property is never returned back.",
                        "example": "*****"
                    },
                    "pdm": {
                        "$ref": "#/components/schemas/DeclarativeTables"
                    }
                },
                "description": "A data source and its properties."
            },
            "DeclarativeDataSources": {
                "required": ["dataSources"],
                "type": "object",
                "properties": {
                    "dataSources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeDataSource"
                        }
                    }
                },
                "description": "A data source and its properties."
            },
            "DeclarativeTable": {
                "required": ["columns", "id", "path"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Table id.",
                        "example": "customers"
                    },
                    "path": {
                        "type": "array",
                        "description": "Path to table.",
                        "example": ["table_schema", "table_name"],
                        "items": {
                            "type": "string",
                            "example": "table_name"
                        }
                    },
                    "columns": {
                        "type": "array",
                        "description": "An array of physical columns",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeColumn"
                        }
                    }
                },
                "description": "A database table."
            },
            "DeclarativeTables": {
                "required": ["tables"],
                "type": "object",
                "properties": {
                    "tables": {
                        "type": "array",
                        "description": "An array of physical database tables.",
                        "items": {
                            "$ref": "#/components/schemas/DeclarativeTable"
                        }
                    }
                },
                "description": "A physical data model (PDM) tables."
            },
            "DeclarativePdm": {
                "required": ["pdm"],
                "type": "object",
                "properties": {
                    "pdm": {
                        "$ref": "#/components/schemas/DeclarativeTables"
                    }
                },
                "description": "A physical data model (PDM) representation for single data source."
            },
            "GenerateLdmRequest": {
                "required": ["separator"],
                "type": "object",
                "properties": {
                    "separator": {
                        "type": "string",
                        "description": "A separator between prefixes and the names. Default is \"__\".",
                        "example": "__"
                    },
                    "tablePrefix": {
                        "type": "string",
                        "description": "Tables starting with this prefix will be included. The prefix is then followed by the value of `separator` parameter. Given the table prefix is `out_table` and separator is `__`, the table with name like `out_table__customers` will be scanned.",
                        "example": "out_table"
                    },
                    "viewPrefix": {
                        "type": "string",
                        "description": "Views starting with this prefix will be included. The prefix is then followed by the value of `separator` parameter. Given the view prefix is `out_view` and separator is `__`, the table with name like `out_view__us_customers` will be scanned.",
                        "example": "out_view"
                    },
                    "primaryLabelPrefix": {
                        "type": "string",
                        "description": "Columns starting with this prefix will be considered as primary labels. The prefix is then followed by the value of `separator` parameter. Given the primary label prefix is `pl` and separator is `__`, the columns with name like `pl__country_id` will be considered as primary labels.",
                        "example": "pl"
                    },
                    "secondaryLabelPrefix": {
                        "type": "string",
                        "description": "Columns starting with this prefix will be considered as secondary labels. The prefix is then followed by the value of `separator` parameter. Given the secondary label prefix is `sl` and separator is `__`, the columns with name like `sl__country_id_country_name` will be considered as secondary labels.",
                        "example": "sl"
                    },
                    "factPrefix": {
                        "type": "string",
                        "description": "Columns starting with this prefix will be considered as facts. The prefix is then followed by the value of `separator` parameter. Given the fact prefix is `f` and separator is `__`, the columns with name like `f__sold` will be considered as facts.",
                        "example": "f"
                    },
                    "dateGranularities": {
                        "type": "string",
                        "description": "Option to control date granularities for date datasets. Empty value enables common date granularities (DAY, WEEK, MONTH, QUARTER, YEAR). Default value is `all` which enables all available date granularities, including time granularities (like hours, minutes).",
                        "example": "all"
                    },
                    "grainPrefix": {
                        "type": "string",
                        "description": "Columns starting with this prefix will be considered as grains. The prefix is then followed by the value of `separator` parameter. Given the grain prefix is `g` and separator is `__`, the columns with name like `g__name` will be considered as grains.",
                        "example": "g"
                    },
                    "referencePrefix": {
                        "type": "string",
                        "description": "Columns starting with this prefix will be considered as references. The prefix is then followed by the value of `separator` parameter. Given the reference prefix is `r` and separator is `__`, the columns with name like `r__customer_name` will be considered as references.",
                        "example": "r"
                    },
                    "grainReferencePrefix": {
                        "type": "string",
                        "description": "Columns starting with this prefix will be considered as grain references. The prefix is then followed by the value of `separator` parameter. Given the reference prefix is `gr` and separator is `__`, the columns with name like `gr__customer_name` will be considered as grain references.",
                        "example": "gr"
                    },
                    "denormPrefix": {
                        "type": "string",
                        "description": "Columns starting with this prefix will be considered as denormalization references. The prefix is then followed by the value of `separator` parameter. Given the denormalization reference prefix is `dr` and separator is `__`, the columns with name like `dr__customer_name` will be considered as denormalization references.",
                        "example": "dr"
                    },
                    "wdfPrefix": {
                        "type": "string",
                        "description": "Column serving as workspace data filter. No labels are auto generated for such columns.",
                        "example": "wdf"
                    }
                },
                "description": "A request containing all information needed for generation of logical model."
            },
            "ObjectLinks": {
                "required": ["self"],
                "type": "object",
                "properties": {
                    "self": {
                        "type": "string",
                        "description": "A string containing the link's URL.",
                        "format": "uri"
                    }
                }
            },
            "ObjectLinksContainer": {
                "type": "object",
                "properties": {
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    }
                }
            },
            "ListLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "next": {
                                "type": "string",
                                "description": "A string containing the link's URL for the next page of data.",
                                "format": "uri"
                            }
                        }
                    }
                ]
            },
            "JsonApiOrganizationOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiOrganizationOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/JsonApiUserOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiUserGroupOutWithLinks"
                                }
                            ]
                        }
                    }
                }
            },
            "JsonApiOrganizationOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "organization",
                        "enum": ["organization"]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "hostname": {
                                "type": "string"
                            },
                            "oauthIssuerLocation": {
                                "type": "string"
                            },
                            "oauthClientId": {
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "bootstrapUser": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserToOneLinkage"
                                    }
                                }
                            },
                            "bootstrapUserGroup": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserGroupToOneLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of organization entity."
            },
            "JsonApiUserGroupLinkage": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["userGroup"]
                    }
                },
                "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members."
            },
            "JsonApiUserGroupToOneLinkage": {
                "description": "References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "nullable": true,
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiUserGroupLinkage"
                    }
                ]
            },
            "JsonApiUserLinkage": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["user"]
                    }
                },
                "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members."
            },
            "JsonApiUserToOneLinkage": {
                "description": "References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "nullable": true,
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiUserLinkage"
                    }
                ]
            },
            "JsonApiDataSourceTableOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiDataSourceTableOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    }
                }
            },
            "JsonApiDataSourceTableOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "dataSourceTable",
                        "enum": ["dataSourceTable"]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "path": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "columns": {
                                "type": "array",
                                "items": {
                                    "required": ["dataType", "name"],
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string"
                                        },
                                        "dataType": {
                                            "type": "string",
                                            "enum": [
                                                "INT",
                                                "STRING",
                                                "DATE",
                                                "NUMERIC",
                                                "TIMESTAMP",
                                                "BOOLEAN"
                                            ]
                                        },
                                        "isPrimaryKey": {
                                            "type": "boolean"
                                        },
                                        "referencedTableId": {
                                            "type": "string"
                                        },
                                        "referencedTableColumn": {
                                            "type": "string"
                                        }
                                    },
                                    "description": "Table columns in data source"
                                }
                            }
                        }
                    }
                },
                "description": "Tables in data source"
            },
            "JsonApiACLInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiACLIn"
                    }
                }
            },
            "JsonApiACLIn": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "acl",
                        "enum": ["acl"]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "access": {
                                "type": "string",
                                "enum": ["FULL_ACCESS"]
                            },
                            "priority": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "control": {
                                "type": "string",
                                "enum": ["ALLOW", "DENY"]
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "subjects": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserToManyLinkage"
                                    }
                                }
                            },
                            "objects": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserGroupToManyLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of acl entity."
            },
            "JsonApiUserGroupToManyLinkage": {
                "type": "array",
                "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "items": {
                    "$ref": "#/components/schemas/JsonApiUserGroupLinkage"
                }
            },
            "JsonApiUserToManyLinkage": {
                "type": "array",
                "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "items": {
                    "$ref": "#/components/schemas/JsonApiUserLinkage"
                }
            },
            "JsonApiACLOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiACLOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/JsonApiUserOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiUserGroupOutWithLinks"
                                }
                            ]
                        }
                    }
                }
            },
            "JsonApiACLOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "acl",
                        "enum": ["acl"]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "access": {
                                "type": "string",
                                "enum": ["FULL_ACCESS"]
                            },
                            "priority": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "control": {
                                "type": "string",
                                "enum": ["ALLOW", "DENY"]
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "subjects": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserToManyLinkage"
                                    }
                                }
                            },
                            "objects": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserGroupToManyLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of acl entity."
            },
            "JsonApiCookieSecurityPropertiesInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiCookieSecurityPropertiesIn"
                    }
                }
            },
            "JsonApiCookieSecurityPropertiesIn": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "cookieSecurityProperties",
                        "enum": ["cookieSecurityProperties"]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "lastRotation": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "rotationInterval": {
                                "type": "object",
                                "properties": {
                                    "seconds": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "units": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "duration": {
                                                    "type": "object",
                                                    "properties": {
                                                        "seconds": {
                                                            "type": "integer",
                                                            "format": "int64"
                                                        },
                                                        "zero": {
                                                            "type": "boolean"
                                                        },
                                                        "negative": {
                                                            "type": "boolean"
                                                        },
                                                        "nano": {
                                                            "type": "integer",
                                                            "format": "int32"
                                                        }
                                                    }
                                                },
                                                "durationEstimated": {
                                                    "type": "boolean"
                                                },
                                                "dateBased": {
                                                    "type": "boolean"
                                                },
                                                "timeBased": {
                                                    "type": "boolean"
                                                }
                                            }
                                        }
                                    },
                                    "zero": {
                                        "type": "boolean"
                                    },
                                    "negative": {
                                        "type": "boolean"
                                    },
                                    "nano": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of cookieSecurityProperties entity."
            },
            "JsonApiCookieSecurityPropertiesOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiCookieSecurityPropertiesOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    }
                }
            },
            "JsonApiCookieSecurityPropertiesOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "cookieSecurityProperties",
                        "enum": ["cookieSecurityProperties"]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "lastRotation": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "rotationInterval": {
                                "type": "object",
                                "properties": {
                                    "seconds": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "units": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "duration": {
                                                    "type": "object",
                                                    "properties": {
                                                        "seconds": {
                                                            "type": "integer",
                                                            "format": "int64"
                                                        },
                                                        "zero": {
                                                            "type": "boolean"
                                                        },
                                                        "negative": {
                                                            "type": "boolean"
                                                        },
                                                        "nano": {
                                                            "type": "integer",
                                                            "format": "int32"
                                                        }
                                                    }
                                                },
                                                "durationEstimated": {
                                                    "type": "boolean"
                                                },
                                                "dateBased": {
                                                    "type": "boolean"
                                                },
                                                "timeBased": {
                                                    "type": "boolean"
                                                }
                                            }
                                        }
                                    },
                                    "zero": {
                                        "type": "boolean"
                                    },
                                    "negative": {
                                        "type": "boolean"
                                    },
                                    "nano": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of cookieSecurityProperties entity."
            },
            "JsonApiDataSourceInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiDataSourceIn"
                    }
                }
            },
            "JsonApiDataSourceIn": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "dataSource",
                        "enum": ["dataSource"]
                    },
                    "attributes": {
                        "required": ["name", "schema", "type", "url"],
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "type": {
                                "type": "string",
                                "enum": [
                                    "POSTGRESQL",
                                    "REDSHIFT",
                                    "VERTICA",
                                    "SNOWFLAKE",
                                    "ADS",
                                    "BIGQUERY",
                                    "MSSQL",
                                    "PRESTO"
                                ]
                            },
                            "url": {
                                "type": "string"
                            },
                            "schema": {
                                "type": "string"
                            },
                            "username": {
                                "type": "string"
                            },
                            "password": {
                                "type": "string"
                            }
                        }
                    }
                },
                "description": "JSON:API representation of dataSource entity."
            },
            "JsonApiDataSourceOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiDataSourceOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    }
                }
            },
            "JsonApiDataSourceOut": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "dataSource",
                        "enum": ["dataSource"]
                    },
                    "attributes": {
                        "required": ["name", "schema", "type", "url"],
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "type": {
                                "type": "string",
                                "enum": [
                                    "POSTGRESQL",
                                    "REDSHIFT",
                                    "VERTICA",
                                    "SNOWFLAKE",
                                    "ADS",
                                    "BIGQUERY",
                                    "MSSQL",
                                    "PRESTO"
                                ]
                            },
                            "url": {
                                "type": "string"
                            },
                            "schema": {
                                "type": "string"
                            },
                            "username": {
                                "type": "string"
                            }
                        }
                    }
                },
                "description": "JSON:API representation of dataSource entity."
            },
            "JsonApiUserGroupInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiUserGroupIn"
                    }
                }
            },
            "JsonApiUserGroupIn": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "userGroup",
                        "enum": ["userGroup"]
                    },
                    "attributes": {
                        "type": "object"
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "parent": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserGroupToOneLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of userGroup entity."
            },
            "JsonApiUserGroupOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiUserGroupOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/JsonApiUserGroupOutWithLinks"
                                }
                            ]
                        }
                    }
                }
            },
            "JsonApiUserGroupOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "userGroup",
                        "enum": ["userGroup"]
                    },
                    "attributes": {
                        "type": "object"
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "parent": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserGroupToOneLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of userGroup entity."
            },
            "JsonApiUserInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiUserIn"
                    }
                }
            },
            "JsonApiUserIn": {
                "required": ["id", "relationships", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "user",
                        "enum": ["user"]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "authenticationId": {
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "required": ["userGroup"],
                        "type": "object",
                        "properties": {
                            "userGroup": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserGroupToOneLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of user entity."
            },
            "JsonApiUserOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiUserOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/JsonApiUserGroupOutWithLinks"
                                }
                            ]
                        }
                    }
                }
            },
            "JsonApiUserOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "user",
                        "enum": ["user"]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "authenticationId": {
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "userGroup": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiUserGroupToOneLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of user entity."
            },
            "JsonApiWorkspaceInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiWorkspaceIn"
                    }
                }
            },
            "JsonApiWorkspaceIn": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "workspace",
                        "enum": ["workspace"]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "parent": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiWorkspaceToOneLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of workspace entity."
            },
            "JsonApiWorkspaceLinkage": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["workspace"]
                    }
                },
                "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members."
            },
            "JsonApiWorkspaceToOneLinkage": {
                "description": "References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "nullable": true,
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiWorkspaceLinkage"
                    }
                ]
            },
            "JsonApiWorkspaceOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiWorkspaceOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceOutWithLinks"
                                }
                            ]
                        }
                    }
                }
            },
            "JsonApiWorkspaceOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "workspace",
                        "enum": ["workspace"]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "parent": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiWorkspaceToOneLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of workspace entity."
            },
            "JsonApiApiTokenOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiApiTokenOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiApiTokenOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiApiTokenOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiApiTokenOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "apiToken",
                        "enum": ["apiToken"]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "bearerToken": {
                                "type": "string"
                            }
                        }
                    }
                },
                "description": "JSON:API representation of apiToken entity."
            },
            "JsonApiAnalyticalDashboardInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiAnalyticalDashboardIn"
                    }
                }
            },
            "JsonApiAnalyticalDashboardIn": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "analyticalDashboard",
                        "enum": ["analyticalDashboard"]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content.",
                                "example": {
                                    "identifier": {
                                        "id": "label.leaf",
                                        "type": "label"
                                    },
                                    "someBoolProp": false
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of analyticalDashboard entity."
            },
            "JsonApiAnalyticalDashboardOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/JsonApiVisualizationObjectOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiLabelOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiMetricOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiFilterContextOutWithLinks"
                                }
                            ]
                        }
                    }
                }
            },
            "JsonApiAnalyticalDashboardOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "analyticalDashboard",
                        "enum": ["analyticalDashboard"]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content.",
                                "example": {
                                    "identifier": {
                                        "id": "label.leaf",
                                        "type": "label"
                                    },
                                    "someBoolProp": false
                                }
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "visualizationObjects": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiVisualizationObjectToManyLinkage"
                                    }
                                }
                            },
                            "analyticalDashboards": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiAnalyticalDashboardToManyLinkage"
                                    }
                                }
                            },
                            "labels": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiLabelToManyLinkage"
                                    }
                                }
                            },
                            "metrics": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiMetricToManyLinkage"
                                    }
                                }
                            },
                            "datasets": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiDatasetToManyLinkage"
                                    }
                                }
                            },
                            "filterContexts": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiFilterContextToManyLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of analyticalDashboard entity."
            },
            "JsonApiAnalyticalDashboardLinkage": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["analyticalDashboard"]
                    }
                },
                "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members."
            },
            "JsonApiAnalyticalDashboardToManyLinkage": {
                "type": "array",
                "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "items": {
                    "$ref": "#/components/schemas/JsonApiAnalyticalDashboardLinkage"
                }
            },
            "JsonApiDatasetLinkage": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["dataset"]
                    }
                },
                "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members."
            },
            "JsonApiDatasetToManyLinkage": {
                "type": "array",
                "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "items": {
                    "$ref": "#/components/schemas/JsonApiDatasetLinkage"
                }
            },
            "JsonApiFilterContextLinkage": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["filterContext"]
                    }
                },
                "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members."
            },
            "JsonApiFilterContextToManyLinkage": {
                "type": "array",
                "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "items": {
                    "$ref": "#/components/schemas/JsonApiFilterContextLinkage"
                }
            },
            "JsonApiLabelLinkage": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["label"]
                    }
                },
                "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members."
            },
            "JsonApiLabelToManyLinkage": {
                "type": "array",
                "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "items": {
                    "$ref": "#/components/schemas/JsonApiLabelLinkage"
                }
            },
            "JsonApiMetricLinkage": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["metric"]
                    }
                },
                "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members."
            },
            "JsonApiMetricToManyLinkage": {
                "type": "array",
                "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "items": {
                    "$ref": "#/components/schemas/JsonApiMetricLinkage"
                }
            },
            "JsonApiVisualizationObjectLinkage": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["visualizationObject"]
                    }
                },
                "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members."
            },
            "JsonApiVisualizationObjectToManyLinkage": {
                "type": "array",
                "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "items": {
                    "$ref": "#/components/schemas/JsonApiVisualizationObjectLinkage"
                }
            },
            "JsonApiFilterContextInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiFilterContextIn"
                    }
                }
            },
            "JsonApiFilterContextIn": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "filterContext",
                        "enum": ["filterContext"]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content.",
                                "example": {
                                    "identifier": {
                                        "id": "label.leaf",
                                        "type": "label"
                                    },
                                    "someBoolProp": false
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of filterContext entity."
            },
            "JsonApiFilterContextOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiFilterContextOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/JsonApiAttributeOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiLabelOutWithLinks"
                                }
                            ]
                        }
                    }
                }
            },
            "JsonApiFilterContextOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "filterContext",
                        "enum": ["filterContext"]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content.",
                                "example": {
                                    "identifier": {
                                        "id": "label.leaf",
                                        "type": "label"
                                    },
                                    "someBoolProp": false
                                }
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "attributes": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiAttributeToManyLinkage"
                                    }
                                }
                            },
                            "datasets": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiDatasetToManyLinkage"
                                    }
                                }
                            },
                            "labels": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiLabelToManyLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of filterContext entity."
            },
            "JsonApiAttributeLinkage": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["attribute"]
                    }
                },
                "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members."
            },
            "JsonApiAttributeToManyLinkage": {
                "type": "array",
                "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "items": {
                    "$ref": "#/components/schemas/JsonApiAttributeLinkage"
                }
            },
            "JsonApiMetricInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiMetricIn"
                    }
                }
            },
            "JsonApiMetricIn": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "metric",
                        "enum": ["metric"]
                    },
                    "attributes": {
                        "required": ["content"],
                        "type": "object",
                        "properties": {
                            "title": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "content": {
                                "required": ["maql"],
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "type": "string"
                                    },
                                    "maql": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of metric entity."
            },
            "JsonApiMetricOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiMetricOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/JsonApiFactOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiAttributeOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiLabelOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiMetricOutWithLinks"
                                }
                            ]
                        }
                    }
                }
            },
            "JsonApiMetricOut": {
                "required": ["attributes", "id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "metric",
                        "enum": ["metric"]
                    },
                    "attributes": {
                        "required": ["content"],
                        "type": "object",
                        "properties": {
                            "title": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "content": {
                                "required": ["maql"],
                                "type": "object",
                                "properties": {
                                    "format": {
                                        "type": "string"
                                    },
                                    "maql": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "facts": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiFactToManyLinkage"
                                    }
                                }
                            },
                            "attributes": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiAttributeToManyLinkage"
                                    }
                                }
                            },
                            "labels": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiLabelToManyLinkage"
                                    }
                                }
                            },
                            "metrics": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiMetricToManyLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of metric entity."
            },
            "JsonApiFactLinkage": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["fact"]
                    }
                },
                "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members."
            },
            "JsonApiFactToManyLinkage": {
                "type": "array",
                "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "items": {
                    "$ref": "#/components/schemas/JsonApiFactLinkage"
                }
            },
            "JsonApiVisualizationObjectInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiVisualizationObjectIn"
                    }
                }
            },
            "JsonApiVisualizationObjectIn": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "visualizationObject",
                        "enum": ["visualizationObject"]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content.",
                                "example": {
                                    "identifier": {
                                        "id": "label.leaf",
                                        "type": "label"
                                    },
                                    "someBoolProp": false
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of visualizationObject entity."
            },
            "JsonApiVisualizationObjectOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiVisualizationObjectOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/JsonApiFactOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiAttributeOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiLabelOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiMetricOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
                                }
                            ]
                        }
                    }
                }
            },
            "JsonApiVisualizationObjectOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "visualizationObject",
                        "enum": ["visualizationObject"]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            },
                            "content": {
                                "type": "object",
                                "description": "Free-form JSON content.",
                                "example": {
                                    "identifier": {
                                        "id": "label.leaf",
                                        "type": "label"
                                    },
                                    "someBoolProp": false
                                }
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "facts": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiFactToManyLinkage"
                                    }
                                }
                            },
                            "attributes": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiAttributeToManyLinkage"
                                    }
                                }
                            },
                            "labels": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiLabelToManyLinkage"
                                    }
                                }
                            },
                            "metrics": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiMetricToManyLinkage"
                                    }
                                }
                            },
                            "datasets": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiDatasetToManyLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of visualizationObject entity."
            },
            "JsonApiWorkspaceDataFilterInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterIn"
                    }
                }
            },
            "JsonApiWorkspaceDataFilterIn": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "workspaceDataFilter",
                        "enum": ["workspaceDataFilter"]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            },
                            "columnName": {
                                "type": "string"
                            },
                            "dataSourceId": {
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "filterSettings": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingToManyLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of workspaceDataFilter entity."
            },
            "JsonApiWorkspaceDataFilterSettingLinkage": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["workspaceDataFilterSetting"]
                    }
                },
                "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members."
            },
            "JsonApiWorkspaceDataFilterSettingToManyLinkage": {
                "type": "array",
                "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "items": {
                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingLinkage"
                }
            },
            "JsonApiWorkspaceDataFilterOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOutWithLinks"
                                }
                            ]
                        }
                    }
                }
            },
            "JsonApiWorkspaceDataFilterOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "workspaceDataFilter",
                        "enum": ["workspaceDataFilter"]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            },
                            "columnName": {
                                "type": "string"
                            },
                            "dataSourceId": {
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "filterSettings": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingToManyLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of workspaceDataFilter entity."
            },
            "JsonApiApiTokenInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiApiTokenIn"
                    }
                }
            },
            "JsonApiApiTokenIn": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "apiToken",
                        "enum": ["apiToken"]
                    },
                    "attributes": {
                        "type": "object"
                    }
                },
                "description": "JSON:API representation of apiToken entity."
            },
            "JsonApiApiTokenOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiApiTokenOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    }
                }
            },
            "JsonApiAnalyticalDashboardOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiAnalyticalDashboardOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/JsonApiVisualizationObjectOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiLabelOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiMetricOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiFilterContextOutWithLinks"
                                }
                            ]
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiAttributeOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiAttributeOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiAttributeOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiAttributeOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiLabelOutWithLinks"
                                }
                            ]
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiAttributeOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "attribute",
                        "enum": ["attribute"]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "granularity": {
                                "type": "string",
                                "enum": [
                                    "MINUTE",
                                    "HOUR",
                                    "DAY",
                                    "WEEK",
                                    "MONTH",
                                    "QUARTER",
                                    "YEAR",
                                    "MINUTE_OF_HOUR",
                                    "HOUR_OF_DAY",
                                    "DAY_OF_WEEK",
                                    "DAY_OF_MONTH",
                                    "DAY_OF_YEAR",
                                    "WEEK_OF_YEAR",
                                    "MONTH_OF_YEAR",
                                    "QUARTER_OF_YEAR"
                                ]
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "dataset": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiDatasetToOneLinkage"
                                    }
                                }
                            },
                            "labels": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiLabelToManyLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of attribute entity."
            },
            "JsonApiDatasetToOneLinkage": {
                "description": "References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "nullable": true,
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiDatasetLinkage"
                    }
                ]
            },
            "JsonApiDatasetOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiDatasetOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiDatasetOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/JsonApiAttributeOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiFactOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
                                }
                            ]
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiDatasetOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "dataset",
                        "enum": ["dataset"]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "type": {
                                "type": "string",
                                "enum": ["NORMAL", "DATE"]
                            },
                            "grain": {
                                "type": "array",
                                "items": {
                                    "required": ["id", "type"],
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "type": "string"
                                        },
                                        "type": {
                                            "type": "string",
                                            "enum": ["attribute", "dataset"]
                                        }
                                    }
                                }
                            },
                            "referenceProperties": {
                                "type": "array",
                                "items": {
                                    "required": ["identifier", "multivalue", "sourceColumns"],
                                    "type": "object",
                                    "properties": {
                                        "identifier": {
                                            "$ref": "#/components/schemas/DatasetReferenceIdentifier"
                                        },
                                        "multivalue": {
                                            "type": "boolean"
                                        },
                                        "sourceColumns": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            },
                            "dataSourceTableId": {
                                "type": "string"
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "attributes": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiAttributeToManyLinkage"
                                    }
                                }
                            },
                            "facts": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiFactToManyLinkage"
                                    }
                                }
                            },
                            "references": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiDatasetToManyLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of dataset entity."
            },
            "DatasetReferenceIdentifier": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["dataset"]
                    }
                }
            },
            "JsonApiFactOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiFactOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiFactOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiFactOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
                                }
                            ]
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiFactOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "fact",
                        "enum": ["fact"]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "sourceColumn": {
                                "type": "string"
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "dataset": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiDatasetToOneLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of fact entity."
            },
            "JsonApiFilterContextOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiFilterContextOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiFilterContextOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiFilterContextOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/JsonApiAttributeOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiLabelOutWithLinks"
                                }
                            ]
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiLabelOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiLabelOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiLabelOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiLabelOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/JsonApiAttributeOutWithLinks"
                                }
                            ]
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiLabelOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "label",
                        "enum": ["label"]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "primary": {
                                "type": "boolean"
                            },
                            "sourceColumn": {
                                "type": "string"
                            },
                            "areRelationsValid": {
                                "type": "boolean"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "attribute": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiAttributeToOneLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of label entity."
            },
            "JsonApiAttributeToOneLinkage": {
                "description": "References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "nullable": true,
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiAttributeLinkage"
                    }
                ]
            },
            "JsonApiMetricOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiMetricOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiMetricOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiMetricOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/JsonApiFactOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiAttributeOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiLabelOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiMetricOutWithLinks"
                                }
                            ]
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiVisualizationObjectOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiVisualizationObjectOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiVisualizationObjectOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiVisualizationObjectOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/JsonApiFactOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiAttributeOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiLabelOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiMetricOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
                                }
                            ]
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiWorkspaceDataFilterSettingOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiWorkspaceDataFilterSettingOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOutWithLinks"
                                }
                            ]
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiWorkspaceDataFilterSettingOut": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "workspaceDataFilterSetting",
                        "enum": ["workspaceDataFilterSetting"]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            },
                            "filterValues": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": {
                            "workspaceDataFilter": {
                                "required": ["data"],
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterToOneLinkage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "JSON:API representation of workspaceDataFilterSetting entity."
            },
            "JsonApiWorkspaceDataFilterLinkage": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["workspaceDataFilter"]
                    }
                },
                "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members."
            },
            "JsonApiWorkspaceDataFilterToOneLinkage": {
                "description": "References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
                "nullable": true,
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterLinkage"
                    }
                ]
            },
            "JsonApiWorkspaceDataFilterOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiWorkspaceDataFilterOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOutWithLinks"
                                }
                            ]
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiAttributeOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiAttributeOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiLabelOutWithLinks"
                                }
                            ]
                        }
                    }
                }
            },
            "JsonApiDatasetOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiDatasetOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/JsonApiAttributeOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiFactOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
                                }
                            ]
                        }
                    }
                }
            },
            "JsonApiFactOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiFactOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
                                }
                            ]
                        }
                    }
                }
            },
            "JsonApiLabelOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiLabelOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/JsonApiAttributeOutWithLinks"
                                }
                            ]
                        }
                    }
                }
            },
            "JsonApiWorkspaceDataFilterSettingOutDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOut"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ObjectLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOutWithLinks"
                                }
                            ]
                        }
                    }
                }
            },
            "JsonApiACLOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiACLOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiACLOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiACLOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/JsonApiUserOutWithLinks"
                                },
                                {
                                    "$ref": "#/components/schemas/JsonApiUserGroupOutWithLinks"
                                }
                            ]
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiCookieSecurityPropertiesOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiCookieSecurityPropertiesOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiCookieSecurityPropertiesOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiCookieSecurityPropertiesOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiDataSourceOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiDataSourceOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiDataSourceOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiDataSourceOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiUserGroupOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiUserGroupOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiUserGroupOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiUserGroupOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/JsonApiUserGroupOutWithLinks"
                                }
                            ]
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiUserOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiUserOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiUserOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiUserOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/JsonApiUserGroupOutWithLinks"
                                }
                            ]
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiWorkspaceOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiWorkspaceOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiWorkspaceOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiWorkspaceOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    },
                    "included": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Included resources",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/JsonApiWorkspaceOutWithLinks"
                                }
                            ]
                        }
                    }
                },
                "description": "A JSON:API document with a list of resources"
            },
            "JsonApiOrganizationInDocument": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/JsonApiOrganizationIn"
                    }
                }
            },
            "JsonApiOrganizationIn": {
                "required": ["id", "type"],
                "type": "object",
                "properties": {
                    "id": {
                        "pattern": "^([.A-Za-z0-9_-]{1,255}:)?[.A-Za-z0-9_-]{1,255}$",
                        "type": "string",
                        "description": "API identifier of an object",
                        "example": "id1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Object type",
                        "example": "organization",
                        "enum": ["organization"]
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "hostname": {
                                "type": "string"
                            },
                            "oauthIssuerLocation": {
                                "type": "string"
                            },
                            "oauthClientId": {
                                "type": "string"
                            },
                            "oauthClientSecret": {
                                "type": "string"
                            }
                        }
                    }
                },
                "description": "JSON:API representation of organization entity."
            },
            "JsonApiDataSourceTableOutWithLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/JsonApiDataSourceTableOut"
                    },
                    {
                        "$ref": "#/components/schemas/ObjectLinksContainer"
                    }
                ]
            },
            "JsonApiDataSourceTableOutList": {
                "required": ["data"],
                "type": "object",
                "properties": {
                    "data": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonApiDataSourceTableOutWithLinks"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/ListLinks"
                    }
                },
                "description": "A JSON:API document with a list of resources"
            }
        }
    }
}
