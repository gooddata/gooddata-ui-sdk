// (C) 2022 GoodData Corporation

/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
// Some imports not used depending on template conditions, we also need prettier-ignore so that the import does not get split and ts-ignore still works
// prettier-ignore
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// Some imports not used depending on template conditions, we also need prettier-ignore so that the import does not get split and ts-ignore still works
// prettier-ignore
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface ApiEntitlement
 */
export interface ApiEntitlement {
    /**
     *
     * @type {string}
     * @memberof ApiEntitlement
     */
    name: ApiEntitlementNameEnum;
    /**
     *
     * @type {string}
     * @memberof ApiEntitlement
     */
    value?: string;
    /**
     *
     * @type {string}
     * @memberof ApiEntitlement
     */
    expiry?: string;
}

export const ApiEntitlementNameEnum = {
    CONTRACT: "Contract",
    CUSTOM_THEMING: "CustomTheming",
    MANAGED_OIDC: "ManagedOIDC",
    UI_LOCALIZATION: "UiLocalization",
    TIER: "Tier",
    USER_COUNT: "UserCount",
    UNLIMITED_USERS: "UnlimitedUsers",
    UNLIMITED_WORKSPACES: "UnlimitedWorkspaces",
    WHITE_LABELING: "WhiteLabeling",
    WORKSPACE_COUNT: "WorkspaceCount",
} as const;

export type ApiEntitlementNameEnum = typeof ApiEntitlementNameEnum[keyof typeof ApiEntitlementNameEnum];

/**
 * Identifier of a user or user-group.
 * @export
 * @interface AssigneeIdentifier
 */
export interface AssigneeIdentifier {
    /**
     *
     * @type {string}
     * @memberof AssigneeIdentifier
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof AssigneeIdentifier
     */
    type: AssigneeIdentifierTypeEnum;
}

export const AssigneeIdentifierTypeEnum = {
    USER: "user",
    USER_GROUP: "userGroup",
} as const;

export type AssigneeIdentifierTypeEnum =
    typeof AssigneeIdentifierTypeEnum[keyof typeof AssigneeIdentifierTypeEnum];

/**
 * An id of the table from PDM mapped to this dataset. Including ID of data source.
 * @export
 * @interface DataSourceTableIdentifier
 */
export interface DataSourceTableIdentifier {
    /**
     * ID of table.
     * @type {string}
     * @memberof DataSourceTableIdentifier
     */
    id: string;
    /**
     * Data source ID.
     * @type {string}
     * @memberof DataSourceTableIdentifier
     */
    dataSourceId: string;
    /**
     * Data source entity type.
     * @type {string}
     * @memberof DataSourceTableIdentifier
     */
    type: DataSourceTableIdentifierTypeEnum;
}

export const DataSourceTableIdentifierTypeEnum = {
    DATA_SOURCE: "dataSource",
} as const;

export type DataSourceTableIdentifierTypeEnum =
    typeof DataSourceTableIdentifierTypeEnum[keyof typeof DataSourceTableIdentifierTypeEnum];

/**
 *
 * @export
 * @interface DatasetReferenceIdentifier
 */
export interface DatasetReferenceIdentifier {
    /**
     *
     * @type {string}
     * @memberof DatasetReferenceIdentifier
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof DatasetReferenceIdentifier
     */
    type: DatasetReferenceIdentifierTypeEnum;
}

export const DatasetReferenceIdentifierTypeEnum = {
    DATASET: "dataset",
} as const;

export type DatasetReferenceIdentifierTypeEnum =
    typeof DatasetReferenceIdentifierTypeEnum[keyof typeof DatasetReferenceIdentifierTypeEnum];

/**
 *
 * @export
 * @interface DeclarativeAnalyticalDashboard
 */
export interface DeclarativeAnalyticalDashboard {
    /**
     * Analytical dashboard ID.
     * @type {string}
     * @memberof DeclarativeAnalyticalDashboard
     */
    id: string;
    /**
     * Analytical dashboard title.
     * @type {string}
     * @memberof DeclarativeAnalyticalDashboard
     */
    title: string;
    /**
     * Analytical dashboard description.
     * @type {string}
     * @memberof DeclarativeAnalyticalDashboard
     */
    description?: string;
    /**
     * Custom setting content in JSON format.
     * @type {object}
     * @memberof DeclarativeAnalyticalDashboard
     */
    content: object;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeAnalyticalDashboard
     */
    tags?: Array<string>;
}
/**
 * Entities describing users\' view on data.
 * @export
 * @interface DeclarativeAnalytics
 */
export interface DeclarativeAnalytics {
    /**
     *
     * @type {DeclarativeAnalyticsLayer}
     * @memberof DeclarativeAnalytics
     */
    analytics?: DeclarativeAnalyticsLayer;
}
/**
 *
 * @export
 * @interface DeclarativeAnalyticsLayer
 */
export interface DeclarativeAnalyticsLayer {
    /**
     * A list of analytical dashboards available in the model.
     * @type {Array<DeclarativeAnalyticalDashboard>}
     * @memberof DeclarativeAnalyticsLayer
     */
    analyticalDashboards?: Array<DeclarativeAnalyticalDashboard>;
    /**
     * A list of filter contexts available in the model.
     * @type {Array<DeclarativeFilterContext>}
     * @memberof DeclarativeAnalyticsLayer
     */
    filterContexts?: Array<DeclarativeFilterContext>;
    /**
     * A list of metrics available in the model.
     * @type {Array<DeclarativeMetric>}
     * @memberof DeclarativeAnalyticsLayer
     */
    metrics?: Array<DeclarativeMetric>;
    /**
     * A list of visualization objects available in the model.
     * @type {Array<DeclarativeVisualizationObject>}
     * @memberof DeclarativeAnalyticsLayer
     */
    visualizationObjects?: Array<DeclarativeVisualizationObject>;
    /**
     * A list of dashboard plugins available in the model.
     * @type {Array<DeclarativeDashboardPlugin>}
     * @memberof DeclarativeAnalyticsLayer
     */
    dashboardPlugins?: Array<DeclarativeDashboardPlugin>;
}
/**
 * A dataset attribute.
 * @export
 * @interface DeclarativeAttribute
 */
export interface DeclarativeAttribute {
    /**
     * Attribute ID.
     * @type {string}
     * @memberof DeclarativeAttribute
     */
    id: string;
    /**
     * Attribute title.
     * @type {string}
     * @memberof DeclarativeAttribute
     */
    title: string;
    /**
     * Attribute description.
     * @type {string}
     * @memberof DeclarativeAttribute
     */
    description?: string;
    /**
     * An array of attribute labels.
     * @type {Array<DeclarativeLabel>}
     * @memberof DeclarativeAttribute
     */
    labels: Array<DeclarativeLabel>;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeAttribute
     */
    tags?: Array<string>;
    /**
     * Attribute sort column.
     * @type {string}
     * @memberof DeclarativeAttribute
     */
    sortColumn?: string;
    /**
     * Attribute sort direction.
     * @type {string}
     * @memberof DeclarativeAttribute
     */
    sortDirection?: DeclarativeAttributeSortDirectionEnum;
    /**
     *
     * @type {LabelIdentifier}
     * @memberof DeclarativeAttribute
     */
    defaultView?: LabelIdentifier;
    /**
     * A name of the source column that is the primary label
     * @type {string}
     * @memberof DeclarativeAttribute
     */
    sourceColumn: string;
}

export const DeclarativeAttributeSortDirectionEnum = {
    ASC: "ASC",
    DESC: "DESC",
} as const;

export type DeclarativeAttributeSortDirectionEnum =
    typeof DeclarativeAttributeSortDirectionEnum[keyof typeof DeclarativeAttributeSortDirectionEnum];

/**
 * Color palette and its properties.
 * @export
 * @interface DeclarativeColorPalette
 */
export interface DeclarativeColorPalette {
    /**
     *
     * @type {string}
     * @memberof DeclarativeColorPalette
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof DeclarativeColorPalette
     */
    name: string;
    /**
     * Custom setting content in JSON format.
     * @type {object}
     * @memberof DeclarativeColorPalette
     */
    content: object;
}
/**
 * A table column.
 * @export
 * @interface DeclarativeColumn
 */
export interface DeclarativeColumn {
    /**
     * Column name
     * @type {string}
     * @memberof DeclarativeColumn
     */
    name: string;
    /**
     * Column type
     * @type {string}
     * @memberof DeclarativeColumn
     */
    dataType: DeclarativeColumnDataTypeEnum;
    /**
     * Is column part of primary key?
     * @type {boolean}
     * @memberof DeclarativeColumn
     */
    isPrimaryKey?: boolean;
    /**
     * Referenced table (Foreign key)
     * @type {string}
     * @memberof DeclarativeColumn
     */
    referencedTableId?: string;
    /**
     * Referenced table (Foreign key)
     * @type {string}
     * @memberof DeclarativeColumn
     */
    referencedTableColumn?: string;
}

export const DeclarativeColumnDataTypeEnum = {
    INT: "INT",
    STRING: "STRING",
    DATE: "DATE",
    NUMERIC: "NUMERIC",
    TIMESTAMP: "TIMESTAMP",
    TIMESTAMP_TZ: "TIMESTAMP_TZ",
    BOOLEAN: "BOOLEAN",
} as const;

export type DeclarativeColumnDataTypeEnum =
    typeof DeclarativeColumnDataTypeEnum[keyof typeof DeclarativeColumnDataTypeEnum];

/**
 *
 * @export
 * @interface DeclarativeCspDirective
 */
export interface DeclarativeCspDirective {
    /**
     *
     * @type {string}
     * @memberof DeclarativeCspDirective
     */
    directive: string;
    /**
     *
     * @type {Array<string>}
     * @memberof DeclarativeCspDirective
     */
    sources: Array<string>;
}
/**
 * Custom application setting and its value.
 * @export
 * @interface DeclarativeCustomApplicationSetting
 */
export interface DeclarativeCustomApplicationSetting {
    /**
     * Custom Application Setting ID.
     * @type {string}
     * @memberof DeclarativeCustomApplicationSetting
     */
    id: string;
    /**
     * Custom setting content in JSON format.
     * @type {object}
     * @memberof DeclarativeCustomApplicationSetting
     */
    content: object;
    /**
     * The application id
     * @type {string}
     * @memberof DeclarativeCustomApplicationSetting
     */
    applicationName: string;
}
/**
 *
 * @export
 * @interface DeclarativeDashboardPlugin
 */
export interface DeclarativeDashboardPlugin {
    /**
     * Dashboard plugin object ID.
     * @type {string}
     * @memberof DeclarativeDashboardPlugin
     */
    id: string;
    /**
     * Dashboard plugin object title.
     * @type {string}
     * @memberof DeclarativeDashboardPlugin
     */
    title: string;
    /**
     * Dashboard plugin description.
     * @type {string}
     * @memberof DeclarativeDashboardPlugin
     */
    description?: string;
    /**
     * Custom setting content in JSON format.
     * @type {object}
     * @memberof DeclarativeDashboardPlugin
     */
    content: object;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeDashboardPlugin
     */
    tags?: Array<string>;
}
/**
 * A data source and its properties.
 * @export
 * @interface DeclarativeDataSource
 */
export interface DeclarativeDataSource {
    /**
     * Data source ID.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    id: string;
    /**
     * Name of the data source.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    name: string;
    /**
     * Type of database.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    type: DeclarativeDataSourceTypeEnum;
    /**
     * An connection string relevant to type of database.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    url?: string;
    /**
     * A scheme/database with the data.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    schema: string;
    /**
     * User with permission connect the data source/database.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    username?: string;
    /**
     * Password for the data-source user, property is never returned back.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    password?: string;
    /**
     * Token as an alternative to username and password.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    token?: string;
    /**
     * Enable caching of intermediate results.
     * @type {boolean}
     * @memberof DeclarativeDataSource
     */
    enableCaching?: boolean;
    /**
     * Path to schema, where intermediate caches are stored.
     * @type {Array<string>}
     * @memberof DeclarativeDataSource
     */
    cachePath?: Array<string>;
    /**
     *
     * @type {Array<Parameter>}
     * @memberof DeclarativeDataSource
     */
    parameters?: Array<Parameter>;
    /**
     *
     * @type {Array<Parameter>}
     * @memberof DeclarativeDataSource
     */
    decodedParameters?: Array<Parameter>;
    /**
     *
     * @type {DeclarativeTables}
     * @memberof DeclarativeDataSource
     */
    pdm?: DeclarativeTables;
    /**
     *
     * @type {Array<DeclarativeDataSourcePermission>}
     * @memberof DeclarativeDataSource
     */
    permissions?: Array<DeclarativeDataSourcePermission>;
}

export const DeclarativeDataSourceTypeEnum = {
    POSTGRESQL: "POSTGRESQL",
    REDSHIFT: "REDSHIFT",
    VERTICA: "VERTICA",
    SNOWFLAKE: "SNOWFLAKE",
    ADS: "ADS",
    BIGQUERY: "BIGQUERY",
    MSSQL: "MSSQL",
    PRESTO: "PRESTO",
    DREMIO: "DREMIO",
    DRILL: "DRILL",
    GREENPLUM: "GREENPLUM",
    AZURESQL: "AZURESQL",
    SYNAPSESQL: "SYNAPSESQL",
} as const;

export type DeclarativeDataSourceTypeEnum =
    typeof DeclarativeDataSourceTypeEnum[keyof typeof DeclarativeDataSourceTypeEnum];

/**
 *
 * @export
 * @interface DeclarativeDataSourcePermission
 */
export interface DeclarativeDataSourcePermission {
    /**
     * Permission name.
     * @type {string}
     * @memberof DeclarativeDataSourcePermission
     */
    name: DeclarativeDataSourcePermissionNameEnum;
    /**
     *
     * @type {AssigneeIdentifier}
     * @memberof DeclarativeDataSourcePermission
     */
    assignee: AssigneeIdentifier;
}

export const DeclarativeDataSourcePermissionNameEnum = {
    MANAGE: "MANAGE",
    USE: "USE",
} as const;

export type DeclarativeDataSourcePermissionNameEnum =
    typeof DeclarativeDataSourcePermissionNameEnum[keyof typeof DeclarativeDataSourcePermissionNameEnum];

/**
 * A data source and its properties.
 * @export
 * @interface DeclarativeDataSources
 */
export interface DeclarativeDataSources {
    /**
     *
     * @type {Array<DeclarativeDataSource>}
     * @memberof DeclarativeDataSources
     */
    dataSources: Array<DeclarativeDataSource>;
}
/**
 * A dataset defined by its properties.
 * @export
 * @interface DeclarativeDataset
 */
export interface DeclarativeDataset {
    /**
     * The Dataset ID. This ID is further used to refer to this instance of dataset.
     * @type {string}
     * @memberof DeclarativeDataset
     */
    id: string;
    /**
     * A dataset title.
     * @type {string}
     * @memberof DeclarativeDataset
     */
    title: string;
    /**
     * A dataset description.
     * @type {string}
     * @memberof DeclarativeDataset
     */
    description?: string;
    /**
     * An array of grain identifiers.
     * @type {Array<GrainIdentifier>}
     * @memberof DeclarativeDataset
     */
    grain: Array<GrainIdentifier>;
    /**
     * An array of attributes.
     * @type {Array<DeclarativeAttribute>}
     * @memberof DeclarativeDataset
     */
    attributes?: Array<DeclarativeAttribute>;
    /**
     * An array of facts.
     * @type {Array<DeclarativeFact>}
     * @memberof DeclarativeDataset
     */
    facts?: Array<DeclarativeFact>;
    /**
     * An array of references.
     * @type {Array<DeclarativeReference>}
     * @memberof DeclarativeDataset
     */
    references: Array<DeclarativeReference>;
    /**
     *
     * @type {DataSourceTableIdentifier}
     * @memberof DeclarativeDataset
     */
    dataSourceTableId?: DataSourceTableIdentifier;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeDataset
     */
    tags?: Array<string>;
}
/**
 * A date dataset.
 * @export
 * @interface DeclarativeDateDataset
 */
export interface DeclarativeDateDataset {
    /**
     * Date dataset ID.
     * @type {string}
     * @memberof DeclarativeDateDataset
     */
    id: string;
    /**
     * Date dataset title.
     * @type {string}
     * @memberof DeclarativeDateDataset
     */
    title: string;
    /**
     * Date dataset description.
     * @type {string}
     * @memberof DeclarativeDateDataset
     */
    description?: string;
    /**
     *
     * @type {GranularitiesFormatting}
     * @memberof DeclarativeDateDataset
     */
    granularitiesFormatting: GranularitiesFormatting;
    /**
     * An array of date granularities. All listed granularities will be available for date dataset.
     * @type {Array<string>}
     * @memberof DeclarativeDateDataset
     */
    granularities: Array<DeclarativeDateDatasetGranularitiesEnum>;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeDateDataset
     */
    tags?: Array<string>;
}

export const DeclarativeDateDatasetGranularitiesEnum = {
    MINUTE: "MINUTE",
    HOUR: "HOUR",
    DAY: "DAY",
    WEEK: "WEEK",
    MONTH: "MONTH",
    QUARTER: "QUARTER",
    YEAR: "YEAR",
    MINUTE_OF_HOUR: "MINUTE_OF_HOUR",
    HOUR_OF_DAY: "HOUR_OF_DAY",
    DAY_OF_WEEK: "DAY_OF_WEEK",
    DAY_OF_MONTH: "DAY_OF_MONTH",
    DAY_OF_YEAR: "DAY_OF_YEAR",
    WEEK_OF_YEAR: "WEEK_OF_YEAR",
    MONTH_OF_YEAR: "MONTH_OF_YEAR",
    QUARTER_OF_YEAR: "QUARTER_OF_YEAR",
} as const;

export type DeclarativeDateDatasetGranularitiesEnum =
    typeof DeclarativeDateDatasetGranularitiesEnum[keyof typeof DeclarativeDateDatasetGranularitiesEnum];

/**
 * A dataset fact.
 * @export
 * @interface DeclarativeFact
 */
export interface DeclarativeFact {
    /**
     * Fact ID.
     * @type {string}
     * @memberof DeclarativeFact
     */
    id: string;
    /**
     * Fact title.
     * @type {string}
     * @memberof DeclarativeFact
     */
    title: string;
    /**
     * Fact description.
     * @type {string}
     * @memberof DeclarativeFact
     */
    description?: string;
    /**
     * A name of the source column in the table.
     * @type {string}
     * @memberof DeclarativeFact
     */
    sourceColumn: string;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeFact
     */
    tags?: Array<string>;
}
/**
 *
 * @export
 * @interface DeclarativeFilterContext
 */
export interface DeclarativeFilterContext {
    /**
     * Filter Context ID.
     * @type {string}
     * @memberof DeclarativeFilterContext
     */
    id: string;
    /**
     * Filter Context title.
     * @type {string}
     * @memberof DeclarativeFilterContext
     */
    title: string;
    /**
     * Filter Context description.
     * @type {string}
     * @memberof DeclarativeFilterContext
     */
    description?: string;
    /**
     * Custom setting content in JSON format.
     * @type {object}
     * @memberof DeclarativeFilterContext
     */
    content: object;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeFilterContext
     */
    tags?: Array<string>;
}
/**
 * A attribute label.
 * @export
 * @interface DeclarativeLabel
 */
export interface DeclarativeLabel {
    /**
     * Label ID.
     * @type {string}
     * @memberof DeclarativeLabel
     */
    id: string;
    /**
     * Label title.
     * @type {string}
     * @memberof DeclarativeLabel
     */
    title: string;
    /**
     * Label description.
     * @type {string}
     * @memberof DeclarativeLabel
     */
    description?: string;
    /**
     * A name of the source column in the table.
     * @type {string}
     * @memberof DeclarativeLabel
     */
    sourceColumn: string;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeLabel
     */
    tags?: Array<string>;
    /**
     * Specific type of label
     * @type {string}
     * @memberof DeclarativeLabel
     */
    valueType?: DeclarativeLabelValueTypeEnum;
}

export const DeclarativeLabelValueTypeEnum = {
    TEXT: "TEXT",
    HYPERLINK: "HYPERLINK",
    GEO: "GEO",
    GEO_LONGITUDE: "GEO_LONGITUDE",
    GEO_LATITUDE: "GEO_LATITUDE",
} as const;

export type DeclarativeLabelValueTypeEnum =
    typeof DeclarativeLabelValueTypeEnum[keyof typeof DeclarativeLabelValueTypeEnum];

/**
 * A logical data model (LDM) representation.
 * @export
 * @interface DeclarativeLdm
 */
export interface DeclarativeLdm {
    /**
     * An array containing datasets.
     * @type {Array<DeclarativeDataset>}
     * @memberof DeclarativeLdm
     */
    datasets?: Array<DeclarativeDataset>;
    /**
     * An array containing date-related datasets.
     * @type {Array<DeclarativeDateDataset>}
     * @memberof DeclarativeLdm
     */
    dateInstances?: Array<DeclarativeDateDataset>;
}
/**
 *
 * @export
 * @interface DeclarativeMetric
 */
export interface DeclarativeMetric {
    /**
     * Metric ID.
     * @type {string}
     * @memberof DeclarativeMetric
     */
    id: string;
    /**
     * Metric title.
     * @type {string}
     * @memberof DeclarativeMetric
     */
    title: string;
    /**
     * Metric description.
     * @type {string}
     * @memberof DeclarativeMetric
     */
    description?: string;
    /**
     * Custom setting content in JSON format.
     * @type {object}
     * @memberof DeclarativeMetric
     */
    content: object;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeMetric
     */
    tags?: Array<string>;
}
/**
 * A data model structured as a set of its attributes.
 * @export
 * @interface DeclarativeModel
 */
export interface DeclarativeModel {
    /**
     *
     * @type {DeclarativeLdm}
     * @memberof DeclarativeModel
     */
    ldm?: DeclarativeLdm;
}
/**
 * Complete definition of an organization in a declarative form.
 * @export
 * @interface DeclarativeOrganization
 */
export interface DeclarativeOrganization {
    /**
     *
     * @type {DeclarativeOrganizationInfo}
     * @memberof DeclarativeOrganization
     */
    organization: DeclarativeOrganizationInfo;
    /**
     *
     * @type {Array<DeclarativeUser>}
     * @memberof DeclarativeOrganization
     */
    users?: Array<DeclarativeUser>;
    /**
     *
     * @type {Array<DeclarativeUserGroup>}
     * @memberof DeclarativeOrganization
     */
    userGroups?: Array<DeclarativeUserGroup>;
    /**
     *
     * @type {Array<DeclarativeDataSource>}
     * @memberof DeclarativeOrganization
     */
    dataSources?: Array<DeclarativeDataSource>;
    /**
     *
     * @type {Array<DeclarativeWorkspace>}
     * @memberof DeclarativeOrganization
     */
    workspaces?: Array<DeclarativeWorkspace>;
    /**
     *
     * @type {Array<DeclarativeWorkspaceDataFilter>}
     * @memberof DeclarativeOrganization
     */
    workspaceDataFilters?: Array<DeclarativeWorkspaceDataFilter>;
}
/**
 * Information available about an organization.
 * @export
 * @interface DeclarativeOrganizationInfo
 */
export interface DeclarativeOrganizationInfo {
    /**
     * Identifier of the organization.
     * @type {string}
     * @memberof DeclarativeOrganizationInfo
     */
    id: string;
    /**
     * Formal name of the organization.
     * @type {string}
     * @memberof DeclarativeOrganizationInfo
     */
    name: string;
    /**
     * Formal hostname used in deployment.
     * @type {string}
     * @memberof DeclarativeOrganizationInfo
     */
    hostname: string;
    /**
     * URI of the authentication provider.
     * @type {string}
     * @memberof DeclarativeOrganizationInfo
     */
    oauthIssuerLocation?: string;
    /**
     * Identifier of the authentication provider
     * @type {string}
     * @memberof DeclarativeOrganizationInfo
     */
    oauthClientId?: string;
    /**
     * Communication secret of the authentication provider (never returned back).
     * @type {string}
     * @memberof DeclarativeOrganizationInfo
     */
    oauthClientSecret?: string;
    /**
     *
     * @type {Array<DeclarativeOrganizationPermission>}
     * @memberof DeclarativeOrganizationInfo
     */
    permissions: Array<DeclarativeOrganizationPermission>;
    /**
     * Early access defined on level Organization
     * @type {string}
     * @memberof DeclarativeOrganizationInfo
     */
    earlyAccess?: string;
    /**
     * Any string identifying the OIDC provider. This value is used as suffix for OAuth2 callback (redirect) URL. If not defined, the standard callback URL is used. This value is valid only for external OIDC providers, not for the internal DEX provider.
     * @type {string}
     * @memberof DeclarativeOrganizationInfo
     */
    oauthIssuerId?: string;
    /**
     * A list of organization settings.
     * @type {Array<DeclarativeSetting>}
     * @memberof DeclarativeOrganizationInfo
     */
    settings?: Array<DeclarativeSetting>;
    /**
     * A list of themes.
     * @type {Array<DeclarativeTheme>}
     * @memberof DeclarativeOrganizationInfo
     */
    themes?: Array<DeclarativeTheme>;
    /**
     * A list of color palettes.
     * @type {Array<DeclarativeColorPalette>}
     * @memberof DeclarativeOrganizationInfo
     */
    colorPalettes?: Array<DeclarativeColorPalette>;
    /**
     * A list of CSP directives.
     * @type {Array<DeclarativeCspDirective>}
     * @memberof DeclarativeOrganizationInfo
     */
    cspDirectives?: Array<DeclarativeCspDirective>;
}
/**
 * Definition of a permission assigned to a user/user-group.
 * @export
 * @interface DeclarativeOrganizationPermission
 */
export interface DeclarativeOrganizationPermission {
    /**
     * Permission name.
     * @type {string}
     * @memberof DeclarativeOrganizationPermission
     */
    name: DeclarativeOrganizationPermissionNameEnum;
    /**
     *
     * @type {AssigneeIdentifier}
     * @memberof DeclarativeOrganizationPermission
     */
    assignee: AssigneeIdentifier;
}

export const DeclarativeOrganizationPermissionNameEnum = {
    MANAGE: "MANAGE",
} as const;

export type DeclarativeOrganizationPermissionNameEnum =
    typeof DeclarativeOrganizationPermissionNameEnum[keyof typeof DeclarativeOrganizationPermissionNameEnum];

/**
 * A physical data model (PDM) representation for single data source.
 * @export
 * @interface DeclarativePdm
 */
export interface DeclarativePdm {
    /**
     *
     * @type {DeclarativeTables}
     * @memberof DeclarativePdm
     */
    pdm: DeclarativeTables;
}
/**
 * A dataset reference.
 * @export
 * @interface DeclarativeReference
 */
export interface DeclarativeReference {
    /**
     *
     * @type {ReferenceIdentifier}
     * @memberof DeclarativeReference
     */
    identifier: ReferenceIdentifier;
    /**
     * The multi-value flag enables many-to-many cardinality for references.
     * @type {boolean}
     * @memberof DeclarativeReference
     */
    multivalue: boolean;
    /**
     * An array of source column names for a given reference.
     * @type {Array<string>}
     * @memberof DeclarativeReference
     */
    sourceColumns: Array<string>;
}
/**
 * Setting and its value.
 * @export
 * @interface DeclarativeSetting
 */
export interface DeclarativeSetting {
    /**
     * Setting ID.
     * @type {string}
     * @memberof DeclarativeSetting
     */
    id: string;
    /**
     * Custom setting content in JSON format.
     * @type {object}
     * @memberof DeclarativeSetting
     */
    content?: object;
}
/**
 *
 * @export
 * @interface DeclarativeSingleWorkspacePermission
 */
export interface DeclarativeSingleWorkspacePermission {
    /**
     * Permission name.
     * @type {string}
     * @memberof DeclarativeSingleWorkspacePermission
     */
    name: DeclarativeSingleWorkspacePermissionNameEnum;
    /**
     *
     * @type {AssigneeIdentifier}
     * @memberof DeclarativeSingleWorkspacePermission
     */
    assignee: AssigneeIdentifier;
}

export const DeclarativeSingleWorkspacePermissionNameEnum = {
    MANAGE: "MANAGE",
    ANALYZE: "ANALYZE",
    EXPORT: "EXPORT",
    VIEW: "VIEW",
} as const;

export type DeclarativeSingleWorkspacePermissionNameEnum =
    typeof DeclarativeSingleWorkspacePermissionNameEnum[keyof typeof DeclarativeSingleWorkspacePermissionNameEnum];

/**
 * A database table.
 * @export
 * @interface DeclarativeTable
 */
export interface DeclarativeTable {
    /**
     * Table id.
     * @type {string}
     * @memberof DeclarativeTable
     */
    id: string;
    /**
     * Path to table.
     * @type {Array<string>}
     * @memberof DeclarativeTable
     */
    path: Array<string>;
    /**
     * Table type: TABLE or VIEW.
     * @type {string}
     * @memberof DeclarativeTable
     */
    type: string;
    /**
     * Table or view name prefix used in scan. Will be stripped when generating LDM.
     * @type {string}
     * @memberof DeclarativeTable
     */
    namePrefix?: string;
    /**
     * An array of physical columns
     * @type {Array<DeclarativeColumn>}
     * @memberof DeclarativeTable
     */
    columns: Array<DeclarativeColumn>;
}
/**
 * A physical data model (PDM) tables.
 * @export
 * @interface DeclarativeTables
 */
export interface DeclarativeTables {
    /**
     * An array of physical database tables.
     * @type {Array<DeclarativeTable>}
     * @memberof DeclarativeTables
     */
    tables: Array<DeclarativeTable>;
}
/**
 * Theme and its properties.
 * @export
 * @interface DeclarativeTheme
 */
export interface DeclarativeTheme {
    /**
     *
     * @type {string}
     * @memberof DeclarativeTheme
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof DeclarativeTheme
     */
    name: string;
    /**
     * Custom setting content in JSON format.
     * @type {object}
     * @memberof DeclarativeTheme
     */
    content: object;
}
/**
 * A user and its properties
 * @export
 * @interface DeclarativeUser
 */
export interface DeclarativeUser {
    /**
     * User identifier.
     * @type {string}
     * @memberof DeclarativeUser
     */
    id: string;
    /**
     * User identification in the authentication manager.
     * @type {string}
     * @memberof DeclarativeUser
     */
    authId?: string;
    /**
     *
     * @type {Array<UserGroupIdentifier>}
     * @memberof DeclarativeUser
     */
    userGroups?: Array<UserGroupIdentifier>;
    /**
     * A list of user settings.
     * @type {Array<DeclarativeSetting>}
     * @memberof DeclarativeUser
     */
    settings?: Array<DeclarativeSetting>;
}
/**
 * A user-group and its properties
 * @export
 * @interface DeclarativeUserGroup
 */
export interface DeclarativeUserGroup {
    /**
     * UserGroup identifier.
     * @type {string}
     * @memberof DeclarativeUserGroup
     */
    id: string;
    /**
     *
     * @type {Array<UserGroupIdentifier>}
     * @memberof DeclarativeUserGroup
     */
    parents?: Array<UserGroupIdentifier>;
}
/**
 * Declarative form of userGroups and its properties.
 * @export
 * @interface DeclarativeUserGroups
 */
export interface DeclarativeUserGroups {
    /**
     *
     * @type {Array<DeclarativeUserGroup>}
     * @memberof DeclarativeUserGroups
     */
    userGroups: Array<DeclarativeUserGroup>;
}
/**
 * Declarative form of users and its properties.
 * @export
 * @interface DeclarativeUsers
 */
export interface DeclarativeUsers {
    /**
     *
     * @type {Array<DeclarativeUser>}
     * @memberof DeclarativeUsers
     */
    users: Array<DeclarativeUser>;
}
/**
 * Declarative form of both users and user groups and theirs properties.
 * @export
 * @interface DeclarativeUsersUserGroups
 */
export interface DeclarativeUsersUserGroups {
    /**
     *
     * @type {Array<DeclarativeUser>}
     * @memberof DeclarativeUsersUserGroups
     */
    users: Array<DeclarativeUser>;
    /**
     *
     * @type {Array<DeclarativeUserGroup>}
     * @memberof DeclarativeUsersUserGroups
     */
    userGroups: Array<DeclarativeUserGroup>;
}
/**
 *
 * @export
 * @interface DeclarativeVisualizationObject
 */
export interface DeclarativeVisualizationObject {
    /**
     * Visualization object ID.
     * @type {string}
     * @memberof DeclarativeVisualizationObject
     */
    id: string;
    /**
     * Visualization object title.
     * @type {string}
     * @memberof DeclarativeVisualizationObject
     */
    title: string;
    /**
     * Visualization object description.
     * @type {string}
     * @memberof DeclarativeVisualizationObject
     */
    description?: string;
    /**
     * Custom setting content in JSON format.
     * @type {object}
     * @memberof DeclarativeVisualizationObject
     */
    content: object;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeVisualizationObject
     */
    tags?: Array<string>;
}
/**
 * A declarative form of a particular workspace.
 * @export
 * @interface DeclarativeWorkspace
 */
export interface DeclarativeWorkspace {
    /**
     * Identifier of a workspace
     * @type {string}
     * @memberof DeclarativeWorkspace
     */
    id: string;
    /**
     * Name of a workspace to view.
     * @type {string}
     * @memberof DeclarativeWorkspace
     */
    name: string;
    /**
     *
     * @type {DeclarativeWorkspaceModel}
     * @memberof DeclarativeWorkspace
     */
    model?: DeclarativeWorkspaceModel;
    /**
     *
     * @type {WorkspaceIdentifier}
     * @memberof DeclarativeWorkspace
     */
    parent?: WorkspaceIdentifier;
    /**
     *
     * @type {Array<DeclarativeSingleWorkspacePermission>}
     * @memberof DeclarativeWorkspace
     */
    permissions?: Array<DeclarativeSingleWorkspacePermission>;
    /**
     *
     * @type {Array<DeclarativeWorkspaceHierarchyPermission>}
     * @memberof DeclarativeWorkspace
     */
    hierarchyPermissions?: Array<DeclarativeWorkspaceHierarchyPermission>;
    /**
     * Early access defined on level Workspace
     * @type {string}
     * @memberof DeclarativeWorkspace
     */
    earlyAccess?: string;
    /**
     * Description of the workspace
     * @type {string}
     * @memberof DeclarativeWorkspace
     */
    description?: string;
    /**
     * A list of workspace settings.
     * @type {Array<DeclarativeSetting>}
     * @memberof DeclarativeWorkspace
     */
    settings?: Array<DeclarativeSetting>;
    /**
     * A list of workspace custom settings.
     * @type {Array<DeclarativeCustomApplicationSetting>}
     * @memberof DeclarativeWorkspace
     */
    customApplicationSettings?: Array<DeclarativeCustomApplicationSetting>;
}
/**
 * Workspace Data Filters serving the filtering of what data users can see in workspaces.
 * @export
 * @interface DeclarativeWorkspaceDataFilter
 */
export interface DeclarativeWorkspaceDataFilter {
    /**
     * Workspace Data Filters ID. This ID is further used to refer to this instance.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilter
     */
    id: string;
    /**
     * Workspace Data Filters title.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilter
     */
    title: string;
    /**
     * Workspace Data Filters description.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilter
     */
    description?: string;
    /**
     * Workspace Data Filters column name. Data are filtered using this physical column.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilter
     */
    columnName: string;
    /**
     * Filter settings specifying values of filters valid for the workspace.
     * @type {Array<DeclarativeWorkspaceDataFilterSetting>}
     * @memberof DeclarativeWorkspaceDataFilter
     */
    workspaceDataFilterSettings: Array<DeclarativeWorkspaceDataFilterSetting>;
    /**
     *
     * @type {WorkspaceIdentifier}
     * @memberof DeclarativeWorkspaceDataFilter
     */
    workspace?: WorkspaceIdentifier;
}
/**
 * Workspace Data Filters serving the filtering of what data users can see in workspaces.
 * @export
 * @interface DeclarativeWorkspaceDataFilterSetting
 */
export interface DeclarativeWorkspaceDataFilterSetting {
    /**
     * Workspace Data Filters ID. This ID is further used to refer to this instance.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilterSetting
     */
    id: string;
    /**
     * Workspace Data Filters setting title.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilterSetting
     */
    title: string;
    /**
     * Workspace Data Filters setting description.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilterSetting
     */
    description?: string;
    /**
     * Only those rows are returned, where columnName from filter matches those values.
     * @type {Array<string>}
     * @memberof DeclarativeWorkspaceDataFilterSetting
     */
    filterValues: Array<string>;
    /**
     *
     * @type {WorkspaceIdentifier}
     * @memberof DeclarativeWorkspaceDataFilterSetting
     */
    workspace: WorkspaceIdentifier;
}
/**
 * Declarative form of data filters.
 * @export
 * @interface DeclarativeWorkspaceDataFilters
 */
export interface DeclarativeWorkspaceDataFilters {
    /**
     *
     * @type {Array<DeclarativeWorkspaceDataFilter>}
     * @memberof DeclarativeWorkspaceDataFilters
     */
    workspaceDataFilters: Array<DeclarativeWorkspaceDataFilter>;
}
/**
 *
 * @export
 * @interface DeclarativeWorkspaceHierarchyPermission
 */
export interface DeclarativeWorkspaceHierarchyPermission {
    /**
     * Permission name.
     * @type {string}
     * @memberof DeclarativeWorkspaceHierarchyPermission
     */
    name: DeclarativeWorkspaceHierarchyPermissionNameEnum;
    /**
     *
     * @type {AssigneeIdentifier}
     * @memberof DeclarativeWorkspaceHierarchyPermission
     */
    assignee: AssigneeIdentifier;
}

export const DeclarativeWorkspaceHierarchyPermissionNameEnum = {
    MANAGE: "MANAGE",
    ANALYZE: "ANALYZE",
    VIEW: "VIEW",
} as const;

export type DeclarativeWorkspaceHierarchyPermissionNameEnum =
    typeof DeclarativeWorkspaceHierarchyPermissionNameEnum[keyof typeof DeclarativeWorkspaceHierarchyPermissionNameEnum];

/**
 * A declarative form of a model and analytics for a workspace.
 * @export
 * @interface DeclarativeWorkspaceModel
 */
export interface DeclarativeWorkspaceModel {
    /**
     *
     * @type {DeclarativeLdm}
     * @memberof DeclarativeWorkspaceModel
     */
    ldm?: DeclarativeLdm;
    /**
     *
     * @type {DeclarativeAnalyticsLayer}
     * @memberof DeclarativeWorkspaceModel
     */
    analytics?: DeclarativeAnalyticsLayer;
}
/**
 * Definition of permissions associated with a workspace.
 * @export
 * @interface DeclarativeWorkspacePermissions
 */
export interface DeclarativeWorkspacePermissions {
    /**
     *
     * @type {Array<DeclarativeSingleWorkspacePermission>}
     * @memberof DeclarativeWorkspacePermissions
     */
    permissions?: Array<DeclarativeSingleWorkspacePermission>;
    /**
     *
     * @type {Array<DeclarativeWorkspaceHierarchyPermission>}
     * @memberof DeclarativeWorkspacePermissions
     */
    hierarchyPermissions?: Array<DeclarativeWorkspaceHierarchyPermission>;
}
/**
 * A declarative form of a all workspace layout.
 * @export
 * @interface DeclarativeWorkspaces
 */
export interface DeclarativeWorkspaces {
    /**
     *
     * @type {Array<DeclarativeWorkspace>}
     * @memberof DeclarativeWorkspaces
     */
    workspaces: Array<DeclarativeWorkspace>;
    /**
     *
     * @type {Array<DeclarativeWorkspaceDataFilter>}
     * @memberof DeclarativeWorkspaces
     */
    workspaceDataFilters: Array<DeclarativeWorkspaceDataFilter>;
}
/**
 *
 * @export
 * @interface DependentEntitiesGraph
 */
export interface DependentEntitiesGraph {
    /**
     *
     * @type {Array<DependentEntitiesNode>}
     * @memberof DependentEntitiesGraph
     */
    nodes: Array<DependentEntitiesNode>;
    /**
     *
     * @type {Array<Array<EntityIdentifier>>}
     * @memberof DependentEntitiesGraph
     */
    edges: Array<Array<EntityIdentifier>>;
}
/**
 *
 * @export
 * @interface DependentEntitiesNode
 */
export interface DependentEntitiesNode {
    /**
     *
     * @type {string}
     * @memberof DependentEntitiesNode
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof DependentEntitiesNode
     */
    type: string;
    /**
     *
     * @type {string}
     * @memberof DependentEntitiesNode
     */
    title?: string;
}
/**
 *
 * @export
 * @interface DependentEntitiesRequest
 */
export interface DependentEntitiesRequest {
    /**
     *
     * @type {Array<EntityIdentifier>}
     * @memberof DependentEntitiesRequest
     */
    identifiers: Array<EntityIdentifier>;
}
/**
 *
 * @export
 * @interface DependentEntitiesResponse
 */
export interface DependentEntitiesResponse {
    /**
     *
     * @type {DependentEntitiesGraph}
     * @memberof DependentEntitiesResponse
     */
    graph: DependentEntitiesGraph;
}
/**
 *
 * @export
 * @interface EntitlementsRequest
 */
export interface EntitlementsRequest {
    /**
     *
     * @type {Array<string>}
     * @memberof EntitlementsRequest
     */
    entitlementsName: Array<EntitlementsRequestEntitlementsNameEnum>;
}

export const EntitlementsRequestEntitlementsNameEnum = {
    CONTRACT: "Contract",
    CUSTOM_THEMING: "CustomTheming",
    MANAGED_OIDC: "ManagedOIDC",
    UI_LOCALIZATION: "UiLocalization",
    TIER: "Tier",
    USER_COUNT: "UserCount",
    UNLIMITED_USERS: "UnlimitedUsers",
    UNLIMITED_WORKSPACES: "UnlimitedWorkspaces",
    WHITE_LABELING: "WhiteLabeling",
    WORKSPACE_COUNT: "WorkspaceCount",
} as const;

export type EntitlementsRequestEntitlementsNameEnum =
    typeof EntitlementsRequestEntitlementsNameEnum[keyof typeof EntitlementsRequestEntitlementsNameEnum];

/**
 *
 * @export
 * @interface EntityIdentifier
 */
export interface EntityIdentifier {
    /**
     *
     * @type {string}
     * @memberof EntityIdentifier
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof EntityIdentifier
     */
    type: string;
}
/**
 * A request containing all information needed for generation of logical model.
 * @export
 * @interface GenerateLdmRequest
 */
export interface GenerateLdmRequest {
    /**
     * A flag dictating how the attribute, fact and label ids are generated. By default their ids are derived only from the column name, unless there would be a conflict (e.g. category coming from two different tables). In that case a long id format of `<table>.<column>` is used. If the flag is set to true, then all ids will be generated in the long form.
     * @type {boolean}
     * @memberof GenerateLdmRequest
     */
    generateLongIds?: boolean;
    /**
     * A separator between prefixes and the names. Default is \"__\".
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    separator: string;
    /**
     * Tables starting with this prefix will be included. The prefix is then followed by the value of `separator` parameter. Given the table prefix is `out_table` and separator is `__`, the table with name like `out_table__customers` will be scanned.
     * @type {string}
     * @memberof GenerateLdmRequest
     * @deprecated
     */
    tablePrefix?: string;
    /**
     * Views starting with this prefix will be included. The prefix is then followed by the value of `separator` parameter. Given the view prefix is `out_view` and separator is `__`, the table with name like `out_view__us_customers` will be scanned.
     * @type {string}
     * @memberof GenerateLdmRequest
     * @deprecated
     */
    viewPrefix?: string;
    /**
     * Columns starting with this prefix will be considered as primary labels. The prefix is then followed by the value of `separator` parameter. Given the primary label prefix is `pl` and separator is `__`, the columns with name like `pl__country_id` will be considered as primary labels.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    primaryLabelPrefix?: string;
    /**
     * Columns starting with this prefix will be considered as secondary labels. The prefix is then followed by the value of `separator` parameter. Given the secondary label prefix is `sl` and separator is `__`, the columns with name like `sl__country_id_country_name` will be considered as secondary labels.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    secondaryLabelPrefix?: string;
    /**
     * Columns starting with this prefix will be considered as facts. The prefix is then followed by the value of `separator` parameter. Given the fact prefix is `f` and separator is `__`, the columns with name like `f__sold` will be considered as facts.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    factPrefix?: string;
    /**
     * Option to control date granularities for date datasets. Empty value enables common date granularities (DAY, WEEK, MONTH, QUARTER, YEAR). Default value is `all` which enables all available date granularities, including time granularities (like hours, minutes).
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    dateGranularities?: string;
    /**
     * Columns starting with this prefix will be considered as grains. The prefix is then followed by the value of `separator` parameter. Given the grain prefix is `g` and separator is `__`, the columns with name like `g__name` will be considered as grains.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    grainPrefix?: string;
    /**
     * Columns starting with this prefix will be considered as references. The prefix is then followed by the value of `separator` parameter. Given the reference prefix is `r` and separator is `__`, the columns with name like `r__customer_name` will be considered as references.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    referencePrefix?: string;
    /**
     * Columns starting with this prefix will be considered as grain references. The prefix is then followed by the value of `separator` parameter. Given the reference prefix is `gr` and separator is `__`, the columns with name like `gr__customer_name` will be considered as grain references.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    grainReferencePrefix?: string;
    /**
     * Columns starting with this prefix will be considered as denormalization references. The prefix is then followed by the value of `separator` parameter. Given the denormalization reference prefix is `dr` and separator is `__`, the columns with name like `dr__customer_name` will be considered as denormalization references.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    denormPrefix?: string;
    /**
     * Column serving as workspace data filter. No labels are auto generated for such columns.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    wdfPrefix?: string;
}
/**
 * A grain identifier.
 * @export
 * @interface GrainIdentifier
 */
export interface GrainIdentifier {
    /**
     * Grain ID.
     * @type {string}
     * @memberof GrainIdentifier
     */
    id: string;
    /**
     * A type of the grain.
     * @type {string}
     * @memberof GrainIdentifier
     */
    type: GrainIdentifierTypeEnum;
}

export const GrainIdentifierTypeEnum = {
    ATTRIBUTE: "attribute",
    DATASET: "dataset",
} as const;

export type GrainIdentifierTypeEnum = typeof GrainIdentifierTypeEnum[keyof typeof GrainIdentifierTypeEnum];

/**
 * A date dataset granularities title formatting rules.
 * @export
 * @interface GranularitiesFormatting
 */
export interface GranularitiesFormatting {
    /**
     * Title base is used as a token in title pattern. If left empty, it is replaced by date dataset title.
     * @type {string}
     * @memberof GranularitiesFormatting
     */
    titleBase: string;
    /**
     * This pattern is used to generate the title of attributes and labels that result from the granularities. There are two tokens available:  * `%titleBase` - represents shared part by all titles, or title of Date Dataset if left empty * `%granularityTitle` - represents `DateGranularity` built-in title
     * @type {string}
     * @memberof GranularitiesFormatting
     */
    titlePattern: string;
}
/**
 * JSON:API representation of analyticalDashboard entity.
 * @export
 * @interface JsonApiAnalyticalDashboardIn
 */
export interface JsonApiAnalyticalDashboardIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardIn
     */
    type: JsonApiAnalyticalDashboardInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardIn
     */
    id: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardPatchAttributes}
     * @memberof JsonApiAnalyticalDashboardIn
     */
    attributes?: JsonApiAnalyticalDashboardPatchAttributes;
}

export const JsonApiAnalyticalDashboardInTypeEnum = {
    ANALYTICAL_DASHBOARD: "analyticalDashboard",
} as const;

export type JsonApiAnalyticalDashboardInTypeEnum =
    typeof JsonApiAnalyticalDashboardInTypeEnum[keyof typeof JsonApiAnalyticalDashboardInTypeEnum];

/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardInDocument
 */
export interface JsonApiAnalyticalDashboardInDocument {
    /**
     *
     * @type {JsonApiAnalyticalDashboardIn}
     * @memberof JsonApiAnalyticalDashboardInDocument
     */
    data: JsonApiAnalyticalDashboardIn;
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiAnalyticalDashboardLinkage
 */
export interface JsonApiAnalyticalDashboardLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardLinkage
     */
    type: JsonApiAnalyticalDashboardLinkageTypeEnum;
}

export const JsonApiAnalyticalDashboardLinkageTypeEnum = {
    ANALYTICAL_DASHBOARD: "analyticalDashboard",
} as const;

export type JsonApiAnalyticalDashboardLinkageTypeEnum =
    typeof JsonApiAnalyticalDashboardLinkageTypeEnum[keyof typeof JsonApiAnalyticalDashboardLinkageTypeEnum];

/**
 * JSON:API representation of analyticalDashboard entity.
 * @export
 * @interface JsonApiAnalyticalDashboardOut
 */
export interface JsonApiAnalyticalDashboardOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardOut
     */
    type: JsonApiAnalyticalDashboardOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardOut
     */
    id: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardPatchAttributes}
     * @memberof JsonApiAnalyticalDashboardOut
     */
    attributes?: JsonApiAnalyticalDashboardPatchAttributes;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationships}
     * @memberof JsonApiAnalyticalDashboardOut
     */
    relationships?: JsonApiAnalyticalDashboardOutRelationships;
}

export const JsonApiAnalyticalDashboardOutTypeEnum = {
    ANALYTICAL_DASHBOARD: "analyticalDashboard",
} as const;

export type JsonApiAnalyticalDashboardOutTypeEnum =
    typeof JsonApiAnalyticalDashboardOutTypeEnum[keyof typeof JsonApiAnalyticalDashboardOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutDocument
 */
export interface JsonApiAnalyticalDashboardOutDocument {
    /**
     *
     * @type {JsonApiAnalyticalDashboardOut}
     * @memberof JsonApiAnalyticalDashboardOutDocument
     */
    data: JsonApiAnalyticalDashboardOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiAnalyticalDashboardOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAnalyticalDashboardOutIncludes>}
     * @memberof JsonApiAnalyticalDashboardOutDocument
     */
    included?: Array<JsonApiAnalyticalDashboardOutIncludes>;
}
/**
 * @type JsonApiAnalyticalDashboardOutIncludes
 * @export
 */
export type JsonApiAnalyticalDashboardOutIncludes =
    | JsonApiAnalyticalDashboardOutWithLinks
    | JsonApiDashboardPluginOutWithLinks
    | JsonApiDatasetOutWithLinks
    | JsonApiFilterContextOutWithLinks
    | JsonApiLabelOutWithLinks
    | JsonApiMetricOutWithLinks
    | JsonApiVisualizationObjectOutWithLinks;

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiAnalyticalDashboardOutList
 */
export interface JsonApiAnalyticalDashboardOutList {
    /**
     *
     * @type {Array<JsonApiAnalyticalDashboardOutWithLinks>}
     * @memberof JsonApiAnalyticalDashboardOutList
     */
    data: Array<JsonApiAnalyticalDashboardOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiAnalyticalDashboardOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAnalyticalDashboardOutIncludes>}
     * @memberof JsonApiAnalyticalDashboardOutList
     */
    included?: Array<JsonApiAnalyticalDashboardOutIncludes>;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutRelationships
 */
export interface JsonApiAnalyticalDashboardOutRelationships {
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsVisualizationObjects}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    visualizationObjects?: JsonApiAnalyticalDashboardOutRelationshipsVisualizationObjects;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsAnalyticalDashboards}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    analyticalDashboards?: JsonApiAnalyticalDashboardOutRelationshipsAnalyticalDashboards;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsLabels}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    labels?: JsonApiAnalyticalDashboardOutRelationshipsLabels;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsMetrics}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    metrics?: JsonApiAnalyticalDashboardOutRelationshipsMetrics;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsDatasets}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    datasets?: JsonApiAnalyticalDashboardOutRelationshipsDatasets;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsFilterContexts}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    filterContexts?: JsonApiAnalyticalDashboardOutRelationshipsFilterContexts;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsDashboardPlugins}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    dashboardPlugins?: JsonApiAnalyticalDashboardOutRelationshipsDashboardPlugins;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutRelationshipsAnalyticalDashboards
 */
export interface JsonApiAnalyticalDashboardOutRelationshipsAnalyticalDashboards {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiAnalyticalDashboardLinkage>}
     * @memberof JsonApiAnalyticalDashboardOutRelationshipsAnalyticalDashboards
     */
    data: Array<JsonApiAnalyticalDashboardLinkage>;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutRelationshipsDashboardPlugins
 */
export interface JsonApiAnalyticalDashboardOutRelationshipsDashboardPlugins {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiDashboardPluginLinkage>}
     * @memberof JsonApiAnalyticalDashboardOutRelationshipsDashboardPlugins
     */
    data: Array<JsonApiDashboardPluginLinkage>;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutRelationshipsDatasets
 */
export interface JsonApiAnalyticalDashboardOutRelationshipsDatasets {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiDatasetLinkage>}
     * @memberof JsonApiAnalyticalDashboardOutRelationshipsDatasets
     */
    data: Array<JsonApiDatasetLinkage>;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutRelationshipsFilterContexts
 */
export interface JsonApiAnalyticalDashboardOutRelationshipsFilterContexts {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiFilterContextLinkage>}
     * @memberof JsonApiAnalyticalDashboardOutRelationshipsFilterContexts
     */
    data: Array<JsonApiFilterContextLinkage>;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutRelationshipsLabels
 */
export interface JsonApiAnalyticalDashboardOutRelationshipsLabels {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiLabelLinkage>}
     * @memberof JsonApiAnalyticalDashboardOutRelationshipsLabels
     */
    data: Array<JsonApiLabelLinkage>;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutRelationshipsMetrics
 */
export interface JsonApiAnalyticalDashboardOutRelationshipsMetrics {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiMetricLinkage>}
     * @memberof JsonApiAnalyticalDashboardOutRelationshipsMetrics
     */
    data: Array<JsonApiMetricLinkage>;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutRelationshipsVisualizationObjects
 */
export interface JsonApiAnalyticalDashboardOutRelationshipsVisualizationObjects {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiVisualizationObjectLinkage>}
     * @memberof JsonApiAnalyticalDashboardOutRelationshipsVisualizationObjects
     */
    data: Array<JsonApiVisualizationObjectLinkage>;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutWithLinks
 */
export interface JsonApiAnalyticalDashboardOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardOutWithLinks
     */
    type: JsonApiAnalyticalDashboardOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardPatchAttributes}
     * @memberof JsonApiAnalyticalDashboardOutWithLinks
     */
    attributes?: JsonApiAnalyticalDashboardPatchAttributes;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationships}
     * @memberof JsonApiAnalyticalDashboardOutWithLinks
     */
    relationships?: JsonApiAnalyticalDashboardOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiAnalyticalDashboardOutWithLinks
     */
    links?: ObjectLinks;
}

export const JsonApiAnalyticalDashboardOutWithLinksTypeEnum = {
    ANALYTICAL_DASHBOARD: "analyticalDashboard",
} as const;

export type JsonApiAnalyticalDashboardOutWithLinksTypeEnum =
    typeof JsonApiAnalyticalDashboardOutWithLinksTypeEnum[keyof typeof JsonApiAnalyticalDashboardOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching analyticalDashboard entity.
 * @export
 * @interface JsonApiAnalyticalDashboardPatch
 */
export interface JsonApiAnalyticalDashboardPatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardPatch
     */
    type: JsonApiAnalyticalDashboardPatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardPatch
     */
    id: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardPatchAttributes}
     * @memberof JsonApiAnalyticalDashboardPatch
     */
    attributes?: JsonApiAnalyticalDashboardPatchAttributes;
}

export const JsonApiAnalyticalDashboardPatchTypeEnum = {
    ANALYTICAL_DASHBOARD: "analyticalDashboard",
} as const;

export type JsonApiAnalyticalDashboardPatchTypeEnum =
    typeof JsonApiAnalyticalDashboardPatchTypeEnum[keyof typeof JsonApiAnalyticalDashboardPatchTypeEnum];

/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardPatchAttributes
 */
export interface JsonApiAnalyticalDashboardPatchAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardPatchAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardPatchAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiAnalyticalDashboardPatchAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiAnalyticalDashboardPatchAttributes
     */
    areRelationsValid?: boolean;
    /**
     * Free-form JSON content.
     * @type {object}
     * @memberof JsonApiAnalyticalDashboardPatchAttributes
     */
    content?: object;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardPatchDocument
 */
export interface JsonApiAnalyticalDashboardPatchDocument {
    /**
     *
     * @type {JsonApiAnalyticalDashboardPatch}
     * @memberof JsonApiAnalyticalDashboardPatchDocument
     */
    data: JsonApiAnalyticalDashboardPatch;
}
/**
 * JSON:API representation of apiToken entity.
 * @export
 * @interface JsonApiApiTokenIn
 */
export interface JsonApiApiTokenIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiApiTokenIn
     */
    type: JsonApiApiTokenInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiApiTokenIn
     */
    id: string;
}

export const JsonApiApiTokenInTypeEnum = {
    API_TOKEN: "apiToken",
} as const;

export type JsonApiApiTokenInTypeEnum =
    typeof JsonApiApiTokenInTypeEnum[keyof typeof JsonApiApiTokenInTypeEnum];

/**
 *
 * @export
 * @interface JsonApiApiTokenInDocument
 */
export interface JsonApiApiTokenInDocument {
    /**
     *
     * @type {JsonApiApiTokenIn}
     * @memberof JsonApiApiTokenInDocument
     */
    data: JsonApiApiTokenIn;
}
/**
 * JSON:API representation of apiToken entity.
 * @export
 * @interface JsonApiApiTokenOut
 */
export interface JsonApiApiTokenOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiApiTokenOut
     */
    type: JsonApiApiTokenOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiApiTokenOut
     */
    id: string;
    /**
     *
     * @type {JsonApiApiTokenOutAttributes}
     * @memberof JsonApiApiTokenOut
     */
    attributes?: JsonApiApiTokenOutAttributes;
}

export const JsonApiApiTokenOutTypeEnum = {
    API_TOKEN: "apiToken",
} as const;

export type JsonApiApiTokenOutTypeEnum =
    typeof JsonApiApiTokenOutTypeEnum[keyof typeof JsonApiApiTokenOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiApiTokenOutAttributes
 */
export interface JsonApiApiTokenOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiApiTokenOutAttributes
     */
    bearerToken?: string;
}
/**
 *
 * @export
 * @interface JsonApiApiTokenOutDocument
 */
export interface JsonApiApiTokenOutDocument {
    /**
     *
     * @type {JsonApiApiTokenOut}
     * @memberof JsonApiApiTokenOutDocument
     */
    data: JsonApiApiTokenOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiApiTokenOutDocument
     */
    links?: ObjectLinks;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiApiTokenOutList
 */
export interface JsonApiApiTokenOutList {
    /**
     *
     * @type {Array<JsonApiApiTokenOutWithLinks>}
     * @memberof JsonApiApiTokenOutList
     */
    data: Array<JsonApiApiTokenOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiApiTokenOutList
     */
    links?: ListLinks;
}
/**
 *
 * @export
 * @interface JsonApiApiTokenOutWithLinks
 */
export interface JsonApiApiTokenOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiApiTokenOutWithLinks
     */
    type: JsonApiApiTokenOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiApiTokenOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiApiTokenOutAttributes}
     * @memberof JsonApiApiTokenOutWithLinks
     */
    attributes?: JsonApiApiTokenOutAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiApiTokenOutWithLinks
     */
    links?: ObjectLinks;
}

export const JsonApiApiTokenOutWithLinksTypeEnum = {
    API_TOKEN: "apiToken",
} as const;

export type JsonApiApiTokenOutWithLinksTypeEnum =
    typeof JsonApiApiTokenOutWithLinksTypeEnum[keyof typeof JsonApiApiTokenOutWithLinksTypeEnum];

/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiAttributeLinkage
 */
export interface JsonApiAttributeLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeLinkage
     */
    type: JsonApiAttributeLinkageTypeEnum;
}

export const JsonApiAttributeLinkageTypeEnum = {
    ATTRIBUTE: "attribute",
} as const;

export type JsonApiAttributeLinkageTypeEnum =
    typeof JsonApiAttributeLinkageTypeEnum[keyof typeof JsonApiAttributeLinkageTypeEnum];

/**
 * JSON:API representation of attribute entity.
 * @export
 * @interface JsonApiAttributeOut
 */
export interface JsonApiAttributeOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAttributeOut
     */
    type: JsonApiAttributeOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAttributeOut
     */
    id: string;
    /**
     *
     * @type {JsonApiAttributeOutAttributes}
     * @memberof JsonApiAttributeOut
     */
    attributes?: JsonApiAttributeOutAttributes;
    /**
     *
     * @type {JsonApiAttributeOutRelationships}
     * @memberof JsonApiAttributeOut
     */
    relationships?: JsonApiAttributeOutRelationships;
}

export const JsonApiAttributeOutTypeEnum = {
    ATTRIBUTE: "attribute",
} as const;

export type JsonApiAttributeOutTypeEnum =
    typeof JsonApiAttributeOutTypeEnum[keyof typeof JsonApiAttributeOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiAttributeOutAttributes
 */
export interface JsonApiAttributeOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeOutAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeOutAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiAttributeOutAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeOutAttributes
     */
    granularity?: JsonApiAttributeOutAttributesGranularityEnum;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiAttributeOutAttributes
     */
    areRelationsValid?: boolean;
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeOutAttributes
     */
    sortColumn?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeOutAttributes
     */
    sortDirection?: JsonApiAttributeOutAttributesSortDirectionEnum;
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeOutAttributes
     */
    sourceColumn?: string;
}

export const JsonApiAttributeOutAttributesGranularityEnum = {
    MINUTE: "MINUTE",
    HOUR: "HOUR",
    DAY: "DAY",
    WEEK: "WEEK",
    MONTH: "MONTH",
    QUARTER: "QUARTER",
    YEAR: "YEAR",
    MINUTE_OF_HOUR: "MINUTE_OF_HOUR",
    HOUR_OF_DAY: "HOUR_OF_DAY",
    DAY_OF_WEEK: "DAY_OF_WEEK",
    DAY_OF_MONTH: "DAY_OF_MONTH",
    DAY_OF_YEAR: "DAY_OF_YEAR",
    WEEK_OF_YEAR: "WEEK_OF_YEAR",
    MONTH_OF_YEAR: "MONTH_OF_YEAR",
    QUARTER_OF_YEAR: "QUARTER_OF_YEAR",
} as const;

export type JsonApiAttributeOutAttributesGranularityEnum =
    typeof JsonApiAttributeOutAttributesGranularityEnum[keyof typeof JsonApiAttributeOutAttributesGranularityEnum];
export const JsonApiAttributeOutAttributesSortDirectionEnum = {
    ASC: "ASC",
    DESC: "DESC",
} as const;

export type JsonApiAttributeOutAttributesSortDirectionEnum =
    typeof JsonApiAttributeOutAttributesSortDirectionEnum[keyof typeof JsonApiAttributeOutAttributesSortDirectionEnum];

/**
 *
 * @export
 * @interface JsonApiAttributeOutDocument
 */
export interface JsonApiAttributeOutDocument {
    /**
     *
     * @type {JsonApiAttributeOut}
     * @memberof JsonApiAttributeOutDocument
     */
    data: JsonApiAttributeOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiAttributeOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAttributeOutIncludes>}
     * @memberof JsonApiAttributeOutDocument
     */
    included?: Array<JsonApiAttributeOutIncludes>;
}
/**
 * @type JsonApiAttributeOutIncludes
 * @export
 */
export type JsonApiAttributeOutIncludes = JsonApiDatasetOutWithLinks | JsonApiLabelOutWithLinks;

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiAttributeOutList
 */
export interface JsonApiAttributeOutList {
    /**
     *
     * @type {Array<JsonApiAttributeOutWithLinks>}
     * @memberof JsonApiAttributeOutList
     */
    data: Array<JsonApiAttributeOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiAttributeOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAttributeOutIncludes>}
     * @memberof JsonApiAttributeOutList
     */
    included?: Array<JsonApiAttributeOutIncludes>;
}
/**
 *
 * @export
 * @interface JsonApiAttributeOutRelationships
 */
export interface JsonApiAttributeOutRelationships {
    /**
     *
     * @type {JsonApiAttributeOutRelationshipsDataset}
     * @memberof JsonApiAttributeOutRelationships
     */
    dataset?: JsonApiAttributeOutRelationshipsDataset;
    /**
     *
     * @type {JsonApiAttributeOutRelationshipsDefaultView}
     * @memberof JsonApiAttributeOutRelationships
     */
    defaultView?: JsonApiAttributeOutRelationshipsDefaultView;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsLabels}
     * @memberof JsonApiAttributeOutRelationships
     */
    labels?: JsonApiAnalyticalDashboardOutRelationshipsLabels;
}
/**
 *
 * @export
 * @interface JsonApiAttributeOutRelationshipsDataset
 */
export interface JsonApiAttributeOutRelationshipsDataset {
    /**
     *
     * @type {JsonApiDatasetToOneLinkage}
     * @memberof JsonApiAttributeOutRelationshipsDataset
     */
    data: JsonApiDatasetToOneLinkage | null;
}
/**
 *
 * @export
 * @interface JsonApiAttributeOutRelationshipsDefaultView
 */
export interface JsonApiAttributeOutRelationshipsDefaultView {
    /**
     *
     * @type {JsonApiLabelToOneLinkage}
     * @memberof JsonApiAttributeOutRelationshipsDefaultView
     */
    data: JsonApiLabelToOneLinkage | null;
}
/**
 *
 * @export
 * @interface JsonApiAttributeOutWithLinks
 */
export interface JsonApiAttributeOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAttributeOutWithLinks
     */
    type: JsonApiAttributeOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAttributeOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiAttributeOutAttributes}
     * @memberof JsonApiAttributeOutWithLinks
     */
    attributes?: JsonApiAttributeOutAttributes;
    /**
     *
     * @type {JsonApiAttributeOutRelationships}
     * @memberof JsonApiAttributeOutWithLinks
     */
    relationships?: JsonApiAttributeOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiAttributeOutWithLinks
     */
    links?: ObjectLinks;
}

export const JsonApiAttributeOutWithLinksTypeEnum = {
    ATTRIBUTE: "attribute",
} as const;

export type JsonApiAttributeOutWithLinksTypeEnum =
    typeof JsonApiAttributeOutWithLinksTypeEnum[keyof typeof JsonApiAttributeOutWithLinksTypeEnum];

/**
 * @type JsonApiAttributeToOneLinkage
 * References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
 * @export
 */
export type JsonApiAttributeToOneLinkage = JsonApiAttributeLinkage;

/**
 * JSON:API representation of colorPalette entity.
 * @export
 * @interface JsonApiColorPaletteIn
 */
export interface JsonApiColorPaletteIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiColorPaletteIn
     */
    type: JsonApiColorPaletteInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiColorPaletteIn
     */
    id: string;
    /**
     *
     * @type {JsonApiColorPaletteInAttributes}
     * @memberof JsonApiColorPaletteIn
     */
    attributes: JsonApiColorPaletteInAttributes;
}

export const JsonApiColorPaletteInTypeEnum = {
    COLOR_PALETTE: "colorPalette",
} as const;

export type JsonApiColorPaletteInTypeEnum =
    typeof JsonApiColorPaletteInTypeEnum[keyof typeof JsonApiColorPaletteInTypeEnum];

/**
 *
 * @export
 * @interface JsonApiColorPaletteInAttributes
 */
export interface JsonApiColorPaletteInAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiColorPaletteInAttributes
     */
    name: string;
    /**
     *
     * @type {object}
     * @memberof JsonApiColorPaletteInAttributes
     */
    content: object;
}
/**
 *
 * @export
 * @interface JsonApiColorPaletteInDocument
 */
export interface JsonApiColorPaletteInDocument {
    /**
     *
     * @type {JsonApiColorPaletteIn}
     * @memberof JsonApiColorPaletteInDocument
     */
    data: JsonApiColorPaletteIn;
}
/**
 * JSON:API representation of colorPalette entity.
 * @export
 * @interface JsonApiColorPaletteOut
 */
export interface JsonApiColorPaletteOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiColorPaletteOut
     */
    type: JsonApiColorPaletteOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiColorPaletteOut
     */
    id: string;
    /**
     *
     * @type {JsonApiColorPaletteInAttributes}
     * @memberof JsonApiColorPaletteOut
     */
    attributes: JsonApiColorPaletteInAttributes;
}

export const JsonApiColorPaletteOutTypeEnum = {
    COLOR_PALETTE: "colorPalette",
} as const;

export type JsonApiColorPaletteOutTypeEnum =
    typeof JsonApiColorPaletteOutTypeEnum[keyof typeof JsonApiColorPaletteOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiColorPaletteOutDocument
 */
export interface JsonApiColorPaletteOutDocument {
    /**
     *
     * @type {JsonApiColorPaletteOut}
     * @memberof JsonApiColorPaletteOutDocument
     */
    data: JsonApiColorPaletteOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiColorPaletteOutDocument
     */
    links?: ObjectLinks;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiColorPaletteOutList
 */
export interface JsonApiColorPaletteOutList {
    /**
     *
     * @type {Array<JsonApiColorPaletteOutWithLinks>}
     * @memberof JsonApiColorPaletteOutList
     */
    data: Array<JsonApiColorPaletteOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiColorPaletteOutList
     */
    links?: ListLinks;
}
/**
 *
 * @export
 * @interface JsonApiColorPaletteOutWithLinks
 */
export interface JsonApiColorPaletteOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiColorPaletteOutWithLinks
     */
    type: JsonApiColorPaletteOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiColorPaletteOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiColorPaletteInAttributes}
     * @memberof JsonApiColorPaletteOutWithLinks
     */
    attributes: JsonApiColorPaletteInAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiColorPaletteOutWithLinks
     */
    links?: ObjectLinks;
}

export const JsonApiColorPaletteOutWithLinksTypeEnum = {
    COLOR_PALETTE: "colorPalette",
} as const;

export type JsonApiColorPaletteOutWithLinksTypeEnum =
    typeof JsonApiColorPaletteOutWithLinksTypeEnum[keyof typeof JsonApiColorPaletteOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching colorPalette entity.
 * @export
 * @interface JsonApiColorPalettePatch
 */
export interface JsonApiColorPalettePatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiColorPalettePatch
     */
    type: JsonApiColorPalettePatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiColorPalettePatch
     */
    id: string;
    /**
     *
     * @type {JsonApiColorPalettePatchAttributes}
     * @memberof JsonApiColorPalettePatch
     */
    attributes: JsonApiColorPalettePatchAttributes;
}

export const JsonApiColorPalettePatchTypeEnum = {
    COLOR_PALETTE: "colorPalette",
} as const;

export type JsonApiColorPalettePatchTypeEnum =
    typeof JsonApiColorPalettePatchTypeEnum[keyof typeof JsonApiColorPalettePatchTypeEnum];

/**
 *
 * @export
 * @interface JsonApiColorPalettePatchAttributes
 */
export interface JsonApiColorPalettePatchAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiColorPalettePatchAttributes
     */
    name?: string;
    /**
     *
     * @type {object}
     * @memberof JsonApiColorPalettePatchAttributes
     */
    content?: object;
}
/**
 *
 * @export
 * @interface JsonApiColorPalettePatchDocument
 */
export interface JsonApiColorPalettePatchDocument {
    /**
     *
     * @type {JsonApiColorPalettePatch}
     * @memberof JsonApiColorPalettePatchDocument
     */
    data: JsonApiColorPalettePatch;
}
/**
 * JSON:API representation of cookieSecurityConfiguration entity.
 * @export
 * @interface JsonApiCookieSecurityConfigurationIn
 */
export interface JsonApiCookieSecurityConfigurationIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiCookieSecurityConfigurationIn
     */
    type: JsonApiCookieSecurityConfigurationInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiCookieSecurityConfigurationIn
     */
    id: string;
    /**
     *
     * @type {JsonApiCookieSecurityConfigurationOutAttributes}
     * @memberof JsonApiCookieSecurityConfigurationIn
     */
    attributes?: JsonApiCookieSecurityConfigurationOutAttributes;
}

export const JsonApiCookieSecurityConfigurationInTypeEnum = {
    COOKIE_SECURITY_CONFIGURATION: "cookieSecurityConfiguration",
} as const;

export type JsonApiCookieSecurityConfigurationInTypeEnum =
    typeof JsonApiCookieSecurityConfigurationInTypeEnum[keyof typeof JsonApiCookieSecurityConfigurationInTypeEnum];

/**
 *
 * @export
 * @interface JsonApiCookieSecurityConfigurationInDocument
 */
export interface JsonApiCookieSecurityConfigurationInDocument {
    /**
     *
     * @type {JsonApiCookieSecurityConfigurationIn}
     * @memberof JsonApiCookieSecurityConfigurationInDocument
     */
    data: JsonApiCookieSecurityConfigurationIn;
}
/**
 * JSON:API representation of cookieSecurityConfiguration entity.
 * @export
 * @interface JsonApiCookieSecurityConfigurationOut
 */
export interface JsonApiCookieSecurityConfigurationOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiCookieSecurityConfigurationOut
     */
    type: JsonApiCookieSecurityConfigurationOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiCookieSecurityConfigurationOut
     */
    id: string;
    /**
     *
     * @type {JsonApiCookieSecurityConfigurationOutAttributes}
     * @memberof JsonApiCookieSecurityConfigurationOut
     */
    attributes?: JsonApiCookieSecurityConfigurationOutAttributes;
}

export const JsonApiCookieSecurityConfigurationOutTypeEnum = {
    COOKIE_SECURITY_CONFIGURATION: "cookieSecurityConfiguration",
} as const;

export type JsonApiCookieSecurityConfigurationOutTypeEnum =
    typeof JsonApiCookieSecurityConfigurationOutTypeEnum[keyof typeof JsonApiCookieSecurityConfigurationOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiCookieSecurityConfigurationOutAttributes
 */
export interface JsonApiCookieSecurityConfigurationOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiCookieSecurityConfigurationOutAttributes
     */
    lastRotation?: string;
    /**
     * Length of interval between automatic rotations expressed in format of ISO 8601 duration
     * @type {string}
     * @memberof JsonApiCookieSecurityConfigurationOutAttributes
     */
    rotationInterval?: string;
}
/**
 *
 * @export
 * @interface JsonApiCookieSecurityConfigurationOutDocument
 */
export interface JsonApiCookieSecurityConfigurationOutDocument {
    /**
     *
     * @type {JsonApiCookieSecurityConfigurationOut}
     * @memberof JsonApiCookieSecurityConfigurationOutDocument
     */
    data: JsonApiCookieSecurityConfigurationOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiCookieSecurityConfigurationOutDocument
     */
    links?: ObjectLinks;
}
/**
 * JSON:API representation of patching cookieSecurityConfiguration entity.
 * @export
 * @interface JsonApiCookieSecurityConfigurationPatch
 */
export interface JsonApiCookieSecurityConfigurationPatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiCookieSecurityConfigurationPatch
     */
    type: JsonApiCookieSecurityConfigurationPatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiCookieSecurityConfigurationPatch
     */
    id: string;
    /**
     *
     * @type {JsonApiCookieSecurityConfigurationOutAttributes}
     * @memberof JsonApiCookieSecurityConfigurationPatch
     */
    attributes?: JsonApiCookieSecurityConfigurationOutAttributes;
}

export const JsonApiCookieSecurityConfigurationPatchTypeEnum = {
    COOKIE_SECURITY_CONFIGURATION: "cookieSecurityConfiguration",
} as const;

export type JsonApiCookieSecurityConfigurationPatchTypeEnum =
    typeof JsonApiCookieSecurityConfigurationPatchTypeEnum[keyof typeof JsonApiCookieSecurityConfigurationPatchTypeEnum];

/**
 *
 * @export
 * @interface JsonApiCookieSecurityConfigurationPatchDocument
 */
export interface JsonApiCookieSecurityConfigurationPatchDocument {
    /**
     *
     * @type {JsonApiCookieSecurityConfigurationPatch}
     * @memberof JsonApiCookieSecurityConfigurationPatchDocument
     */
    data: JsonApiCookieSecurityConfigurationPatch;
}
/**
 * JSON:API representation of cspDirective entity.
 * @export
 * @interface JsonApiCspDirectiveIn
 */
export interface JsonApiCspDirectiveIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiCspDirectiveIn
     */
    type: JsonApiCspDirectiveInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiCspDirectiveIn
     */
    id: string;
    /**
     *
     * @type {JsonApiCspDirectiveInAttributes}
     * @memberof JsonApiCspDirectiveIn
     */
    attributes: JsonApiCspDirectiveInAttributes;
}

export const JsonApiCspDirectiveInTypeEnum = {
    CSP_DIRECTIVE: "cspDirective",
} as const;

export type JsonApiCspDirectiveInTypeEnum =
    typeof JsonApiCspDirectiveInTypeEnum[keyof typeof JsonApiCspDirectiveInTypeEnum];

/**
 *
 * @export
 * @interface JsonApiCspDirectiveInAttributes
 */
export interface JsonApiCspDirectiveInAttributes {
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiCspDirectiveInAttributes
     */
    sources: Array<string>;
}
/**
 *
 * @export
 * @interface JsonApiCspDirectiveInDocument
 */
export interface JsonApiCspDirectiveInDocument {
    /**
     *
     * @type {JsonApiCspDirectiveIn}
     * @memberof JsonApiCspDirectiveInDocument
     */
    data: JsonApiCspDirectiveIn;
}
/**
 * JSON:API representation of cspDirective entity.
 * @export
 * @interface JsonApiCspDirectiveOut
 */
export interface JsonApiCspDirectiveOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiCspDirectiveOut
     */
    type: JsonApiCspDirectiveOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiCspDirectiveOut
     */
    id: string;
    /**
     *
     * @type {JsonApiCspDirectiveInAttributes}
     * @memberof JsonApiCspDirectiveOut
     */
    attributes: JsonApiCspDirectiveInAttributes;
}

export const JsonApiCspDirectiveOutTypeEnum = {
    CSP_DIRECTIVE: "cspDirective",
} as const;

export type JsonApiCspDirectiveOutTypeEnum =
    typeof JsonApiCspDirectiveOutTypeEnum[keyof typeof JsonApiCspDirectiveOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiCspDirectiveOutDocument
 */
export interface JsonApiCspDirectiveOutDocument {
    /**
     *
     * @type {JsonApiCspDirectiveOut}
     * @memberof JsonApiCspDirectiveOutDocument
     */
    data: JsonApiCspDirectiveOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiCspDirectiveOutDocument
     */
    links?: ObjectLinks;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiCspDirectiveOutList
 */
export interface JsonApiCspDirectiveOutList {
    /**
     *
     * @type {Array<JsonApiCspDirectiveOutWithLinks>}
     * @memberof JsonApiCspDirectiveOutList
     */
    data: Array<JsonApiCspDirectiveOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiCspDirectiveOutList
     */
    links?: ListLinks;
}
/**
 *
 * @export
 * @interface JsonApiCspDirectiveOutWithLinks
 */
export interface JsonApiCspDirectiveOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiCspDirectiveOutWithLinks
     */
    type: JsonApiCspDirectiveOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiCspDirectiveOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiCspDirectiveInAttributes}
     * @memberof JsonApiCspDirectiveOutWithLinks
     */
    attributes: JsonApiCspDirectiveInAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiCspDirectiveOutWithLinks
     */
    links?: ObjectLinks;
}

export const JsonApiCspDirectiveOutWithLinksTypeEnum = {
    CSP_DIRECTIVE: "cspDirective",
} as const;

export type JsonApiCspDirectiveOutWithLinksTypeEnum =
    typeof JsonApiCspDirectiveOutWithLinksTypeEnum[keyof typeof JsonApiCspDirectiveOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching cspDirective entity.
 * @export
 * @interface JsonApiCspDirectivePatch
 */
export interface JsonApiCspDirectivePatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiCspDirectivePatch
     */
    type: JsonApiCspDirectivePatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiCspDirectivePatch
     */
    id: string;
    /**
     *
     * @type {JsonApiCspDirectivePatchAttributes}
     * @memberof JsonApiCspDirectivePatch
     */
    attributes: JsonApiCspDirectivePatchAttributes;
}

export const JsonApiCspDirectivePatchTypeEnum = {
    CSP_DIRECTIVE: "cspDirective",
} as const;

export type JsonApiCspDirectivePatchTypeEnum =
    typeof JsonApiCspDirectivePatchTypeEnum[keyof typeof JsonApiCspDirectivePatchTypeEnum];

/**
 *
 * @export
 * @interface JsonApiCspDirectivePatchAttributes
 */
export interface JsonApiCspDirectivePatchAttributes {
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiCspDirectivePatchAttributes
     */
    sources?: Array<string>;
}
/**
 *
 * @export
 * @interface JsonApiCspDirectivePatchDocument
 */
export interface JsonApiCspDirectivePatchDocument {
    /**
     *
     * @type {JsonApiCspDirectivePatch}
     * @memberof JsonApiCspDirectivePatchDocument
     */
    data: JsonApiCspDirectivePatch;
}
/**
 * JSON:API representation of customApplicationSetting entity.
 * @export
 * @interface JsonApiCustomApplicationSettingIn
 */
export interface JsonApiCustomApplicationSettingIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiCustomApplicationSettingIn
     */
    type: JsonApiCustomApplicationSettingInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiCustomApplicationSettingIn
     */
    id: string;
    /**
     *
     * @type {JsonApiCustomApplicationSettingOutAttributes}
     * @memberof JsonApiCustomApplicationSettingIn
     */
    attributes: JsonApiCustomApplicationSettingOutAttributes;
}

export const JsonApiCustomApplicationSettingInTypeEnum = {
    CUSTOM_APPLICATION_SETTING: "customApplicationSetting",
} as const;

export type JsonApiCustomApplicationSettingInTypeEnum =
    typeof JsonApiCustomApplicationSettingInTypeEnum[keyof typeof JsonApiCustomApplicationSettingInTypeEnum];

/**
 *
 * @export
 * @interface JsonApiCustomApplicationSettingInDocument
 */
export interface JsonApiCustomApplicationSettingInDocument {
    /**
     *
     * @type {JsonApiCustomApplicationSettingIn}
     * @memberof JsonApiCustomApplicationSettingInDocument
     */
    data: JsonApiCustomApplicationSettingIn;
}
/**
 * JSON:API representation of customApplicationSetting entity.
 * @export
 * @interface JsonApiCustomApplicationSettingOut
 */
export interface JsonApiCustomApplicationSettingOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiCustomApplicationSettingOut
     */
    type: JsonApiCustomApplicationSettingOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiCustomApplicationSettingOut
     */
    id: string;
    /**
     *
     * @type {JsonApiCustomApplicationSettingOutAttributes}
     * @memberof JsonApiCustomApplicationSettingOut
     */
    attributes: JsonApiCustomApplicationSettingOutAttributes;
}

export const JsonApiCustomApplicationSettingOutTypeEnum = {
    CUSTOM_APPLICATION_SETTING: "customApplicationSetting",
} as const;

export type JsonApiCustomApplicationSettingOutTypeEnum =
    typeof JsonApiCustomApplicationSettingOutTypeEnum[keyof typeof JsonApiCustomApplicationSettingOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiCustomApplicationSettingOutAttributes
 */
export interface JsonApiCustomApplicationSettingOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiCustomApplicationSettingOutAttributes
     */
    applicationName: string;
    /**
     *
     * @type {object}
     * @memberof JsonApiCustomApplicationSettingOutAttributes
     */
    content: object;
}
/**
 *
 * @export
 * @interface JsonApiCustomApplicationSettingOutDocument
 */
export interface JsonApiCustomApplicationSettingOutDocument {
    /**
     *
     * @type {JsonApiCustomApplicationSettingOut}
     * @memberof JsonApiCustomApplicationSettingOutDocument
     */
    data: JsonApiCustomApplicationSettingOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiCustomApplicationSettingOutDocument
     */
    links?: ObjectLinks;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiCustomApplicationSettingOutList
 */
export interface JsonApiCustomApplicationSettingOutList {
    /**
     *
     * @type {Array<JsonApiCustomApplicationSettingOutWithLinks>}
     * @memberof JsonApiCustomApplicationSettingOutList
     */
    data: Array<JsonApiCustomApplicationSettingOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiCustomApplicationSettingOutList
     */
    links?: ListLinks;
}
/**
 *
 * @export
 * @interface JsonApiCustomApplicationSettingOutWithLinks
 */
export interface JsonApiCustomApplicationSettingOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiCustomApplicationSettingOutWithLinks
     */
    type: JsonApiCustomApplicationSettingOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiCustomApplicationSettingOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiCustomApplicationSettingOutAttributes}
     * @memberof JsonApiCustomApplicationSettingOutWithLinks
     */
    attributes: JsonApiCustomApplicationSettingOutAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiCustomApplicationSettingOutWithLinks
     */
    links?: ObjectLinks;
}

export const JsonApiCustomApplicationSettingOutWithLinksTypeEnum = {
    CUSTOM_APPLICATION_SETTING: "customApplicationSetting",
} as const;

export type JsonApiCustomApplicationSettingOutWithLinksTypeEnum =
    typeof JsonApiCustomApplicationSettingOutWithLinksTypeEnum[keyof typeof JsonApiCustomApplicationSettingOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching customApplicationSetting entity.
 * @export
 * @interface JsonApiCustomApplicationSettingPatch
 */
export interface JsonApiCustomApplicationSettingPatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiCustomApplicationSettingPatch
     */
    type: JsonApiCustomApplicationSettingPatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiCustomApplicationSettingPatch
     */
    id: string;
    /**
     *
     * @type {JsonApiCustomApplicationSettingPatchAttributes}
     * @memberof JsonApiCustomApplicationSettingPatch
     */
    attributes: JsonApiCustomApplicationSettingPatchAttributes;
}

export const JsonApiCustomApplicationSettingPatchTypeEnum = {
    CUSTOM_APPLICATION_SETTING: "customApplicationSetting",
} as const;

export type JsonApiCustomApplicationSettingPatchTypeEnum =
    typeof JsonApiCustomApplicationSettingPatchTypeEnum[keyof typeof JsonApiCustomApplicationSettingPatchTypeEnum];

/**
 *
 * @export
 * @interface JsonApiCustomApplicationSettingPatchAttributes
 */
export interface JsonApiCustomApplicationSettingPatchAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiCustomApplicationSettingPatchAttributes
     */
    applicationName?: string;
    /**
     *
     * @type {object}
     * @memberof JsonApiCustomApplicationSettingPatchAttributes
     */
    content?: object;
}
/**
 *
 * @export
 * @interface JsonApiCustomApplicationSettingPatchDocument
 */
export interface JsonApiCustomApplicationSettingPatchDocument {
    /**
     *
     * @type {JsonApiCustomApplicationSettingPatch}
     * @memberof JsonApiCustomApplicationSettingPatchDocument
     */
    data: JsonApiCustomApplicationSettingPatch;
}
/**
 * JSON:API representation of dashboardPlugin entity.
 * @export
 * @interface JsonApiDashboardPluginIn
 */
export interface JsonApiDashboardPluginIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDashboardPluginIn
     */
    type: JsonApiDashboardPluginInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDashboardPluginIn
     */
    id: string;
    /**
     *
     * @type {JsonApiDashboardPluginPatchAttributes}
     * @memberof JsonApiDashboardPluginIn
     */
    attributes?: JsonApiDashboardPluginPatchAttributes;
}

export const JsonApiDashboardPluginInTypeEnum = {
    DASHBOARD_PLUGIN: "dashboardPlugin",
} as const;

export type JsonApiDashboardPluginInTypeEnum =
    typeof JsonApiDashboardPluginInTypeEnum[keyof typeof JsonApiDashboardPluginInTypeEnum];

/**
 *
 * @export
 * @interface JsonApiDashboardPluginInDocument
 */
export interface JsonApiDashboardPluginInDocument {
    /**
     *
     * @type {JsonApiDashboardPluginIn}
     * @memberof JsonApiDashboardPluginInDocument
     */
    data: JsonApiDashboardPluginIn;
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiDashboardPluginLinkage
 */
export interface JsonApiDashboardPluginLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiDashboardPluginLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDashboardPluginLinkage
     */
    type: JsonApiDashboardPluginLinkageTypeEnum;
}

export const JsonApiDashboardPluginLinkageTypeEnum = {
    DASHBOARD_PLUGIN: "dashboardPlugin",
} as const;

export type JsonApiDashboardPluginLinkageTypeEnum =
    typeof JsonApiDashboardPluginLinkageTypeEnum[keyof typeof JsonApiDashboardPluginLinkageTypeEnum];

/**
 * JSON:API representation of dashboardPlugin entity.
 * @export
 * @interface JsonApiDashboardPluginOut
 */
export interface JsonApiDashboardPluginOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDashboardPluginOut
     */
    type: JsonApiDashboardPluginOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDashboardPluginOut
     */
    id: string;
    /**
     *
     * @type {JsonApiDashboardPluginPatchAttributes}
     * @memberof JsonApiDashboardPluginOut
     */
    attributes?: JsonApiDashboardPluginPatchAttributes;
}

export const JsonApiDashboardPluginOutTypeEnum = {
    DASHBOARD_PLUGIN: "dashboardPlugin",
} as const;

export type JsonApiDashboardPluginOutTypeEnum =
    typeof JsonApiDashboardPluginOutTypeEnum[keyof typeof JsonApiDashboardPluginOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiDashboardPluginOutDocument
 */
export interface JsonApiDashboardPluginOutDocument {
    /**
     *
     * @type {JsonApiDashboardPluginOut}
     * @memberof JsonApiDashboardPluginOutDocument
     */
    data: JsonApiDashboardPluginOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDashboardPluginOutDocument
     */
    links?: ObjectLinks;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiDashboardPluginOutList
 */
export interface JsonApiDashboardPluginOutList {
    /**
     *
     * @type {Array<JsonApiDashboardPluginOutWithLinks>}
     * @memberof JsonApiDashboardPluginOutList
     */
    data: Array<JsonApiDashboardPluginOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiDashboardPluginOutList
     */
    links?: ListLinks;
}
/**
 *
 * @export
 * @interface JsonApiDashboardPluginOutWithLinks
 */
export interface JsonApiDashboardPluginOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDashboardPluginOutWithLinks
     */
    type: JsonApiDashboardPluginOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDashboardPluginOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiDashboardPluginPatchAttributes}
     * @memberof JsonApiDashboardPluginOutWithLinks
     */
    attributes?: JsonApiDashboardPluginPatchAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDashboardPluginOutWithLinks
     */
    links?: ObjectLinks;
}

export const JsonApiDashboardPluginOutWithLinksTypeEnum = {
    DASHBOARD_PLUGIN: "dashboardPlugin",
} as const;

export type JsonApiDashboardPluginOutWithLinksTypeEnum =
    typeof JsonApiDashboardPluginOutWithLinksTypeEnum[keyof typeof JsonApiDashboardPluginOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching dashboardPlugin entity.
 * @export
 * @interface JsonApiDashboardPluginPatch
 */
export interface JsonApiDashboardPluginPatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDashboardPluginPatch
     */
    type: JsonApiDashboardPluginPatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDashboardPluginPatch
     */
    id: string;
    /**
     *
     * @type {JsonApiDashboardPluginPatchAttributes}
     * @memberof JsonApiDashboardPluginPatch
     */
    attributes?: JsonApiDashboardPluginPatchAttributes;
}

export const JsonApiDashboardPluginPatchTypeEnum = {
    DASHBOARD_PLUGIN: "dashboardPlugin",
} as const;

export type JsonApiDashboardPluginPatchTypeEnum =
    typeof JsonApiDashboardPluginPatchTypeEnum[keyof typeof JsonApiDashboardPluginPatchTypeEnum];

/**
 *
 * @export
 * @interface JsonApiDashboardPluginPatchAttributes
 */
export interface JsonApiDashboardPluginPatchAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiDashboardPluginPatchAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDashboardPluginPatchAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiDashboardPluginPatchAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiDashboardPluginPatchAttributes
     */
    areRelationsValid?: boolean;
    /**
     * Free-form JSON content.
     * @type {object}
     * @memberof JsonApiDashboardPluginPatchAttributes
     */
    content?: object;
}
/**
 *
 * @export
 * @interface JsonApiDashboardPluginPatchDocument
 */
export interface JsonApiDashboardPluginPatchDocument {
    /**
     *
     * @type {JsonApiDashboardPluginPatch}
     * @memberof JsonApiDashboardPluginPatchDocument
     */
    data: JsonApiDashboardPluginPatch;
}
/**
 * JSON:API representation of dataSourceIdentifier entity.
 * @export
 * @interface JsonApiDataSourceIdentifierOut
 */
export interface JsonApiDataSourceIdentifierOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDataSourceIdentifierOut
     */
    type: JsonApiDataSourceIdentifierOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDataSourceIdentifierOut
     */
    id: string;
    /**
     *
     * @type {JsonApiDataSourceOutMeta}
     * @memberof JsonApiDataSourceIdentifierOut
     */
    meta?: JsonApiDataSourceOutMeta;
    /**
     *
     * @type {JsonApiDataSourceIdentifierOutAttributes}
     * @memberof JsonApiDataSourceIdentifierOut
     */
    attributes: JsonApiDataSourceIdentifierOutAttributes;
}

export const JsonApiDataSourceIdentifierOutTypeEnum = {
    DATA_SOURCE_IDENTIFIER: "dataSourceIdentifier",
} as const;

export type JsonApiDataSourceIdentifierOutTypeEnum =
    typeof JsonApiDataSourceIdentifierOutTypeEnum[keyof typeof JsonApiDataSourceIdentifierOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiDataSourceIdentifierOutAttributes
 */
export interface JsonApiDataSourceIdentifierOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceIdentifierOutAttributes
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceIdentifierOutAttributes
     */
    schema: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceIdentifierOutAttributes
     */
    type: JsonApiDataSourceIdentifierOutAttributesTypeEnum;
}

export const JsonApiDataSourceIdentifierOutAttributesTypeEnum = {
    POSTGRESQL: "POSTGRESQL",
    REDSHIFT: "REDSHIFT",
    VERTICA: "VERTICA",
    SNOWFLAKE: "SNOWFLAKE",
    ADS: "ADS",
    BIGQUERY: "BIGQUERY",
    MSSQL: "MSSQL",
    PRESTO: "PRESTO",
    DREMIO: "DREMIO",
    DRILL: "DRILL",
    GREENPLUM: "GREENPLUM",
    AZURESQL: "AZURESQL",
    SYNAPSESQL: "SYNAPSESQL",
} as const;

export type JsonApiDataSourceIdentifierOutAttributesTypeEnum =
    typeof JsonApiDataSourceIdentifierOutAttributesTypeEnum[keyof typeof JsonApiDataSourceIdentifierOutAttributesTypeEnum];

/**
 *
 * @export
 * @interface JsonApiDataSourceIdentifierOutDocument
 */
export interface JsonApiDataSourceIdentifierOutDocument {
    /**
     *
     * @type {JsonApiDataSourceIdentifierOut}
     * @memberof JsonApiDataSourceIdentifierOutDocument
     */
    data: JsonApiDataSourceIdentifierOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDataSourceIdentifierOutDocument
     */
    links?: ObjectLinks;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiDataSourceIdentifierOutList
 */
export interface JsonApiDataSourceIdentifierOutList {
    /**
     *
     * @type {Array<JsonApiDataSourceIdentifierOutWithLinks>}
     * @memberof JsonApiDataSourceIdentifierOutList
     */
    data: Array<JsonApiDataSourceIdentifierOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiDataSourceIdentifierOutList
     */
    links?: ListLinks;
}
/**
 *
 * @export
 * @interface JsonApiDataSourceIdentifierOutWithLinks
 */
export interface JsonApiDataSourceIdentifierOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDataSourceIdentifierOutWithLinks
     */
    type: JsonApiDataSourceIdentifierOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDataSourceIdentifierOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiDataSourceOutMeta}
     * @memberof JsonApiDataSourceIdentifierOutWithLinks
     */
    meta?: JsonApiDataSourceOutMeta;
    /**
     *
     * @type {JsonApiDataSourceIdentifierOutAttributes}
     * @memberof JsonApiDataSourceIdentifierOutWithLinks
     */
    attributes: JsonApiDataSourceIdentifierOutAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDataSourceIdentifierOutWithLinks
     */
    links?: ObjectLinks;
}

export const JsonApiDataSourceIdentifierOutWithLinksTypeEnum = {
    DATA_SOURCE_IDENTIFIER: "dataSourceIdentifier",
} as const;

export type JsonApiDataSourceIdentifierOutWithLinksTypeEnum =
    typeof JsonApiDataSourceIdentifierOutWithLinksTypeEnum[keyof typeof JsonApiDataSourceIdentifierOutWithLinksTypeEnum];

/**
 * JSON:API representation of dataSource entity.
 * @export
 * @interface JsonApiDataSourceIn
 */
export interface JsonApiDataSourceIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDataSourceIn
     */
    type: JsonApiDataSourceInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDataSourceIn
     */
    id: string;
    /**
     *
     * @type {JsonApiDataSourceInAttributes}
     * @memberof JsonApiDataSourceIn
     */
    attributes: JsonApiDataSourceInAttributes;
}

export const JsonApiDataSourceInTypeEnum = {
    DATA_SOURCE: "dataSource",
} as const;

export type JsonApiDataSourceInTypeEnum =
    typeof JsonApiDataSourceInTypeEnum[keyof typeof JsonApiDataSourceInTypeEnum];

/**
 *
 * @export
 * @interface JsonApiDataSourceInAttributes
 */
export interface JsonApiDataSourceInAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    type: JsonApiDataSourceInAttributesTypeEnum;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    schema: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    password?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    token?: string;
    /**
     * Enable caching of intermediate results.
     * @type {boolean}
     * @memberof JsonApiDataSourceInAttributes
     */
    enableCaching?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiDataSourceInAttributes
     */
    cachePath?: Array<string>;
    /**
     *
     * @type {Array<JsonApiDataSourceInAttributesParameters>}
     * @memberof JsonApiDataSourceInAttributes
     */
    parameters?: Array<JsonApiDataSourceInAttributesParameters>;
}

export const JsonApiDataSourceInAttributesTypeEnum = {
    POSTGRESQL: "POSTGRESQL",
    REDSHIFT: "REDSHIFT",
    VERTICA: "VERTICA",
    SNOWFLAKE: "SNOWFLAKE",
    ADS: "ADS",
    BIGQUERY: "BIGQUERY",
    MSSQL: "MSSQL",
    PRESTO: "PRESTO",
    DREMIO: "DREMIO",
    DRILL: "DRILL",
    GREENPLUM: "GREENPLUM",
    AZURESQL: "AZURESQL",
    SYNAPSESQL: "SYNAPSESQL",
} as const;

export type JsonApiDataSourceInAttributesTypeEnum =
    typeof JsonApiDataSourceInAttributesTypeEnum[keyof typeof JsonApiDataSourceInAttributesTypeEnum];

/**
 *
 * @export
 * @interface JsonApiDataSourceInAttributesParameters
 */
export interface JsonApiDataSourceInAttributesParameters {
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributesParameters
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributesParameters
     */
    value: string;
}
/**
 *
 * @export
 * @interface JsonApiDataSourceInDocument
 */
export interface JsonApiDataSourceInDocument {
    /**
     *
     * @type {JsonApiDataSourceIn}
     * @memberof JsonApiDataSourceInDocument
     */
    data: JsonApiDataSourceIn;
}
/**
 * JSON:API representation of dataSource entity.
 * @export
 * @interface JsonApiDataSourceOut
 */
export interface JsonApiDataSourceOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDataSourceOut
     */
    type: JsonApiDataSourceOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDataSourceOut
     */
    id: string;
    /**
     *
     * @type {JsonApiDataSourceOutMeta}
     * @memberof JsonApiDataSourceOut
     */
    meta?: JsonApiDataSourceOutMeta;
    /**
     *
     * @type {JsonApiDataSourceOutAttributes}
     * @memberof JsonApiDataSourceOut
     */
    attributes: JsonApiDataSourceOutAttributes;
}

export const JsonApiDataSourceOutTypeEnum = {
    DATA_SOURCE: "dataSource",
} as const;

export type JsonApiDataSourceOutTypeEnum =
    typeof JsonApiDataSourceOutTypeEnum[keyof typeof JsonApiDataSourceOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiDataSourceOutAttributes
 */
export interface JsonApiDataSourceOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceOutAttributes
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceOutAttributes
     */
    type: JsonApiDataSourceOutAttributesTypeEnum;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceOutAttributes
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceOutAttributes
     */
    schema: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceOutAttributes
     */
    username?: string;
    /**
     * Enable caching of intermediate results.
     * @type {boolean}
     * @memberof JsonApiDataSourceOutAttributes
     */
    enableCaching?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiDataSourceOutAttributes
     */
    cachePath?: Array<string>;
    /**
     *
     * @type {Array<JsonApiDataSourceInAttributesParameters>}
     * @memberof JsonApiDataSourceOutAttributes
     */
    parameters?: Array<JsonApiDataSourceInAttributesParameters>;
    /**
     *
     * @type {Array<JsonApiDataSourceInAttributesParameters>}
     * @memberof JsonApiDataSourceOutAttributes
     */
    decodedParameters?: Array<JsonApiDataSourceInAttributesParameters>;
}

export const JsonApiDataSourceOutAttributesTypeEnum = {
    POSTGRESQL: "POSTGRESQL",
    REDSHIFT: "REDSHIFT",
    VERTICA: "VERTICA",
    SNOWFLAKE: "SNOWFLAKE",
    ADS: "ADS",
    BIGQUERY: "BIGQUERY",
    MSSQL: "MSSQL",
    PRESTO: "PRESTO",
    DREMIO: "DREMIO",
    DRILL: "DRILL",
    GREENPLUM: "GREENPLUM",
    AZURESQL: "AZURESQL",
    SYNAPSESQL: "SYNAPSESQL",
} as const;

export type JsonApiDataSourceOutAttributesTypeEnum =
    typeof JsonApiDataSourceOutAttributesTypeEnum[keyof typeof JsonApiDataSourceOutAttributesTypeEnum];

/**
 *
 * @export
 * @interface JsonApiDataSourceOutDocument
 */
export interface JsonApiDataSourceOutDocument {
    /**
     *
     * @type {JsonApiDataSourceOut}
     * @memberof JsonApiDataSourceOutDocument
     */
    data: JsonApiDataSourceOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDataSourceOutDocument
     */
    links?: ObjectLinks;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiDataSourceOutList
 */
export interface JsonApiDataSourceOutList {
    /**
     *
     * @type {Array<JsonApiDataSourceOutWithLinks>}
     * @memberof JsonApiDataSourceOutList
     */
    data: Array<JsonApiDataSourceOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiDataSourceOutList
     */
    links?: ListLinks;
}
/**
 *
 * @export
 * @interface JsonApiDataSourceOutMeta
 */
export interface JsonApiDataSourceOutMeta {
    /**
     * List of valid permissions for a logged user.
     * @type {Array<string>}
     * @memberof JsonApiDataSourceOutMeta
     */
    permissions?: Array<JsonApiDataSourceOutMetaPermissionsEnum>;
}

export const JsonApiDataSourceOutMetaPermissionsEnum = {
    MANAGE: "MANAGE",
    USE: "USE",
} as const;

export type JsonApiDataSourceOutMetaPermissionsEnum =
    typeof JsonApiDataSourceOutMetaPermissionsEnum[keyof typeof JsonApiDataSourceOutMetaPermissionsEnum];

/**
 *
 * @export
 * @interface JsonApiDataSourceOutWithLinks
 */
export interface JsonApiDataSourceOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDataSourceOutWithLinks
     */
    type: JsonApiDataSourceOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDataSourceOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiDataSourceOutMeta}
     * @memberof JsonApiDataSourceOutWithLinks
     */
    meta?: JsonApiDataSourceOutMeta;
    /**
     *
     * @type {JsonApiDataSourceOutAttributes}
     * @memberof JsonApiDataSourceOutWithLinks
     */
    attributes: JsonApiDataSourceOutAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDataSourceOutWithLinks
     */
    links?: ObjectLinks;
}

export const JsonApiDataSourceOutWithLinksTypeEnum = {
    DATA_SOURCE: "dataSource",
} as const;

export type JsonApiDataSourceOutWithLinksTypeEnum =
    typeof JsonApiDataSourceOutWithLinksTypeEnum[keyof typeof JsonApiDataSourceOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching dataSource entity.
 * @export
 * @interface JsonApiDataSourcePatch
 */
export interface JsonApiDataSourcePatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDataSourcePatch
     */
    type: JsonApiDataSourcePatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDataSourcePatch
     */
    id: string;
    /**
     *
     * @type {JsonApiDataSourcePatchAttributes}
     * @memberof JsonApiDataSourcePatch
     */
    attributes: JsonApiDataSourcePatchAttributes;
}

export const JsonApiDataSourcePatchTypeEnum = {
    DATA_SOURCE: "dataSource",
} as const;

export type JsonApiDataSourcePatchTypeEnum =
    typeof JsonApiDataSourcePatchTypeEnum[keyof typeof JsonApiDataSourcePatchTypeEnum];

/**
 *
 * @export
 * @interface JsonApiDataSourcePatchAttributes
 */
export interface JsonApiDataSourcePatchAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourcePatchAttributes
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourcePatchAttributes
     */
    type?: JsonApiDataSourcePatchAttributesTypeEnum;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourcePatchAttributes
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourcePatchAttributes
     */
    schema?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourcePatchAttributes
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourcePatchAttributes
     */
    password?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourcePatchAttributes
     */
    token?: string;
    /**
     * Enable caching of intermediate results.
     * @type {boolean}
     * @memberof JsonApiDataSourcePatchAttributes
     */
    enableCaching?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiDataSourcePatchAttributes
     */
    cachePath?: Array<string>;
    /**
     *
     * @type {Array<JsonApiDataSourceInAttributesParameters>}
     * @memberof JsonApiDataSourcePatchAttributes
     */
    parameters?: Array<JsonApiDataSourceInAttributesParameters>;
}

export const JsonApiDataSourcePatchAttributesTypeEnum = {
    POSTGRESQL: "POSTGRESQL",
    REDSHIFT: "REDSHIFT",
    VERTICA: "VERTICA",
    SNOWFLAKE: "SNOWFLAKE",
    ADS: "ADS",
    BIGQUERY: "BIGQUERY",
    MSSQL: "MSSQL",
    PRESTO: "PRESTO",
    DREMIO: "DREMIO",
    DRILL: "DRILL",
    GREENPLUM: "GREENPLUM",
    AZURESQL: "AZURESQL",
    SYNAPSESQL: "SYNAPSESQL",
} as const;

export type JsonApiDataSourcePatchAttributesTypeEnum =
    typeof JsonApiDataSourcePatchAttributesTypeEnum[keyof typeof JsonApiDataSourcePatchAttributesTypeEnum];

/**
 *
 * @export
 * @interface JsonApiDataSourcePatchDocument
 */
export interface JsonApiDataSourcePatchDocument {
    /**
     *
     * @type {JsonApiDataSourcePatch}
     * @memberof JsonApiDataSourcePatchDocument
     */
    data: JsonApiDataSourcePatch;
}
/**
 * Tables in data source
 * @export
 * @interface JsonApiDataSourceTableOut
 */
export interface JsonApiDataSourceTableOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDataSourceTableOut
     */
    type: JsonApiDataSourceTableOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDataSourceTableOut
     */
    id: string;
    /**
     *
     * @type {JsonApiDataSourceTableOutAttributes}
     * @memberof JsonApiDataSourceTableOut
     */
    attributes: JsonApiDataSourceTableOutAttributes;
}

export const JsonApiDataSourceTableOutTypeEnum = {
    DATA_SOURCE_TABLE: "dataSourceTable",
} as const;

export type JsonApiDataSourceTableOutTypeEnum =
    typeof JsonApiDataSourceTableOutTypeEnum[keyof typeof JsonApiDataSourceTableOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiDataSourceTableOutAttributes
 */
export interface JsonApiDataSourceTableOutAttributes {
    /**
     * Path to table.
     * @type {Array<string>}
     * @memberof JsonApiDataSourceTableOutAttributes
     */
    path?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceTableOutAttributes
     */
    type?: JsonApiDataSourceTableOutAttributesTypeEnum;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceTableOutAttributes
     */
    namePrefix?: string;
    /**
     *
     * @type {Array<JsonApiDataSourceTableOutAttributesColumns>}
     * @memberof JsonApiDataSourceTableOutAttributes
     */
    columns: Array<JsonApiDataSourceTableOutAttributesColumns>;
}

export const JsonApiDataSourceTableOutAttributesTypeEnum = {
    TABLE: "TABLE",
    VIEW: "VIEW",
} as const;

export type JsonApiDataSourceTableOutAttributesTypeEnum =
    typeof JsonApiDataSourceTableOutAttributesTypeEnum[keyof typeof JsonApiDataSourceTableOutAttributesTypeEnum];

/**
 * Table columns in data source
 * @export
 * @interface JsonApiDataSourceTableOutAttributesColumns
 */
export interface JsonApiDataSourceTableOutAttributesColumns {
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceTableOutAttributesColumns
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceTableOutAttributesColumns
     */
    dataType: JsonApiDataSourceTableOutAttributesColumnsDataTypeEnum;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiDataSourceTableOutAttributesColumns
     */
    isPrimaryKey?: boolean;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceTableOutAttributesColumns
     */
    referencedTableId?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceTableOutAttributesColumns
     */
    referencedTableColumn?: string;
}

export const JsonApiDataSourceTableOutAttributesColumnsDataTypeEnum = {
    INT: "INT",
    STRING: "STRING",
    DATE: "DATE",
    NUMERIC: "NUMERIC",
    TIMESTAMP: "TIMESTAMP",
    TIMESTAMP_TZ: "TIMESTAMP_TZ",
    BOOLEAN: "BOOLEAN",
} as const;

export type JsonApiDataSourceTableOutAttributesColumnsDataTypeEnum =
    typeof JsonApiDataSourceTableOutAttributesColumnsDataTypeEnum[keyof typeof JsonApiDataSourceTableOutAttributesColumnsDataTypeEnum];

/**
 *
 * @export
 * @interface JsonApiDataSourceTableOutDocument
 */
export interface JsonApiDataSourceTableOutDocument {
    /**
     *
     * @type {JsonApiDataSourceTableOut}
     * @memberof JsonApiDataSourceTableOutDocument
     */
    data: JsonApiDataSourceTableOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDataSourceTableOutDocument
     */
    links?: ObjectLinks;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiDataSourceTableOutList
 */
export interface JsonApiDataSourceTableOutList {
    /**
     *
     * @type {Array<JsonApiDataSourceTableOutWithLinks>}
     * @memberof JsonApiDataSourceTableOutList
     */
    data: Array<JsonApiDataSourceTableOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiDataSourceTableOutList
     */
    links?: ListLinks;
}
/**
 *
 * @export
 * @interface JsonApiDataSourceTableOutWithLinks
 */
export interface JsonApiDataSourceTableOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDataSourceTableOutWithLinks
     */
    type: JsonApiDataSourceTableOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDataSourceTableOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiDataSourceTableOutAttributes}
     * @memberof JsonApiDataSourceTableOutWithLinks
     */
    attributes: JsonApiDataSourceTableOutAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDataSourceTableOutWithLinks
     */
    links?: ObjectLinks;
}

export const JsonApiDataSourceTableOutWithLinksTypeEnum = {
    DATA_SOURCE_TABLE: "dataSourceTable",
} as const;

export type JsonApiDataSourceTableOutWithLinksTypeEnum =
    typeof JsonApiDataSourceTableOutWithLinksTypeEnum[keyof typeof JsonApiDataSourceTableOutWithLinksTypeEnum];

/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiDatasetLinkage
 */
export interface JsonApiDatasetLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetLinkage
     */
    type: JsonApiDatasetLinkageTypeEnum;
}

export const JsonApiDatasetLinkageTypeEnum = {
    DATASET: "dataset",
} as const;

export type JsonApiDatasetLinkageTypeEnum =
    typeof JsonApiDatasetLinkageTypeEnum[keyof typeof JsonApiDatasetLinkageTypeEnum];

/**
 * JSON:API representation of dataset entity.
 * @export
 * @interface JsonApiDatasetOut
 */
export interface JsonApiDatasetOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDatasetOut
     */
    type: JsonApiDatasetOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDatasetOut
     */
    id: string;
    /**
     *
     * @type {JsonApiDatasetOutAttributes}
     * @memberof JsonApiDatasetOut
     */
    attributes: JsonApiDatasetOutAttributes;
    /**
     *
     * @type {JsonApiDatasetOutRelationships}
     * @memberof JsonApiDatasetOut
     */
    relationships?: JsonApiDatasetOutRelationships;
}

export const JsonApiDatasetOutTypeEnum = {
    DATASET: "dataset",
} as const;

export type JsonApiDatasetOutTypeEnum =
    typeof JsonApiDatasetOutTypeEnum[keyof typeof JsonApiDatasetOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiDatasetOutAttributes
 */
export interface JsonApiDatasetOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiDatasetOutAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributes
     */
    type: JsonApiDatasetOutAttributesTypeEnum;
    /**
     *
     * @type {Array<JsonApiDatasetOutAttributesGrain>}
     * @memberof JsonApiDatasetOutAttributes
     */
    grain?: Array<JsonApiDatasetOutAttributesGrain>;
    /**
     *
     * @type {Array<JsonApiDatasetOutAttributesReferenceProperties>}
     * @memberof JsonApiDatasetOutAttributes
     */
    referenceProperties?: Array<JsonApiDatasetOutAttributesReferenceProperties>;
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributes
     */
    dataSourceTableId?: string;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiDatasetOutAttributes
     */
    areRelationsValid?: boolean;
}

export const JsonApiDatasetOutAttributesTypeEnum = {
    NORMAL: "NORMAL",
    DATE: "DATE",
} as const;

export type JsonApiDatasetOutAttributesTypeEnum =
    typeof JsonApiDatasetOutAttributesTypeEnum[keyof typeof JsonApiDatasetOutAttributesTypeEnum];

/**
 *
 * @export
 * @interface JsonApiDatasetOutAttributesGrain
 */
export interface JsonApiDatasetOutAttributesGrain {
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributesGrain
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributesGrain
     */
    type: JsonApiDatasetOutAttributesGrainTypeEnum;
}

export const JsonApiDatasetOutAttributesGrainTypeEnum = {
    ATTRIBUTE: "attribute",
    DATASET: "dataset",
} as const;

export type JsonApiDatasetOutAttributesGrainTypeEnum =
    typeof JsonApiDatasetOutAttributesGrainTypeEnum[keyof typeof JsonApiDatasetOutAttributesGrainTypeEnum];

/**
 *
 * @export
 * @interface JsonApiDatasetOutAttributesReferenceProperties
 */
export interface JsonApiDatasetOutAttributesReferenceProperties {
    /**
     *
     * @type {DatasetReferenceIdentifier}
     * @memberof JsonApiDatasetOutAttributesReferenceProperties
     */
    identifier: DatasetReferenceIdentifier;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiDatasetOutAttributesReferenceProperties
     */
    multivalue: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiDatasetOutAttributesReferenceProperties
     */
    sourceColumns: Array<string>;
}
/**
 *
 * @export
 * @interface JsonApiDatasetOutDocument
 */
export interface JsonApiDatasetOutDocument {
    /**
     *
     * @type {JsonApiDatasetOut}
     * @memberof JsonApiDatasetOutDocument
     */
    data: JsonApiDatasetOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDatasetOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiDatasetOutIncludes>}
     * @memberof JsonApiDatasetOutDocument
     */
    included?: Array<JsonApiDatasetOutIncludes>;
}
/**
 * @type JsonApiDatasetOutIncludes
 * @export
 */
export type JsonApiDatasetOutIncludes =
    | JsonApiAttributeOutWithLinks
    | JsonApiDatasetOutWithLinks
    | JsonApiFactOutWithLinks;

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiDatasetOutList
 */
export interface JsonApiDatasetOutList {
    /**
     *
     * @type {Array<JsonApiDatasetOutWithLinks>}
     * @memberof JsonApiDatasetOutList
     */
    data: Array<JsonApiDatasetOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiDatasetOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiDatasetOutIncludes>}
     * @memberof JsonApiDatasetOutList
     */
    included?: Array<JsonApiDatasetOutIncludes>;
}
/**
 *
 * @export
 * @interface JsonApiDatasetOutRelationships
 */
export interface JsonApiDatasetOutRelationships {
    /**
     *
     * @type {JsonApiFilterContextOutRelationshipsAttributes}
     * @memberof JsonApiDatasetOutRelationships
     */
    attributes?: JsonApiFilterContextOutRelationshipsAttributes;
    /**
     *
     * @type {JsonApiMetricOutRelationshipsFacts}
     * @memberof JsonApiDatasetOutRelationships
     */
    facts?: JsonApiMetricOutRelationshipsFacts;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsDatasets}
     * @memberof JsonApiDatasetOutRelationships
     */
    references?: JsonApiAnalyticalDashboardOutRelationshipsDatasets;
}
/**
 *
 * @export
 * @interface JsonApiDatasetOutWithLinks
 */
export interface JsonApiDatasetOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDatasetOutWithLinks
     */
    type: JsonApiDatasetOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDatasetOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiDatasetOutAttributes}
     * @memberof JsonApiDatasetOutWithLinks
     */
    attributes: JsonApiDatasetOutAttributes;
    /**
     *
     * @type {JsonApiDatasetOutRelationships}
     * @memberof JsonApiDatasetOutWithLinks
     */
    relationships?: JsonApiDatasetOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDatasetOutWithLinks
     */
    links?: ObjectLinks;
}

export const JsonApiDatasetOutWithLinksTypeEnum = {
    DATASET: "dataset",
} as const;

export type JsonApiDatasetOutWithLinksTypeEnum =
    typeof JsonApiDatasetOutWithLinksTypeEnum[keyof typeof JsonApiDatasetOutWithLinksTypeEnum];

/**
 * @type JsonApiDatasetToOneLinkage
 * References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
 * @export
 */
export type JsonApiDatasetToOneLinkage = JsonApiDatasetLinkage;

/**
 * JSON:API representation of entitlement entity.
 * @export
 * @interface JsonApiEntitlementOut
 */
export interface JsonApiEntitlementOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiEntitlementOut
     */
    type: JsonApiEntitlementOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiEntitlementOut
     */
    id: string;
    /**
     *
     * @type {JsonApiEntitlementOutAttributes}
     * @memberof JsonApiEntitlementOut
     */
    attributes?: JsonApiEntitlementOutAttributes;
}

export const JsonApiEntitlementOutTypeEnum = {
    ENTITLEMENT: "entitlement",
} as const;

export type JsonApiEntitlementOutTypeEnum =
    typeof JsonApiEntitlementOutTypeEnum[keyof typeof JsonApiEntitlementOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiEntitlementOutAttributes
 */
export interface JsonApiEntitlementOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiEntitlementOutAttributes
     */
    value?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiEntitlementOutAttributes
     */
    expiry?: string;
}
/**
 *
 * @export
 * @interface JsonApiEntitlementOutDocument
 */
export interface JsonApiEntitlementOutDocument {
    /**
     *
     * @type {JsonApiEntitlementOut}
     * @memberof JsonApiEntitlementOutDocument
     */
    data: JsonApiEntitlementOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiEntitlementOutDocument
     */
    links?: ObjectLinks;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiEntitlementOutList
 */
export interface JsonApiEntitlementOutList {
    /**
     *
     * @type {Array<JsonApiEntitlementOutWithLinks>}
     * @memberof JsonApiEntitlementOutList
     */
    data: Array<JsonApiEntitlementOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiEntitlementOutList
     */
    links?: ListLinks;
}
/**
 *
 * @export
 * @interface JsonApiEntitlementOutWithLinks
 */
export interface JsonApiEntitlementOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiEntitlementOutWithLinks
     */
    type: JsonApiEntitlementOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiEntitlementOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiEntitlementOutAttributes}
     * @memberof JsonApiEntitlementOutWithLinks
     */
    attributes?: JsonApiEntitlementOutAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiEntitlementOutWithLinks
     */
    links?: ObjectLinks;
}

export const JsonApiEntitlementOutWithLinksTypeEnum = {
    ENTITLEMENT: "entitlement",
} as const;

export type JsonApiEntitlementOutWithLinksTypeEnum =
    typeof JsonApiEntitlementOutWithLinksTypeEnum[keyof typeof JsonApiEntitlementOutWithLinksTypeEnum];

/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiFactLinkage
 */
export interface JsonApiFactLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiFactLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiFactLinkage
     */
    type: JsonApiFactLinkageTypeEnum;
}

export const JsonApiFactLinkageTypeEnum = {
    FACT: "fact",
} as const;

export type JsonApiFactLinkageTypeEnum =
    typeof JsonApiFactLinkageTypeEnum[keyof typeof JsonApiFactLinkageTypeEnum];

/**
 * JSON:API representation of fact entity.
 * @export
 * @interface JsonApiFactOut
 */
export interface JsonApiFactOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiFactOut
     */
    type: JsonApiFactOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiFactOut
     */
    id: string;
    /**
     *
     * @type {JsonApiFactOutAttributes}
     * @memberof JsonApiFactOut
     */
    attributes?: JsonApiFactOutAttributes;
    /**
     *
     * @type {JsonApiFactOutRelationships}
     * @memberof JsonApiFactOut
     */
    relationships?: JsonApiFactOutRelationships;
}

export const JsonApiFactOutTypeEnum = {
    FACT: "fact",
} as const;

export type JsonApiFactOutTypeEnum = typeof JsonApiFactOutTypeEnum[keyof typeof JsonApiFactOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiFactOutAttributes
 */
export interface JsonApiFactOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiFactOutAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiFactOutAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiFactOutAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof JsonApiFactOutAttributes
     */
    sourceColumn?: string;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiFactOutAttributes
     */
    areRelationsValid?: boolean;
}
/**
 *
 * @export
 * @interface JsonApiFactOutDocument
 */
export interface JsonApiFactOutDocument {
    /**
     *
     * @type {JsonApiFactOut}
     * @memberof JsonApiFactOutDocument
     */
    data: JsonApiFactOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiFactOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiDatasetOutWithLinks>}
     * @memberof JsonApiFactOutDocument
     */
    included?: Array<JsonApiDatasetOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiFactOutList
 */
export interface JsonApiFactOutList {
    /**
     *
     * @type {Array<JsonApiFactOutWithLinks>}
     * @memberof JsonApiFactOutList
     */
    data: Array<JsonApiFactOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiFactOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiDatasetOutWithLinks>}
     * @memberof JsonApiFactOutList
     */
    included?: Array<JsonApiDatasetOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiFactOutRelationships
 */
export interface JsonApiFactOutRelationships {
    /**
     *
     * @type {JsonApiAttributeOutRelationshipsDataset}
     * @memberof JsonApiFactOutRelationships
     */
    dataset?: JsonApiAttributeOutRelationshipsDataset;
}
/**
 *
 * @export
 * @interface JsonApiFactOutWithLinks
 */
export interface JsonApiFactOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiFactOutWithLinks
     */
    type: JsonApiFactOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiFactOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiFactOutAttributes}
     * @memberof JsonApiFactOutWithLinks
     */
    attributes?: JsonApiFactOutAttributes;
    /**
     *
     * @type {JsonApiFactOutRelationships}
     * @memberof JsonApiFactOutWithLinks
     */
    relationships?: JsonApiFactOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiFactOutWithLinks
     */
    links?: ObjectLinks;
}

export const JsonApiFactOutWithLinksTypeEnum = {
    FACT: "fact",
} as const;

export type JsonApiFactOutWithLinksTypeEnum =
    typeof JsonApiFactOutWithLinksTypeEnum[keyof typeof JsonApiFactOutWithLinksTypeEnum];

/**
 * JSON:API representation of filterContext entity.
 * @export
 * @interface JsonApiFilterContextIn
 */
export interface JsonApiFilterContextIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiFilterContextIn
     */
    type: JsonApiFilterContextInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiFilterContextIn
     */
    id: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardPatchAttributes}
     * @memberof JsonApiFilterContextIn
     */
    attributes?: JsonApiAnalyticalDashboardPatchAttributes;
}

export const JsonApiFilterContextInTypeEnum = {
    FILTER_CONTEXT: "filterContext",
} as const;

export type JsonApiFilterContextInTypeEnum =
    typeof JsonApiFilterContextInTypeEnum[keyof typeof JsonApiFilterContextInTypeEnum];

/**
 *
 * @export
 * @interface JsonApiFilterContextInDocument
 */
export interface JsonApiFilterContextInDocument {
    /**
     *
     * @type {JsonApiFilterContextIn}
     * @memberof JsonApiFilterContextInDocument
     */
    data: JsonApiFilterContextIn;
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiFilterContextLinkage
 */
export interface JsonApiFilterContextLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiFilterContextLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiFilterContextLinkage
     */
    type: JsonApiFilterContextLinkageTypeEnum;
}

export const JsonApiFilterContextLinkageTypeEnum = {
    FILTER_CONTEXT: "filterContext",
} as const;

export type JsonApiFilterContextLinkageTypeEnum =
    typeof JsonApiFilterContextLinkageTypeEnum[keyof typeof JsonApiFilterContextLinkageTypeEnum];

/**
 * JSON:API representation of filterContext entity.
 * @export
 * @interface JsonApiFilterContextOut
 */
export interface JsonApiFilterContextOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiFilterContextOut
     */
    type: JsonApiFilterContextOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiFilterContextOut
     */
    id: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardPatchAttributes}
     * @memberof JsonApiFilterContextOut
     */
    attributes?: JsonApiAnalyticalDashboardPatchAttributes;
    /**
     *
     * @type {JsonApiFilterContextOutRelationships}
     * @memberof JsonApiFilterContextOut
     */
    relationships?: JsonApiFilterContextOutRelationships;
}

export const JsonApiFilterContextOutTypeEnum = {
    FILTER_CONTEXT: "filterContext",
} as const;

export type JsonApiFilterContextOutTypeEnum =
    typeof JsonApiFilterContextOutTypeEnum[keyof typeof JsonApiFilterContextOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiFilterContextOutDocument
 */
export interface JsonApiFilterContextOutDocument {
    /**
     *
     * @type {JsonApiFilterContextOut}
     * @memberof JsonApiFilterContextOutDocument
     */
    data: JsonApiFilterContextOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiFilterContextOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiFilterContextOutIncludes>}
     * @memberof JsonApiFilterContextOutDocument
     */
    included?: Array<JsonApiFilterContextOutIncludes>;
}
/**
 * @type JsonApiFilterContextOutIncludes
 * @export
 */
export type JsonApiFilterContextOutIncludes =
    | JsonApiAttributeOutWithLinks
    | JsonApiDatasetOutWithLinks
    | JsonApiLabelOutWithLinks;

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiFilterContextOutList
 */
export interface JsonApiFilterContextOutList {
    /**
     *
     * @type {Array<JsonApiFilterContextOutWithLinks>}
     * @memberof JsonApiFilterContextOutList
     */
    data: Array<JsonApiFilterContextOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiFilterContextOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiFilterContextOutIncludes>}
     * @memberof JsonApiFilterContextOutList
     */
    included?: Array<JsonApiFilterContextOutIncludes>;
}
/**
 *
 * @export
 * @interface JsonApiFilterContextOutRelationships
 */
export interface JsonApiFilterContextOutRelationships {
    /**
     *
     * @type {JsonApiFilterContextOutRelationshipsAttributes}
     * @memberof JsonApiFilterContextOutRelationships
     */
    attributes?: JsonApiFilterContextOutRelationshipsAttributes;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsDatasets}
     * @memberof JsonApiFilterContextOutRelationships
     */
    datasets?: JsonApiAnalyticalDashboardOutRelationshipsDatasets;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsLabels}
     * @memberof JsonApiFilterContextOutRelationships
     */
    labels?: JsonApiAnalyticalDashboardOutRelationshipsLabels;
}
/**
 *
 * @export
 * @interface JsonApiFilterContextOutRelationshipsAttributes
 */
export interface JsonApiFilterContextOutRelationshipsAttributes {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiAttributeLinkage>}
     * @memberof JsonApiFilterContextOutRelationshipsAttributes
     */
    data: Array<JsonApiAttributeLinkage>;
}
/**
 *
 * @export
 * @interface JsonApiFilterContextOutWithLinks
 */
export interface JsonApiFilterContextOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiFilterContextOutWithLinks
     */
    type: JsonApiFilterContextOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiFilterContextOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardPatchAttributes}
     * @memberof JsonApiFilterContextOutWithLinks
     */
    attributes?: JsonApiAnalyticalDashboardPatchAttributes;
    /**
     *
     * @type {JsonApiFilterContextOutRelationships}
     * @memberof JsonApiFilterContextOutWithLinks
     */
    relationships?: JsonApiFilterContextOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiFilterContextOutWithLinks
     */
    links?: ObjectLinks;
}

export const JsonApiFilterContextOutWithLinksTypeEnum = {
    FILTER_CONTEXT: "filterContext",
} as const;

export type JsonApiFilterContextOutWithLinksTypeEnum =
    typeof JsonApiFilterContextOutWithLinksTypeEnum[keyof typeof JsonApiFilterContextOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching filterContext entity.
 * @export
 * @interface JsonApiFilterContextPatch
 */
export interface JsonApiFilterContextPatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiFilterContextPatch
     */
    type: JsonApiFilterContextPatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiFilterContextPatch
     */
    id: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardPatchAttributes}
     * @memberof JsonApiFilterContextPatch
     */
    attributes?: JsonApiAnalyticalDashboardPatchAttributes;
}

export const JsonApiFilterContextPatchTypeEnum = {
    FILTER_CONTEXT: "filterContext",
} as const;

export type JsonApiFilterContextPatchTypeEnum =
    typeof JsonApiFilterContextPatchTypeEnum[keyof typeof JsonApiFilterContextPatchTypeEnum];

/**
 *
 * @export
 * @interface JsonApiFilterContextPatchDocument
 */
export interface JsonApiFilterContextPatchDocument {
    /**
     *
     * @type {JsonApiFilterContextPatch}
     * @memberof JsonApiFilterContextPatchDocument
     */
    data: JsonApiFilterContextPatch;
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiLabelLinkage
 */
export interface JsonApiLabelLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiLabelLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiLabelLinkage
     */
    type: JsonApiLabelLinkageTypeEnum;
}

export const JsonApiLabelLinkageTypeEnum = {
    LABEL: "label",
} as const;

export type JsonApiLabelLinkageTypeEnum =
    typeof JsonApiLabelLinkageTypeEnum[keyof typeof JsonApiLabelLinkageTypeEnum];

/**
 * JSON:API representation of label entity.
 * @export
 * @interface JsonApiLabelOut
 */
export interface JsonApiLabelOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiLabelOut
     */
    type: JsonApiLabelOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiLabelOut
     */
    id: string;
    /**
     *
     * @type {JsonApiLabelOutAttributes}
     * @memberof JsonApiLabelOut
     */
    attributes?: JsonApiLabelOutAttributes;
    /**
     *
     * @type {JsonApiLabelOutRelationships}
     * @memberof JsonApiLabelOut
     */
    relationships?: JsonApiLabelOutRelationships;
}

export const JsonApiLabelOutTypeEnum = {
    LABEL: "label",
} as const;

export type JsonApiLabelOutTypeEnum = typeof JsonApiLabelOutTypeEnum[keyof typeof JsonApiLabelOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiLabelOutAttributes
 */
export interface JsonApiLabelOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiLabelOutAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiLabelOutAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiLabelOutAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiLabelOutAttributes
     */
    primary?: boolean;
    /**
     *
     * @type {string}
     * @memberof JsonApiLabelOutAttributes
     */
    sourceColumn?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiLabelOutAttributes
     */
    valueType?: JsonApiLabelOutAttributesValueTypeEnum;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiLabelOutAttributes
     */
    areRelationsValid?: boolean;
}

export const JsonApiLabelOutAttributesValueTypeEnum = {
    TEXT: "TEXT",
    HYPERLINK: "HYPERLINK",
    GEO: "GEO",
    GEO_LONGITUDE: "GEO_LONGITUDE",
    GEO_LATITUDE: "GEO_LATITUDE",
} as const;

export type JsonApiLabelOutAttributesValueTypeEnum =
    typeof JsonApiLabelOutAttributesValueTypeEnum[keyof typeof JsonApiLabelOutAttributesValueTypeEnum];

/**
 *
 * @export
 * @interface JsonApiLabelOutDocument
 */
export interface JsonApiLabelOutDocument {
    /**
     *
     * @type {JsonApiLabelOut}
     * @memberof JsonApiLabelOutDocument
     */
    data: JsonApiLabelOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiLabelOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAttributeOutWithLinks>}
     * @memberof JsonApiLabelOutDocument
     */
    included?: Array<JsonApiAttributeOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiLabelOutList
 */
export interface JsonApiLabelOutList {
    /**
     *
     * @type {Array<JsonApiLabelOutWithLinks>}
     * @memberof JsonApiLabelOutList
     */
    data: Array<JsonApiLabelOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiLabelOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAttributeOutWithLinks>}
     * @memberof JsonApiLabelOutList
     */
    included?: Array<JsonApiAttributeOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiLabelOutRelationships
 */
export interface JsonApiLabelOutRelationships {
    /**
     *
     * @type {JsonApiLabelOutRelationshipsAttribute}
     * @memberof JsonApiLabelOutRelationships
     */
    attribute?: JsonApiLabelOutRelationshipsAttribute;
}
/**
 *
 * @export
 * @interface JsonApiLabelOutRelationshipsAttribute
 */
export interface JsonApiLabelOutRelationshipsAttribute {
    /**
     *
     * @type {JsonApiAttributeToOneLinkage}
     * @memberof JsonApiLabelOutRelationshipsAttribute
     */
    data: JsonApiAttributeToOneLinkage | null;
}
/**
 *
 * @export
 * @interface JsonApiLabelOutWithLinks
 */
export interface JsonApiLabelOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiLabelOutWithLinks
     */
    type: JsonApiLabelOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiLabelOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiLabelOutAttributes}
     * @memberof JsonApiLabelOutWithLinks
     */
    attributes?: JsonApiLabelOutAttributes;
    /**
     *
     * @type {JsonApiLabelOutRelationships}
     * @memberof JsonApiLabelOutWithLinks
     */
    relationships?: JsonApiLabelOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiLabelOutWithLinks
     */
    links?: ObjectLinks;
}

export const JsonApiLabelOutWithLinksTypeEnum = {
    LABEL: "label",
} as const;

export type JsonApiLabelOutWithLinksTypeEnum =
    typeof JsonApiLabelOutWithLinksTypeEnum[keyof typeof JsonApiLabelOutWithLinksTypeEnum];

/**
 * @type JsonApiLabelToOneLinkage
 * References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
 * @export
 */
export type JsonApiLabelToOneLinkage = JsonApiLabelLinkage;

/**
 * JSON:API representation of metric entity.
 * @export
 * @interface JsonApiMetricIn
 */
export interface JsonApiMetricIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiMetricIn
     */
    type: JsonApiMetricInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiMetricIn
     */
    id: string;
    /**
     *
     * @type {JsonApiMetricOutAttributes}
     * @memberof JsonApiMetricIn
     */
    attributes: JsonApiMetricOutAttributes;
}

export const JsonApiMetricInTypeEnum = {
    METRIC: "metric",
} as const;

export type JsonApiMetricInTypeEnum = typeof JsonApiMetricInTypeEnum[keyof typeof JsonApiMetricInTypeEnum];

/**
 *
 * @export
 * @interface JsonApiMetricInDocument
 */
export interface JsonApiMetricInDocument {
    /**
     *
     * @type {JsonApiMetricIn}
     * @memberof JsonApiMetricInDocument
     */
    data: JsonApiMetricIn;
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiMetricLinkage
 */
export interface JsonApiMetricLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricLinkage
     */
    type: JsonApiMetricLinkageTypeEnum;
}

export const JsonApiMetricLinkageTypeEnum = {
    METRIC: "metric",
} as const;

export type JsonApiMetricLinkageTypeEnum =
    typeof JsonApiMetricLinkageTypeEnum[keyof typeof JsonApiMetricLinkageTypeEnum];

/**
 * JSON:API representation of metric entity.
 * @export
 * @interface JsonApiMetricOut
 */
export interface JsonApiMetricOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiMetricOut
     */
    type: JsonApiMetricOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiMetricOut
     */
    id: string;
    /**
     *
     * @type {JsonApiMetricOutAttributes}
     * @memberof JsonApiMetricOut
     */
    attributes: JsonApiMetricOutAttributes;
    /**
     *
     * @type {JsonApiMetricOutRelationships}
     * @memberof JsonApiMetricOut
     */
    relationships?: JsonApiMetricOutRelationships;
}

export const JsonApiMetricOutTypeEnum = {
    METRIC: "metric",
} as const;

export type JsonApiMetricOutTypeEnum = typeof JsonApiMetricOutTypeEnum[keyof typeof JsonApiMetricOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiMetricOutAttributes
 */
export interface JsonApiMetricOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricOutAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricOutAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiMetricOutAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiMetricOutAttributes
     */
    areRelationsValid?: boolean;
    /**
     *
     * @type {JsonApiMetricPatchAttributesContent}
     * @memberof JsonApiMetricOutAttributes
     */
    content: JsonApiMetricPatchAttributesContent;
}
/**
 *
 * @export
 * @interface JsonApiMetricOutDocument
 */
export interface JsonApiMetricOutDocument {
    /**
     *
     * @type {JsonApiMetricOut}
     * @memberof JsonApiMetricOutDocument
     */
    data: JsonApiMetricOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiMetricOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiMetricOutIncludes>}
     * @memberof JsonApiMetricOutDocument
     */
    included?: Array<JsonApiMetricOutIncludes>;
}
/**
 * @type JsonApiMetricOutIncludes
 * @export
 */
export type JsonApiMetricOutIncludes =
    | JsonApiAttributeOutWithLinks
    | JsonApiDatasetOutWithLinks
    | JsonApiFactOutWithLinks
    | JsonApiLabelOutWithLinks
    | JsonApiMetricOutWithLinks;

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiMetricOutList
 */
export interface JsonApiMetricOutList {
    /**
     *
     * @type {Array<JsonApiMetricOutWithLinks>}
     * @memberof JsonApiMetricOutList
     */
    data: Array<JsonApiMetricOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiMetricOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiMetricOutIncludes>}
     * @memberof JsonApiMetricOutList
     */
    included?: Array<JsonApiMetricOutIncludes>;
}
/**
 *
 * @export
 * @interface JsonApiMetricOutRelationships
 */
export interface JsonApiMetricOutRelationships {
    /**
     *
     * @type {JsonApiMetricOutRelationshipsFacts}
     * @memberof JsonApiMetricOutRelationships
     */
    facts?: JsonApiMetricOutRelationshipsFacts;
    /**
     *
     * @type {JsonApiFilterContextOutRelationshipsAttributes}
     * @memberof JsonApiMetricOutRelationships
     */
    attributes?: JsonApiFilterContextOutRelationshipsAttributes;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsLabels}
     * @memberof JsonApiMetricOutRelationships
     */
    labels?: JsonApiAnalyticalDashboardOutRelationshipsLabels;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsMetrics}
     * @memberof JsonApiMetricOutRelationships
     */
    metrics?: JsonApiAnalyticalDashboardOutRelationshipsMetrics;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsDatasets}
     * @memberof JsonApiMetricOutRelationships
     */
    datasets?: JsonApiAnalyticalDashboardOutRelationshipsDatasets;
}
/**
 *
 * @export
 * @interface JsonApiMetricOutRelationshipsFacts
 */
export interface JsonApiMetricOutRelationshipsFacts {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiFactLinkage>}
     * @memberof JsonApiMetricOutRelationshipsFacts
     */
    data: Array<JsonApiFactLinkage>;
}
/**
 *
 * @export
 * @interface JsonApiMetricOutWithLinks
 */
export interface JsonApiMetricOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiMetricOutWithLinks
     */
    type: JsonApiMetricOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiMetricOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiMetricOutAttributes}
     * @memberof JsonApiMetricOutWithLinks
     */
    attributes: JsonApiMetricOutAttributes;
    /**
     *
     * @type {JsonApiMetricOutRelationships}
     * @memberof JsonApiMetricOutWithLinks
     */
    relationships?: JsonApiMetricOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiMetricOutWithLinks
     */
    links?: ObjectLinks;
}

export const JsonApiMetricOutWithLinksTypeEnum = {
    METRIC: "metric",
} as const;

export type JsonApiMetricOutWithLinksTypeEnum =
    typeof JsonApiMetricOutWithLinksTypeEnum[keyof typeof JsonApiMetricOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching metric entity.
 * @export
 * @interface JsonApiMetricPatch
 */
export interface JsonApiMetricPatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiMetricPatch
     */
    type: JsonApiMetricPatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiMetricPatch
     */
    id: string;
    /**
     *
     * @type {JsonApiMetricPatchAttributes}
     * @memberof JsonApiMetricPatch
     */
    attributes: JsonApiMetricPatchAttributes;
}

export const JsonApiMetricPatchTypeEnum = {
    METRIC: "metric",
} as const;

export type JsonApiMetricPatchTypeEnum =
    typeof JsonApiMetricPatchTypeEnum[keyof typeof JsonApiMetricPatchTypeEnum];

/**
 *
 * @export
 * @interface JsonApiMetricPatchAttributes
 */
export interface JsonApiMetricPatchAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricPatchAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricPatchAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiMetricPatchAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiMetricPatchAttributes
     */
    areRelationsValid?: boolean;
    /**
     *
     * @type {JsonApiMetricPatchAttributesContent}
     * @memberof JsonApiMetricPatchAttributes
     */
    content?: JsonApiMetricPatchAttributesContent;
}
/**
 *
 * @export
 * @interface JsonApiMetricPatchAttributesContent
 */
export interface JsonApiMetricPatchAttributesContent {
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricPatchAttributesContent
     */
    format?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricPatchAttributesContent
     */
    maql: string;
}
/**
 *
 * @export
 * @interface JsonApiMetricPatchDocument
 */
export interface JsonApiMetricPatchDocument {
    /**
     *
     * @type {JsonApiMetricPatch}
     * @memberof JsonApiMetricPatchDocument
     */
    data: JsonApiMetricPatch;
}
/**
 * JSON:API representation of organization entity.
 * @export
 * @interface JsonApiOrganizationIn
 */
export interface JsonApiOrganizationIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiOrganizationIn
     */
    type: JsonApiOrganizationInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiOrganizationIn
     */
    id: string;
    /**
     *
     * @type {JsonApiOrganizationInAttributes}
     * @memberof JsonApiOrganizationIn
     */
    attributes?: JsonApiOrganizationInAttributes;
}

export const JsonApiOrganizationInTypeEnum = {
    ORGANIZATION: "organization",
} as const;

export type JsonApiOrganizationInTypeEnum =
    typeof JsonApiOrganizationInTypeEnum[keyof typeof JsonApiOrganizationInTypeEnum];

/**
 *
 * @export
 * @interface JsonApiOrganizationInAttributes
 */
export interface JsonApiOrganizationInAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationInAttributes
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationInAttributes
     */
    hostname?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiOrganizationInAttributes
     */
    allowedOrigins?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationInAttributes
     */
    oauthIssuerLocation?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationInAttributes
     */
    oauthClientId?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationInAttributes
     */
    oauthClientSecret?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationInAttributes
     */
    earlyAccess?: string;
    /**
     * Any string identifying the OIDC provider. This value is used as suffix for OAuth2 callback (redirect) URL. If not defined, the standard callback URL is used. This value is valid only for external OIDC providers, not for the internal DEX provider.
     * @type {string}
     * @memberof JsonApiOrganizationInAttributes
     */
    oauthIssuerId?: string;
}
/**
 *
 * @export
 * @interface JsonApiOrganizationInDocument
 */
export interface JsonApiOrganizationInDocument {
    /**
     *
     * @type {JsonApiOrganizationIn}
     * @memberof JsonApiOrganizationInDocument
     */
    data: JsonApiOrganizationIn;
}
/**
 * JSON:API representation of organization entity.
 * @export
 * @interface JsonApiOrganizationOut
 */
export interface JsonApiOrganizationOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiOrganizationOut
     */
    type: JsonApiOrganizationOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiOrganizationOut
     */
    id: string;
    /**
     *
     * @type {JsonApiOrganizationOutMeta}
     * @memberof JsonApiOrganizationOut
     */
    meta?: JsonApiOrganizationOutMeta;
    /**
     *
     * @type {JsonApiOrganizationOutAttributes}
     * @memberof JsonApiOrganizationOut
     */
    attributes?: JsonApiOrganizationOutAttributes;
    /**
     *
     * @type {JsonApiOrganizationOutRelationships}
     * @memberof JsonApiOrganizationOut
     */
    relationships?: JsonApiOrganizationOutRelationships;
}

export const JsonApiOrganizationOutTypeEnum = {
    ORGANIZATION: "organization",
} as const;

export type JsonApiOrganizationOutTypeEnum =
    typeof JsonApiOrganizationOutTypeEnum[keyof typeof JsonApiOrganizationOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiOrganizationOutAttributes
 */
export interface JsonApiOrganizationOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationOutAttributes
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationOutAttributes
     */
    hostname?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiOrganizationOutAttributes
     */
    allowedOrigins?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationOutAttributes
     */
    oauthIssuerLocation?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationOutAttributes
     */
    oauthClientId?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationOutAttributes
     */
    earlyAccess?: string;
    /**
     * Any string identifying the OIDC provider. This value is used as suffix for OAuth2 callback (redirect) URL. If not defined, the standard callback URL is used. This value is valid only for external OIDC providers, not for the internal DEX provider.
     * @type {string}
     * @memberof JsonApiOrganizationOutAttributes
     */
    oauthIssuerId?: string;
}
/**
 *
 * @export
 * @interface JsonApiOrganizationOutDocument
 */
export interface JsonApiOrganizationOutDocument {
    /**
     *
     * @type {JsonApiOrganizationOut}
     * @memberof JsonApiOrganizationOutDocument
     */
    data: JsonApiOrganizationOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiOrganizationOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiOrganizationOutIncludes>}
     * @memberof JsonApiOrganizationOutDocument
     */
    included?: Array<JsonApiOrganizationOutIncludes>;
}
/**
 * @type JsonApiOrganizationOutIncludes
 * @export
 */
export type JsonApiOrganizationOutIncludes = JsonApiUserGroupOutWithLinks | JsonApiUserOutWithLinks;

/**
 *
 * @export
 * @interface JsonApiOrganizationOutMeta
 */
export interface JsonApiOrganizationOutMeta {
    /**
     * List of valid permissions for a logged user.
     * @type {Array<string>}
     * @memberof JsonApiOrganizationOutMeta
     */
    permissions?: Array<JsonApiOrganizationOutMetaPermissionsEnum>;
}

export const JsonApiOrganizationOutMetaPermissionsEnum = {
    MANAGE: "MANAGE",
} as const;

export type JsonApiOrganizationOutMetaPermissionsEnum =
    typeof JsonApiOrganizationOutMetaPermissionsEnum[keyof typeof JsonApiOrganizationOutMetaPermissionsEnum];

/**
 *
 * @export
 * @interface JsonApiOrganizationOutRelationships
 */
export interface JsonApiOrganizationOutRelationships {
    /**
     *
     * @type {JsonApiOrganizationOutRelationshipsBootstrapUser}
     * @memberof JsonApiOrganizationOutRelationships
     */
    bootstrapUser?: JsonApiOrganizationOutRelationshipsBootstrapUser;
    /**
     *
     * @type {JsonApiOrganizationOutRelationshipsBootstrapUserGroup}
     * @memberof JsonApiOrganizationOutRelationships
     */
    bootstrapUserGroup?: JsonApiOrganizationOutRelationshipsBootstrapUserGroup;
}
/**
 *
 * @export
 * @interface JsonApiOrganizationOutRelationshipsBootstrapUser
 */
export interface JsonApiOrganizationOutRelationshipsBootstrapUser {
    /**
     *
     * @type {JsonApiUserToOneLinkage}
     * @memberof JsonApiOrganizationOutRelationshipsBootstrapUser
     */
    data: JsonApiUserToOneLinkage | null;
}
/**
 *
 * @export
 * @interface JsonApiOrganizationOutRelationshipsBootstrapUserGroup
 */
export interface JsonApiOrganizationOutRelationshipsBootstrapUserGroup {
    /**
     *
     * @type {JsonApiUserGroupToOneLinkage}
     * @memberof JsonApiOrganizationOutRelationshipsBootstrapUserGroup
     */
    data: JsonApiUserGroupToOneLinkage | null;
}
/**
 * JSON:API representation of patching organization entity.
 * @export
 * @interface JsonApiOrganizationPatch
 */
export interface JsonApiOrganizationPatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiOrganizationPatch
     */
    type: JsonApiOrganizationPatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiOrganizationPatch
     */
    id: string;
    /**
     *
     * @type {JsonApiOrganizationInAttributes}
     * @memberof JsonApiOrganizationPatch
     */
    attributes?: JsonApiOrganizationInAttributes;
}

export const JsonApiOrganizationPatchTypeEnum = {
    ORGANIZATION: "organization",
} as const;

export type JsonApiOrganizationPatchTypeEnum =
    typeof JsonApiOrganizationPatchTypeEnum[keyof typeof JsonApiOrganizationPatchTypeEnum];

/**
 *
 * @export
 * @interface JsonApiOrganizationPatchDocument
 */
export interface JsonApiOrganizationPatchDocument {
    /**
     *
     * @type {JsonApiOrganizationPatch}
     * @memberof JsonApiOrganizationPatchDocument
     */
    data: JsonApiOrganizationPatch;
}
/**
 * JSON:API representation of organizationSetting entity.
 * @export
 * @interface JsonApiOrganizationSettingIn
 */
export interface JsonApiOrganizationSettingIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiOrganizationSettingIn
     */
    type: JsonApiOrganizationSettingInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiOrganizationSettingIn
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceSettingPatchAttributes}
     * @memberof JsonApiOrganizationSettingIn
     */
    attributes?: JsonApiWorkspaceSettingPatchAttributes;
}

export const JsonApiOrganizationSettingInTypeEnum = {
    ORGANIZATION_SETTING: "organizationSetting",
} as const;

export type JsonApiOrganizationSettingInTypeEnum =
    typeof JsonApiOrganizationSettingInTypeEnum[keyof typeof JsonApiOrganizationSettingInTypeEnum];

/**
 *
 * @export
 * @interface JsonApiOrganizationSettingInDocument
 */
export interface JsonApiOrganizationSettingInDocument {
    /**
     *
     * @type {JsonApiOrganizationSettingIn}
     * @memberof JsonApiOrganizationSettingInDocument
     */
    data: JsonApiOrganizationSettingIn;
}
/**
 * JSON:API representation of organizationSetting entity.
 * @export
 * @interface JsonApiOrganizationSettingOut
 */
export interface JsonApiOrganizationSettingOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiOrganizationSettingOut
     */
    type: JsonApiOrganizationSettingOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiOrganizationSettingOut
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceSettingPatchAttributes}
     * @memberof JsonApiOrganizationSettingOut
     */
    attributes?: JsonApiWorkspaceSettingPatchAttributes;
}

export const JsonApiOrganizationSettingOutTypeEnum = {
    ORGANIZATION_SETTING: "organizationSetting",
} as const;

export type JsonApiOrganizationSettingOutTypeEnum =
    typeof JsonApiOrganizationSettingOutTypeEnum[keyof typeof JsonApiOrganizationSettingOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiOrganizationSettingOutDocument
 */
export interface JsonApiOrganizationSettingOutDocument {
    /**
     *
     * @type {JsonApiOrganizationSettingOut}
     * @memberof JsonApiOrganizationSettingOutDocument
     */
    data: JsonApiOrganizationSettingOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiOrganizationSettingOutDocument
     */
    links?: ObjectLinks;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiOrganizationSettingOutList
 */
export interface JsonApiOrganizationSettingOutList {
    /**
     *
     * @type {Array<JsonApiOrganizationSettingOutWithLinks>}
     * @memberof JsonApiOrganizationSettingOutList
     */
    data: Array<JsonApiOrganizationSettingOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiOrganizationSettingOutList
     */
    links?: ListLinks;
}
/**
 *
 * @export
 * @interface JsonApiOrganizationSettingOutWithLinks
 */
export interface JsonApiOrganizationSettingOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiOrganizationSettingOutWithLinks
     */
    type: JsonApiOrganizationSettingOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiOrganizationSettingOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceSettingPatchAttributes}
     * @memberof JsonApiOrganizationSettingOutWithLinks
     */
    attributes?: JsonApiWorkspaceSettingPatchAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiOrganizationSettingOutWithLinks
     */
    links?: ObjectLinks;
}

export const JsonApiOrganizationSettingOutWithLinksTypeEnum = {
    ORGANIZATION_SETTING: "organizationSetting",
} as const;

export type JsonApiOrganizationSettingOutWithLinksTypeEnum =
    typeof JsonApiOrganizationSettingOutWithLinksTypeEnum[keyof typeof JsonApiOrganizationSettingOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching organizationSetting entity.
 * @export
 * @interface JsonApiOrganizationSettingPatch
 */
export interface JsonApiOrganizationSettingPatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiOrganizationSettingPatch
     */
    type: JsonApiOrganizationSettingPatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiOrganizationSettingPatch
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceSettingPatchAttributes}
     * @memberof JsonApiOrganizationSettingPatch
     */
    attributes?: JsonApiWorkspaceSettingPatchAttributes;
}

export const JsonApiOrganizationSettingPatchTypeEnum = {
    ORGANIZATION_SETTING: "organizationSetting",
} as const;

export type JsonApiOrganizationSettingPatchTypeEnum =
    typeof JsonApiOrganizationSettingPatchTypeEnum[keyof typeof JsonApiOrganizationSettingPatchTypeEnum];

/**
 *
 * @export
 * @interface JsonApiOrganizationSettingPatchDocument
 */
export interface JsonApiOrganizationSettingPatchDocument {
    /**
     *
     * @type {JsonApiOrganizationSettingPatch}
     * @memberof JsonApiOrganizationSettingPatchDocument
     */
    data: JsonApiOrganizationSettingPatch;
}
/**
 * JSON:API representation of theme entity.
 * @export
 * @interface JsonApiThemeIn
 */
export interface JsonApiThemeIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiThemeIn
     */
    type: JsonApiThemeInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiThemeIn
     */
    id: string;
    /**
     *
     * @type {JsonApiColorPaletteInAttributes}
     * @memberof JsonApiThemeIn
     */
    attributes: JsonApiColorPaletteInAttributes;
}

export const JsonApiThemeInTypeEnum = {
    THEME: "theme",
} as const;

export type JsonApiThemeInTypeEnum = typeof JsonApiThemeInTypeEnum[keyof typeof JsonApiThemeInTypeEnum];

/**
 *
 * @export
 * @interface JsonApiThemeInDocument
 */
export interface JsonApiThemeInDocument {
    /**
     *
     * @type {JsonApiThemeIn}
     * @memberof JsonApiThemeInDocument
     */
    data: JsonApiThemeIn;
}
/**
 * JSON:API representation of theme entity.
 * @export
 * @interface JsonApiThemeOut
 */
export interface JsonApiThemeOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiThemeOut
     */
    type: JsonApiThemeOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiThemeOut
     */
    id: string;
    /**
     *
     * @type {JsonApiColorPaletteInAttributes}
     * @memberof JsonApiThemeOut
     */
    attributes: JsonApiColorPaletteInAttributes;
}

export const JsonApiThemeOutTypeEnum = {
    THEME: "theme",
} as const;

export type JsonApiThemeOutTypeEnum = typeof JsonApiThemeOutTypeEnum[keyof typeof JsonApiThemeOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiThemeOutDocument
 */
export interface JsonApiThemeOutDocument {
    /**
     *
     * @type {JsonApiThemeOut}
     * @memberof JsonApiThemeOutDocument
     */
    data: JsonApiThemeOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiThemeOutDocument
     */
    links?: ObjectLinks;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiThemeOutList
 */
export interface JsonApiThemeOutList {
    /**
     *
     * @type {Array<JsonApiThemeOutWithLinks>}
     * @memberof JsonApiThemeOutList
     */
    data: Array<JsonApiThemeOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiThemeOutList
     */
    links?: ListLinks;
}
/**
 *
 * @export
 * @interface JsonApiThemeOutWithLinks
 */
export interface JsonApiThemeOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiThemeOutWithLinks
     */
    type: JsonApiThemeOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiThemeOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiColorPaletteInAttributes}
     * @memberof JsonApiThemeOutWithLinks
     */
    attributes: JsonApiColorPaletteInAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiThemeOutWithLinks
     */
    links?: ObjectLinks;
}

export const JsonApiThemeOutWithLinksTypeEnum = {
    THEME: "theme",
} as const;

export type JsonApiThemeOutWithLinksTypeEnum =
    typeof JsonApiThemeOutWithLinksTypeEnum[keyof typeof JsonApiThemeOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching theme entity.
 * @export
 * @interface JsonApiThemePatch
 */
export interface JsonApiThemePatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiThemePatch
     */
    type: JsonApiThemePatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiThemePatch
     */
    id: string;
    /**
     *
     * @type {JsonApiColorPalettePatchAttributes}
     * @memberof JsonApiThemePatch
     */
    attributes: JsonApiColorPalettePatchAttributes;
}

export const JsonApiThemePatchTypeEnum = {
    THEME: "theme",
} as const;

export type JsonApiThemePatchTypeEnum =
    typeof JsonApiThemePatchTypeEnum[keyof typeof JsonApiThemePatchTypeEnum];

/**
 *
 * @export
 * @interface JsonApiThemePatchDocument
 */
export interface JsonApiThemePatchDocument {
    /**
     *
     * @type {JsonApiThemePatch}
     * @memberof JsonApiThemePatchDocument
     */
    data: JsonApiThemePatch;
}
/**
 * JSON:API representation of userGroup entity.
 * @export
 * @interface JsonApiUserGroupIn
 */
export interface JsonApiUserGroupIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserGroupIn
     */
    type: JsonApiUserGroupInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserGroupIn
     */
    id: string;
    /**
     *
     * @type {JsonApiUserGroupInRelationships}
     * @memberof JsonApiUserGroupIn
     */
    relationships?: JsonApiUserGroupInRelationships;
}

export const JsonApiUserGroupInTypeEnum = {
    USER_GROUP: "userGroup",
} as const;

export type JsonApiUserGroupInTypeEnum =
    typeof JsonApiUserGroupInTypeEnum[keyof typeof JsonApiUserGroupInTypeEnum];

/**
 *
 * @export
 * @interface JsonApiUserGroupInDocument
 */
export interface JsonApiUserGroupInDocument {
    /**
     *
     * @type {JsonApiUserGroupIn}
     * @memberof JsonApiUserGroupInDocument
     */
    data: JsonApiUserGroupIn;
}
/**
 *
 * @export
 * @interface JsonApiUserGroupInRelationships
 */
export interface JsonApiUserGroupInRelationships {
    /**
     *
     * @type {JsonApiUserGroupInRelationshipsParents}
     * @memberof JsonApiUserGroupInRelationships
     */
    parents?: JsonApiUserGroupInRelationshipsParents;
}
/**
 *
 * @export
 * @interface JsonApiUserGroupInRelationshipsParents
 */
export interface JsonApiUserGroupInRelationshipsParents {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiUserGroupLinkage>}
     * @memberof JsonApiUserGroupInRelationshipsParents
     */
    data: Array<JsonApiUserGroupLinkage>;
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiUserGroupLinkage
 */
export interface JsonApiUserGroupLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiUserGroupLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiUserGroupLinkage
     */
    type: JsonApiUserGroupLinkageTypeEnum;
}

export const JsonApiUserGroupLinkageTypeEnum = {
    USER_GROUP: "userGroup",
} as const;

export type JsonApiUserGroupLinkageTypeEnum =
    typeof JsonApiUserGroupLinkageTypeEnum[keyof typeof JsonApiUserGroupLinkageTypeEnum];

/**
 * JSON:API representation of userGroup entity.
 * @export
 * @interface JsonApiUserGroupOut
 */
export interface JsonApiUserGroupOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserGroupOut
     */
    type: JsonApiUserGroupOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserGroupOut
     */
    id: string;
    /**
     *
     * @type {JsonApiUserGroupInRelationships}
     * @memberof JsonApiUserGroupOut
     */
    relationships?: JsonApiUserGroupInRelationships;
}

export const JsonApiUserGroupOutTypeEnum = {
    USER_GROUP: "userGroup",
} as const;

export type JsonApiUserGroupOutTypeEnum =
    typeof JsonApiUserGroupOutTypeEnum[keyof typeof JsonApiUserGroupOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiUserGroupOutDocument
 */
export interface JsonApiUserGroupOutDocument {
    /**
     *
     * @type {JsonApiUserGroupOut}
     * @memberof JsonApiUserGroupOutDocument
     */
    data: JsonApiUserGroupOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiUserGroupOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserGroupOutWithLinks>}
     * @memberof JsonApiUserGroupOutDocument
     */
    included?: Array<JsonApiUserGroupOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiUserGroupOutList
 */
export interface JsonApiUserGroupOutList {
    /**
     *
     * @type {Array<JsonApiUserGroupOutWithLinks>}
     * @memberof JsonApiUserGroupOutList
     */
    data: Array<JsonApiUserGroupOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiUserGroupOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserGroupOutWithLinks>}
     * @memberof JsonApiUserGroupOutList
     */
    included?: Array<JsonApiUserGroupOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiUserGroupOutWithLinks
 */
export interface JsonApiUserGroupOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserGroupOutWithLinks
     */
    type: JsonApiUserGroupOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserGroupOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiUserGroupInRelationships}
     * @memberof JsonApiUserGroupOutWithLinks
     */
    relationships?: JsonApiUserGroupInRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiUserGroupOutWithLinks
     */
    links?: ObjectLinks;
}

export const JsonApiUserGroupOutWithLinksTypeEnum = {
    USER_GROUP: "userGroup",
} as const;

export type JsonApiUserGroupOutWithLinksTypeEnum =
    typeof JsonApiUserGroupOutWithLinksTypeEnum[keyof typeof JsonApiUserGroupOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching userGroup entity.
 * @export
 * @interface JsonApiUserGroupPatch
 */
export interface JsonApiUserGroupPatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserGroupPatch
     */
    type: JsonApiUserGroupPatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserGroupPatch
     */
    id: string;
    /**
     *
     * @type {JsonApiUserGroupInRelationships}
     * @memberof JsonApiUserGroupPatch
     */
    relationships?: JsonApiUserGroupInRelationships;
}

export const JsonApiUserGroupPatchTypeEnum = {
    USER_GROUP: "userGroup",
} as const;

export type JsonApiUserGroupPatchTypeEnum =
    typeof JsonApiUserGroupPatchTypeEnum[keyof typeof JsonApiUserGroupPatchTypeEnum];

/**
 *
 * @export
 * @interface JsonApiUserGroupPatchDocument
 */
export interface JsonApiUserGroupPatchDocument {
    /**
     *
     * @type {JsonApiUserGroupPatch}
     * @memberof JsonApiUserGroupPatchDocument
     */
    data: JsonApiUserGroupPatch;
}
/**
 * @type JsonApiUserGroupToOneLinkage
 * References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
 * @export
 */
export type JsonApiUserGroupToOneLinkage = JsonApiUserGroupLinkage;

/**
 * JSON:API representation of user entity.
 * @export
 * @interface JsonApiUserIn
 */
export interface JsonApiUserIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserIn
     */
    type: JsonApiUserInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserIn
     */
    id: string;
    /**
     *
     * @type {JsonApiUserInAttributes}
     * @memberof JsonApiUserIn
     */
    attributes?: JsonApiUserInAttributes;
    /**
     *
     * @type {JsonApiUserInRelationships}
     * @memberof JsonApiUserIn
     */
    relationships?: JsonApiUserInRelationships;
}

export const JsonApiUserInTypeEnum = {
    USER: "user",
} as const;

export type JsonApiUserInTypeEnum = typeof JsonApiUserInTypeEnum[keyof typeof JsonApiUserInTypeEnum];

/**
 *
 * @export
 * @interface JsonApiUserInAttributes
 */
export interface JsonApiUserInAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiUserInAttributes
     */
    authenticationId?: string;
}
/**
 *
 * @export
 * @interface JsonApiUserInDocument
 */
export interface JsonApiUserInDocument {
    /**
     *
     * @type {JsonApiUserIn}
     * @memberof JsonApiUserInDocument
     */
    data: JsonApiUserIn;
}
/**
 *
 * @export
 * @interface JsonApiUserInRelationships
 */
export interface JsonApiUserInRelationships {
    /**
     *
     * @type {JsonApiUserGroupInRelationshipsParents}
     * @memberof JsonApiUserInRelationships
     */
    userGroups?: JsonApiUserGroupInRelationshipsParents;
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiUserLinkage
 */
export interface JsonApiUserLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiUserLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiUserLinkage
     */
    type: JsonApiUserLinkageTypeEnum;
}

export const JsonApiUserLinkageTypeEnum = {
    USER: "user",
} as const;

export type JsonApiUserLinkageTypeEnum =
    typeof JsonApiUserLinkageTypeEnum[keyof typeof JsonApiUserLinkageTypeEnum];

/**
 * JSON:API representation of user entity.
 * @export
 * @interface JsonApiUserOut
 */
export interface JsonApiUserOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserOut
     */
    type: JsonApiUserOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserOut
     */
    id: string;
    /**
     *
     * @type {JsonApiUserInAttributes}
     * @memberof JsonApiUserOut
     */
    attributes?: JsonApiUserInAttributes;
    /**
     *
     * @type {JsonApiUserInRelationships}
     * @memberof JsonApiUserOut
     */
    relationships?: JsonApiUserInRelationships;
}

export const JsonApiUserOutTypeEnum = {
    USER: "user",
} as const;

export type JsonApiUserOutTypeEnum = typeof JsonApiUserOutTypeEnum[keyof typeof JsonApiUserOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiUserOutDocument
 */
export interface JsonApiUserOutDocument {
    /**
     *
     * @type {JsonApiUserOut}
     * @memberof JsonApiUserOutDocument
     */
    data: JsonApiUserOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiUserOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserGroupOutWithLinks>}
     * @memberof JsonApiUserOutDocument
     */
    included?: Array<JsonApiUserGroupOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiUserOutList
 */
export interface JsonApiUserOutList {
    /**
     *
     * @type {Array<JsonApiUserOutWithLinks>}
     * @memberof JsonApiUserOutList
     */
    data: Array<JsonApiUserOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiUserOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserGroupOutWithLinks>}
     * @memberof JsonApiUserOutList
     */
    included?: Array<JsonApiUserGroupOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiUserOutWithLinks
 */
export interface JsonApiUserOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserOutWithLinks
     */
    type: JsonApiUserOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiUserInAttributes}
     * @memberof JsonApiUserOutWithLinks
     */
    attributes?: JsonApiUserInAttributes;
    /**
     *
     * @type {JsonApiUserInRelationships}
     * @memberof JsonApiUserOutWithLinks
     */
    relationships?: JsonApiUserInRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiUserOutWithLinks
     */
    links?: ObjectLinks;
}

export const JsonApiUserOutWithLinksTypeEnum = {
    USER: "user",
} as const;

export type JsonApiUserOutWithLinksTypeEnum =
    typeof JsonApiUserOutWithLinksTypeEnum[keyof typeof JsonApiUserOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching user entity.
 * @export
 * @interface JsonApiUserPatch
 */
export interface JsonApiUserPatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserPatch
     */
    type: JsonApiUserPatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserPatch
     */
    id: string;
    /**
     *
     * @type {JsonApiUserInAttributes}
     * @memberof JsonApiUserPatch
     */
    attributes?: JsonApiUserInAttributes;
    /**
     *
     * @type {JsonApiUserInRelationships}
     * @memberof JsonApiUserPatch
     */
    relationships?: JsonApiUserInRelationships;
}

export const JsonApiUserPatchTypeEnum = {
    USER: "user",
} as const;

export type JsonApiUserPatchTypeEnum = typeof JsonApiUserPatchTypeEnum[keyof typeof JsonApiUserPatchTypeEnum];

/**
 *
 * @export
 * @interface JsonApiUserPatchDocument
 */
export interface JsonApiUserPatchDocument {
    /**
     *
     * @type {JsonApiUserPatch}
     * @memberof JsonApiUserPatchDocument
     */
    data: JsonApiUserPatch;
}
/**
 * JSON:API representation of userSetting entity.
 * @export
 * @interface JsonApiUserSettingIn
 */
export interface JsonApiUserSettingIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserSettingIn
     */
    type: JsonApiUserSettingInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserSettingIn
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceSettingPatchAttributes}
     * @memberof JsonApiUserSettingIn
     */
    attributes?: JsonApiWorkspaceSettingPatchAttributes;
}

export const JsonApiUserSettingInTypeEnum = {
    USER_SETTING: "userSetting",
} as const;

export type JsonApiUserSettingInTypeEnum =
    typeof JsonApiUserSettingInTypeEnum[keyof typeof JsonApiUserSettingInTypeEnum];

/**
 *
 * @export
 * @interface JsonApiUserSettingInDocument
 */
export interface JsonApiUserSettingInDocument {
    /**
     *
     * @type {JsonApiUserSettingIn}
     * @memberof JsonApiUserSettingInDocument
     */
    data: JsonApiUserSettingIn;
}
/**
 * JSON:API representation of userSetting entity.
 * @export
 * @interface JsonApiUserSettingOut
 */
export interface JsonApiUserSettingOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserSettingOut
     */
    type: JsonApiUserSettingOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserSettingOut
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceSettingPatchAttributes}
     * @memberof JsonApiUserSettingOut
     */
    attributes?: JsonApiWorkspaceSettingPatchAttributes;
}

export const JsonApiUserSettingOutTypeEnum = {
    USER_SETTING: "userSetting",
} as const;

export type JsonApiUserSettingOutTypeEnum =
    typeof JsonApiUserSettingOutTypeEnum[keyof typeof JsonApiUserSettingOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiUserSettingOutDocument
 */
export interface JsonApiUserSettingOutDocument {
    /**
     *
     * @type {JsonApiUserSettingOut}
     * @memberof JsonApiUserSettingOutDocument
     */
    data: JsonApiUserSettingOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiUserSettingOutDocument
     */
    links?: ObjectLinks;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiUserSettingOutList
 */
export interface JsonApiUserSettingOutList {
    /**
     *
     * @type {Array<JsonApiUserSettingOutWithLinks>}
     * @memberof JsonApiUserSettingOutList
     */
    data: Array<JsonApiUserSettingOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiUserSettingOutList
     */
    links?: ListLinks;
}
/**
 *
 * @export
 * @interface JsonApiUserSettingOutWithLinks
 */
export interface JsonApiUserSettingOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserSettingOutWithLinks
     */
    type: JsonApiUserSettingOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserSettingOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceSettingPatchAttributes}
     * @memberof JsonApiUserSettingOutWithLinks
     */
    attributes?: JsonApiWorkspaceSettingPatchAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiUserSettingOutWithLinks
     */
    links?: ObjectLinks;
}

export const JsonApiUserSettingOutWithLinksTypeEnum = {
    USER_SETTING: "userSetting",
} as const;

export type JsonApiUserSettingOutWithLinksTypeEnum =
    typeof JsonApiUserSettingOutWithLinksTypeEnum[keyof typeof JsonApiUserSettingOutWithLinksTypeEnum];

/**
 * @type JsonApiUserToOneLinkage
 * References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
 * @export
 */
export type JsonApiUserToOneLinkage = JsonApiUserLinkage;

/**
 * JSON:API representation of visualizationObject entity.
 * @export
 * @interface JsonApiVisualizationObjectIn
 */
export interface JsonApiVisualizationObjectIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiVisualizationObjectIn
     */
    type: JsonApiVisualizationObjectInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiVisualizationObjectIn
     */
    id: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardPatchAttributes}
     * @memberof JsonApiVisualizationObjectIn
     */
    attributes?: JsonApiAnalyticalDashboardPatchAttributes;
}

export const JsonApiVisualizationObjectInTypeEnum = {
    VISUALIZATION_OBJECT: "visualizationObject",
} as const;

export type JsonApiVisualizationObjectInTypeEnum =
    typeof JsonApiVisualizationObjectInTypeEnum[keyof typeof JsonApiVisualizationObjectInTypeEnum];

/**
 *
 * @export
 * @interface JsonApiVisualizationObjectInDocument
 */
export interface JsonApiVisualizationObjectInDocument {
    /**
     *
     * @type {JsonApiVisualizationObjectIn}
     * @memberof JsonApiVisualizationObjectInDocument
     */
    data: JsonApiVisualizationObjectIn;
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiVisualizationObjectLinkage
 */
export interface JsonApiVisualizationObjectLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiVisualizationObjectLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiVisualizationObjectLinkage
     */
    type: JsonApiVisualizationObjectLinkageTypeEnum;
}

export const JsonApiVisualizationObjectLinkageTypeEnum = {
    VISUALIZATION_OBJECT: "visualizationObject",
} as const;

export type JsonApiVisualizationObjectLinkageTypeEnum =
    typeof JsonApiVisualizationObjectLinkageTypeEnum[keyof typeof JsonApiVisualizationObjectLinkageTypeEnum];

/**
 * JSON:API representation of visualizationObject entity.
 * @export
 * @interface JsonApiVisualizationObjectOut
 */
export interface JsonApiVisualizationObjectOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiVisualizationObjectOut
     */
    type: JsonApiVisualizationObjectOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiVisualizationObjectOut
     */
    id: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardPatchAttributes}
     * @memberof JsonApiVisualizationObjectOut
     */
    attributes?: JsonApiAnalyticalDashboardPatchAttributes;
    /**
     *
     * @type {JsonApiMetricOutRelationships}
     * @memberof JsonApiVisualizationObjectOut
     */
    relationships?: JsonApiMetricOutRelationships;
}

export const JsonApiVisualizationObjectOutTypeEnum = {
    VISUALIZATION_OBJECT: "visualizationObject",
} as const;

export type JsonApiVisualizationObjectOutTypeEnum =
    typeof JsonApiVisualizationObjectOutTypeEnum[keyof typeof JsonApiVisualizationObjectOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiVisualizationObjectOutDocument
 */
export interface JsonApiVisualizationObjectOutDocument {
    /**
     *
     * @type {JsonApiVisualizationObjectOut}
     * @memberof JsonApiVisualizationObjectOutDocument
     */
    data: JsonApiVisualizationObjectOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiVisualizationObjectOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiMetricOutIncludes>}
     * @memberof JsonApiVisualizationObjectOutDocument
     */
    included?: Array<JsonApiMetricOutIncludes>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiVisualizationObjectOutList
 */
export interface JsonApiVisualizationObjectOutList {
    /**
     *
     * @type {Array<JsonApiVisualizationObjectOutWithLinks>}
     * @memberof JsonApiVisualizationObjectOutList
     */
    data: Array<JsonApiVisualizationObjectOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiVisualizationObjectOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiMetricOutIncludes>}
     * @memberof JsonApiVisualizationObjectOutList
     */
    included?: Array<JsonApiMetricOutIncludes>;
}
/**
 *
 * @export
 * @interface JsonApiVisualizationObjectOutWithLinks
 */
export interface JsonApiVisualizationObjectOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiVisualizationObjectOutWithLinks
     */
    type: JsonApiVisualizationObjectOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiVisualizationObjectOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardPatchAttributes}
     * @memberof JsonApiVisualizationObjectOutWithLinks
     */
    attributes?: JsonApiAnalyticalDashboardPatchAttributes;
    /**
     *
     * @type {JsonApiMetricOutRelationships}
     * @memberof JsonApiVisualizationObjectOutWithLinks
     */
    relationships?: JsonApiMetricOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiVisualizationObjectOutWithLinks
     */
    links?: ObjectLinks;
}

export const JsonApiVisualizationObjectOutWithLinksTypeEnum = {
    VISUALIZATION_OBJECT: "visualizationObject",
} as const;

export type JsonApiVisualizationObjectOutWithLinksTypeEnum =
    typeof JsonApiVisualizationObjectOutWithLinksTypeEnum[keyof typeof JsonApiVisualizationObjectOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching visualizationObject entity.
 * @export
 * @interface JsonApiVisualizationObjectPatch
 */
export interface JsonApiVisualizationObjectPatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiVisualizationObjectPatch
     */
    type: JsonApiVisualizationObjectPatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiVisualizationObjectPatch
     */
    id: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardPatchAttributes}
     * @memberof JsonApiVisualizationObjectPatch
     */
    attributes?: JsonApiAnalyticalDashboardPatchAttributes;
}

export const JsonApiVisualizationObjectPatchTypeEnum = {
    VISUALIZATION_OBJECT: "visualizationObject",
} as const;

export type JsonApiVisualizationObjectPatchTypeEnum =
    typeof JsonApiVisualizationObjectPatchTypeEnum[keyof typeof JsonApiVisualizationObjectPatchTypeEnum];

/**
 *
 * @export
 * @interface JsonApiVisualizationObjectPatchDocument
 */
export interface JsonApiVisualizationObjectPatchDocument {
    /**
     *
     * @type {JsonApiVisualizationObjectPatch}
     * @memberof JsonApiVisualizationObjectPatchDocument
     */
    data: JsonApiVisualizationObjectPatch;
}
/**
 * JSON:API representation of workspaceDataFilter entity.
 * @export
 * @interface JsonApiWorkspaceDataFilterIn
 */
export interface JsonApiWorkspaceDataFilterIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterIn
     */
    type: JsonApiWorkspaceDataFilterInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterIn
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterPatchAttributes}
     * @memberof JsonApiWorkspaceDataFilterIn
     */
    attributes?: JsonApiWorkspaceDataFilterPatchAttributes;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterPatchRelationships}
     * @memberof JsonApiWorkspaceDataFilterIn
     */
    relationships?: JsonApiWorkspaceDataFilterPatchRelationships;
}

export const JsonApiWorkspaceDataFilterInTypeEnum = {
    WORKSPACE_DATA_FILTER: "workspaceDataFilter",
} as const;

export type JsonApiWorkspaceDataFilterInTypeEnum =
    typeof JsonApiWorkspaceDataFilterInTypeEnum[keyof typeof JsonApiWorkspaceDataFilterInTypeEnum];

/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterInDocument
 */
export interface JsonApiWorkspaceDataFilterInDocument {
    /**
     *
     * @type {JsonApiWorkspaceDataFilterIn}
     * @memberof JsonApiWorkspaceDataFilterInDocument
     */
    data: JsonApiWorkspaceDataFilterIn;
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiWorkspaceDataFilterLinkage
 */
export interface JsonApiWorkspaceDataFilterLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterLinkage
     */
    type: JsonApiWorkspaceDataFilterLinkageTypeEnum;
}

export const JsonApiWorkspaceDataFilterLinkageTypeEnum = {
    WORKSPACE_DATA_FILTER: "workspaceDataFilter",
} as const;

export type JsonApiWorkspaceDataFilterLinkageTypeEnum =
    typeof JsonApiWorkspaceDataFilterLinkageTypeEnum[keyof typeof JsonApiWorkspaceDataFilterLinkageTypeEnum];

/**
 * JSON:API representation of workspaceDataFilter entity.
 * @export
 * @interface JsonApiWorkspaceDataFilterOut
 */
export interface JsonApiWorkspaceDataFilterOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterOut
     */
    type: JsonApiWorkspaceDataFilterOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterOut
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterPatchAttributes}
     * @memberof JsonApiWorkspaceDataFilterOut
     */
    attributes?: JsonApiWorkspaceDataFilterPatchAttributes;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterPatchRelationships}
     * @memberof JsonApiWorkspaceDataFilterOut
     */
    relationships?: JsonApiWorkspaceDataFilterPatchRelationships;
}

export const JsonApiWorkspaceDataFilterOutTypeEnum = {
    WORKSPACE_DATA_FILTER: "workspaceDataFilter",
} as const;

export type JsonApiWorkspaceDataFilterOutTypeEnum =
    typeof JsonApiWorkspaceDataFilterOutTypeEnum[keyof typeof JsonApiWorkspaceDataFilterOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterOutDocument
 */
export interface JsonApiWorkspaceDataFilterOutDocument {
    /**
     *
     * @type {JsonApiWorkspaceDataFilterOut}
     * @memberof JsonApiWorkspaceDataFilterOutDocument
     */
    data: JsonApiWorkspaceDataFilterOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceDataFilterOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiWorkspaceDataFilterSettingOutWithLinks>}
     * @memberof JsonApiWorkspaceDataFilterOutDocument
     */
    included?: Array<JsonApiWorkspaceDataFilterSettingOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiWorkspaceDataFilterOutList
 */
export interface JsonApiWorkspaceDataFilterOutList {
    /**
     *
     * @type {Array<JsonApiWorkspaceDataFilterOutWithLinks>}
     * @memberof JsonApiWorkspaceDataFilterOutList
     */
    data: Array<JsonApiWorkspaceDataFilterOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiWorkspaceDataFilterOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiWorkspaceDataFilterSettingOutWithLinks>}
     * @memberof JsonApiWorkspaceDataFilterOutList
     */
    included?: Array<JsonApiWorkspaceDataFilterSettingOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterOutWithLinks
 */
export interface JsonApiWorkspaceDataFilterOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterOutWithLinks
     */
    type: JsonApiWorkspaceDataFilterOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterPatchAttributes}
     * @memberof JsonApiWorkspaceDataFilterOutWithLinks
     */
    attributes?: JsonApiWorkspaceDataFilterPatchAttributes;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterPatchRelationships}
     * @memberof JsonApiWorkspaceDataFilterOutWithLinks
     */
    relationships?: JsonApiWorkspaceDataFilterPatchRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceDataFilterOutWithLinks
     */
    links?: ObjectLinks;
}

export const JsonApiWorkspaceDataFilterOutWithLinksTypeEnum = {
    WORKSPACE_DATA_FILTER: "workspaceDataFilter",
} as const;

export type JsonApiWorkspaceDataFilterOutWithLinksTypeEnum =
    typeof JsonApiWorkspaceDataFilterOutWithLinksTypeEnum[keyof typeof JsonApiWorkspaceDataFilterOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching workspaceDataFilter entity.
 * @export
 * @interface JsonApiWorkspaceDataFilterPatch
 */
export interface JsonApiWorkspaceDataFilterPatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterPatch
     */
    type: JsonApiWorkspaceDataFilterPatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterPatch
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterPatchAttributes}
     * @memberof JsonApiWorkspaceDataFilterPatch
     */
    attributes?: JsonApiWorkspaceDataFilterPatchAttributes;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterPatchRelationships}
     * @memberof JsonApiWorkspaceDataFilterPatch
     */
    relationships?: JsonApiWorkspaceDataFilterPatchRelationships;
}

export const JsonApiWorkspaceDataFilterPatchTypeEnum = {
    WORKSPACE_DATA_FILTER: "workspaceDataFilter",
} as const;

export type JsonApiWorkspaceDataFilterPatchTypeEnum =
    typeof JsonApiWorkspaceDataFilterPatchTypeEnum[keyof typeof JsonApiWorkspaceDataFilterPatchTypeEnum];

/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterPatchAttributes
 */
export interface JsonApiWorkspaceDataFilterPatchAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterPatchAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterPatchAttributes
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterPatchAttributes
     */
    columnName?: string;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterPatchDocument
 */
export interface JsonApiWorkspaceDataFilterPatchDocument {
    /**
     *
     * @type {JsonApiWorkspaceDataFilterPatch}
     * @memberof JsonApiWorkspaceDataFilterPatchDocument
     */
    data: JsonApiWorkspaceDataFilterPatch;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterPatchRelationships
 */
export interface JsonApiWorkspaceDataFilterPatchRelationships {
    /**
     *
     * @type {JsonApiWorkspaceDataFilterPatchRelationshipsFilterSettings}
     * @memberof JsonApiWorkspaceDataFilterPatchRelationships
     */
    filterSettings?: JsonApiWorkspaceDataFilterPatchRelationshipsFilterSettings;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterPatchRelationshipsFilterSettings
 */
export interface JsonApiWorkspaceDataFilterPatchRelationshipsFilterSettings {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiWorkspaceDataFilterSettingLinkage>}
     * @memberof JsonApiWorkspaceDataFilterPatchRelationshipsFilterSettings
     */
    data: Array<JsonApiWorkspaceDataFilterSettingLinkage>;
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingLinkage
 */
export interface JsonApiWorkspaceDataFilterSettingLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingLinkage
     */
    type: JsonApiWorkspaceDataFilterSettingLinkageTypeEnum;
}

export const JsonApiWorkspaceDataFilterSettingLinkageTypeEnum = {
    WORKSPACE_DATA_FILTER_SETTING: "workspaceDataFilterSetting",
} as const;

export type JsonApiWorkspaceDataFilterSettingLinkageTypeEnum =
    typeof JsonApiWorkspaceDataFilterSettingLinkageTypeEnum[keyof typeof JsonApiWorkspaceDataFilterSettingLinkageTypeEnum];

/**
 * JSON:API representation of workspaceDataFilterSetting entity.
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingOut
 */
export interface JsonApiWorkspaceDataFilterSettingOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingOut
     */
    type: JsonApiWorkspaceDataFilterSettingOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingOut
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingOutAttributes}
     * @memberof JsonApiWorkspaceDataFilterSettingOut
     */
    attributes?: JsonApiWorkspaceDataFilterSettingOutAttributes;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingOutRelationships}
     * @memberof JsonApiWorkspaceDataFilterSettingOut
     */
    relationships?: JsonApiWorkspaceDataFilterSettingOutRelationships;
}

export const JsonApiWorkspaceDataFilterSettingOutTypeEnum = {
    WORKSPACE_DATA_FILTER_SETTING: "workspaceDataFilterSetting",
} as const;

export type JsonApiWorkspaceDataFilterSettingOutTypeEnum =
    typeof JsonApiWorkspaceDataFilterSettingOutTypeEnum[keyof typeof JsonApiWorkspaceDataFilterSettingOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingOutAttributes
 */
export interface JsonApiWorkspaceDataFilterSettingOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingOutAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingOutAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiWorkspaceDataFilterSettingOutAttributes
     */
    filterValues?: Array<string>;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingOutDocument
 */
export interface JsonApiWorkspaceDataFilterSettingOutDocument {
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingOut}
     * @memberof JsonApiWorkspaceDataFilterSettingOutDocument
     */
    data: JsonApiWorkspaceDataFilterSettingOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceDataFilterSettingOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiWorkspaceDataFilterOutWithLinks>}
     * @memberof JsonApiWorkspaceDataFilterSettingOutDocument
     */
    included?: Array<JsonApiWorkspaceDataFilterOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingOutList
 */
export interface JsonApiWorkspaceDataFilterSettingOutList {
    /**
     *
     * @type {Array<JsonApiWorkspaceDataFilterSettingOutWithLinks>}
     * @memberof JsonApiWorkspaceDataFilterSettingOutList
     */
    data: Array<JsonApiWorkspaceDataFilterSettingOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiWorkspaceDataFilterSettingOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiWorkspaceDataFilterOutWithLinks>}
     * @memberof JsonApiWorkspaceDataFilterSettingOutList
     */
    included?: Array<JsonApiWorkspaceDataFilterOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingOutRelationships
 */
export interface JsonApiWorkspaceDataFilterSettingOutRelationships {
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingOutRelationshipsWorkspaceDataFilter}
     * @memberof JsonApiWorkspaceDataFilterSettingOutRelationships
     */
    workspaceDataFilter?: JsonApiWorkspaceDataFilterSettingOutRelationshipsWorkspaceDataFilter;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingOutRelationshipsWorkspaceDataFilter
 */
export interface JsonApiWorkspaceDataFilterSettingOutRelationshipsWorkspaceDataFilter {
    /**
     *
     * @type {JsonApiWorkspaceDataFilterToOneLinkage}
     * @memberof JsonApiWorkspaceDataFilterSettingOutRelationshipsWorkspaceDataFilter
     */
    data: JsonApiWorkspaceDataFilterToOneLinkage | null;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingOutWithLinks
 */
export interface JsonApiWorkspaceDataFilterSettingOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingOutWithLinks
     */
    type: JsonApiWorkspaceDataFilterSettingOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingOutAttributes}
     * @memberof JsonApiWorkspaceDataFilterSettingOutWithLinks
     */
    attributes?: JsonApiWorkspaceDataFilterSettingOutAttributes;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingOutRelationships}
     * @memberof JsonApiWorkspaceDataFilterSettingOutWithLinks
     */
    relationships?: JsonApiWorkspaceDataFilterSettingOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceDataFilterSettingOutWithLinks
     */
    links?: ObjectLinks;
}

export const JsonApiWorkspaceDataFilterSettingOutWithLinksTypeEnum = {
    WORKSPACE_DATA_FILTER_SETTING: "workspaceDataFilterSetting",
} as const;

export type JsonApiWorkspaceDataFilterSettingOutWithLinksTypeEnum =
    typeof JsonApiWorkspaceDataFilterSettingOutWithLinksTypeEnum[keyof typeof JsonApiWorkspaceDataFilterSettingOutWithLinksTypeEnum];

/**
 * @type JsonApiWorkspaceDataFilterToOneLinkage
 * References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
 * @export
 */
export type JsonApiWorkspaceDataFilterToOneLinkage = JsonApiWorkspaceDataFilterLinkage;

/**
 * JSON:API representation of workspace entity.
 * @export
 * @interface JsonApiWorkspaceIn
 */
export interface JsonApiWorkspaceIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceIn
     */
    type: JsonApiWorkspaceInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceIn
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceInAttributes}
     * @memberof JsonApiWorkspaceIn
     */
    attributes?: JsonApiWorkspaceInAttributes;
    /**
     *
     * @type {JsonApiWorkspaceInRelationships}
     * @memberof JsonApiWorkspaceIn
     */
    relationships?: JsonApiWorkspaceInRelationships;
}

export const JsonApiWorkspaceInTypeEnum = {
    WORKSPACE: "workspace",
} as const;

export type JsonApiWorkspaceInTypeEnum =
    typeof JsonApiWorkspaceInTypeEnum[keyof typeof JsonApiWorkspaceInTypeEnum];

/**
 *
 * @export
 * @interface JsonApiWorkspaceInAttributes
 */
export interface JsonApiWorkspaceInAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceInAttributes
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceInAttributes
     */
    earlyAccess?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceInAttributes
     */
    description?: string;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceInDocument
 */
export interface JsonApiWorkspaceInDocument {
    /**
     *
     * @type {JsonApiWorkspaceIn}
     * @memberof JsonApiWorkspaceInDocument
     */
    data: JsonApiWorkspaceIn;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceInRelationships
 */
export interface JsonApiWorkspaceInRelationships {
    /**
     *
     * @type {JsonApiWorkspaceInRelationshipsParent}
     * @memberof JsonApiWorkspaceInRelationships
     */
    parent?: JsonApiWorkspaceInRelationshipsParent;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceInRelationshipsParent
 */
export interface JsonApiWorkspaceInRelationshipsParent {
    /**
     *
     * @type {JsonApiWorkspaceToOneLinkage}
     * @memberof JsonApiWorkspaceInRelationshipsParent
     */
    data: JsonApiWorkspaceToOneLinkage | null;
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiWorkspaceLinkage
 */
export interface JsonApiWorkspaceLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceLinkage
     */
    type: JsonApiWorkspaceLinkageTypeEnum;
}

export const JsonApiWorkspaceLinkageTypeEnum = {
    WORKSPACE: "workspace",
} as const;

export type JsonApiWorkspaceLinkageTypeEnum =
    typeof JsonApiWorkspaceLinkageTypeEnum[keyof typeof JsonApiWorkspaceLinkageTypeEnum];

/**
 * JSON:API representation of workspace entity.
 * @export
 * @interface JsonApiWorkspaceOut
 */
export interface JsonApiWorkspaceOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceOut
     */
    type: JsonApiWorkspaceOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceOut
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceOutMeta}
     * @memberof JsonApiWorkspaceOut
     */
    meta?: JsonApiWorkspaceOutMeta;
    /**
     *
     * @type {JsonApiWorkspaceInAttributes}
     * @memberof JsonApiWorkspaceOut
     */
    attributes?: JsonApiWorkspaceInAttributes;
    /**
     *
     * @type {JsonApiWorkspaceInRelationships}
     * @memberof JsonApiWorkspaceOut
     */
    relationships?: JsonApiWorkspaceInRelationships;
}

export const JsonApiWorkspaceOutTypeEnum = {
    WORKSPACE: "workspace",
} as const;

export type JsonApiWorkspaceOutTypeEnum =
    typeof JsonApiWorkspaceOutTypeEnum[keyof typeof JsonApiWorkspaceOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiWorkspaceOutDocument
 */
export interface JsonApiWorkspaceOutDocument {
    /**
     *
     * @type {JsonApiWorkspaceOut}
     * @memberof JsonApiWorkspaceOutDocument
     */
    data: JsonApiWorkspaceOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiWorkspaceOutWithLinks>}
     * @memberof JsonApiWorkspaceOutDocument
     */
    included?: Array<JsonApiWorkspaceOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiWorkspaceOutList
 */
export interface JsonApiWorkspaceOutList {
    /**
     *
     * @type {Array<JsonApiWorkspaceOutWithLinks>}
     * @memberof JsonApiWorkspaceOutList
     */
    data: Array<JsonApiWorkspaceOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiWorkspaceOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiWorkspaceOutWithLinks>}
     * @memberof JsonApiWorkspaceOutList
     */
    included?: Array<JsonApiWorkspaceOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceOutMeta
 */
export interface JsonApiWorkspaceOutMeta {
    /**
     *
     * @type {JsonApiWorkspaceOutMetaConfig}
     * @memberof JsonApiWorkspaceOutMeta
     */
    config?: JsonApiWorkspaceOutMetaConfig;
    /**
     * List of valid permissions for a logged user.
     * @type {Array<string>}
     * @memberof JsonApiWorkspaceOutMeta
     */
    permissions?: Array<JsonApiWorkspaceOutMetaPermissionsEnum>;
}

export const JsonApiWorkspaceOutMetaPermissionsEnum = {
    MANAGE: "MANAGE",
    ANALYZE: "ANALYZE",
    EXPORT: "EXPORT",
    VIEW: "VIEW",
} as const;

export type JsonApiWorkspaceOutMetaPermissionsEnum =
    typeof JsonApiWorkspaceOutMetaPermissionsEnum[keyof typeof JsonApiWorkspaceOutMetaPermissionsEnum];

/**
 *
 * @export
 * @interface JsonApiWorkspaceOutMetaConfig
 */
export interface JsonApiWorkspaceOutMetaConfig {
    /**
     * is sampling enabled - based on type of data-source connected to this workspace
     * @type {boolean}
     * @memberof JsonApiWorkspaceOutMetaConfig
     */
    dataSamplingAvailable: boolean;
    /**
     * is approximate count enabled - based on type of data-source connected to this workspace
     * @type {boolean}
     * @memberof JsonApiWorkspaceOutMetaConfig
     */
    approximateCountAvailable: boolean;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceOutWithLinks
 */
export interface JsonApiWorkspaceOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceOutWithLinks
     */
    type: JsonApiWorkspaceOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceOutMeta}
     * @memberof JsonApiWorkspaceOutWithLinks
     */
    meta?: JsonApiWorkspaceOutMeta;
    /**
     *
     * @type {JsonApiWorkspaceInAttributes}
     * @memberof JsonApiWorkspaceOutWithLinks
     */
    attributes?: JsonApiWorkspaceInAttributes;
    /**
     *
     * @type {JsonApiWorkspaceInRelationships}
     * @memberof JsonApiWorkspaceOutWithLinks
     */
    relationships?: JsonApiWorkspaceInRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceOutWithLinks
     */
    links?: ObjectLinks;
}

export const JsonApiWorkspaceOutWithLinksTypeEnum = {
    WORKSPACE: "workspace",
} as const;

export type JsonApiWorkspaceOutWithLinksTypeEnum =
    typeof JsonApiWorkspaceOutWithLinksTypeEnum[keyof typeof JsonApiWorkspaceOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching workspace entity.
 * @export
 * @interface JsonApiWorkspacePatch
 */
export interface JsonApiWorkspacePatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspacePatch
     */
    type: JsonApiWorkspacePatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspacePatch
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceInAttributes}
     * @memberof JsonApiWorkspacePatch
     */
    attributes?: JsonApiWorkspaceInAttributes;
    /**
     *
     * @type {JsonApiWorkspaceInRelationships}
     * @memberof JsonApiWorkspacePatch
     */
    relationships?: JsonApiWorkspaceInRelationships;
}

export const JsonApiWorkspacePatchTypeEnum = {
    WORKSPACE: "workspace",
} as const;

export type JsonApiWorkspacePatchTypeEnum =
    typeof JsonApiWorkspacePatchTypeEnum[keyof typeof JsonApiWorkspacePatchTypeEnum];

/**
 *
 * @export
 * @interface JsonApiWorkspacePatchDocument
 */
export interface JsonApiWorkspacePatchDocument {
    /**
     *
     * @type {JsonApiWorkspacePatch}
     * @memberof JsonApiWorkspacePatchDocument
     */
    data: JsonApiWorkspacePatch;
}
/**
 * JSON:API representation of workspaceSetting entity.
 * @export
 * @interface JsonApiWorkspaceSettingIn
 */
export interface JsonApiWorkspaceSettingIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceSettingIn
     */
    type: JsonApiWorkspaceSettingInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceSettingIn
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceSettingPatchAttributes}
     * @memberof JsonApiWorkspaceSettingIn
     */
    attributes?: JsonApiWorkspaceSettingPatchAttributes;
}

export const JsonApiWorkspaceSettingInTypeEnum = {
    WORKSPACE_SETTING: "workspaceSetting",
} as const;

export type JsonApiWorkspaceSettingInTypeEnum =
    typeof JsonApiWorkspaceSettingInTypeEnum[keyof typeof JsonApiWorkspaceSettingInTypeEnum];

/**
 *
 * @export
 * @interface JsonApiWorkspaceSettingInDocument
 */
export interface JsonApiWorkspaceSettingInDocument {
    /**
     *
     * @type {JsonApiWorkspaceSettingIn}
     * @memberof JsonApiWorkspaceSettingInDocument
     */
    data: JsonApiWorkspaceSettingIn;
}
/**
 * JSON:API representation of workspaceSetting entity.
 * @export
 * @interface JsonApiWorkspaceSettingOut
 */
export interface JsonApiWorkspaceSettingOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceSettingOut
     */
    type: JsonApiWorkspaceSettingOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceSettingOut
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceSettingPatchAttributes}
     * @memberof JsonApiWorkspaceSettingOut
     */
    attributes?: JsonApiWorkspaceSettingPatchAttributes;
}

export const JsonApiWorkspaceSettingOutTypeEnum = {
    WORKSPACE_SETTING: "workspaceSetting",
} as const;

export type JsonApiWorkspaceSettingOutTypeEnum =
    typeof JsonApiWorkspaceSettingOutTypeEnum[keyof typeof JsonApiWorkspaceSettingOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiWorkspaceSettingOutDocument
 */
export interface JsonApiWorkspaceSettingOutDocument {
    /**
     *
     * @type {JsonApiWorkspaceSettingOut}
     * @memberof JsonApiWorkspaceSettingOutDocument
     */
    data: JsonApiWorkspaceSettingOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceSettingOutDocument
     */
    links?: ObjectLinks;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiWorkspaceSettingOutList
 */
export interface JsonApiWorkspaceSettingOutList {
    /**
     *
     * @type {Array<JsonApiWorkspaceSettingOutWithLinks>}
     * @memberof JsonApiWorkspaceSettingOutList
     */
    data: Array<JsonApiWorkspaceSettingOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiWorkspaceSettingOutList
     */
    links?: ListLinks;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceSettingOutWithLinks
 */
export interface JsonApiWorkspaceSettingOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceSettingOutWithLinks
     */
    type: JsonApiWorkspaceSettingOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceSettingOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceSettingPatchAttributes}
     * @memberof JsonApiWorkspaceSettingOutWithLinks
     */
    attributes?: JsonApiWorkspaceSettingPatchAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceSettingOutWithLinks
     */
    links?: ObjectLinks;
}

export const JsonApiWorkspaceSettingOutWithLinksTypeEnum = {
    WORKSPACE_SETTING: "workspaceSetting",
} as const;

export type JsonApiWorkspaceSettingOutWithLinksTypeEnum =
    typeof JsonApiWorkspaceSettingOutWithLinksTypeEnum[keyof typeof JsonApiWorkspaceSettingOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching workspaceSetting entity.
 * @export
 * @interface JsonApiWorkspaceSettingPatch
 */
export interface JsonApiWorkspaceSettingPatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceSettingPatch
     */
    type: JsonApiWorkspaceSettingPatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceSettingPatch
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceSettingPatchAttributes}
     * @memberof JsonApiWorkspaceSettingPatch
     */
    attributes?: JsonApiWorkspaceSettingPatchAttributes;
}

export const JsonApiWorkspaceSettingPatchTypeEnum = {
    WORKSPACE_SETTING: "workspaceSetting",
} as const;

export type JsonApiWorkspaceSettingPatchTypeEnum =
    typeof JsonApiWorkspaceSettingPatchTypeEnum[keyof typeof JsonApiWorkspaceSettingPatchTypeEnum];

/**
 *
 * @export
 * @interface JsonApiWorkspaceSettingPatchAttributes
 */
export interface JsonApiWorkspaceSettingPatchAttributes {
    /**
     *
     * @type {object}
     * @memberof JsonApiWorkspaceSettingPatchAttributes
     */
    content?: object;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceSettingPatchDocument
 */
export interface JsonApiWorkspaceSettingPatchDocument {
    /**
     *
     * @type {JsonApiWorkspaceSettingPatch}
     * @memberof JsonApiWorkspaceSettingPatchDocument
     */
    data: JsonApiWorkspaceSettingPatch;
}
/**
 * @type JsonApiWorkspaceToOneLinkage
 * References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
 * @export
 */
export type JsonApiWorkspaceToOneLinkage = JsonApiWorkspaceLinkage;

/**
 * A label identifier.
 * @export
 * @interface LabelIdentifier
 */
export interface LabelIdentifier {
    /**
     * Label ID.
     * @type {string}
     * @memberof LabelIdentifier
     */
    id: string;
    /**
     * A type of the label.
     * @type {string}
     * @memberof LabelIdentifier
     */
    type: LabelIdentifierTypeEnum;
}

export const LabelIdentifierTypeEnum = {
    LABEL: "label",
} as const;

export type LabelIdentifierTypeEnum = typeof LabelIdentifierTypeEnum[keyof typeof LabelIdentifierTypeEnum];

/**
 *
 * @export
 * @interface ListLinks
 */
export interface ListLinks {
    /**
     * A string containing the link\'s URL.
     * @type {string}
     * @memberof ListLinks
     */
    self: string;
    /**
     * A string containing the link\'s URL for the next page of data.
     * @type {string}
     * @memberof ListLinks
     */
    next?: string;
}
/**
 *
 * @export
 * @interface ListLinksAllOf
 */
export interface ListLinksAllOf {
    /**
     * A string containing the link\'s URL for the next page of data.
     * @type {string}
     * @memberof ListLinksAllOf
     */
    next?: string;
}
/**
 *
 * @export
 * @interface ObjectLinks
 */
export interface ObjectLinks {
    /**
     * A string containing the link\'s URL.
     * @type {string}
     * @memberof ObjectLinks
     */
    self: string;
}
/**
 *
 * @export
 * @interface ObjectLinksContainer
 */
export interface ObjectLinksContainer {
    /**
     *
     * @type {ObjectLinks}
     * @memberof ObjectLinksContainer
     */
    links?: ObjectLinks;
}
/**
 *
 * @export
 * @interface Parameter
 */
export interface Parameter {
    /**
     *
     * @type {string}
     * @memberof Parameter
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof Parameter
     */
    value: string;
}
/**
 *
 * @export
 * @interface PlatformUsage
 */
export interface PlatformUsage {
    /**
     *
     * @type {string}
     * @memberof PlatformUsage
     */
    name: PlatformUsageNameEnum;
    /**
     *
     * @type {number}
     * @memberof PlatformUsage
     */
    count?: number;
}

export const PlatformUsageNameEnum = {
    USER_COUNT: "UserCount",
    WORKSPACE_COUNT: "WorkspaceCount",
} as const;

export type PlatformUsageNameEnum = typeof PlatformUsageNameEnum[keyof typeof PlatformUsageNameEnum];

/**
 *
 * @export
 * @interface PlatformUsageRequest
 */
export interface PlatformUsageRequest {
    /**
     *
     * @type {Array<string>}
     * @memberof PlatformUsageRequest
     */
    usageItemNames: Array<PlatformUsageRequestUsageItemNamesEnum>;
}

export const PlatformUsageRequestUsageItemNamesEnum = {
    USER_COUNT: "UserCount",
    WORKSPACE_COUNT: "WorkspaceCount",
} as const;

export type PlatformUsageRequestUsageItemNamesEnum =
    typeof PlatformUsageRequestUsageItemNamesEnum[keyof typeof PlatformUsageRequestUsageItemNamesEnum];

/**
 * A reference identifier.
 * @export
 * @interface ReferenceIdentifier
 */
export interface ReferenceIdentifier {
    /**
     * Reference ID.
     * @type {string}
     * @memberof ReferenceIdentifier
     */
    id: string;
    /**
     * A type of the reference.
     * @type {string}
     * @memberof ReferenceIdentifier
     */
    type: ReferenceIdentifierTypeEnum;
}

export const ReferenceIdentifierTypeEnum = {
    DATASET: "dataset",
} as const;

export type ReferenceIdentifierTypeEnum =
    typeof ReferenceIdentifierTypeEnum[keyof typeof ReferenceIdentifierTypeEnum];

/**
 * A request containing setting IDs to resolve.
 * @export
 * @interface ResolveSettingsRequest
 */
export interface ResolveSettingsRequest {
    /**
     * An array of setting IDs to resolve.
     * @type {Array<string>}
     * @memberof ResolveSettingsRequest
     */
    settings: Array<string>;
}
/**
 * A user group identifier.
 * @export
 * @interface UserGroupIdentifier
 */
export interface UserGroupIdentifier {
    /**
     * Identifier of the user group.
     * @type {string}
     * @memberof UserGroupIdentifier
     */
    id: string;
    /**
     * A type.
     * @type {string}
     * @memberof UserGroupIdentifier
     */
    type: UserGroupIdentifierTypeEnum;
}

export const UserGroupIdentifierTypeEnum = {
    USER_GROUP: "userGroup",
} as const;

export type UserGroupIdentifierTypeEnum =
    typeof UserGroupIdentifierTypeEnum[keyof typeof UserGroupIdentifierTypeEnum];

/**
 * A workspace identifier.
 * @export
 * @interface WorkspaceIdentifier
 */
export interface WorkspaceIdentifier {
    /**
     * Identifier of the workspace.
     * @type {string}
     * @memberof WorkspaceIdentifier
     */
    id: string;
    /**
     * A type.
     * @type {string}
     * @memberof WorkspaceIdentifier
     */
    type: WorkspaceIdentifierTypeEnum;
}

export const WorkspaceIdentifierTypeEnum = {
    WORKSPACE: "workspace",
} as const;

export type WorkspaceIdentifierTypeEnum =
    typeof WorkspaceIdentifierTypeEnum[keyof typeof WorkspaceIdentifierTypeEnum];

/**
 * ActionsApi - axios parameter creator
 * @export
 */
export const ActionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Provides information about platform usage, like amount of users, workspaces, ...
         * @summary Info about the platform usage.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allPlatformUsage: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/actions/collectUsage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate logical data model (LDM) from physical data model (PDM) stored in data source.
         * @summary Generate logical data model (LDM) from physical data model (PDM)
         * @param {string} dataSourceId
         * @param {GenerateLdmRequest} generateLdmRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateLogicalModel: async (
            dataSourceId: string,
            generateLdmRequest: GenerateLdmRequest,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'dataSourceId' is not null or undefined
            assertParamExists("generateLogicalModel", "dataSourceId", dataSourceId);
            // verify required parameter 'generateLdmRequest' is not null or undefined
            assertParamExists("generateLogicalModel", "generateLdmRequest", generateLdmRequest);
            const localVarPath = `/api/v1/actions/dataSources/{dataSourceId}/generateLogicalModel`.replace(
                `{${"dataSourceId"}}`,
                encodeURIComponent(String(dataSourceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof generateLdmRequest !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(generateLdmRequest !== undefined ? generateLdmRequest : {})
                : generateLdmRequest || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Computes the dependent entities graph
         * @summary Computes the dependent entities graph
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDependentEntitiesGraph: async (
            workspaceId: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getDependentEntitiesGraph", "workspaceId", workspaceId);
            const localVarPath = `/api/v1/actions/workspaces/{workspaceId}/dependentEntitiesGraph`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Computes the dependent entities graph from given entry points
         * @summary Computes the dependent entities graph from given entry points
         * @param {string} workspaceId
         * @param {DependentEntitiesRequest} dependentEntitiesRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDependentEntitiesGraphFromEntryPoints: async (
            workspaceId: string,
            dependentEntitiesRequest: DependentEntitiesRequest,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getDependentEntitiesGraphFromEntryPoints", "workspaceId", workspaceId);
            // verify required parameter 'dependentEntitiesRequest' is not null or undefined
            assertParamExists(
                "getDependentEntitiesGraphFromEntryPoints",
                "dependentEntitiesRequest",
                dependentEntitiesRequest,
            );
            const localVarPath = `/api/v1/actions/workspaces/{workspaceId}/dependentEntitiesGraph`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof dependentEntitiesRequest !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(dependentEntitiesRequest !== undefined ? dependentEntitiesRequest : {})
                : dependentEntitiesRequest || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides information about platform usage, like amount of users, workspaces, ...
         * @summary Info about the platform usage for particular items.
         * @param {PlatformUsageRequest} platformUsageRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        particularPlatformUsage: async (
            platformUsageRequest: PlatformUsageRequest,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'platformUsageRequest' is not null or undefined
            assertParamExists("particularPlatformUsage", "platformUsageRequest", platformUsageRequest);
            const localVarPath = `/api/v1/actions/collectUsage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof platformUsageRequest !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(platformUsageRequest !== undefined ? platformUsageRequest : {})
                : platformUsageRequest || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Notification sets up all reports to be computed again with new data.
         * @summary Register an upload notification
         * @param {string} dataSourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUploadNotification: async (
            dataSourceId: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'dataSourceId' is not null or undefined
            assertParamExists("registerUploadNotification", "dataSourceId", dataSourceId);
            const localVarPath = `/api/v1/actions/dataSources/{dataSourceId}/uploadNotification`.replace(
                `{${"dataSourceId"}}`,
                encodeURIComponent(String(dataSourceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resolves values of available entitlements for the organization.
         * @summary Values for all public entitlements.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveAllEntitlements: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/actions/resolveEntitlements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resolves values for all settings without workspace by current user, organization, or default settings.
         * @summary Values for all settings without workspace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveAllSettingsWithoutWorkspace: async (
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/actions/resolveSettings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resolves values for requested entitlements in the organization.
         * @summary Values for requested public entitlements.
         * @param {EntitlementsRequest} entitlementsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveRequestedEntitlements: async (
            entitlementsRequest: EntitlementsRequest,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'entitlementsRequest' is not null or undefined
            assertParamExists("resolveRequestedEntitlements", "entitlementsRequest", entitlementsRequest);
            const localVarPath = `/api/v1/actions/resolveEntitlements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof entitlementsRequest !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(entitlementsRequest !== undefined ? entitlementsRequest : {})
                : entitlementsRequest || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resolves values for selected settings without workspace by current user, organization, or default settings.
         * @summary Values for selected settings without workspace.
         * @param {ResolveSettingsRequest} resolveSettingsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveSettingsWithoutWorkspace: async (
            resolveSettingsRequest: ResolveSettingsRequest,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'resolveSettingsRequest' is not null or undefined
            assertParamExists(
                "resolveSettingsWithoutWorkspace",
                "resolveSettingsRequest",
                resolveSettingsRequest,
            );
            const localVarPath = `/api/v1/actions/resolveSettings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof resolveSettingsRequest !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(resolveSettingsRequest !== undefined ? resolveSettingsRequest : {})
                : resolveSettingsRequest || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resolves values for all settings in a workspace by current user, workspace, organization, or default settings.
         * @summary Values for all settings.
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceResolveAllSettings: async (
            workspaceId: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("workspaceResolveAllSettings", "workspaceId", workspaceId);
            const localVarPath = `/api/v1/actions/workspaces/{workspaceId}/resolveSettings`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resolves value for selected settings in a workspace by current user, workspace, organization, or default settings.
         * @summary Values for selected settings.
         * @param {string} workspaceId
         * @param {ResolveSettingsRequest} resolveSettingsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceResolveSettings: async (
            workspaceId: string,
            resolveSettingsRequest: ResolveSettingsRequest,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("workspaceResolveSettings", "workspaceId", workspaceId);
            // verify required parameter 'resolveSettingsRequest' is not null or undefined
            assertParamExists("workspaceResolveSettings", "resolveSettingsRequest", resolveSettingsRequest);
            const localVarPath = `/api/v1/actions/workspaces/{workspaceId}/resolveSettings`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof resolveSettingsRequest !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(resolveSettingsRequest !== undefined ? resolveSettingsRequest : {})
                : resolveSettingsRequest || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * ActionsApi - functional programming interface
 * @export
 */
export const ActionsApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = ActionsApiAxiosParamCreator(configuration);
    return {
        /**
         * Provides information about platform usage, like amount of users, workspaces, ...
         * @summary Info about the platform usage.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allPlatformUsage(
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PlatformUsage>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allPlatformUsage(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generate logical data model (LDM) from physical data model (PDM) stored in data source.
         * @summary Generate logical data model (LDM) from physical data model (PDM)
         * @param {string} dataSourceId
         * @param {GenerateLdmRequest} generateLdmRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateLogicalModel(
            dataSourceId: string,
            generateLdmRequest: GenerateLdmRequest,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateLogicalModel(
                dataSourceId,
                generateLdmRequest,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Computes the dependent entities graph
         * @summary Computes the dependent entities graph
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDependentEntitiesGraph(
            workspaceId: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DependentEntitiesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDependentEntitiesGraph(
                workspaceId,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Computes the dependent entities graph from given entry points
         * @summary Computes the dependent entities graph from given entry points
         * @param {string} workspaceId
         * @param {DependentEntitiesRequest} dependentEntitiesRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDependentEntitiesGraphFromEntryPoints(
            workspaceId: string,
            dependentEntitiesRequest: DependentEntitiesRequest,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DependentEntitiesResponse>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.getDependentEntitiesGraphFromEntryPoints(
                    workspaceId,
                    dependentEntitiesRequest,
                    options,
                );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Provides information about platform usage, like amount of users, workspaces, ...
         * @summary Info about the platform usage for particular items.
         * @param {PlatformUsageRequest} platformUsageRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async particularPlatformUsage(
            platformUsageRequest: PlatformUsageRequest,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PlatformUsage>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.particularPlatformUsage(
                platformUsageRequest,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Notification sets up all reports to be computed again with new data.
         * @summary Register an upload notification
         * @param {string} dataSourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerUploadNotification(
            dataSourceId: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerUploadNotification(
                dataSourceId,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Resolves values of available entitlements for the organization.
         * @summary Values for all public entitlements.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resolveAllEntitlements(
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiEntitlement>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resolveAllEntitlements(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Resolves values for all settings without workspace by current user, organization, or default settings.
         * @summary Values for all settings without workspace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resolveAllSettingsWithoutWorkspace(
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeclarativeSetting>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resolveAllSettingsWithoutWorkspace(
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Resolves values for requested entitlements in the organization.
         * @summary Values for requested public entitlements.
         * @param {EntitlementsRequest} entitlementsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resolveRequestedEntitlements(
            entitlementsRequest: EntitlementsRequest,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiEntitlement>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resolveRequestedEntitlements(
                entitlementsRequest,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Resolves values for selected settings without workspace by current user, organization, or default settings.
         * @summary Values for selected settings without workspace.
         * @param {ResolveSettingsRequest} resolveSettingsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resolveSettingsWithoutWorkspace(
            resolveSettingsRequest: ResolveSettingsRequest,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeclarativeSetting>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resolveSettingsWithoutWorkspace(
                resolveSettingsRequest,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Resolves values for all settings in a workspace by current user, workspace, organization, or default settings.
         * @summary Values for all settings.
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workspaceResolveAllSettings(
            workspaceId: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeclarativeSetting>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workspaceResolveAllSettings(
                workspaceId,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Resolves value for selected settings in a workspace by current user, workspace, organization, or default settings.
         * @summary Values for selected settings.
         * @param {string} workspaceId
         * @param {ResolveSettingsRequest} resolveSettingsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workspaceResolveSettings(
            workspaceId: string,
            resolveSettingsRequest: ResolveSettingsRequest,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeclarativeSetting>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workspaceResolveSettings(
                workspaceId,
                resolveSettingsRequest,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};

/**
 * ActionsApi - factory interface
 * @export
 */
export const ActionsApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    const localVarFp = ActionsApiFp(configuration);
    return {
        /**
         * Provides information about platform usage, like amount of users, workspaces, ...
         * @summary Info about the platform usage.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allPlatformUsage(options?: AxiosRequestConfig): AxiosPromise<Array<PlatformUsage>> {
            return localVarFp.allPlatformUsage(options).then((request) => request(axios, basePath));
        },
        /**
         * Generate logical data model (LDM) from physical data model (PDM) stored in data source.
         * @summary Generate logical data model (LDM) from physical data model (PDM)
         * @param {ActionsApiGenerateLogicalModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateLogicalModel(
            requestParameters: ActionsApiGenerateLogicalModelRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<DeclarativeModel> {
            return localVarFp
                .generateLogicalModel(
                    requestParameters.dataSourceId,
                    requestParameters.generateLdmRequest,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         * Computes the dependent entities graph
         * @summary Computes the dependent entities graph
         * @param {ActionsApiGetDependentEntitiesGraphRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDependentEntitiesGraph(
            requestParameters: ActionsApiGetDependentEntitiesGraphRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<DependentEntitiesResponse> {
            return localVarFp
                .getDependentEntitiesGraph(requestParameters.workspaceId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Computes the dependent entities graph from given entry points
         * @summary Computes the dependent entities graph from given entry points
         * @param {ActionsApiGetDependentEntitiesGraphFromEntryPointsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDependentEntitiesGraphFromEntryPoints(
            requestParameters: ActionsApiGetDependentEntitiesGraphFromEntryPointsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<DependentEntitiesResponse> {
            return localVarFp
                .getDependentEntitiesGraphFromEntryPoints(
                    requestParameters.workspaceId,
                    requestParameters.dependentEntitiesRequest,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         * Provides information about platform usage, like amount of users, workspaces, ...
         * @summary Info about the platform usage for particular items.
         * @param {ActionsApiParticularPlatformUsageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        particularPlatformUsage(
            requestParameters: ActionsApiParticularPlatformUsageRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<Array<PlatformUsage>> {
            return localVarFp
                .particularPlatformUsage(requestParameters.platformUsageRequest, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Notification sets up all reports to be computed again with new data.
         * @summary Register an upload notification
         * @param {ActionsApiRegisterUploadNotificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUploadNotification(
            requestParameters: ActionsApiRegisterUploadNotificationRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .registerUploadNotification(requestParameters.dataSourceId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Resolves values of available entitlements for the organization.
         * @summary Values for all public entitlements.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveAllEntitlements(options?: AxiosRequestConfig): AxiosPromise<Array<ApiEntitlement>> {
            return localVarFp.resolveAllEntitlements(options).then((request) => request(axios, basePath));
        },
        /**
         * Resolves values for all settings without workspace by current user, organization, or default settings.
         * @summary Values for all settings without workspace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveAllSettingsWithoutWorkspace(
            options?: AxiosRequestConfig,
        ): AxiosPromise<Array<DeclarativeSetting>> {
            return localVarFp
                .resolveAllSettingsWithoutWorkspace(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Resolves values for requested entitlements in the organization.
         * @summary Values for requested public entitlements.
         * @param {ActionsApiResolveRequestedEntitlementsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveRequestedEntitlements(
            requestParameters: ActionsApiResolveRequestedEntitlementsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<Array<ApiEntitlement>> {
            return localVarFp
                .resolveRequestedEntitlements(requestParameters.entitlementsRequest, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Resolves values for selected settings without workspace by current user, organization, or default settings.
         * @summary Values for selected settings without workspace.
         * @param {ActionsApiResolveSettingsWithoutWorkspaceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveSettingsWithoutWorkspace(
            requestParameters: ActionsApiResolveSettingsWithoutWorkspaceRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<Array<DeclarativeSetting>> {
            return localVarFp
                .resolveSettingsWithoutWorkspace(requestParameters.resolveSettingsRequest, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Resolves values for all settings in a workspace by current user, workspace, organization, or default settings.
         * @summary Values for all settings.
         * @param {ActionsApiWorkspaceResolveAllSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceResolveAllSettings(
            requestParameters: ActionsApiWorkspaceResolveAllSettingsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<Array<DeclarativeSetting>> {
            return localVarFp
                .workspaceResolveAllSettings(requestParameters.workspaceId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Resolves value for selected settings in a workspace by current user, workspace, organization, or default settings.
         * @summary Values for selected settings.
         * @param {ActionsApiWorkspaceResolveSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceResolveSettings(
            requestParameters: ActionsApiWorkspaceResolveSettingsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<Array<DeclarativeSetting>> {
            return localVarFp
                .workspaceResolveSettings(
                    requestParameters.workspaceId,
                    requestParameters.resolveSettingsRequest,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * ActionsApi - interface
 * @export
 * @interface ActionsApi
 */
export interface ActionsApiInterface {
    /**
     * Provides information about platform usage, like amount of users, workspaces, ...
     * @summary Info about the platform usage.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    allPlatformUsage(options?: AxiosRequestConfig): AxiosPromise<Array<PlatformUsage>>;

    /**
     * Generate logical data model (LDM) from physical data model (PDM) stored in data source.
     * @summary Generate logical data model (LDM) from physical data model (PDM)
     * @param {ActionsApiGenerateLogicalModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    generateLogicalModel(
        requestParameters: ActionsApiGenerateLogicalModelRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<DeclarativeModel>;

    /**
     * Computes the dependent entities graph
     * @summary Computes the dependent entities graph
     * @param {ActionsApiGetDependentEntitiesGraphRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    getDependentEntitiesGraph(
        requestParameters: ActionsApiGetDependentEntitiesGraphRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<DependentEntitiesResponse>;

    /**
     * Computes the dependent entities graph from given entry points
     * @summary Computes the dependent entities graph from given entry points
     * @param {ActionsApiGetDependentEntitiesGraphFromEntryPointsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    getDependentEntitiesGraphFromEntryPoints(
        requestParameters: ActionsApiGetDependentEntitiesGraphFromEntryPointsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<DependentEntitiesResponse>;

    /**
     * Provides information about platform usage, like amount of users, workspaces, ...
     * @summary Info about the platform usage for particular items.
     * @param {ActionsApiParticularPlatformUsageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    particularPlatformUsage(
        requestParameters: ActionsApiParticularPlatformUsageRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<Array<PlatformUsage>>;

    /**
     * Notification sets up all reports to be computed again with new data.
     * @summary Register an upload notification
     * @param {ActionsApiRegisterUploadNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    registerUploadNotification(
        requestParameters: ActionsApiRegisterUploadNotificationRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;

    /**
     * Resolves values of available entitlements for the organization.
     * @summary Values for all public entitlements.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    resolveAllEntitlements(options?: AxiosRequestConfig): AxiosPromise<Array<ApiEntitlement>>;

    /**
     * Resolves values for all settings without workspace by current user, organization, or default settings.
     * @summary Values for all settings without workspace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    resolveAllSettingsWithoutWorkspace(options?: AxiosRequestConfig): AxiosPromise<Array<DeclarativeSetting>>;

    /**
     * Resolves values for requested entitlements in the organization.
     * @summary Values for requested public entitlements.
     * @param {ActionsApiResolveRequestedEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    resolveRequestedEntitlements(
        requestParameters: ActionsApiResolveRequestedEntitlementsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<Array<ApiEntitlement>>;

    /**
     * Resolves values for selected settings without workspace by current user, organization, or default settings.
     * @summary Values for selected settings without workspace.
     * @param {ActionsApiResolveSettingsWithoutWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    resolveSettingsWithoutWorkspace(
        requestParameters: ActionsApiResolveSettingsWithoutWorkspaceRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<Array<DeclarativeSetting>>;

    /**
     * Resolves values for all settings in a workspace by current user, workspace, organization, or default settings.
     * @summary Values for all settings.
     * @param {ActionsApiWorkspaceResolveAllSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    workspaceResolveAllSettings(
        requestParameters: ActionsApiWorkspaceResolveAllSettingsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<Array<DeclarativeSetting>>;

    /**
     * Resolves value for selected settings in a workspace by current user, workspace, organization, or default settings.
     * @summary Values for selected settings.
     * @param {ActionsApiWorkspaceResolveSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    workspaceResolveSettings(
        requestParameters: ActionsApiWorkspaceResolveSettingsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<Array<DeclarativeSetting>>;
}

/**
 * Request parameters for generateLogicalModel operation in ActionsApi.
 * @export
 * @interface ActionsApiGenerateLogicalModelRequest
 */
export interface ActionsApiGenerateLogicalModelRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiGenerateLogicalModel
     */
    readonly dataSourceId: string;

    /**
     *
     * @type {GenerateLdmRequest}
     * @memberof ActionsApiGenerateLogicalModel
     */
    readonly generateLdmRequest: GenerateLdmRequest;
}

/**
 * Request parameters for getDependentEntitiesGraph operation in ActionsApi.
 * @export
 * @interface ActionsApiGetDependentEntitiesGraphRequest
 */
export interface ActionsApiGetDependentEntitiesGraphRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiGetDependentEntitiesGraph
     */
    readonly workspaceId: string;
}

/**
 * Request parameters for getDependentEntitiesGraphFromEntryPoints operation in ActionsApi.
 * @export
 * @interface ActionsApiGetDependentEntitiesGraphFromEntryPointsRequest
 */
export interface ActionsApiGetDependentEntitiesGraphFromEntryPointsRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiGetDependentEntitiesGraphFromEntryPoints
     */
    readonly workspaceId: string;

    /**
     *
     * @type {DependentEntitiesRequest}
     * @memberof ActionsApiGetDependentEntitiesGraphFromEntryPoints
     */
    readonly dependentEntitiesRequest: DependentEntitiesRequest;
}

/**
 * Request parameters for particularPlatformUsage operation in ActionsApi.
 * @export
 * @interface ActionsApiParticularPlatformUsageRequest
 */
export interface ActionsApiParticularPlatformUsageRequest {
    /**
     *
     * @type {PlatformUsageRequest}
     * @memberof ActionsApiParticularPlatformUsage
     */
    readonly platformUsageRequest: PlatformUsageRequest;
}

/**
 * Request parameters for registerUploadNotification operation in ActionsApi.
 * @export
 * @interface ActionsApiRegisterUploadNotificationRequest
 */
export interface ActionsApiRegisterUploadNotificationRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiRegisterUploadNotification
     */
    readonly dataSourceId: string;
}

/**
 * Request parameters for resolveRequestedEntitlements operation in ActionsApi.
 * @export
 * @interface ActionsApiResolveRequestedEntitlementsRequest
 */
export interface ActionsApiResolveRequestedEntitlementsRequest {
    /**
     *
     * @type {EntitlementsRequest}
     * @memberof ActionsApiResolveRequestedEntitlements
     */
    readonly entitlementsRequest: EntitlementsRequest;
}

/**
 * Request parameters for resolveSettingsWithoutWorkspace operation in ActionsApi.
 * @export
 * @interface ActionsApiResolveSettingsWithoutWorkspaceRequest
 */
export interface ActionsApiResolveSettingsWithoutWorkspaceRequest {
    /**
     *
     * @type {ResolveSettingsRequest}
     * @memberof ActionsApiResolveSettingsWithoutWorkspace
     */
    readonly resolveSettingsRequest: ResolveSettingsRequest;
}

/**
 * Request parameters for workspaceResolveAllSettings operation in ActionsApi.
 * @export
 * @interface ActionsApiWorkspaceResolveAllSettingsRequest
 */
export interface ActionsApiWorkspaceResolveAllSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiWorkspaceResolveAllSettings
     */
    readonly workspaceId: string;
}

/**
 * Request parameters for workspaceResolveSettings operation in ActionsApi.
 * @export
 * @interface ActionsApiWorkspaceResolveSettingsRequest
 */
export interface ActionsApiWorkspaceResolveSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiWorkspaceResolveSettings
     */
    readonly workspaceId: string;

    /**
     *
     * @type {ResolveSettingsRequest}
     * @memberof ActionsApiWorkspaceResolveSettings
     */
    readonly resolveSettingsRequest: ResolveSettingsRequest;
}

/**
 * ActionsApi - object-oriented interface
 * @export
 * @class ActionsApi
 * @extends {BaseAPI}
 */
export class ActionsApi extends BaseAPI implements ActionsApiInterface {
    /**
     * Provides information about platform usage, like amount of users, workspaces, ...
     * @summary Info about the platform usage.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public allPlatformUsage(options?: AxiosRequestConfig) {
        return ActionsApiFp(this.configuration)
            .allPlatformUsage(options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate logical data model (LDM) from physical data model (PDM) stored in data source.
     * @summary Generate logical data model (LDM) from physical data model (PDM)
     * @param {ActionsApiGenerateLogicalModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public generateLogicalModel(
        requestParameters: ActionsApiGenerateLogicalModelRequest,
        options?: AxiosRequestConfig,
    ) {
        return ActionsApiFp(this.configuration)
            .generateLogicalModel(
                requestParameters.dataSourceId,
                requestParameters.generateLdmRequest,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Computes the dependent entities graph
     * @summary Computes the dependent entities graph
     * @param {ActionsApiGetDependentEntitiesGraphRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public getDependentEntitiesGraph(
        requestParameters: ActionsApiGetDependentEntitiesGraphRequest,
        options?: AxiosRequestConfig,
    ) {
        return ActionsApiFp(this.configuration)
            .getDependentEntitiesGraph(requestParameters.workspaceId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Computes the dependent entities graph from given entry points
     * @summary Computes the dependent entities graph from given entry points
     * @param {ActionsApiGetDependentEntitiesGraphFromEntryPointsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public getDependentEntitiesGraphFromEntryPoints(
        requestParameters: ActionsApiGetDependentEntitiesGraphFromEntryPointsRequest,
        options?: AxiosRequestConfig,
    ) {
        return ActionsApiFp(this.configuration)
            .getDependentEntitiesGraphFromEntryPoints(
                requestParameters.workspaceId,
                requestParameters.dependentEntitiesRequest,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides information about platform usage, like amount of users, workspaces, ...
     * @summary Info about the platform usage for particular items.
     * @param {ActionsApiParticularPlatformUsageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public particularPlatformUsage(
        requestParameters: ActionsApiParticularPlatformUsageRequest,
        options?: AxiosRequestConfig,
    ) {
        return ActionsApiFp(this.configuration)
            .particularPlatformUsage(requestParameters.platformUsageRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Notification sets up all reports to be computed again with new data.
     * @summary Register an upload notification
     * @param {ActionsApiRegisterUploadNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public registerUploadNotification(
        requestParameters: ActionsApiRegisterUploadNotificationRequest,
        options?: AxiosRequestConfig,
    ) {
        return ActionsApiFp(this.configuration)
            .registerUploadNotification(requestParameters.dataSourceId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resolves values of available entitlements for the organization.
     * @summary Values for all public entitlements.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public resolveAllEntitlements(options?: AxiosRequestConfig) {
        return ActionsApiFp(this.configuration)
            .resolveAllEntitlements(options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resolves values for all settings without workspace by current user, organization, or default settings.
     * @summary Values for all settings without workspace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public resolveAllSettingsWithoutWorkspace(options?: AxiosRequestConfig) {
        return ActionsApiFp(this.configuration)
            .resolveAllSettingsWithoutWorkspace(options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resolves values for requested entitlements in the organization.
     * @summary Values for requested public entitlements.
     * @param {ActionsApiResolveRequestedEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public resolveRequestedEntitlements(
        requestParameters: ActionsApiResolveRequestedEntitlementsRequest,
        options?: AxiosRequestConfig,
    ) {
        return ActionsApiFp(this.configuration)
            .resolveRequestedEntitlements(requestParameters.entitlementsRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resolves values for selected settings without workspace by current user, organization, or default settings.
     * @summary Values for selected settings without workspace.
     * @param {ActionsApiResolveSettingsWithoutWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public resolveSettingsWithoutWorkspace(
        requestParameters: ActionsApiResolveSettingsWithoutWorkspaceRequest,
        options?: AxiosRequestConfig,
    ) {
        return ActionsApiFp(this.configuration)
            .resolveSettingsWithoutWorkspace(requestParameters.resolveSettingsRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resolves values for all settings in a workspace by current user, workspace, organization, or default settings.
     * @summary Values for all settings.
     * @param {ActionsApiWorkspaceResolveAllSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public workspaceResolveAllSettings(
        requestParameters: ActionsApiWorkspaceResolveAllSettingsRequest,
        options?: AxiosRequestConfig,
    ) {
        return ActionsApiFp(this.configuration)
            .workspaceResolveAllSettings(requestParameters.workspaceId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resolves value for selected settings in a workspace by current user, workspace, organization, or default settings.
     * @summary Values for selected settings.
     * @param {ActionsApiWorkspaceResolveSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public workspaceResolveSettings(
        requestParameters: ActionsApiWorkspaceResolveSettingsRequest,
        options?: AxiosRequestConfig,
    ) {
        return ActionsApiFp(this.configuration)
            .workspaceResolveSettings(
                requestParameters.workspaceId,
                requestParameters.resolveSettingsRequest,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }
}

/**
 * EntitiesApi - axios parameter creator
 * @export
 */
export const EntitiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
         * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityAnalyticalDashboards: async (
            workspaceId: string,
            jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument,
            include?: Array<
                | "visualizationObjects"
                | "analyticalDashboards"
                | "labels"
                | "metrics"
                | "datasets"
                | "filterContexts"
                | "dashboardPlugins"
                | "ALL"
            >,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("createEntityAnalyticalDashboards", "workspaceId", workspaceId);
            // verify required parameter 'jsonApiAnalyticalDashboardInDocument' is not null or undefined
            assertParamExists(
                "createEntityAnalyticalDashboards",
                "jsonApiAnalyticalDashboardInDocument",
                jsonApiAnalyticalDashboardInDocument,
            );
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/analyticalDashboards`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiAnalyticalDashboardInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiAnalyticalDashboardInDocument !== undefined
                          ? jsonApiAnalyticalDashboardInDocument
                          : {},
                  )
                : jsonApiAnalyticalDashboardInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} userId
         * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityApiTokens: async (
            userId: string,
            jsonApiApiTokenInDocument: JsonApiApiTokenInDocument,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists("createEntityApiTokens", "userId", userId);
            // verify required parameter 'jsonApiApiTokenInDocument' is not null or undefined
            assertParamExists(
                "createEntityApiTokens",
                "jsonApiApiTokenInDocument",
                jsonApiApiTokenInDocument,
            );
            const localVarPath = `/api/v1/entities/users/{userId}/apiTokens`.replace(
                `{${"userId"}}`,
                encodeURIComponent(String(userId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiApiTokenInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiApiTokenInDocument !== undefined ? jsonApiApiTokenInDocument : {})
                : jsonApiApiTokenInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {JsonApiColorPaletteInDocument} jsonApiColorPaletteInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityColorPalettes: async (
            jsonApiColorPaletteInDocument: JsonApiColorPaletteInDocument,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'jsonApiColorPaletteInDocument' is not null or undefined
            assertParamExists(
                "createEntityColorPalettes",
                "jsonApiColorPaletteInDocument",
                jsonApiColorPaletteInDocument,
            );
            const localVarPath = `/api/v1/entities/colorPalettes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiColorPaletteInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiColorPaletteInDocument !== undefined ? jsonApiColorPaletteInDocument : {},
                  )
                : jsonApiColorPaletteInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {JsonApiCspDirectiveInDocument} jsonApiCspDirectiveInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityCspDirectives: async (
            jsonApiCspDirectiveInDocument: JsonApiCspDirectiveInDocument,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'jsonApiCspDirectiveInDocument' is not null or undefined
            assertParamExists(
                "createEntityCspDirectives",
                "jsonApiCspDirectiveInDocument",
                jsonApiCspDirectiveInDocument,
            );
            const localVarPath = `/api/v1/entities/cspDirectives`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiCspDirectiveInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiCspDirectiveInDocument !== undefined ? jsonApiCspDirectiveInDocument : {},
                  )
                : jsonApiCspDirectiveInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiCustomApplicationSettingInDocument} jsonApiCustomApplicationSettingInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityCustomApplicationSettings: async (
            workspaceId: string,
            jsonApiCustomApplicationSettingInDocument: JsonApiCustomApplicationSettingInDocument,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("createEntityCustomApplicationSettings", "workspaceId", workspaceId);
            // verify required parameter 'jsonApiCustomApplicationSettingInDocument' is not null or undefined
            assertParamExists(
                "createEntityCustomApplicationSettings",
                "jsonApiCustomApplicationSettingInDocument",
                jsonApiCustomApplicationSettingInDocument,
            );
            const localVarPath =
                `/api/v1/entities/workspaces/{workspaceId}/customApplicationSettings`.replace(
                    `{${"workspaceId"}}`,
                    encodeURIComponent(String(workspaceId)),
                );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiCustomApplicationSettingInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiCustomApplicationSettingInDocument !== undefined
                          ? jsonApiCustomApplicationSettingInDocument
                          : {},
                  )
                : jsonApiCustomApplicationSettingInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityDashboardPlugins: async (
            workspaceId: string,
            jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("createEntityDashboardPlugins", "workspaceId", workspaceId);
            // verify required parameter 'jsonApiDashboardPluginInDocument' is not null or undefined
            assertParamExists(
                "createEntityDashboardPlugins",
                "jsonApiDashboardPluginInDocument",
                jsonApiDashboardPluginInDocument,
            );
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/dashboardPlugins`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiDashboardPluginInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiDashboardPluginInDocument !== undefined ? jsonApiDashboardPluginInDocument : {},
                  )
                : jsonApiDashboardPluginInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityDataSources: async (
            jsonApiDataSourceInDocument: JsonApiDataSourceInDocument,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'jsonApiDataSourceInDocument' is not null or undefined
            assertParamExists(
                "createEntityDataSources",
                "jsonApiDataSourceInDocument",
                jsonApiDataSourceInDocument,
            );
            const localVarPath = `/api/v1/entities/dataSources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiDataSourceInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiDataSourceInDocument !== undefined ? jsonApiDataSourceInDocument : {})
                : jsonApiDataSourceInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
         * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityFilterContexts: async (
            workspaceId: string,
            jsonApiFilterContextInDocument: JsonApiFilterContextInDocument,
            include?: Array<"attributes" | "datasets" | "labels" | "ALL">,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("createEntityFilterContexts", "workspaceId", workspaceId);
            // verify required parameter 'jsonApiFilterContextInDocument' is not null or undefined
            assertParamExists(
                "createEntityFilterContexts",
                "jsonApiFilterContextInDocument",
                jsonApiFilterContextInDocument,
            );
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/filterContexts`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiFilterContextInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiFilterContextInDocument !== undefined ? jsonApiFilterContextInDocument : {},
                  )
                : jsonApiFilterContextInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityMetrics: async (
            workspaceId: string,
            jsonApiMetricInDocument: JsonApiMetricInDocument,
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("createEntityMetrics", "workspaceId", workspaceId);
            // verify required parameter 'jsonApiMetricInDocument' is not null or undefined
            assertParamExists("createEntityMetrics", "jsonApiMetricInDocument", jsonApiMetricInDocument);
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/metrics`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiMetricInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiMetricInDocument !== undefined ? jsonApiMetricInDocument : {})
                : jsonApiMetricInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {JsonApiOrganizationSettingInDocument} jsonApiOrganizationSettingInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityOrganizationSettings: async (
            jsonApiOrganizationSettingInDocument: JsonApiOrganizationSettingInDocument,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'jsonApiOrganizationSettingInDocument' is not null or undefined
            assertParamExists(
                "createEntityOrganizationSettings",
                "jsonApiOrganizationSettingInDocument",
                jsonApiOrganizationSettingInDocument,
            );
            const localVarPath = `/api/v1/entities/organizationSettings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiOrganizationSettingInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiOrganizationSettingInDocument !== undefined
                          ? jsonApiOrganizationSettingInDocument
                          : {},
                  )
                : jsonApiOrganizationSettingInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {JsonApiThemeInDocument} jsonApiThemeInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityThemes: async (
            jsonApiThemeInDocument: JsonApiThemeInDocument,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'jsonApiThemeInDocument' is not null or undefined
            assertParamExists("createEntityThemes", "jsonApiThemeInDocument", jsonApiThemeInDocument);
            const localVarPath = `/api/v1/entities/themes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiThemeInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiThemeInDocument !== undefined ? jsonApiThemeInDocument : {})
                : jsonApiThemeInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
         * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityUserGroups: async (
            jsonApiUserGroupInDocument: JsonApiUserGroupInDocument,
            include?: Array<"userGroups" | "parents" | "ALL">,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'jsonApiUserGroupInDocument' is not null or undefined
            assertParamExists(
                "createEntityUserGroups",
                "jsonApiUserGroupInDocument",
                jsonApiUserGroupInDocument,
            );
            const localVarPath = `/api/v1/entities/userGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiUserGroupInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiUserGroupInDocument !== undefined ? jsonApiUserGroupInDocument : {})
                : jsonApiUserGroupInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} userId
         * @param {JsonApiUserSettingInDocument} jsonApiUserSettingInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityUserSettings: async (
            userId: string,
            jsonApiUserSettingInDocument: JsonApiUserSettingInDocument,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists("createEntityUserSettings", "userId", userId);
            // verify required parameter 'jsonApiUserSettingInDocument' is not null or undefined
            assertParamExists(
                "createEntityUserSettings",
                "jsonApiUserSettingInDocument",
                jsonApiUserSettingInDocument,
            );
            const localVarPath = `/api/v1/entities/users/{userId}/userSettings`.replace(
                `{${"userId"}}`,
                encodeURIComponent(String(userId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiUserSettingInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiUserSettingInDocument !== undefined ? jsonApiUserSettingInDocument : {},
                  )
                : jsonApiUserSettingInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {JsonApiUserInDocument} jsonApiUserInDocument
         * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityUsers: async (
            jsonApiUserInDocument: JsonApiUserInDocument,
            include?: Array<"userGroups" | "ALL">,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'jsonApiUserInDocument' is not null or undefined
            assertParamExists("createEntityUsers", "jsonApiUserInDocument", jsonApiUserInDocument);
            const localVarPath = `/api/v1/entities/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiUserInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiUserInDocument !== undefined ? jsonApiUserInDocument : {})
                : jsonApiUserInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityVisualizationObjects: async (
            workspaceId: string,
            jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument,
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("createEntityVisualizationObjects", "workspaceId", workspaceId);
            // verify required parameter 'jsonApiVisualizationObjectInDocument' is not null or undefined
            assertParamExists(
                "createEntityVisualizationObjects",
                "jsonApiVisualizationObjectInDocument",
                jsonApiVisualizationObjectInDocument,
            );
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/visualizationObjects`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiVisualizationObjectInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiVisualizationObjectInDocument !== undefined
                          ? jsonApiVisualizationObjectInDocument
                          : {},
                  )
                : jsonApiVisualizationObjectInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
         * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityWorkspaceDataFilters: async (
            workspaceId: string,
            jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument,
            include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("createEntityWorkspaceDataFilters", "workspaceId", workspaceId);
            // verify required parameter 'jsonApiWorkspaceDataFilterInDocument' is not null or undefined
            assertParamExists(
                "createEntityWorkspaceDataFilters",
                "jsonApiWorkspaceDataFilterInDocument",
                jsonApiWorkspaceDataFilterInDocument,
            );
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/workspaceDataFilters`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiWorkspaceDataFilterInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiWorkspaceDataFilterInDocument !== undefined
                          ? jsonApiWorkspaceDataFilterInDocument
                          : {},
                  )
                : jsonApiWorkspaceDataFilterInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiWorkspaceSettingInDocument} jsonApiWorkspaceSettingInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityWorkspaceSettings: async (
            workspaceId: string,
            jsonApiWorkspaceSettingInDocument: JsonApiWorkspaceSettingInDocument,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("createEntityWorkspaceSettings", "workspaceId", workspaceId);
            // verify required parameter 'jsonApiWorkspaceSettingInDocument' is not null or undefined
            assertParamExists(
                "createEntityWorkspaceSettings",
                "jsonApiWorkspaceSettingInDocument",
                jsonApiWorkspaceSettingInDocument,
            );
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/workspaceSettings`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiWorkspaceSettingInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiWorkspaceSettingInDocument !== undefined
                          ? jsonApiWorkspaceSettingInDocument
                          : {},
                  )
                : jsonApiWorkspaceSettingInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
         * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityWorkspaces: async (
            jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument,
            include?: Array<"workspaces" | "parent" | "ALL">,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'jsonApiWorkspaceInDocument' is not null or undefined
            assertParamExists(
                "createEntityWorkspaces",
                "jsonApiWorkspaceInDocument",
                jsonApiWorkspaceInDocument,
            );
            const localVarPath = `/api/v1/entities/workspaces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiWorkspaceInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiWorkspaceInDocument !== undefined ? jsonApiWorkspaceInDocument : {})
                : jsonApiWorkspaceInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityAnalyticalDashboards: async (
            workspaceId: string,
            objectId: string,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("deleteEntityAnalyticalDashboards", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("deleteEntityAnalyticalDashboards", "objectId", objectId);
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/analyticalDashboards/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityApiTokens: async (
            userId: string,
            id: string,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists("deleteEntityApiTokens", "userId", userId);
            // verify required parameter 'id' is not null or undefined
            assertParamExists("deleteEntityApiTokens", "id", id);
            const localVarPath = `/api/v1/entities/users/{userId}/apiTokens/{id}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityColorPalettes: async (
            id: string,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("deleteEntityColorPalettes", "id", id);
            const localVarPath = `/api/v1/entities/colorPalettes/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityCspDirectives: async (
            id: string,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("deleteEntityCspDirectives", "id", id);
            const localVarPath = `/api/v1/entities/cspDirectives/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityCustomApplicationSettings: async (
            workspaceId: string,
            objectId: string,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("deleteEntityCustomApplicationSettings", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("deleteEntityCustomApplicationSettings", "objectId", objectId);
            const localVarPath =
                `/api/v1/entities/workspaces/{workspaceId}/customApplicationSettings/{objectId}`
                    .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                    .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityDashboardPlugins: async (
            workspaceId: string,
            objectId: string,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("deleteEntityDashboardPlugins", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("deleteEntityDashboardPlugins", "objectId", objectId);
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/dashboardPlugins/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityDataSources: async (
            id: string,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("deleteEntityDataSources", "id", id);
            const localVarPath = `/api/v1/entities/dataSources/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityFilterContexts: async (
            workspaceId: string,
            objectId: string,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("deleteEntityFilterContexts", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("deleteEntityFilterContexts", "objectId", objectId);
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/filterContexts/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityMetrics: async (
            workspaceId: string,
            objectId: string,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("deleteEntityMetrics", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("deleteEntityMetrics", "objectId", objectId);
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/metrics/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityOrganizationSettings: async (
            id: string,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("deleteEntityOrganizationSettings", "id", id);
            const localVarPath = `/api/v1/entities/organizationSettings/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityThemes: async (
            id: string,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("deleteEntityThemes", "id", id);
            const localVarPath = `/api/v1/entities/themes/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityUserGroups: async (
            id: string,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("deleteEntityUserGroups", "id", id);
            const localVarPath = `/api/v1/entities/userGroups/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityUserSettings: async (
            userId: string,
            id: string,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists("deleteEntityUserSettings", "userId", userId);
            // verify required parameter 'id' is not null or undefined
            assertParamExists("deleteEntityUserSettings", "id", id);
            const localVarPath = `/api/v1/entities/users/{userId}/userSettings/{id}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityUsers: async (
            id: string,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("deleteEntityUsers", "id", id);
            const localVarPath = `/api/v1/entities/users/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityVisualizationObjects: async (
            workspaceId: string,
            objectId: string,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("deleteEntityVisualizationObjects", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("deleteEntityVisualizationObjects", "objectId", objectId);
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/visualizationObjects/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityWorkspaceDataFilters: async (
            workspaceId: string,
            objectId: string,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("deleteEntityWorkspaceDataFilters", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("deleteEntityWorkspaceDataFilters", "objectId", objectId);
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/workspaceDataFilters/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityWorkspaceSettings: async (
            workspaceId: string,
            objectId: string,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("deleteEntityWorkspaceSettings", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("deleteEntityWorkspaceSettings", "objectId", objectId);
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/workspaceSettings/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityWorkspaces: async (
            id: string,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("deleteEntityWorkspaces", "id", id);
            const localVarPath = `/api/v1/entities/workspaces/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesAnalyticalDashboards: async (
            workspaceId: string,
            origin?: "ALL" | "PARENTS" | "NATIVE",
            filter?: string,
            include?: Array<
                | "visualizationObjects"
                | "analyticalDashboards"
                | "labels"
                | "metrics"
                | "datasets"
                | "filterContexts"
                | "dashboardPlugins"
                | "ALL"
            >,
            page?: number,
            size?: number,
            sort?: Array<string>,
            xGDCVALIDATERELATIONS?: boolean,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getAllEntitiesAnalyticalDashboards", "workspaceId", workspaceId);
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/analyticalDashboards`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (origin !== undefined) {
                localVarQueryParameter["origin"] = origin;
            }

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                localVarQueryParameter["page"] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter["size"] = size;
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List all api tokens for a user
         * @param {string} userId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesApiTokens: async (
            userId: string,
            filter?: string,
            page?: number,
            size?: number,
            sort?: Array<string>,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists("getAllEntitiesApiTokens", "userId", userId);
            const localVarPath = `/api/v1/entities/users/{userId}/apiTokens`.replace(
                `{${"userId"}}`,
                encodeURIComponent(String(userId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter["page"] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter["size"] = size;
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'datasets' | 'labels' | 'dataset' | 'defaultView' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesAttributes: async (
            workspaceId: string,
            origin?: "ALL" | "PARENTS" | "NATIVE",
            filter?: string,
            include?: Array<"datasets" | "labels" | "dataset" | "defaultView" | "ALL">,
            page?: number,
            size?: number,
            sort?: Array<string>,
            xGDCVALIDATERELATIONS?: boolean,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getAllEntitiesAttributes", "workspaceId", workspaceId);
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/attributes`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (origin !== undefined) {
                localVarQueryParameter["origin"] = origin;
            }

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                localVarQueryParameter["page"] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter["size"] = size;
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesColorPalettes: async (
            filter?: string,
            page?: number,
            size?: number,
            sort?: Array<string>,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/entities/colorPalettes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter["page"] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter["size"] = size;
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesCspDirectives: async (
            filter?: string,
            page?: number,
            size?: number,
            sort?: Array<string>,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/entities/cspDirectives`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter["page"] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter["size"] = size;
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesCustomApplicationSettings: async (
            workspaceId: string,
            origin?: "ALL" | "PARENTS" | "NATIVE",
            filter?: string,
            page?: number,
            size?: number,
            sort?: Array<string>,
            xGDCVALIDATERELATIONS?: boolean,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getAllEntitiesCustomApplicationSettings", "workspaceId", workspaceId);
            const localVarPath =
                `/api/v1/entities/workspaces/{workspaceId}/customApplicationSettings`.replace(
                    `{${"workspaceId"}}`,
                    encodeURIComponent(String(workspaceId)),
                );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (origin !== undefined) {
                localVarQueryParameter["origin"] = origin;
            }

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter["page"] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter["size"] = size;
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDashboardPlugins: async (
            workspaceId: string,
            origin?: "ALL" | "PARENTS" | "NATIVE",
            filter?: string,
            page?: number,
            size?: number,
            sort?: Array<string>,
            xGDCVALIDATERELATIONS?: boolean,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getAllEntitiesDashboardPlugins", "workspaceId", workspaceId);
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/dashboardPlugins`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (origin !== undefined) {
                localVarQueryParameter["origin"] = origin;
            }

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter["page"] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter["size"] = size;
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDataSourceIdentifiers: async (
            filter?: string,
            page?: number,
            size?: number,
            sort?: Array<string>,
            metaInclude?: Array<"permissions" | "all" | "ALL">,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/entities/dataSourceIdentifiers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter["page"] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter["size"] = size;
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            if (metaInclude) {
                localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} dataSourceId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDataSourceTables: async (
            dataSourceId: string,
            filter?: string,
            page?: number,
            size?: number,
            sort?: Array<string>,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'dataSourceId' is not null or undefined
            assertParamExists("getAllEntitiesDataSourceTables", "dataSourceId", dataSourceId);
            const localVarPath = `/api/v1/entities/dataSources/{dataSourceId}/dataSourceTables`.replace(
                `{${"dataSourceId"}}`,
                encodeURIComponent(String(dataSourceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter["page"] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter["size"] = size;
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDataSources: async (
            filter?: string,
            page?: number,
            size?: number,
            sort?: Array<string>,
            metaInclude?: Array<"permissions" | "all" | "ALL">,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/entities/dataSources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter["page"] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter["size"] = size;
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            if (metaInclude) {
                localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'attributes' | 'facts' | 'datasets' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDatasets: async (
            workspaceId: string,
            origin?: "ALL" | "PARENTS" | "NATIVE",
            filter?: string,
            include?: Array<"attributes" | "facts" | "datasets" | "references" | "ALL">,
            page?: number,
            size?: number,
            sort?: Array<string>,
            xGDCVALIDATERELATIONS?: boolean,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getAllEntitiesDatasets", "workspaceId", workspaceId);
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/datasets`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (origin !== undefined) {
                localVarQueryParameter["origin"] = origin;
            }

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                localVarQueryParameter["page"] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter["size"] = size;
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesEntitlements: async (
            filter?: string,
            page?: number,
            size?: number,
            sort?: Array<string>,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/entities/entitlements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter["page"] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter["size"] = size;
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesFacts: async (
            workspaceId: string,
            origin?: "ALL" | "PARENTS" | "NATIVE",
            filter?: string,
            include?: Array<"datasets" | "dataset" | "ALL">,
            page?: number,
            size?: number,
            sort?: Array<string>,
            xGDCVALIDATERELATIONS?: boolean,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getAllEntitiesFacts", "workspaceId", workspaceId);
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/facts`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (origin !== undefined) {
                localVarQueryParameter["origin"] = origin;
            }

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                localVarQueryParameter["page"] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter["size"] = size;
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesFilterContexts: async (
            workspaceId: string,
            origin?: "ALL" | "PARENTS" | "NATIVE",
            filter?: string,
            include?: Array<"attributes" | "datasets" | "labels" | "ALL">,
            page?: number,
            size?: number,
            sort?: Array<string>,
            xGDCVALIDATERELATIONS?: boolean,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getAllEntitiesFilterContexts", "workspaceId", workspaceId);
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/filterContexts`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (origin !== undefined) {
                localVarQueryParameter["origin"] = origin;
            }

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                localVarQueryParameter["page"] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter["size"] = size;
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesLabels: async (
            workspaceId: string,
            origin?: "ALL" | "PARENTS" | "NATIVE",
            filter?: string,
            include?: Array<"attributes" | "attribute" | "ALL">,
            page?: number,
            size?: number,
            sort?: Array<string>,
            xGDCVALIDATERELATIONS?: boolean,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getAllEntitiesLabels", "workspaceId", workspaceId);
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/labels`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (origin !== undefined) {
                localVarQueryParameter["origin"] = origin;
            }

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                localVarQueryParameter["page"] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter["size"] = size;
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesMetrics: async (
            workspaceId: string,
            origin?: "ALL" | "PARENTS" | "NATIVE",
            filter?: string,
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">,
            page?: number,
            size?: number,
            sort?: Array<string>,
            xGDCVALIDATERELATIONS?: boolean,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getAllEntitiesMetrics", "workspaceId", workspaceId);
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/metrics`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (origin !== undefined) {
                localVarQueryParameter["origin"] = origin;
            }

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                localVarQueryParameter["page"] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter["size"] = size;
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesOrganizationSettings: async (
            filter?: string,
            page?: number,
            size?: number,
            sort?: Array<string>,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/entities/organizationSettings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter["page"] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter["size"] = size;
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesThemes: async (
            filter?: string,
            page?: number,
            size?: number,
            sort?: Array<string>,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/entities/themes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter["page"] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter["size"] = size;
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesUserGroups: async (
            filter?: string,
            include?: Array<"userGroups" | "parents" | "ALL">,
            page?: number,
            size?: number,
            sort?: Array<string>,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/entities/userGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                localVarQueryParameter["page"] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter["size"] = size;
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List all settings for a user
         * @param {string} userId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesUserSettings: async (
            userId: string,
            filter?: string,
            page?: number,
            size?: number,
            sort?: Array<string>,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists("getAllEntitiesUserSettings", "userId", userId);
            const localVarPath = `/api/v1/entities/users/{userId}/userSettings`.replace(
                `{${"userId"}}`,
                encodeURIComponent(String(userId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter["page"] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter["size"] = size;
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesUsers: async (
            filter?: string,
            include?: Array<"userGroups" | "ALL">,
            page?: number,
            size?: number,
            sort?: Array<string>,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/entities/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                localVarQueryParameter["page"] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter["size"] = size;
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesVisualizationObjects: async (
            workspaceId: string,
            origin?: "ALL" | "PARENTS" | "NATIVE",
            filter?: string,
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">,
            page?: number,
            size?: number,
            sort?: Array<string>,
            xGDCVALIDATERELATIONS?: boolean,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getAllEntitiesVisualizationObjects", "workspaceId", workspaceId);
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/visualizationObjects`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (origin !== undefined) {
                localVarQueryParameter["origin"] = origin;
            }

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                localVarQueryParameter["page"] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter["size"] = size;
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaceDataFilterSettings: async (
            workspaceId: string,
            origin?: "ALL" | "PARENTS" | "NATIVE",
            filter?: string,
            include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">,
            page?: number,
            size?: number,
            sort?: Array<string>,
            xGDCVALIDATERELATIONS?: boolean,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getAllEntitiesWorkspaceDataFilterSettings", "workspaceId", workspaceId);
            const localVarPath =
                `/api/v1/entities/workspaces/{workspaceId}/workspaceDataFilterSettings`.replace(
                    `{${"workspaceId"}}`,
                    encodeURIComponent(String(workspaceId)),
                );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (origin !== undefined) {
                localVarQueryParameter["origin"] = origin;
            }

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                localVarQueryParameter["page"] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter["size"] = size;
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaceDataFilters: async (
            workspaceId: string,
            origin?: "ALL" | "PARENTS" | "NATIVE",
            filter?: string,
            include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">,
            page?: number,
            size?: number,
            sort?: Array<string>,
            xGDCVALIDATERELATIONS?: boolean,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getAllEntitiesWorkspaceDataFilters", "workspaceId", workspaceId);
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/workspaceDataFilters`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (origin !== undefined) {
                localVarQueryParameter["origin"] = origin;
            }

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                localVarQueryParameter["page"] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter["size"] = size;
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaceSettings: async (
            workspaceId: string,
            origin?: "ALL" | "PARENTS" | "NATIVE",
            filter?: string,
            page?: number,
            size?: number,
            sort?: Array<string>,
            xGDCVALIDATERELATIONS?: boolean,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getAllEntitiesWorkspaceSettings", "workspaceId", workspaceId);
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/workspaceSettings`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (origin !== undefined) {
                localVarQueryParameter["origin"] = origin;
            }

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter["page"] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter["size"] = size;
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {Array<'config' | 'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaces: async (
            filter?: string,
            include?: Array<"workspaces" | "parent" | "ALL">,
            page?: number,
            size?: number,
            sort?: Array<string>,
            metaInclude?: Array<"config" | "permissions" | "all" | "ALL">,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/entities/workspaces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                localVarQueryParameter["page"] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter["size"] = size;
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            if (metaInclude) {
                localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves links for all options for different configurations.
         * @summary Links for all configuration options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOptions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/options`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all supported data sources along with information about the used drivers.
         * @summary Get all available data source drivers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSourceDrivers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/options/availableDrivers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAnalyticalDashboards: async (
            workspaceId: string,
            objectId: string,
            filter?: string,
            include?: Array<
                | "visualizationObjects"
                | "analyticalDashboards"
                | "labels"
                | "metrics"
                | "datasets"
                | "filterContexts"
                | "dashboardPlugins"
                | "ALL"
            >,
            xGDCVALIDATERELATIONS?: boolean,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getEntityAnalyticalDashboards", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("getEntityAnalyticalDashboards", "objectId", objectId);
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/analyticalDashboards/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityApiTokens: async (
            userId: string,
            id: string,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists("getEntityApiTokens", "userId", userId);
            // verify required parameter 'id' is not null or undefined
            assertParamExists("getEntityApiTokens", "id", id);
            const localVarPath = `/api/v1/entities/users/{userId}/apiTokens/{id}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'datasets' | 'labels' | 'dataset' | 'defaultView' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAttributes: async (
            workspaceId: string,
            objectId: string,
            filter?: string,
            include?: Array<"datasets" | "labels" | "dataset" | "defaultView" | "ALL">,
            xGDCVALIDATERELATIONS?: boolean,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getEntityAttributes", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("getEntityAttributes", "objectId", objectId);
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/attributes/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityColorPalettes: async (
            id: string,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("getEntityColorPalettes", "id", id);
            const localVarPath = `/api/v1/entities/colorPalettes/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityCookieSecurityConfigurations: async (
            id: string,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("getEntityCookieSecurityConfigurations", "id", id);
            const localVarPath = `/api/v1/entities/admin/cookieSecurityConfigurations/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityCspDirectives: async (
            id: string,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("getEntityCspDirectives", "id", id);
            const localVarPath = `/api/v1/entities/cspDirectives/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityCustomApplicationSettings: async (
            workspaceId: string,
            objectId: string,
            filter?: string,
            xGDCVALIDATERELATIONS?: boolean,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getEntityCustomApplicationSettings", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("getEntityCustomApplicationSettings", "objectId", objectId);
            const localVarPath =
                `/api/v1/entities/workspaces/{workspaceId}/customApplicationSettings/{objectId}`
                    .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                    .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDashboardPlugins: async (
            workspaceId: string,
            objectId: string,
            filter?: string,
            xGDCVALIDATERELATIONS?: boolean,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getEntityDashboardPlugins", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("getEntityDashboardPlugins", "objectId", objectId);
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/dashboardPlugins/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDataSourceIdentifiers: async (
            id: string,
            filter?: string,
            metaInclude?: Array<"permissions" | "all" | "ALL">,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("getEntityDataSourceIdentifiers", "id", id);
            const localVarPath = `/api/v1/entities/dataSourceIdentifiers/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (metaInclude) {
                localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} dataSourceId
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDataSourceTables: async (
            dataSourceId: string,
            id: string,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'dataSourceId' is not null or undefined
            assertParamExists("getEntityDataSourceTables", "dataSourceId", dataSourceId);
            // verify required parameter 'id' is not null or undefined
            assertParamExists("getEntityDataSourceTables", "id", id);
            const localVarPath = `/api/v1/entities/dataSources/{dataSourceId}/dataSourceTables/{id}`
                .replace(`{${"dataSourceId"}}`, encodeURIComponent(String(dataSourceId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDataSources: async (
            id: string,
            filter?: string,
            metaInclude?: Array<"permissions" | "all" | "ALL">,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("getEntityDataSources", "id", id);
            const localVarPath = `/api/v1/entities/dataSources/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (metaInclude) {
                localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'attributes' | 'facts' | 'datasets' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDatasets: async (
            workspaceId: string,
            objectId: string,
            filter?: string,
            include?: Array<"attributes" | "facts" | "datasets" | "references" | "ALL">,
            xGDCVALIDATERELATIONS?: boolean,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getEntityDatasets", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("getEntityDatasets", "objectId", objectId);
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/datasets/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityEntitlements: async (
            id: string,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("getEntityEntitlements", "id", id);
            const localVarPath = `/api/v1/entities/entitlements/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFacts: async (
            workspaceId: string,
            objectId: string,
            filter?: string,
            include?: Array<"datasets" | "dataset" | "ALL">,
            xGDCVALIDATERELATIONS?: boolean,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getEntityFacts", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("getEntityFacts", "objectId", objectId);
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/facts/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFilterContexts: async (
            workspaceId: string,
            objectId: string,
            filter?: string,
            include?: Array<"attributes" | "datasets" | "labels" | "ALL">,
            xGDCVALIDATERELATIONS?: boolean,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getEntityFilterContexts", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("getEntityFilterContexts", "objectId", objectId);
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/filterContexts/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityLabels: async (
            workspaceId: string,
            objectId: string,
            filter?: string,
            include?: Array<"attributes" | "attribute" | "ALL">,
            xGDCVALIDATERELATIONS?: boolean,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getEntityLabels", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("getEntityLabels", "objectId", objectId);
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/labels/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityMetrics: async (
            workspaceId: string,
            objectId: string,
            filter?: string,
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">,
            xGDCVALIDATERELATIONS?: boolean,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getEntityMetrics", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("getEntityMetrics", "objectId", objectId);
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/metrics/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityOrganizationSettings: async (
            id: string,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("getEntityOrganizationSettings", "id", id);
            const localVarPath = `/api/v1/entities/organizationSettings/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityOrganizations: async (
            id: string,
            filter?: string,
            include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">,
            metaInclude?: Array<"permissions" | "all" | "ALL">,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("getEntityOrganizations", "id", id);
            const localVarPath = `/api/v1/entities/admin/organizations/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (metaInclude) {
                localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityThemes: async (
            id: string,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("getEntityThemes", "id", id);
            const localVarPath = `/api/v1/entities/themes/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityUserGroups: async (
            id: string,
            filter?: string,
            include?: Array<"userGroups" | "parents" | "ALL">,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("getEntityUserGroups", "id", id);
            const localVarPath = `/api/v1/entities/userGroups/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityUserSettings: async (
            userId: string,
            id: string,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists("getEntityUserSettings", "userId", userId);
            // verify required parameter 'id' is not null or undefined
            assertParamExists("getEntityUserSettings", "id", id);
            const localVarPath = `/api/v1/entities/users/{userId}/userSettings/{id}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityUsers: async (
            id: string,
            filter?: string,
            include?: Array<"userGroups" | "ALL">,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("getEntityUsers", "id", id);
            const localVarPath = `/api/v1/entities/users/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityVisualizationObjects: async (
            workspaceId: string,
            objectId: string,
            filter?: string,
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">,
            xGDCVALIDATERELATIONS?: boolean,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getEntityVisualizationObjects", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("getEntityVisualizationObjects", "objectId", objectId);
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/visualizationObjects/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaceDataFilterSettings: async (
            workspaceId: string,
            objectId: string,
            filter?: string,
            include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">,
            xGDCVALIDATERELATIONS?: boolean,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getEntityWorkspaceDataFilterSettings", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("getEntityWorkspaceDataFilterSettings", "objectId", objectId);
            const localVarPath =
                `/api/v1/entities/workspaces/{workspaceId}/workspaceDataFilterSettings/{objectId}`
                    .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                    .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaceDataFilters: async (
            workspaceId: string,
            objectId: string,
            filter?: string,
            include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">,
            xGDCVALIDATERELATIONS?: boolean,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getEntityWorkspaceDataFilters", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("getEntityWorkspaceDataFilters", "objectId", objectId);
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/workspaceDataFilters/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaceSettings: async (
            workspaceId: string,
            objectId: string,
            filter?: string,
            xGDCVALIDATERELATIONS?: boolean,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getEntityWorkspaceSettings", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("getEntityWorkspaceSettings", "objectId", objectId);
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/workspaceSettings/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {Array<'config' | 'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaces: async (
            id: string,
            filter?: string,
            include?: Array<"workspaces" | "parent" | "ALL">,
            metaInclude?: Array<"config" | "permissions" | "all" | "ALL">,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("getEntityWorkspaces", "id", id);
            const localVarPath = `/api/v1/entities/workspaces/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (metaInclude) {
                localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a basic information about organization.
         * @summary Get current organization info
         * @param {Array<'permissions' | 'all'>} [metaInclude] Return list of permissions available to logged user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization: async (
            metaInclude?: Array<"permissions" | "all">,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/entities/organization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (metaInclude) {
                localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiAnalyticalDashboardPatchDocument} jsonApiAnalyticalDashboardPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityAnalyticalDashboards: async (
            workspaceId: string,
            objectId: string,
            jsonApiAnalyticalDashboardPatchDocument: JsonApiAnalyticalDashboardPatchDocument,
            filter?: string,
            include?: Array<
                | "visualizationObjects"
                | "analyticalDashboards"
                | "labels"
                | "metrics"
                | "datasets"
                | "filterContexts"
                | "dashboardPlugins"
                | "ALL"
            >,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("patchEntityAnalyticalDashboards", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("patchEntityAnalyticalDashboards", "objectId", objectId);
            // verify required parameter 'jsonApiAnalyticalDashboardPatchDocument' is not null or undefined
            assertParamExists(
                "patchEntityAnalyticalDashboards",
                "jsonApiAnalyticalDashboardPatchDocument",
                jsonApiAnalyticalDashboardPatchDocument,
            );
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/analyticalDashboards/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiAnalyticalDashboardPatchDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiAnalyticalDashboardPatchDocument !== undefined
                          ? jsonApiAnalyticalDashboardPatchDocument
                          : {},
                  )
                : jsonApiAnalyticalDashboardPatchDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiColorPalettePatchDocument} jsonApiColorPalettePatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityColorPalettes: async (
            id: string,
            jsonApiColorPalettePatchDocument: JsonApiColorPalettePatchDocument,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("patchEntityColorPalettes", "id", id);
            // verify required parameter 'jsonApiColorPalettePatchDocument' is not null or undefined
            assertParamExists(
                "patchEntityColorPalettes",
                "jsonApiColorPalettePatchDocument",
                jsonApiColorPalettePatchDocument,
            );
            const localVarPath = `/api/v1/entities/colorPalettes/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiColorPalettePatchDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiColorPalettePatchDocument !== undefined ? jsonApiColorPalettePatchDocument : {},
                  )
                : jsonApiColorPalettePatchDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiCookieSecurityConfigurationPatchDocument} jsonApiCookieSecurityConfigurationPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityCookieSecurityConfigurations: async (
            id: string,
            jsonApiCookieSecurityConfigurationPatchDocument: JsonApiCookieSecurityConfigurationPatchDocument,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("patchEntityCookieSecurityConfigurations", "id", id);
            // verify required parameter 'jsonApiCookieSecurityConfigurationPatchDocument' is not null or undefined
            assertParamExists(
                "patchEntityCookieSecurityConfigurations",
                "jsonApiCookieSecurityConfigurationPatchDocument",
                jsonApiCookieSecurityConfigurationPatchDocument,
            );
            const localVarPath = `/api/v1/entities/admin/cookieSecurityConfigurations/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiCookieSecurityConfigurationPatchDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiCookieSecurityConfigurationPatchDocument !== undefined
                          ? jsonApiCookieSecurityConfigurationPatchDocument
                          : {},
                  )
                : jsonApiCookieSecurityConfigurationPatchDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiCspDirectivePatchDocument} jsonApiCspDirectivePatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityCspDirectives: async (
            id: string,
            jsonApiCspDirectivePatchDocument: JsonApiCspDirectivePatchDocument,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("patchEntityCspDirectives", "id", id);
            // verify required parameter 'jsonApiCspDirectivePatchDocument' is not null or undefined
            assertParamExists(
                "patchEntityCspDirectives",
                "jsonApiCspDirectivePatchDocument",
                jsonApiCspDirectivePatchDocument,
            );
            const localVarPath = `/api/v1/entities/cspDirectives/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiCspDirectivePatchDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiCspDirectivePatchDocument !== undefined ? jsonApiCspDirectivePatchDocument : {},
                  )
                : jsonApiCspDirectivePatchDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiCustomApplicationSettingPatchDocument} jsonApiCustomApplicationSettingPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityCustomApplicationSettings: async (
            workspaceId: string,
            objectId: string,
            jsonApiCustomApplicationSettingPatchDocument: JsonApiCustomApplicationSettingPatchDocument,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("patchEntityCustomApplicationSettings", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("patchEntityCustomApplicationSettings", "objectId", objectId);
            // verify required parameter 'jsonApiCustomApplicationSettingPatchDocument' is not null or undefined
            assertParamExists(
                "patchEntityCustomApplicationSettings",
                "jsonApiCustomApplicationSettingPatchDocument",
                jsonApiCustomApplicationSettingPatchDocument,
            );
            const localVarPath =
                `/api/v1/entities/workspaces/{workspaceId}/customApplicationSettings/{objectId}`
                    .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                    .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiCustomApplicationSettingPatchDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiCustomApplicationSettingPatchDocument !== undefined
                          ? jsonApiCustomApplicationSettingPatchDocument
                          : {},
                  )
                : jsonApiCustomApplicationSettingPatchDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiDashboardPluginPatchDocument} jsonApiDashboardPluginPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityDashboardPlugins: async (
            workspaceId: string,
            objectId: string,
            jsonApiDashboardPluginPatchDocument: JsonApiDashboardPluginPatchDocument,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("patchEntityDashboardPlugins", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("patchEntityDashboardPlugins", "objectId", objectId);
            // verify required parameter 'jsonApiDashboardPluginPatchDocument' is not null or undefined
            assertParamExists(
                "patchEntityDashboardPlugins",
                "jsonApiDashboardPluginPatchDocument",
                jsonApiDashboardPluginPatchDocument,
            );
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/dashboardPlugins/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiDashboardPluginPatchDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiDashboardPluginPatchDocument !== undefined
                          ? jsonApiDashboardPluginPatchDocument
                          : {},
                  )
                : jsonApiDashboardPluginPatchDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiDataSourcePatchDocument} jsonApiDataSourcePatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityDataSources: async (
            id: string,
            jsonApiDataSourcePatchDocument: JsonApiDataSourcePatchDocument,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("patchEntityDataSources", "id", id);
            // verify required parameter 'jsonApiDataSourcePatchDocument' is not null or undefined
            assertParamExists(
                "patchEntityDataSources",
                "jsonApiDataSourcePatchDocument",
                jsonApiDataSourcePatchDocument,
            );
            const localVarPath = `/api/v1/entities/dataSources/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiDataSourcePatchDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiDataSourcePatchDocument !== undefined ? jsonApiDataSourcePatchDocument : {},
                  )
                : jsonApiDataSourcePatchDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiFilterContextPatchDocument} jsonApiFilterContextPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityFilterContexts: async (
            workspaceId: string,
            objectId: string,
            jsonApiFilterContextPatchDocument: JsonApiFilterContextPatchDocument,
            filter?: string,
            include?: Array<"attributes" | "datasets" | "labels" | "ALL">,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("patchEntityFilterContexts", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("patchEntityFilterContexts", "objectId", objectId);
            // verify required parameter 'jsonApiFilterContextPatchDocument' is not null or undefined
            assertParamExists(
                "patchEntityFilterContexts",
                "jsonApiFilterContextPatchDocument",
                jsonApiFilterContextPatchDocument,
            );
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/filterContexts/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiFilterContextPatchDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiFilterContextPatchDocument !== undefined
                          ? jsonApiFilterContextPatchDocument
                          : {},
                  )
                : jsonApiFilterContextPatchDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiMetricPatchDocument} jsonApiMetricPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityMetrics: async (
            workspaceId: string,
            objectId: string,
            jsonApiMetricPatchDocument: JsonApiMetricPatchDocument,
            filter?: string,
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("patchEntityMetrics", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("patchEntityMetrics", "objectId", objectId);
            // verify required parameter 'jsonApiMetricPatchDocument' is not null or undefined
            assertParamExists("patchEntityMetrics", "jsonApiMetricPatchDocument", jsonApiMetricPatchDocument);
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/metrics/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiMetricPatchDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiMetricPatchDocument !== undefined ? jsonApiMetricPatchDocument : {})
                : jsonApiMetricPatchDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiOrganizationSettingPatchDocument} jsonApiOrganizationSettingPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityOrganizationSettings: async (
            id: string,
            jsonApiOrganizationSettingPatchDocument: JsonApiOrganizationSettingPatchDocument,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("patchEntityOrganizationSettings", "id", id);
            // verify required parameter 'jsonApiOrganizationSettingPatchDocument' is not null or undefined
            assertParamExists(
                "patchEntityOrganizationSettings",
                "jsonApiOrganizationSettingPatchDocument",
                jsonApiOrganizationSettingPatchDocument,
            );
            const localVarPath = `/api/v1/entities/organizationSettings/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiOrganizationSettingPatchDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiOrganizationSettingPatchDocument !== undefined
                          ? jsonApiOrganizationSettingPatchDocument
                          : {},
                  )
                : jsonApiOrganizationSettingPatchDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiOrganizationPatchDocument} jsonApiOrganizationPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityOrganizations: async (
            id: string,
            jsonApiOrganizationPatchDocument: JsonApiOrganizationPatchDocument,
            filter?: string,
            include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("patchEntityOrganizations", "id", id);
            // verify required parameter 'jsonApiOrganizationPatchDocument' is not null or undefined
            assertParamExists(
                "patchEntityOrganizations",
                "jsonApiOrganizationPatchDocument",
                jsonApiOrganizationPatchDocument,
            );
            const localVarPath = `/api/v1/entities/admin/organizations/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiOrganizationPatchDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiOrganizationPatchDocument !== undefined ? jsonApiOrganizationPatchDocument : {},
                  )
                : jsonApiOrganizationPatchDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiThemePatchDocument} jsonApiThemePatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityThemes: async (
            id: string,
            jsonApiThemePatchDocument: JsonApiThemePatchDocument,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("patchEntityThemes", "id", id);
            // verify required parameter 'jsonApiThemePatchDocument' is not null or undefined
            assertParamExists("patchEntityThemes", "jsonApiThemePatchDocument", jsonApiThemePatchDocument);
            const localVarPath = `/api/v1/entities/themes/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiThemePatchDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiThemePatchDocument !== undefined ? jsonApiThemePatchDocument : {})
                : jsonApiThemePatchDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserGroupPatchDocument} jsonApiUserGroupPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityUserGroups: async (
            id: string,
            jsonApiUserGroupPatchDocument: JsonApiUserGroupPatchDocument,
            filter?: string,
            include?: Array<"userGroups" | "parents" | "ALL">,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("patchEntityUserGroups", "id", id);
            // verify required parameter 'jsonApiUserGroupPatchDocument' is not null or undefined
            assertParamExists(
                "patchEntityUserGroups",
                "jsonApiUserGroupPatchDocument",
                jsonApiUserGroupPatchDocument,
            );
            const localVarPath = `/api/v1/entities/userGroups/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiUserGroupPatchDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiUserGroupPatchDocument !== undefined ? jsonApiUserGroupPatchDocument : {},
                  )
                : jsonApiUserGroupPatchDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserPatchDocument} jsonApiUserPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityUsers: async (
            id: string,
            jsonApiUserPatchDocument: JsonApiUserPatchDocument,
            filter?: string,
            include?: Array<"userGroups" | "ALL">,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("patchEntityUsers", "id", id);
            // verify required parameter 'jsonApiUserPatchDocument' is not null or undefined
            assertParamExists("patchEntityUsers", "jsonApiUserPatchDocument", jsonApiUserPatchDocument);
            const localVarPath = `/api/v1/entities/users/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiUserPatchDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiUserPatchDocument !== undefined ? jsonApiUserPatchDocument : {})
                : jsonApiUserPatchDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiVisualizationObjectPatchDocument} jsonApiVisualizationObjectPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityVisualizationObjects: async (
            workspaceId: string,
            objectId: string,
            jsonApiVisualizationObjectPatchDocument: JsonApiVisualizationObjectPatchDocument,
            filter?: string,
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("patchEntityVisualizationObjects", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("patchEntityVisualizationObjects", "objectId", objectId);
            // verify required parameter 'jsonApiVisualizationObjectPatchDocument' is not null or undefined
            assertParamExists(
                "patchEntityVisualizationObjects",
                "jsonApiVisualizationObjectPatchDocument",
                jsonApiVisualizationObjectPatchDocument,
            );
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/visualizationObjects/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiVisualizationObjectPatchDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiVisualizationObjectPatchDocument !== undefined
                          ? jsonApiVisualizationObjectPatchDocument
                          : {},
                  )
                : jsonApiVisualizationObjectPatchDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiWorkspaceDataFilterPatchDocument} jsonApiWorkspaceDataFilterPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityWorkspaceDataFilters: async (
            workspaceId: string,
            objectId: string,
            jsonApiWorkspaceDataFilterPatchDocument: JsonApiWorkspaceDataFilterPatchDocument,
            filter?: string,
            include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("patchEntityWorkspaceDataFilters", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("patchEntityWorkspaceDataFilters", "objectId", objectId);
            // verify required parameter 'jsonApiWorkspaceDataFilterPatchDocument' is not null or undefined
            assertParamExists(
                "patchEntityWorkspaceDataFilters",
                "jsonApiWorkspaceDataFilterPatchDocument",
                jsonApiWorkspaceDataFilterPatchDocument,
            );
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/workspaceDataFilters/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiWorkspaceDataFilterPatchDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiWorkspaceDataFilterPatchDocument !== undefined
                          ? jsonApiWorkspaceDataFilterPatchDocument
                          : {},
                  )
                : jsonApiWorkspaceDataFilterPatchDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiWorkspaceSettingPatchDocument} jsonApiWorkspaceSettingPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityWorkspaceSettings: async (
            workspaceId: string,
            objectId: string,
            jsonApiWorkspaceSettingPatchDocument: JsonApiWorkspaceSettingPatchDocument,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("patchEntityWorkspaceSettings", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("patchEntityWorkspaceSettings", "objectId", objectId);
            // verify required parameter 'jsonApiWorkspaceSettingPatchDocument' is not null or undefined
            assertParamExists(
                "patchEntityWorkspaceSettings",
                "jsonApiWorkspaceSettingPatchDocument",
                jsonApiWorkspaceSettingPatchDocument,
            );
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/workspaceSettings/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiWorkspaceSettingPatchDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiWorkspaceSettingPatchDocument !== undefined
                          ? jsonApiWorkspaceSettingPatchDocument
                          : {},
                  )
                : jsonApiWorkspaceSettingPatchDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiWorkspacePatchDocument} jsonApiWorkspacePatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityWorkspaces: async (
            id: string,
            jsonApiWorkspacePatchDocument: JsonApiWorkspacePatchDocument,
            filter?: string,
            include?: Array<"workspaces" | "parent" | "ALL">,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("patchEntityWorkspaces", "id", id);
            // verify required parameter 'jsonApiWorkspacePatchDocument' is not null or undefined
            assertParamExists(
                "patchEntityWorkspaces",
                "jsonApiWorkspacePatchDocument",
                jsonApiWorkspacePatchDocument,
            );
            const localVarPath = `/api/v1/entities/workspaces/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiWorkspacePatchDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiWorkspacePatchDocument !== undefined ? jsonApiWorkspacePatchDocument : {},
                  )
                : jsonApiWorkspacePatchDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityAnalyticalDashboards: async (
            workspaceId: string,
            objectId: string,
            jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument,
            filter?: string,
            include?: Array<
                | "visualizationObjects"
                | "analyticalDashboards"
                | "labels"
                | "metrics"
                | "datasets"
                | "filterContexts"
                | "dashboardPlugins"
                | "ALL"
            >,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("updateEntityAnalyticalDashboards", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("updateEntityAnalyticalDashboards", "objectId", objectId);
            // verify required parameter 'jsonApiAnalyticalDashboardInDocument' is not null or undefined
            assertParamExists(
                "updateEntityAnalyticalDashboards",
                "jsonApiAnalyticalDashboardInDocument",
                jsonApiAnalyticalDashboardInDocument,
            );
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/analyticalDashboards/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiAnalyticalDashboardInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiAnalyticalDashboardInDocument !== undefined
                          ? jsonApiAnalyticalDashboardInDocument
                          : {},
                  )
                : jsonApiAnalyticalDashboardInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityApiTokens: async (
            userId: string,
            id: string,
            jsonApiApiTokenInDocument: JsonApiApiTokenInDocument,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists("updateEntityApiTokens", "userId", userId);
            // verify required parameter 'id' is not null or undefined
            assertParamExists("updateEntityApiTokens", "id", id);
            // verify required parameter 'jsonApiApiTokenInDocument' is not null or undefined
            assertParamExists(
                "updateEntityApiTokens",
                "jsonApiApiTokenInDocument",
                jsonApiApiTokenInDocument,
            );
            const localVarPath = `/api/v1/entities/users/{userId}/apiTokens/{id}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiApiTokenInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiApiTokenInDocument !== undefined ? jsonApiApiTokenInDocument : {})
                : jsonApiApiTokenInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiColorPaletteInDocument} jsonApiColorPaletteInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityColorPalettes: async (
            id: string,
            jsonApiColorPaletteInDocument: JsonApiColorPaletteInDocument,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("updateEntityColorPalettes", "id", id);
            // verify required parameter 'jsonApiColorPaletteInDocument' is not null or undefined
            assertParamExists(
                "updateEntityColorPalettes",
                "jsonApiColorPaletteInDocument",
                jsonApiColorPaletteInDocument,
            );
            const localVarPath = `/api/v1/entities/colorPalettes/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiColorPaletteInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiColorPaletteInDocument !== undefined ? jsonApiColorPaletteInDocument : {},
                  )
                : jsonApiColorPaletteInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiCookieSecurityConfigurationInDocument} jsonApiCookieSecurityConfigurationInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityCookieSecurityConfigurations: async (
            id: string,
            jsonApiCookieSecurityConfigurationInDocument: JsonApiCookieSecurityConfigurationInDocument,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("updateEntityCookieSecurityConfigurations", "id", id);
            // verify required parameter 'jsonApiCookieSecurityConfigurationInDocument' is not null or undefined
            assertParamExists(
                "updateEntityCookieSecurityConfigurations",
                "jsonApiCookieSecurityConfigurationInDocument",
                jsonApiCookieSecurityConfigurationInDocument,
            );
            const localVarPath = `/api/v1/entities/admin/cookieSecurityConfigurations/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiCookieSecurityConfigurationInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiCookieSecurityConfigurationInDocument !== undefined
                          ? jsonApiCookieSecurityConfigurationInDocument
                          : {},
                  )
                : jsonApiCookieSecurityConfigurationInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiCspDirectiveInDocument} jsonApiCspDirectiveInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityCspDirectives: async (
            id: string,
            jsonApiCspDirectiveInDocument: JsonApiCspDirectiveInDocument,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("updateEntityCspDirectives", "id", id);
            // verify required parameter 'jsonApiCspDirectiveInDocument' is not null or undefined
            assertParamExists(
                "updateEntityCspDirectives",
                "jsonApiCspDirectiveInDocument",
                jsonApiCspDirectiveInDocument,
            );
            const localVarPath = `/api/v1/entities/cspDirectives/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiCspDirectiveInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiCspDirectiveInDocument !== undefined ? jsonApiCspDirectiveInDocument : {},
                  )
                : jsonApiCspDirectiveInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiCustomApplicationSettingInDocument} jsonApiCustomApplicationSettingInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityCustomApplicationSettings: async (
            workspaceId: string,
            objectId: string,
            jsonApiCustomApplicationSettingInDocument: JsonApiCustomApplicationSettingInDocument,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("updateEntityCustomApplicationSettings", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("updateEntityCustomApplicationSettings", "objectId", objectId);
            // verify required parameter 'jsonApiCustomApplicationSettingInDocument' is not null or undefined
            assertParamExists(
                "updateEntityCustomApplicationSettings",
                "jsonApiCustomApplicationSettingInDocument",
                jsonApiCustomApplicationSettingInDocument,
            );
            const localVarPath =
                `/api/v1/entities/workspaces/{workspaceId}/customApplicationSettings/{objectId}`
                    .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                    .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiCustomApplicationSettingInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiCustomApplicationSettingInDocument !== undefined
                          ? jsonApiCustomApplicationSettingInDocument
                          : {},
                  )
                : jsonApiCustomApplicationSettingInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityDashboardPlugins: async (
            workspaceId: string,
            objectId: string,
            jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("updateEntityDashboardPlugins", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("updateEntityDashboardPlugins", "objectId", objectId);
            // verify required parameter 'jsonApiDashboardPluginInDocument' is not null or undefined
            assertParamExists(
                "updateEntityDashboardPlugins",
                "jsonApiDashboardPluginInDocument",
                jsonApiDashboardPluginInDocument,
            );
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/dashboardPlugins/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiDashboardPluginInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiDashboardPluginInDocument !== undefined ? jsonApiDashboardPluginInDocument : {},
                  )
                : jsonApiDashboardPluginInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityDataSources: async (
            id: string,
            jsonApiDataSourceInDocument: JsonApiDataSourceInDocument,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("updateEntityDataSources", "id", id);
            // verify required parameter 'jsonApiDataSourceInDocument' is not null or undefined
            assertParamExists(
                "updateEntityDataSources",
                "jsonApiDataSourceInDocument",
                jsonApiDataSourceInDocument,
            );
            const localVarPath = `/api/v1/entities/dataSources/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiDataSourceInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiDataSourceInDocument !== undefined ? jsonApiDataSourceInDocument : {})
                : jsonApiDataSourceInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityFilterContexts: async (
            workspaceId: string,
            objectId: string,
            jsonApiFilterContextInDocument: JsonApiFilterContextInDocument,
            filter?: string,
            include?: Array<"attributes" | "datasets" | "labels" | "ALL">,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("updateEntityFilterContexts", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("updateEntityFilterContexts", "objectId", objectId);
            // verify required parameter 'jsonApiFilterContextInDocument' is not null or undefined
            assertParamExists(
                "updateEntityFilterContexts",
                "jsonApiFilterContextInDocument",
                jsonApiFilterContextInDocument,
            );
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/filterContexts/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiFilterContextInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiFilterContextInDocument !== undefined ? jsonApiFilterContextInDocument : {},
                  )
                : jsonApiFilterContextInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityMetrics: async (
            workspaceId: string,
            objectId: string,
            jsonApiMetricInDocument: JsonApiMetricInDocument,
            filter?: string,
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("updateEntityMetrics", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("updateEntityMetrics", "objectId", objectId);
            // verify required parameter 'jsonApiMetricInDocument' is not null or undefined
            assertParamExists("updateEntityMetrics", "jsonApiMetricInDocument", jsonApiMetricInDocument);
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/metrics/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiMetricInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiMetricInDocument !== undefined ? jsonApiMetricInDocument : {})
                : jsonApiMetricInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiOrganizationSettingInDocument} jsonApiOrganizationSettingInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityOrganizationSettings: async (
            id: string,
            jsonApiOrganizationSettingInDocument: JsonApiOrganizationSettingInDocument,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("updateEntityOrganizationSettings", "id", id);
            // verify required parameter 'jsonApiOrganizationSettingInDocument' is not null or undefined
            assertParamExists(
                "updateEntityOrganizationSettings",
                "jsonApiOrganizationSettingInDocument",
                jsonApiOrganizationSettingInDocument,
            );
            const localVarPath = `/api/v1/entities/organizationSettings/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiOrganizationSettingInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiOrganizationSettingInDocument !== undefined
                          ? jsonApiOrganizationSettingInDocument
                          : {},
                  )
                : jsonApiOrganizationSettingInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityOrganizations: async (
            id: string,
            jsonApiOrganizationInDocument: JsonApiOrganizationInDocument,
            filter?: string,
            include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("updateEntityOrganizations", "id", id);
            // verify required parameter 'jsonApiOrganizationInDocument' is not null or undefined
            assertParamExists(
                "updateEntityOrganizations",
                "jsonApiOrganizationInDocument",
                jsonApiOrganizationInDocument,
            );
            const localVarPath = `/api/v1/entities/admin/organizations/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiOrganizationInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiOrganizationInDocument !== undefined ? jsonApiOrganizationInDocument : {},
                  )
                : jsonApiOrganizationInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiThemeInDocument} jsonApiThemeInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityThemes: async (
            id: string,
            jsonApiThemeInDocument: JsonApiThemeInDocument,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("updateEntityThemes", "id", id);
            // verify required parameter 'jsonApiThemeInDocument' is not null or undefined
            assertParamExists("updateEntityThemes", "jsonApiThemeInDocument", jsonApiThemeInDocument);
            const localVarPath = `/api/v1/entities/themes/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiThemeInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiThemeInDocument !== undefined ? jsonApiThemeInDocument : {})
                : jsonApiThemeInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityUserGroups: async (
            id: string,
            jsonApiUserGroupInDocument: JsonApiUserGroupInDocument,
            filter?: string,
            include?: Array<"userGroups" | "parents" | "ALL">,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("updateEntityUserGroups", "id", id);
            // verify required parameter 'jsonApiUserGroupInDocument' is not null or undefined
            assertParamExists(
                "updateEntityUserGroups",
                "jsonApiUserGroupInDocument",
                jsonApiUserGroupInDocument,
            );
            const localVarPath = `/api/v1/entities/userGroups/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiUserGroupInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiUserGroupInDocument !== undefined ? jsonApiUserGroupInDocument : {})
                : jsonApiUserGroupInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {JsonApiUserSettingInDocument} jsonApiUserSettingInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityUserSettings: async (
            userId: string,
            id: string,
            jsonApiUserSettingInDocument: JsonApiUserSettingInDocument,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists("updateEntityUserSettings", "userId", userId);
            // verify required parameter 'id' is not null or undefined
            assertParamExists("updateEntityUserSettings", "id", id);
            // verify required parameter 'jsonApiUserSettingInDocument' is not null or undefined
            assertParamExists(
                "updateEntityUserSettings",
                "jsonApiUserSettingInDocument",
                jsonApiUserSettingInDocument,
            );
            const localVarPath = `/api/v1/entities/users/{userId}/userSettings/{id}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiUserSettingInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiUserSettingInDocument !== undefined ? jsonApiUserSettingInDocument : {},
                  )
                : jsonApiUserSettingInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserInDocument} jsonApiUserInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityUsers: async (
            id: string,
            jsonApiUserInDocument: JsonApiUserInDocument,
            filter?: string,
            include?: Array<"userGroups" | "ALL">,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("updateEntityUsers", "id", id);
            // verify required parameter 'jsonApiUserInDocument' is not null or undefined
            assertParamExists("updateEntityUsers", "jsonApiUserInDocument", jsonApiUserInDocument);
            const localVarPath = `/api/v1/entities/users/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiUserInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiUserInDocument !== undefined ? jsonApiUserInDocument : {})
                : jsonApiUserInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityVisualizationObjects: async (
            workspaceId: string,
            objectId: string,
            jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument,
            filter?: string,
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("updateEntityVisualizationObjects", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("updateEntityVisualizationObjects", "objectId", objectId);
            // verify required parameter 'jsonApiVisualizationObjectInDocument' is not null or undefined
            assertParamExists(
                "updateEntityVisualizationObjects",
                "jsonApiVisualizationObjectInDocument",
                jsonApiVisualizationObjectInDocument,
            );
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/visualizationObjects/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiVisualizationObjectInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiVisualizationObjectInDocument !== undefined
                          ? jsonApiVisualizationObjectInDocument
                          : {},
                  )
                : jsonApiVisualizationObjectInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityWorkspaceDataFilters: async (
            workspaceId: string,
            objectId: string,
            jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument,
            filter?: string,
            include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("updateEntityWorkspaceDataFilters", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("updateEntityWorkspaceDataFilters", "objectId", objectId);
            // verify required parameter 'jsonApiWorkspaceDataFilterInDocument' is not null or undefined
            assertParamExists(
                "updateEntityWorkspaceDataFilters",
                "jsonApiWorkspaceDataFilterInDocument",
                jsonApiWorkspaceDataFilterInDocument,
            );
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/workspaceDataFilters/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiWorkspaceDataFilterInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiWorkspaceDataFilterInDocument !== undefined
                          ? jsonApiWorkspaceDataFilterInDocument
                          : {},
                  )
                : jsonApiWorkspaceDataFilterInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiWorkspaceSettingInDocument} jsonApiWorkspaceSettingInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityWorkspaceSettings: async (
            workspaceId: string,
            objectId: string,
            jsonApiWorkspaceSettingInDocument: JsonApiWorkspaceSettingInDocument,
            filter?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("updateEntityWorkspaceSettings", "workspaceId", workspaceId);
            // verify required parameter 'objectId' is not null or undefined
            assertParamExists("updateEntityWorkspaceSettings", "objectId", objectId);
            // verify required parameter 'jsonApiWorkspaceSettingInDocument' is not null or undefined
            assertParamExists(
                "updateEntityWorkspaceSettings",
                "jsonApiWorkspaceSettingInDocument",
                jsonApiWorkspaceSettingInDocument,
            );
            const localVarPath = `/api/v1/entities/workspaces/{workspaceId}/workspaceSettings/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiWorkspaceSettingInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiWorkspaceSettingInDocument !== undefined
                          ? jsonApiWorkspaceSettingInDocument
                          : {},
                  )
                : jsonApiWorkspaceSettingInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityWorkspaces: async (
            id: string,
            jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument,
            filter?: string,
            include?: Array<"workspaces" | "parent" | "ALL">,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists("updateEntityWorkspaces", "id", id);
            // verify required parameter 'jsonApiWorkspaceInDocument' is not null or undefined
            assertParamExists(
                "updateEntityWorkspaces",
                "jsonApiWorkspaceInDocument",
                jsonApiWorkspaceInDocument,
            );
            const localVarPath = `/api/v1/entities/workspaces/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof jsonApiWorkspaceInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiWorkspaceInDocument !== undefined ? jsonApiWorkspaceInDocument : {})
                : jsonApiWorkspaceInDocument || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * EntitiesApi - functional programming interface
 * @export
 */
export const EntitiesApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = EntitiesApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
         * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEntityAnalyticalDashboards(
            workspaceId: string,
            jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument,
            include?: Array<
                | "visualizationObjects"
                | "analyticalDashboards"
                | "labels"
                | "metrics"
                | "datasets"
                | "filterContexts"
                | "dashboardPlugins"
                | "ALL"
            >,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEntityAnalyticalDashboards(
                workspaceId,
                jsonApiAnalyticalDashboardInDocument,
                include,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} userId
         * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEntityApiTokens(
            userId: string,
            jsonApiApiTokenInDocument: JsonApiApiTokenInDocument,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiApiTokenOutDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEntityApiTokens(
                userId,
                jsonApiApiTokenInDocument,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {JsonApiColorPaletteInDocument} jsonApiColorPaletteInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEntityColorPalettes(
            jsonApiColorPaletteInDocument: JsonApiColorPaletteInDocument,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiColorPaletteOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEntityColorPalettes(
                jsonApiColorPaletteInDocument,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {JsonApiCspDirectiveInDocument} jsonApiCspDirectiveInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEntityCspDirectives(
            jsonApiCspDirectiveInDocument: JsonApiCspDirectiveInDocument,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCspDirectiveOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEntityCspDirectives(
                jsonApiCspDirectiveInDocument,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiCustomApplicationSettingInDocument} jsonApiCustomApplicationSettingInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEntityCustomApplicationSettings(
            workspaceId: string,
            jsonApiCustomApplicationSettingInDocument: JsonApiCustomApplicationSettingInDocument,
            options?: AxiosRequestConfig,
        ): Promise<
            (
                axios?: AxiosInstance,
                basePath?: string,
            ) => AxiosPromise<JsonApiCustomApplicationSettingOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEntityCustomApplicationSettings(
                workspaceId,
                jsonApiCustomApplicationSettingInDocument,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEntityDashboardPlugins(
            workspaceId: string,
            jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDashboardPluginOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEntityDashboardPlugins(
                workspaceId,
                jsonApiDashboardPluginInDocument,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEntityDataSources(
            jsonApiDataSourceInDocument: JsonApiDataSourceInDocument,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceOutDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEntityDataSources(
                jsonApiDataSourceInDocument,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
         * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEntityFilterContexts(
            workspaceId: string,
            jsonApiFilterContextInDocument: JsonApiFilterContextInDocument,
            include?: Array<"attributes" | "datasets" | "labels" | "ALL">,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEntityFilterContexts(
                workspaceId,
                jsonApiFilterContextInDocument,
                include,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEntityMetrics(
            workspaceId: string,
            jsonApiMetricInDocument: JsonApiMetricInDocument,
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricOutDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEntityMetrics(
                workspaceId,
                jsonApiMetricInDocument,
                include,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {JsonApiOrganizationSettingInDocument} jsonApiOrganizationSettingInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEntityOrganizationSettings(
            jsonApiOrganizationSettingInDocument: JsonApiOrganizationSettingInDocument,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationSettingOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEntityOrganizationSettings(
                jsonApiOrganizationSettingInDocument,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {JsonApiThemeInDocument} jsonApiThemeInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEntityThemes(
            jsonApiThemeInDocument: JsonApiThemeInDocument,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiThemeOutDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEntityThemes(
                jsonApiThemeInDocument,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
         * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEntityUserGroups(
            jsonApiUserGroupInDocument: JsonApiUserGroupInDocument,
            include?: Array<"userGroups" | "parents" | "ALL">,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupOutDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEntityUserGroups(
                jsonApiUserGroupInDocument,
                include,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} userId
         * @param {JsonApiUserSettingInDocument} jsonApiUserSettingInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEntityUserSettings(
            userId: string,
            jsonApiUserSettingInDocument: JsonApiUserSettingInDocument,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserSettingOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEntityUserSettings(
                userId,
                jsonApiUserSettingInDocument,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {JsonApiUserInDocument} jsonApiUserInDocument
         * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEntityUsers(
            jsonApiUserInDocument: JsonApiUserInDocument,
            include?: Array<"userGroups" | "ALL">,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserOutDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEntityUsers(
                jsonApiUserInDocument,
                include,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEntityVisualizationObjects(
            workspaceId: string,
            jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument,
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEntityVisualizationObjects(
                workspaceId,
                jsonApiVisualizationObjectInDocument,
                include,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
         * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEntityWorkspaceDataFilters(
            workspaceId: string,
            jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument,
            include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEntityWorkspaceDataFilters(
                workspaceId,
                jsonApiWorkspaceDataFilterInDocument,
                include,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiWorkspaceSettingInDocument} jsonApiWorkspaceSettingInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEntityWorkspaceSettings(
            workspaceId: string,
            jsonApiWorkspaceSettingInDocument: JsonApiWorkspaceSettingInDocument,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceSettingOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEntityWorkspaceSettings(
                workspaceId,
                jsonApiWorkspaceSettingInDocument,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
         * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEntityWorkspaces(
            jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument,
            include?: Array<"workspaces" | "parent" | "ALL">,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceOutDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEntityWorkspaces(
                jsonApiWorkspaceInDocument,
                include,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEntityAnalyticalDashboards(
            workspaceId: string,
            objectId: string,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEntityAnalyticalDashboards(
                workspaceId,
                objectId,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEntityApiTokens(
            userId: string,
            id: string,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEntityApiTokens(
                userId,
                id,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEntityColorPalettes(
            id: string,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEntityColorPalettes(
                id,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEntityCspDirectives(
            id: string,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEntityCspDirectives(
                id,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEntityCustomApplicationSettings(
            workspaceId: string,
            objectId: string,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEntityCustomApplicationSettings(
                workspaceId,
                objectId,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEntityDashboardPlugins(
            workspaceId: string,
            objectId: string,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEntityDashboardPlugins(
                workspaceId,
                objectId,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEntityDataSources(
            id: string,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEntityDataSources(
                id,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEntityFilterContexts(
            workspaceId: string,
            objectId: string,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEntityFilterContexts(
                workspaceId,
                objectId,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEntityMetrics(
            workspaceId: string,
            objectId: string,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEntityMetrics(
                workspaceId,
                objectId,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEntityOrganizationSettings(
            id: string,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEntityOrganizationSettings(
                id,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEntityThemes(
            id: string,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEntityThemes(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEntityUserGroups(
            id: string,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEntityUserGroups(
                id,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEntityUserSettings(
            userId: string,
            id: string,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEntityUserSettings(
                userId,
                id,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEntityUsers(
            id: string,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEntityUsers(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEntityVisualizationObjects(
            workspaceId: string,
            objectId: string,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEntityVisualizationObjects(
                workspaceId,
                objectId,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEntityWorkspaceDataFilters(
            workspaceId: string,
            objectId: string,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEntityWorkspaceDataFilters(
                workspaceId,
                objectId,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEntityWorkspaceSettings(
            workspaceId: string,
            objectId: string,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEntityWorkspaceSettings(
                workspaceId,
                objectId,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEntityWorkspaces(
            id: string,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEntityWorkspaces(
                id,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEntitiesAnalyticalDashboards(
            workspaceId: string,
            origin?: "ALL" | "PARENTS" | "NATIVE",
            filter?: string,
            include?: Array<
                | "visualizationObjects"
                | "analyticalDashboards"
                | "labels"
                | "metrics"
                | "datasets"
                | "filterContexts"
                | "dashboardPlugins"
                | "ALL"
            >,
            page?: number,
            size?: number,
            sort?: Array<string>,
            xGDCVALIDATERELATIONS?: boolean,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardOutList>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEntitiesAnalyticalDashboards(
                workspaceId,
                origin,
                filter,
                include,
                page,
                size,
                sort,
                xGDCVALIDATERELATIONS,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary List all api tokens for a user
         * @param {string} userId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEntitiesApiTokens(
            userId: string,
            filter?: string,
            page?: number,
            size?: number,
            sort?: Array<string>,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiApiTokenOutList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEntitiesApiTokens(
                userId,
                filter,
                page,
                size,
                sort,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'datasets' | 'labels' | 'dataset' | 'defaultView' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEntitiesAttributes(
            workspaceId: string,
            origin?: "ALL" | "PARENTS" | "NATIVE",
            filter?: string,
            include?: Array<"datasets" | "labels" | "dataset" | "defaultView" | "ALL">,
            page?: number,
            size?: number,
            sort?: Array<string>,
            xGDCVALIDATERELATIONS?: boolean,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAttributeOutList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEntitiesAttributes(
                workspaceId,
                origin,
                filter,
                include,
                page,
                size,
                sort,
                xGDCVALIDATERELATIONS,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEntitiesColorPalettes(
            filter?: string,
            page?: number,
            size?: number,
            sort?: Array<string>,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiColorPaletteOutList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEntitiesColorPalettes(
                filter,
                page,
                size,
                sort,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEntitiesCspDirectives(
            filter?: string,
            page?: number,
            size?: number,
            sort?: Array<string>,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCspDirectiveOutList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEntitiesCspDirectives(
                filter,
                page,
                size,
                sort,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEntitiesCustomApplicationSettings(
            workspaceId: string,
            origin?: "ALL" | "PARENTS" | "NATIVE",
            filter?: string,
            page?: number,
            size?: number,
            sort?: Array<string>,
            xGDCVALIDATERELATIONS?: boolean,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCustomApplicationSettingOutList>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEntitiesCustomApplicationSettings(
                workspaceId,
                origin,
                filter,
                page,
                size,
                sort,
                xGDCVALIDATERELATIONS,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEntitiesDashboardPlugins(
            workspaceId: string,
            origin?: "ALL" | "PARENTS" | "NATIVE",
            filter?: string,
            page?: number,
            size?: number,
            sort?: Array<string>,
            xGDCVALIDATERELATIONS?: boolean,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDashboardPluginOutList>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEntitiesDashboardPlugins(
                workspaceId,
                origin,
                filter,
                page,
                size,
                sort,
                xGDCVALIDATERELATIONS,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEntitiesDataSourceIdentifiers(
            filter?: string,
            page?: number,
            size?: number,
            sort?: Array<string>,
            metaInclude?: Array<"permissions" | "all" | "ALL">,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceIdentifierOutList>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEntitiesDataSourceIdentifiers(
                filter,
                page,
                size,
                sort,
                metaInclude,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} dataSourceId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEntitiesDataSourceTables(
            dataSourceId: string,
            filter?: string,
            page?: number,
            size?: number,
            sort?: Array<string>,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceTableOutList>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEntitiesDataSourceTables(
                dataSourceId,
                filter,
                page,
                size,
                sort,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEntitiesDataSources(
            filter?: string,
            page?: number,
            size?: number,
            sort?: Array<string>,
            metaInclude?: Array<"permissions" | "all" | "ALL">,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceOutList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEntitiesDataSources(
                filter,
                page,
                size,
                sort,
                metaInclude,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'attributes' | 'facts' | 'datasets' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEntitiesDatasets(
            workspaceId: string,
            origin?: "ALL" | "PARENTS" | "NATIVE",
            filter?: string,
            include?: Array<"attributes" | "facts" | "datasets" | "references" | "ALL">,
            page?: number,
            size?: number,
            sort?: Array<string>,
            xGDCVALIDATERELATIONS?: boolean,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDatasetOutList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEntitiesDatasets(
                workspaceId,
                origin,
                filter,
                include,
                page,
                size,
                sort,
                xGDCVALIDATERELATIONS,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEntitiesEntitlements(
            filter?: string,
            page?: number,
            size?: number,
            sort?: Array<string>,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiEntitlementOutList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEntitiesEntitlements(
                filter,
                page,
                size,
                sort,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEntitiesFacts(
            workspaceId: string,
            origin?: "ALL" | "PARENTS" | "NATIVE",
            filter?: string,
            include?: Array<"datasets" | "dataset" | "ALL">,
            page?: number,
            size?: number,
            sort?: Array<string>,
            xGDCVALIDATERELATIONS?: boolean,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFactOutList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEntitiesFacts(
                workspaceId,
                origin,
                filter,
                include,
                page,
                size,
                sort,
                xGDCVALIDATERELATIONS,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEntitiesFilterContexts(
            workspaceId: string,
            origin?: "ALL" | "PARENTS" | "NATIVE",
            filter?: string,
            include?: Array<"attributes" | "datasets" | "labels" | "ALL">,
            page?: number,
            size?: number,
            sort?: Array<string>,
            xGDCVALIDATERELATIONS?: boolean,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextOutList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEntitiesFilterContexts(
                workspaceId,
                origin,
                filter,
                include,
                page,
                size,
                sort,
                xGDCVALIDATERELATIONS,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEntitiesLabels(
            workspaceId: string,
            origin?: "ALL" | "PARENTS" | "NATIVE",
            filter?: string,
            include?: Array<"attributes" | "attribute" | "ALL">,
            page?: number,
            size?: number,
            sort?: Array<string>,
            xGDCVALIDATERELATIONS?: boolean,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiLabelOutList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEntitiesLabels(
                workspaceId,
                origin,
                filter,
                include,
                page,
                size,
                sort,
                xGDCVALIDATERELATIONS,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEntitiesMetrics(
            workspaceId: string,
            origin?: "ALL" | "PARENTS" | "NATIVE",
            filter?: string,
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">,
            page?: number,
            size?: number,
            sort?: Array<string>,
            xGDCVALIDATERELATIONS?: boolean,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricOutList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEntitiesMetrics(
                workspaceId,
                origin,
                filter,
                include,
                page,
                size,
                sort,
                xGDCVALIDATERELATIONS,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEntitiesOrganizationSettings(
            filter?: string,
            page?: number,
            size?: number,
            sort?: Array<string>,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationSettingOutList>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEntitiesOrganizationSettings(
                filter,
                page,
                size,
                sort,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEntitiesThemes(
            filter?: string,
            page?: number,
            size?: number,
            sort?: Array<string>,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiThemeOutList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEntitiesThemes(
                filter,
                page,
                size,
                sort,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEntitiesUserGroups(
            filter?: string,
            include?: Array<"userGroups" | "parents" | "ALL">,
            page?: number,
            size?: number,
            sort?: Array<string>,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupOutList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEntitiesUserGroups(
                filter,
                include,
                page,
                size,
                sort,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary List all settings for a user
         * @param {string} userId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEntitiesUserSettings(
            userId: string,
            filter?: string,
            page?: number,
            size?: number,
            sort?: Array<string>,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserSettingOutList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEntitiesUserSettings(
                userId,
                filter,
                page,
                size,
                sort,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEntitiesUsers(
            filter?: string,
            include?: Array<"userGroups" | "ALL">,
            page?: number,
            size?: number,
            sort?: Array<string>,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserOutList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEntitiesUsers(
                filter,
                include,
                page,
                size,
                sort,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEntitiesVisualizationObjects(
            workspaceId: string,
            origin?: "ALL" | "PARENTS" | "NATIVE",
            filter?: string,
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">,
            page?: number,
            size?: number,
            sort?: Array<string>,
            xGDCVALIDATERELATIONS?: boolean,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectOutList>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEntitiesVisualizationObjects(
                workspaceId,
                origin,
                filter,
                include,
                page,
                size,
                sort,
                xGDCVALIDATERELATIONS,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEntitiesWorkspaceDataFilterSettings(
            workspaceId: string,
            origin?: "ALL" | "PARENTS" | "NATIVE",
            filter?: string,
            include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">,
            page?: number,
            size?: number,
            sort?: Array<string>,
            xGDCVALIDATERELATIONS?: boolean,
            options?: AxiosRequestConfig,
        ): Promise<
            (
                axios?: AxiosInstance,
                basePath?: string,
            ) => AxiosPromise<JsonApiWorkspaceDataFilterSettingOutList>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.getAllEntitiesWorkspaceDataFilterSettings(
                    workspaceId,
                    origin,
                    filter,
                    include,
                    page,
                    size,
                    sort,
                    xGDCVALIDATERELATIONS,
                    options,
                );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEntitiesWorkspaceDataFilters(
            workspaceId: string,
            origin?: "ALL" | "PARENTS" | "NATIVE",
            filter?: string,
            include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">,
            page?: number,
            size?: number,
            sort?: Array<string>,
            xGDCVALIDATERELATIONS?: boolean,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterOutList>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEntitiesWorkspaceDataFilters(
                workspaceId,
                origin,
                filter,
                include,
                page,
                size,
                sort,
                xGDCVALIDATERELATIONS,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEntitiesWorkspaceSettings(
            workspaceId: string,
            origin?: "ALL" | "PARENTS" | "NATIVE",
            filter?: string,
            page?: number,
            size?: number,
            sort?: Array<string>,
            xGDCVALIDATERELATIONS?: boolean,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceSettingOutList>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEntitiesWorkspaceSettings(
                workspaceId,
                origin,
                filter,
                page,
                size,
                sort,
                xGDCVALIDATERELATIONS,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {Array<'config' | 'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEntitiesWorkspaces(
            filter?: string,
            include?: Array<"workspaces" | "parent" | "ALL">,
            page?: number,
            size?: number,
            sort?: Array<string>,
            metaInclude?: Array<"config" | "permissions" | "all" | "ALL">,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceOutList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEntitiesWorkspaces(
                filter,
                include,
                page,
                size,
                sort,
                metaInclude,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves links for all options for different configurations.
         * @summary Links for all configuration options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllOptions(
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllOptions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a list of all supported data sources along with information about the used drivers.
         * @summary Get all available data source drivers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataSourceDrivers(
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataSourceDrivers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntityAnalyticalDashboards(
            workspaceId: string,
            objectId: string,
            filter?: string,
            include?: Array<
                | "visualizationObjects"
                | "analyticalDashboards"
                | "labels"
                | "metrics"
                | "datasets"
                | "filterContexts"
                | "dashboardPlugins"
                | "ALL"
            >,
            xGDCVALIDATERELATIONS?: boolean,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityAnalyticalDashboards(
                workspaceId,
                objectId,
                filter,
                include,
                xGDCVALIDATERELATIONS,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntityApiTokens(
            userId: string,
            id: string,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiApiTokenOutDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityApiTokens(
                userId,
                id,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'datasets' | 'labels' | 'dataset' | 'defaultView' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntityAttributes(
            workspaceId: string,
            objectId: string,
            filter?: string,
            include?: Array<"datasets" | "labels" | "dataset" | "defaultView" | "ALL">,
            xGDCVALIDATERELATIONS?: boolean,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAttributeOutDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityAttributes(
                workspaceId,
                objectId,
                filter,
                include,
                xGDCVALIDATERELATIONS,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntityColorPalettes(
            id: string,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiColorPaletteOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityColorPalettes(
                id,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntityCookieSecurityConfigurations(
            id: string,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<
            (
                axios?: AxiosInstance,
                basePath?: string,
            ) => AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityCookieSecurityConfigurations(
                id,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntityCspDirectives(
            id: string,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCspDirectiveOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityCspDirectives(
                id,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntityCustomApplicationSettings(
            workspaceId: string,
            objectId: string,
            filter?: string,
            xGDCVALIDATERELATIONS?: boolean,
            options?: AxiosRequestConfig,
        ): Promise<
            (
                axios?: AxiosInstance,
                basePath?: string,
            ) => AxiosPromise<JsonApiCustomApplicationSettingOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityCustomApplicationSettings(
                workspaceId,
                objectId,
                filter,
                xGDCVALIDATERELATIONS,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntityDashboardPlugins(
            workspaceId: string,
            objectId: string,
            filter?: string,
            xGDCVALIDATERELATIONS?: boolean,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDashboardPluginOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityDashboardPlugins(
                workspaceId,
                objectId,
                filter,
                xGDCVALIDATERELATIONS,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntityDataSourceIdentifiers(
            id: string,
            filter?: string,
            metaInclude?: Array<"permissions" | "all" | "ALL">,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceIdentifierOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityDataSourceIdentifiers(
                id,
                filter,
                metaInclude,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} dataSourceId
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntityDataSourceTables(
            dataSourceId: string,
            id: string,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceTableOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityDataSourceTables(
                dataSourceId,
                id,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntityDataSources(
            id: string,
            filter?: string,
            metaInclude?: Array<"permissions" | "all" | "ALL">,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceOutDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityDataSources(
                id,
                filter,
                metaInclude,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'attributes' | 'facts' | 'datasets' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntityDatasets(
            workspaceId: string,
            objectId: string,
            filter?: string,
            include?: Array<"attributes" | "facts" | "datasets" | "references" | "ALL">,
            xGDCVALIDATERELATIONS?: boolean,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDatasetOutDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityDatasets(
                workspaceId,
                objectId,
                filter,
                include,
                xGDCVALIDATERELATIONS,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntityEntitlements(
            id: string,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiEntitlementOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityEntitlements(
                id,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntityFacts(
            workspaceId: string,
            objectId: string,
            filter?: string,
            include?: Array<"datasets" | "dataset" | "ALL">,
            xGDCVALIDATERELATIONS?: boolean,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFactOutDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityFacts(
                workspaceId,
                objectId,
                filter,
                include,
                xGDCVALIDATERELATIONS,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntityFilterContexts(
            workspaceId: string,
            objectId: string,
            filter?: string,
            include?: Array<"attributes" | "datasets" | "labels" | "ALL">,
            xGDCVALIDATERELATIONS?: boolean,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityFilterContexts(
                workspaceId,
                objectId,
                filter,
                include,
                xGDCVALIDATERELATIONS,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntityLabels(
            workspaceId: string,
            objectId: string,
            filter?: string,
            include?: Array<"attributes" | "attribute" | "ALL">,
            xGDCVALIDATERELATIONS?: boolean,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiLabelOutDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityLabels(
                workspaceId,
                objectId,
                filter,
                include,
                xGDCVALIDATERELATIONS,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntityMetrics(
            workspaceId: string,
            objectId: string,
            filter?: string,
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">,
            xGDCVALIDATERELATIONS?: boolean,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricOutDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityMetrics(
                workspaceId,
                objectId,
                filter,
                include,
                xGDCVALIDATERELATIONS,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntityOrganizationSettings(
            id: string,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationSettingOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityOrganizationSettings(
                id,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntityOrganizations(
            id: string,
            filter?: string,
            include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">,
            metaInclude?: Array<"permissions" | "all" | "ALL">,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityOrganizations(
                id,
                filter,
                include,
                metaInclude,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntityThemes(
            id: string,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiThemeOutDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityThemes(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntityUserGroups(
            id: string,
            filter?: string,
            include?: Array<"userGroups" | "parents" | "ALL">,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupOutDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityUserGroups(
                id,
                filter,
                include,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntityUserSettings(
            userId: string,
            id: string,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserSettingOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityUserSettings(
                userId,
                id,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntityUsers(
            id: string,
            filter?: string,
            include?: Array<"userGroups" | "ALL">,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserOutDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityUsers(
                id,
                filter,
                include,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntityVisualizationObjects(
            workspaceId: string,
            objectId: string,
            filter?: string,
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">,
            xGDCVALIDATERELATIONS?: boolean,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityVisualizationObjects(
                workspaceId,
                objectId,
                filter,
                include,
                xGDCVALIDATERELATIONS,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntityWorkspaceDataFilterSettings(
            workspaceId: string,
            objectId: string,
            filter?: string,
            include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">,
            xGDCVALIDATERELATIONS?: boolean,
            options?: AxiosRequestConfig,
        ): Promise<
            (
                axios?: AxiosInstance,
                basePath?: string,
            ) => AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityWorkspaceDataFilterSettings(
                workspaceId,
                objectId,
                filter,
                include,
                xGDCVALIDATERELATIONS,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntityWorkspaceDataFilters(
            workspaceId: string,
            objectId: string,
            filter?: string,
            include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">,
            xGDCVALIDATERELATIONS?: boolean,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityWorkspaceDataFilters(
                workspaceId,
                objectId,
                filter,
                include,
                xGDCVALIDATERELATIONS,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntityWorkspaceSettings(
            workspaceId: string,
            objectId: string,
            filter?: string,
            xGDCVALIDATERELATIONS?: boolean,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceSettingOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityWorkspaceSettings(
                workspaceId,
                objectId,
                filter,
                xGDCVALIDATERELATIONS,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {Array<'config' | 'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntityWorkspaces(
            id: string,
            filter?: string,
            include?: Array<"workspaces" | "parent" | "ALL">,
            metaInclude?: Array<"config" | "permissions" | "all" | "ALL">,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceOutDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityWorkspaces(
                id,
                filter,
                include,
                metaInclude,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a basic information about organization.
         * @summary Get current organization info
         * @param {Array<'permissions' | 'all'>} [metaInclude] Return list of permissions available to logged user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganization(
            metaInclude?: Array<"permissions" | "all">,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganization(metaInclude, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiAnalyticalDashboardPatchDocument} jsonApiAnalyticalDashboardPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchEntityAnalyticalDashboards(
            workspaceId: string,
            objectId: string,
            jsonApiAnalyticalDashboardPatchDocument: JsonApiAnalyticalDashboardPatchDocument,
            filter?: string,
            include?: Array<
                | "visualizationObjects"
                | "analyticalDashboards"
                | "labels"
                | "metrics"
                | "datasets"
                | "filterContexts"
                | "dashboardPlugins"
                | "ALL"
            >,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchEntityAnalyticalDashboards(
                workspaceId,
                objectId,
                jsonApiAnalyticalDashboardPatchDocument,
                filter,
                include,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiColorPalettePatchDocument} jsonApiColorPalettePatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchEntityColorPalettes(
            id: string,
            jsonApiColorPalettePatchDocument: JsonApiColorPalettePatchDocument,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiColorPaletteOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchEntityColorPalettes(
                id,
                jsonApiColorPalettePatchDocument,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiCookieSecurityConfigurationPatchDocument} jsonApiCookieSecurityConfigurationPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchEntityCookieSecurityConfigurations(
            id: string,
            jsonApiCookieSecurityConfigurationPatchDocument: JsonApiCookieSecurityConfigurationPatchDocument,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<
            (
                axios?: AxiosInstance,
                basePath?: string,
            ) => AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchEntityCookieSecurityConfigurations(
                id,
                jsonApiCookieSecurityConfigurationPatchDocument,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiCspDirectivePatchDocument} jsonApiCspDirectivePatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchEntityCspDirectives(
            id: string,
            jsonApiCspDirectivePatchDocument: JsonApiCspDirectivePatchDocument,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCspDirectiveOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchEntityCspDirectives(
                id,
                jsonApiCspDirectivePatchDocument,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiCustomApplicationSettingPatchDocument} jsonApiCustomApplicationSettingPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchEntityCustomApplicationSettings(
            workspaceId: string,
            objectId: string,
            jsonApiCustomApplicationSettingPatchDocument: JsonApiCustomApplicationSettingPatchDocument,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<
            (
                axios?: AxiosInstance,
                basePath?: string,
            ) => AxiosPromise<JsonApiCustomApplicationSettingOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchEntityCustomApplicationSettings(
                workspaceId,
                objectId,
                jsonApiCustomApplicationSettingPatchDocument,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiDashboardPluginPatchDocument} jsonApiDashboardPluginPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchEntityDashboardPlugins(
            workspaceId: string,
            objectId: string,
            jsonApiDashboardPluginPatchDocument: JsonApiDashboardPluginPatchDocument,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDashboardPluginOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchEntityDashboardPlugins(
                workspaceId,
                objectId,
                jsonApiDashboardPluginPatchDocument,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiDataSourcePatchDocument} jsonApiDataSourcePatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchEntityDataSources(
            id: string,
            jsonApiDataSourcePatchDocument: JsonApiDataSourcePatchDocument,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceOutDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchEntityDataSources(
                id,
                jsonApiDataSourcePatchDocument,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiFilterContextPatchDocument} jsonApiFilterContextPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchEntityFilterContexts(
            workspaceId: string,
            objectId: string,
            jsonApiFilterContextPatchDocument: JsonApiFilterContextPatchDocument,
            filter?: string,
            include?: Array<"attributes" | "datasets" | "labels" | "ALL">,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchEntityFilterContexts(
                workspaceId,
                objectId,
                jsonApiFilterContextPatchDocument,
                filter,
                include,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiMetricPatchDocument} jsonApiMetricPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchEntityMetrics(
            workspaceId: string,
            objectId: string,
            jsonApiMetricPatchDocument: JsonApiMetricPatchDocument,
            filter?: string,
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricOutDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchEntityMetrics(
                workspaceId,
                objectId,
                jsonApiMetricPatchDocument,
                filter,
                include,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiOrganizationSettingPatchDocument} jsonApiOrganizationSettingPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchEntityOrganizationSettings(
            id: string,
            jsonApiOrganizationSettingPatchDocument: JsonApiOrganizationSettingPatchDocument,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationSettingOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchEntityOrganizationSettings(
                id,
                jsonApiOrganizationSettingPatchDocument,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiOrganizationPatchDocument} jsonApiOrganizationPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchEntityOrganizations(
            id: string,
            jsonApiOrganizationPatchDocument: JsonApiOrganizationPatchDocument,
            filter?: string,
            include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchEntityOrganizations(
                id,
                jsonApiOrganizationPatchDocument,
                filter,
                include,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiThemePatchDocument} jsonApiThemePatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchEntityThemes(
            id: string,
            jsonApiThemePatchDocument: JsonApiThemePatchDocument,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiThemeOutDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchEntityThemes(
                id,
                jsonApiThemePatchDocument,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserGroupPatchDocument} jsonApiUserGroupPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchEntityUserGroups(
            id: string,
            jsonApiUserGroupPatchDocument: JsonApiUserGroupPatchDocument,
            filter?: string,
            include?: Array<"userGroups" | "parents" | "ALL">,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupOutDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchEntityUserGroups(
                id,
                jsonApiUserGroupPatchDocument,
                filter,
                include,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserPatchDocument} jsonApiUserPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchEntityUsers(
            id: string,
            jsonApiUserPatchDocument: JsonApiUserPatchDocument,
            filter?: string,
            include?: Array<"userGroups" | "ALL">,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserOutDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchEntityUsers(
                id,
                jsonApiUserPatchDocument,
                filter,
                include,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiVisualizationObjectPatchDocument} jsonApiVisualizationObjectPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchEntityVisualizationObjects(
            workspaceId: string,
            objectId: string,
            jsonApiVisualizationObjectPatchDocument: JsonApiVisualizationObjectPatchDocument,
            filter?: string,
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchEntityVisualizationObjects(
                workspaceId,
                objectId,
                jsonApiVisualizationObjectPatchDocument,
                filter,
                include,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiWorkspaceDataFilterPatchDocument} jsonApiWorkspaceDataFilterPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchEntityWorkspaceDataFilters(
            workspaceId: string,
            objectId: string,
            jsonApiWorkspaceDataFilterPatchDocument: JsonApiWorkspaceDataFilterPatchDocument,
            filter?: string,
            include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchEntityWorkspaceDataFilters(
                workspaceId,
                objectId,
                jsonApiWorkspaceDataFilterPatchDocument,
                filter,
                include,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiWorkspaceSettingPatchDocument} jsonApiWorkspaceSettingPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchEntityWorkspaceSettings(
            workspaceId: string,
            objectId: string,
            jsonApiWorkspaceSettingPatchDocument: JsonApiWorkspaceSettingPatchDocument,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceSettingOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchEntityWorkspaceSettings(
                workspaceId,
                objectId,
                jsonApiWorkspaceSettingPatchDocument,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiWorkspacePatchDocument} jsonApiWorkspacePatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchEntityWorkspaces(
            id: string,
            jsonApiWorkspacePatchDocument: JsonApiWorkspacePatchDocument,
            filter?: string,
            include?: Array<"workspaces" | "parent" | "ALL">,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceOutDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchEntityWorkspaces(
                id,
                jsonApiWorkspacePatchDocument,
                filter,
                include,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEntityAnalyticalDashboards(
            workspaceId: string,
            objectId: string,
            jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument,
            filter?: string,
            include?: Array<
                | "visualizationObjects"
                | "analyticalDashboards"
                | "labels"
                | "metrics"
                | "datasets"
                | "filterContexts"
                | "dashboardPlugins"
                | "ALL"
            >,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEntityAnalyticalDashboards(
                workspaceId,
                objectId,
                jsonApiAnalyticalDashboardInDocument,
                filter,
                include,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEntityApiTokens(
            userId: string,
            id: string,
            jsonApiApiTokenInDocument: JsonApiApiTokenInDocument,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiApiTokenOutDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEntityApiTokens(
                userId,
                id,
                jsonApiApiTokenInDocument,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiColorPaletteInDocument} jsonApiColorPaletteInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEntityColorPalettes(
            id: string,
            jsonApiColorPaletteInDocument: JsonApiColorPaletteInDocument,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiColorPaletteOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEntityColorPalettes(
                id,
                jsonApiColorPaletteInDocument,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiCookieSecurityConfigurationInDocument} jsonApiCookieSecurityConfigurationInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEntityCookieSecurityConfigurations(
            id: string,
            jsonApiCookieSecurityConfigurationInDocument: JsonApiCookieSecurityConfigurationInDocument,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<
            (
                axios?: AxiosInstance,
                basePath?: string,
            ) => AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.updateEntityCookieSecurityConfigurations(
                    id,
                    jsonApiCookieSecurityConfigurationInDocument,
                    filter,
                    options,
                );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiCspDirectiveInDocument} jsonApiCspDirectiveInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEntityCspDirectives(
            id: string,
            jsonApiCspDirectiveInDocument: JsonApiCspDirectiveInDocument,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCspDirectiveOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEntityCspDirectives(
                id,
                jsonApiCspDirectiveInDocument,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiCustomApplicationSettingInDocument} jsonApiCustomApplicationSettingInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEntityCustomApplicationSettings(
            workspaceId: string,
            objectId: string,
            jsonApiCustomApplicationSettingInDocument: JsonApiCustomApplicationSettingInDocument,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<
            (
                axios?: AxiosInstance,
                basePath?: string,
            ) => AxiosPromise<JsonApiCustomApplicationSettingOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEntityCustomApplicationSettings(
                workspaceId,
                objectId,
                jsonApiCustomApplicationSettingInDocument,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEntityDashboardPlugins(
            workspaceId: string,
            objectId: string,
            jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDashboardPluginOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEntityDashboardPlugins(
                workspaceId,
                objectId,
                jsonApiDashboardPluginInDocument,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEntityDataSources(
            id: string,
            jsonApiDataSourceInDocument: JsonApiDataSourceInDocument,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceOutDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEntityDataSources(
                id,
                jsonApiDataSourceInDocument,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEntityFilterContexts(
            workspaceId: string,
            objectId: string,
            jsonApiFilterContextInDocument: JsonApiFilterContextInDocument,
            filter?: string,
            include?: Array<"attributes" | "datasets" | "labels" | "ALL">,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEntityFilterContexts(
                workspaceId,
                objectId,
                jsonApiFilterContextInDocument,
                filter,
                include,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEntityMetrics(
            workspaceId: string,
            objectId: string,
            jsonApiMetricInDocument: JsonApiMetricInDocument,
            filter?: string,
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricOutDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEntityMetrics(
                workspaceId,
                objectId,
                jsonApiMetricInDocument,
                filter,
                include,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiOrganizationSettingInDocument} jsonApiOrganizationSettingInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEntityOrganizationSettings(
            id: string,
            jsonApiOrganizationSettingInDocument: JsonApiOrganizationSettingInDocument,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationSettingOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEntityOrganizationSettings(
                id,
                jsonApiOrganizationSettingInDocument,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEntityOrganizations(
            id: string,
            jsonApiOrganizationInDocument: JsonApiOrganizationInDocument,
            filter?: string,
            include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEntityOrganizations(
                id,
                jsonApiOrganizationInDocument,
                filter,
                include,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiThemeInDocument} jsonApiThemeInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEntityThemes(
            id: string,
            jsonApiThemeInDocument: JsonApiThemeInDocument,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiThemeOutDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEntityThemes(
                id,
                jsonApiThemeInDocument,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEntityUserGroups(
            id: string,
            jsonApiUserGroupInDocument: JsonApiUserGroupInDocument,
            filter?: string,
            include?: Array<"userGroups" | "parents" | "ALL">,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupOutDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEntityUserGroups(
                id,
                jsonApiUserGroupInDocument,
                filter,
                include,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {JsonApiUserSettingInDocument} jsonApiUserSettingInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEntityUserSettings(
            userId: string,
            id: string,
            jsonApiUserSettingInDocument: JsonApiUserSettingInDocument,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserSettingOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEntityUserSettings(
                userId,
                id,
                jsonApiUserSettingInDocument,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserInDocument} jsonApiUserInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEntityUsers(
            id: string,
            jsonApiUserInDocument: JsonApiUserInDocument,
            filter?: string,
            include?: Array<"userGroups" | "ALL">,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserOutDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEntityUsers(
                id,
                jsonApiUserInDocument,
                filter,
                include,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEntityVisualizationObjects(
            workspaceId: string,
            objectId: string,
            jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument,
            filter?: string,
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEntityVisualizationObjects(
                workspaceId,
                objectId,
                jsonApiVisualizationObjectInDocument,
                filter,
                include,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEntityWorkspaceDataFilters(
            workspaceId: string,
            objectId: string,
            jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument,
            filter?: string,
            include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEntityWorkspaceDataFilters(
                workspaceId,
                objectId,
                jsonApiWorkspaceDataFilterInDocument,
                filter,
                include,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiWorkspaceSettingInDocument} jsonApiWorkspaceSettingInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEntityWorkspaceSettings(
            workspaceId: string,
            objectId: string,
            jsonApiWorkspaceSettingInDocument: JsonApiWorkspaceSettingInDocument,
            filter?: string,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceSettingOutDocument>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEntityWorkspaceSettings(
                workspaceId,
                objectId,
                jsonApiWorkspaceSettingInDocument,
                filter,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEntityWorkspaces(
            id: string,
            jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument,
            filter?: string,
            include?: Array<"workspaces" | "parent" | "ALL">,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceOutDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEntityWorkspaces(
                id,
                jsonApiWorkspaceInDocument,
                filter,
                include,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};

/**
 * EntitiesApi - factory interface
 * @export
 */
export const EntitiesApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    const localVarFp = EntitiesApiFp(configuration);
    return {
        /**
         *
         * @param {EntitiesApiCreateEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityAnalyticalDashboards(
            requestParameters: EntitiesApiCreateEntityAnalyticalDashboardsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiAnalyticalDashboardOutDocument> {
            return localVarFp
                .createEntityAnalyticalDashboards(
                    requestParameters.workspaceId,
                    requestParameters.jsonApiAnalyticalDashboardInDocument,
                    requestParameters.include,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiCreateEntityApiTokensRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityApiTokens(
            requestParameters: EntitiesApiCreateEntityApiTokensRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiApiTokenOutDocument> {
            return localVarFp
                .createEntityApiTokens(
                    requestParameters.userId,
                    requestParameters.jsonApiApiTokenInDocument,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiCreateEntityColorPalettesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityColorPalettes(
            requestParameters: EntitiesApiCreateEntityColorPalettesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiColorPaletteOutDocument> {
            return localVarFp
                .createEntityColorPalettes(requestParameters.jsonApiColorPaletteInDocument, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiCreateEntityCspDirectivesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityCspDirectives(
            requestParameters: EntitiesApiCreateEntityCspDirectivesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiCspDirectiveOutDocument> {
            return localVarFp
                .createEntityCspDirectives(requestParameters.jsonApiCspDirectiveInDocument, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiCreateEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityCustomApplicationSettings(
            requestParameters: EntitiesApiCreateEntityCustomApplicationSettingsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiCustomApplicationSettingOutDocument> {
            return localVarFp
                .createEntityCustomApplicationSettings(
                    requestParameters.workspaceId,
                    requestParameters.jsonApiCustomApplicationSettingInDocument,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiCreateEntityDashboardPluginsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityDashboardPlugins(
            requestParameters: EntitiesApiCreateEntityDashboardPluginsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiDashboardPluginOutDocument> {
            return localVarFp
                .createEntityDashboardPlugins(
                    requestParameters.workspaceId,
                    requestParameters.jsonApiDashboardPluginInDocument,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiCreateEntityDataSourcesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityDataSources(
            requestParameters: EntitiesApiCreateEntityDataSourcesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiDataSourceOutDocument> {
            return localVarFp
                .createEntityDataSources(requestParameters.jsonApiDataSourceInDocument, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiCreateEntityFilterContextsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityFilterContexts(
            requestParameters: EntitiesApiCreateEntityFilterContextsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiFilterContextOutDocument> {
            return localVarFp
                .createEntityFilterContexts(
                    requestParameters.workspaceId,
                    requestParameters.jsonApiFilterContextInDocument,
                    requestParameters.include,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiCreateEntityMetricsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityMetrics(
            requestParameters: EntitiesApiCreateEntityMetricsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiMetricOutDocument> {
            return localVarFp
                .createEntityMetrics(
                    requestParameters.workspaceId,
                    requestParameters.jsonApiMetricInDocument,
                    requestParameters.include,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiCreateEntityOrganizationSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityOrganizationSettings(
            requestParameters: EntitiesApiCreateEntityOrganizationSettingsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiOrganizationSettingOutDocument> {
            return localVarFp
                .createEntityOrganizationSettings(
                    requestParameters.jsonApiOrganizationSettingInDocument,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiCreateEntityThemesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityThemes(
            requestParameters: EntitiesApiCreateEntityThemesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiThemeOutDocument> {
            return localVarFp
                .createEntityThemes(requestParameters.jsonApiThemeInDocument, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiCreateEntityUserGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityUserGroups(
            requestParameters: EntitiesApiCreateEntityUserGroupsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiUserGroupOutDocument> {
            return localVarFp
                .createEntityUserGroups(
                    requestParameters.jsonApiUserGroupInDocument,
                    requestParameters.include,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiCreateEntityUserSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityUserSettings(
            requestParameters: EntitiesApiCreateEntityUserSettingsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiUserSettingOutDocument> {
            return localVarFp
                .createEntityUserSettings(
                    requestParameters.userId,
                    requestParameters.jsonApiUserSettingInDocument,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiCreateEntityUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityUsers(
            requestParameters: EntitiesApiCreateEntityUsersRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiUserOutDocument> {
            return localVarFp
                .createEntityUsers(
                    requestParameters.jsonApiUserInDocument,
                    requestParameters.include,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiCreateEntityVisualizationObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityVisualizationObjects(
            requestParameters: EntitiesApiCreateEntityVisualizationObjectsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiVisualizationObjectOutDocument> {
            return localVarFp
                .createEntityVisualizationObjects(
                    requestParameters.workspaceId,
                    requestParameters.jsonApiVisualizationObjectInDocument,
                    requestParameters.include,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiCreateEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityWorkspaceDataFilters(
            requestParameters: EntitiesApiCreateEntityWorkspaceDataFiltersRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument> {
            return localVarFp
                .createEntityWorkspaceDataFilters(
                    requestParameters.workspaceId,
                    requestParameters.jsonApiWorkspaceDataFilterInDocument,
                    requestParameters.include,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiCreateEntityWorkspaceSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityWorkspaceSettings(
            requestParameters: EntitiesApiCreateEntityWorkspaceSettingsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiWorkspaceSettingOutDocument> {
            return localVarFp
                .createEntityWorkspaceSettings(
                    requestParameters.workspaceId,
                    requestParameters.jsonApiWorkspaceSettingInDocument,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiCreateEntityWorkspacesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityWorkspaces(
            requestParameters: EntitiesApiCreateEntityWorkspacesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiWorkspaceOutDocument> {
            return localVarFp
                .createEntityWorkspaces(
                    requestParameters.jsonApiWorkspaceInDocument,
                    requestParameters.include,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityAnalyticalDashboards(
            requestParameters: EntitiesApiDeleteEntityAnalyticalDashboardsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .deleteEntityAnalyticalDashboards(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityApiTokensRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityApiTokens(
            requestParameters: EntitiesApiDeleteEntityApiTokensRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .deleteEntityApiTokens(
                    requestParameters.userId,
                    requestParameters.id,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityColorPalettesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityColorPalettes(
            requestParameters: EntitiesApiDeleteEntityColorPalettesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .deleteEntityColorPalettes(requestParameters.id, requestParameters.filter, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityCspDirectivesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityCspDirectives(
            requestParameters: EntitiesApiDeleteEntityCspDirectivesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .deleteEntityCspDirectives(requestParameters.id, requestParameters.filter, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityCustomApplicationSettings(
            requestParameters: EntitiesApiDeleteEntityCustomApplicationSettingsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .deleteEntityCustomApplicationSettings(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityDashboardPluginsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityDashboardPlugins(
            requestParameters: EntitiesApiDeleteEntityDashboardPluginsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .deleteEntityDashboardPlugins(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityDataSourcesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityDataSources(
            requestParameters: EntitiesApiDeleteEntityDataSourcesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .deleteEntityDataSources(requestParameters.id, requestParameters.filter, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityFilterContextsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityFilterContexts(
            requestParameters: EntitiesApiDeleteEntityFilterContextsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .deleteEntityFilterContexts(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityMetricsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityMetrics(
            requestParameters: EntitiesApiDeleteEntityMetricsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .deleteEntityMetrics(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityOrganizationSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityOrganizationSettings(
            requestParameters: EntitiesApiDeleteEntityOrganizationSettingsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .deleteEntityOrganizationSettings(requestParameters.id, requestParameters.filter, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityThemesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityThemes(
            requestParameters: EntitiesApiDeleteEntityThemesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .deleteEntityThemes(requestParameters.id, requestParameters.filter, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityUserGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityUserGroups(
            requestParameters: EntitiesApiDeleteEntityUserGroupsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .deleteEntityUserGroups(requestParameters.id, requestParameters.filter, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityUserSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityUserSettings(
            requestParameters: EntitiesApiDeleteEntityUserSettingsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .deleteEntityUserSettings(
                    requestParameters.userId,
                    requestParameters.id,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityUsers(
            requestParameters: EntitiesApiDeleteEntityUsersRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .deleteEntityUsers(requestParameters.id, requestParameters.filter, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityVisualizationObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityVisualizationObjects(
            requestParameters: EntitiesApiDeleteEntityVisualizationObjectsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .deleteEntityVisualizationObjects(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityWorkspaceDataFilters(
            requestParameters: EntitiesApiDeleteEntityWorkspaceDataFiltersRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .deleteEntityWorkspaceDataFilters(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityWorkspaceSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityWorkspaceSettings(
            requestParameters: EntitiesApiDeleteEntityWorkspaceSettingsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .deleteEntityWorkspaceSettings(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityWorkspacesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityWorkspaces(
            requestParameters: EntitiesApiDeleteEntityWorkspacesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .deleteEntityWorkspaces(requestParameters.id, requestParameters.filter, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesAnalyticalDashboardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesAnalyticalDashboards(
            requestParameters: EntitiesApiGetAllEntitiesAnalyticalDashboardsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiAnalyticalDashboardOutList> {
            return localVarFp
                .getAllEntitiesAnalyticalDashboards(
                    requestParameters.workspaceId,
                    requestParameters.origin,
                    requestParameters.filter,
                    requestParameters.include,
                    requestParameters.page,
                    requestParameters.size,
                    requestParameters.sort,
                    requestParameters.xGDCVALIDATERELATIONS,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List all api tokens for a user
         * @param {EntitiesApiGetAllEntitiesApiTokensRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesApiTokens(
            requestParameters: EntitiesApiGetAllEntitiesApiTokensRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiApiTokenOutList> {
            return localVarFp
                .getAllEntitiesApiTokens(
                    requestParameters.userId,
                    requestParameters.filter,
                    requestParameters.page,
                    requestParameters.size,
                    requestParameters.sort,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesAttributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesAttributes(
            requestParameters: EntitiesApiGetAllEntitiesAttributesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiAttributeOutList> {
            return localVarFp
                .getAllEntitiesAttributes(
                    requestParameters.workspaceId,
                    requestParameters.origin,
                    requestParameters.filter,
                    requestParameters.include,
                    requestParameters.page,
                    requestParameters.size,
                    requestParameters.sort,
                    requestParameters.xGDCVALIDATERELATIONS,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesColorPalettesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesColorPalettes(
            requestParameters: EntitiesApiGetAllEntitiesColorPalettesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiColorPaletteOutList> {
            return localVarFp
                .getAllEntitiesColorPalettes(
                    requestParameters.filter,
                    requestParameters.page,
                    requestParameters.size,
                    requestParameters.sort,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesCspDirectivesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesCspDirectives(
            requestParameters: EntitiesApiGetAllEntitiesCspDirectivesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiCspDirectiveOutList> {
            return localVarFp
                .getAllEntitiesCspDirectives(
                    requestParameters.filter,
                    requestParameters.page,
                    requestParameters.size,
                    requestParameters.sort,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesCustomApplicationSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesCustomApplicationSettings(
            requestParameters: EntitiesApiGetAllEntitiesCustomApplicationSettingsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiCustomApplicationSettingOutList> {
            return localVarFp
                .getAllEntitiesCustomApplicationSettings(
                    requestParameters.workspaceId,
                    requestParameters.origin,
                    requestParameters.filter,
                    requestParameters.page,
                    requestParameters.size,
                    requestParameters.sort,
                    requestParameters.xGDCVALIDATERELATIONS,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesDashboardPluginsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDashboardPlugins(
            requestParameters: EntitiesApiGetAllEntitiesDashboardPluginsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiDashboardPluginOutList> {
            return localVarFp
                .getAllEntitiesDashboardPlugins(
                    requestParameters.workspaceId,
                    requestParameters.origin,
                    requestParameters.filter,
                    requestParameters.page,
                    requestParameters.size,
                    requestParameters.sort,
                    requestParameters.xGDCVALIDATERELATIONS,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesDataSourceIdentifiersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDataSourceIdentifiers(
            requestParameters: EntitiesApiGetAllEntitiesDataSourceIdentifiersRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiDataSourceIdentifierOutList> {
            return localVarFp
                .getAllEntitiesDataSourceIdentifiers(
                    requestParameters.filter,
                    requestParameters.page,
                    requestParameters.size,
                    requestParameters.sort,
                    requestParameters.metaInclude,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesDataSourceTablesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDataSourceTables(
            requestParameters: EntitiesApiGetAllEntitiesDataSourceTablesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiDataSourceTableOutList> {
            return localVarFp
                .getAllEntitiesDataSourceTables(
                    requestParameters.dataSourceId,
                    requestParameters.filter,
                    requestParameters.page,
                    requestParameters.size,
                    requestParameters.sort,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesDataSourcesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDataSources(
            requestParameters: EntitiesApiGetAllEntitiesDataSourcesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiDataSourceOutList> {
            return localVarFp
                .getAllEntitiesDataSources(
                    requestParameters.filter,
                    requestParameters.page,
                    requestParameters.size,
                    requestParameters.sort,
                    requestParameters.metaInclude,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesDatasetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDatasets(
            requestParameters: EntitiesApiGetAllEntitiesDatasetsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiDatasetOutList> {
            return localVarFp
                .getAllEntitiesDatasets(
                    requestParameters.workspaceId,
                    requestParameters.origin,
                    requestParameters.filter,
                    requestParameters.include,
                    requestParameters.page,
                    requestParameters.size,
                    requestParameters.sort,
                    requestParameters.xGDCVALIDATERELATIONS,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesEntitlementsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesEntitlements(
            requestParameters: EntitiesApiGetAllEntitiesEntitlementsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiEntitlementOutList> {
            return localVarFp
                .getAllEntitiesEntitlements(
                    requestParameters.filter,
                    requestParameters.page,
                    requestParameters.size,
                    requestParameters.sort,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesFactsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesFacts(
            requestParameters: EntitiesApiGetAllEntitiesFactsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiFactOutList> {
            return localVarFp
                .getAllEntitiesFacts(
                    requestParameters.workspaceId,
                    requestParameters.origin,
                    requestParameters.filter,
                    requestParameters.include,
                    requestParameters.page,
                    requestParameters.size,
                    requestParameters.sort,
                    requestParameters.xGDCVALIDATERELATIONS,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesFilterContextsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesFilterContexts(
            requestParameters: EntitiesApiGetAllEntitiesFilterContextsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiFilterContextOutList> {
            return localVarFp
                .getAllEntitiesFilterContexts(
                    requestParameters.workspaceId,
                    requestParameters.origin,
                    requestParameters.filter,
                    requestParameters.include,
                    requestParameters.page,
                    requestParameters.size,
                    requestParameters.sort,
                    requestParameters.xGDCVALIDATERELATIONS,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesLabelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesLabels(
            requestParameters: EntitiesApiGetAllEntitiesLabelsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiLabelOutList> {
            return localVarFp
                .getAllEntitiesLabels(
                    requestParameters.workspaceId,
                    requestParameters.origin,
                    requestParameters.filter,
                    requestParameters.include,
                    requestParameters.page,
                    requestParameters.size,
                    requestParameters.sort,
                    requestParameters.xGDCVALIDATERELATIONS,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesMetricsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesMetrics(
            requestParameters: EntitiesApiGetAllEntitiesMetricsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiMetricOutList> {
            return localVarFp
                .getAllEntitiesMetrics(
                    requestParameters.workspaceId,
                    requestParameters.origin,
                    requestParameters.filter,
                    requestParameters.include,
                    requestParameters.page,
                    requestParameters.size,
                    requestParameters.sort,
                    requestParameters.xGDCVALIDATERELATIONS,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesOrganizationSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesOrganizationSettings(
            requestParameters: EntitiesApiGetAllEntitiesOrganizationSettingsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiOrganizationSettingOutList> {
            return localVarFp
                .getAllEntitiesOrganizationSettings(
                    requestParameters.filter,
                    requestParameters.page,
                    requestParameters.size,
                    requestParameters.sort,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesThemesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesThemes(
            requestParameters: EntitiesApiGetAllEntitiesThemesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiThemeOutList> {
            return localVarFp
                .getAllEntitiesThemes(
                    requestParameters.filter,
                    requestParameters.page,
                    requestParameters.size,
                    requestParameters.sort,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesUserGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesUserGroups(
            requestParameters: EntitiesApiGetAllEntitiesUserGroupsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiUserGroupOutList> {
            return localVarFp
                .getAllEntitiesUserGroups(
                    requestParameters.filter,
                    requestParameters.include,
                    requestParameters.page,
                    requestParameters.size,
                    requestParameters.sort,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List all settings for a user
         * @param {EntitiesApiGetAllEntitiesUserSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesUserSettings(
            requestParameters: EntitiesApiGetAllEntitiesUserSettingsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiUserSettingOutList> {
            return localVarFp
                .getAllEntitiesUserSettings(
                    requestParameters.userId,
                    requestParameters.filter,
                    requestParameters.page,
                    requestParameters.size,
                    requestParameters.sort,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesUsers(
            requestParameters: EntitiesApiGetAllEntitiesUsersRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiUserOutList> {
            return localVarFp
                .getAllEntitiesUsers(
                    requestParameters.filter,
                    requestParameters.include,
                    requestParameters.page,
                    requestParameters.size,
                    requestParameters.sort,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesVisualizationObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesVisualizationObjects(
            requestParameters: EntitiesApiGetAllEntitiesVisualizationObjectsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiVisualizationObjectOutList> {
            return localVarFp
                .getAllEntitiesVisualizationObjects(
                    requestParameters.workspaceId,
                    requestParameters.origin,
                    requestParameters.filter,
                    requestParameters.include,
                    requestParameters.page,
                    requestParameters.size,
                    requestParameters.sort,
                    requestParameters.xGDCVALIDATERELATIONS,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaceDataFilterSettings(
            requestParameters: EntitiesApiGetAllEntitiesWorkspaceDataFilterSettingsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutList> {
            return localVarFp
                .getAllEntitiesWorkspaceDataFilterSettings(
                    requestParameters.workspaceId,
                    requestParameters.origin,
                    requestParameters.filter,
                    requestParameters.include,
                    requestParameters.page,
                    requestParameters.size,
                    requestParameters.sort,
                    requestParameters.xGDCVALIDATERELATIONS,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesWorkspaceDataFiltersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaceDataFilters(
            requestParameters: EntitiesApiGetAllEntitiesWorkspaceDataFiltersRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiWorkspaceDataFilterOutList> {
            return localVarFp
                .getAllEntitiesWorkspaceDataFilters(
                    requestParameters.workspaceId,
                    requestParameters.origin,
                    requestParameters.filter,
                    requestParameters.include,
                    requestParameters.page,
                    requestParameters.size,
                    requestParameters.sort,
                    requestParameters.xGDCVALIDATERELATIONS,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesWorkspaceSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaceSettings(
            requestParameters: EntitiesApiGetAllEntitiesWorkspaceSettingsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiWorkspaceSettingOutList> {
            return localVarFp
                .getAllEntitiesWorkspaceSettings(
                    requestParameters.workspaceId,
                    requestParameters.origin,
                    requestParameters.filter,
                    requestParameters.page,
                    requestParameters.size,
                    requestParameters.sort,
                    requestParameters.xGDCVALIDATERELATIONS,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesWorkspacesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaces(
            requestParameters: EntitiesApiGetAllEntitiesWorkspacesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiWorkspaceOutList> {
            return localVarFp
                .getAllEntitiesWorkspaces(
                    requestParameters.filter,
                    requestParameters.include,
                    requestParameters.page,
                    requestParameters.size,
                    requestParameters.sort,
                    requestParameters.metaInclude,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         * Retrieves links for all options for different configurations.
         * @summary Links for all configuration options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOptions(options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getAllOptions(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all supported data sources along with information about the used drivers.
         * @summary Get all available data source drivers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSourceDrivers(options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getDataSourceDrivers(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAnalyticalDashboards(
            requestParameters: EntitiesApiGetEntityAnalyticalDashboardsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiAnalyticalDashboardOutDocument> {
            return localVarFp
                .getEntityAnalyticalDashboards(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.filter,
                    requestParameters.include,
                    requestParameters.xGDCVALIDATERELATIONS,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetEntityApiTokensRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityApiTokens(
            requestParameters: EntitiesApiGetEntityApiTokensRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiApiTokenOutDocument> {
            return localVarFp
                .getEntityApiTokens(
                    requestParameters.userId,
                    requestParameters.id,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetEntityAttributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAttributes(
            requestParameters: EntitiesApiGetEntityAttributesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiAttributeOutDocument> {
            return localVarFp
                .getEntityAttributes(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.filter,
                    requestParameters.include,
                    requestParameters.xGDCVALIDATERELATIONS,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetEntityColorPalettesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityColorPalettes(
            requestParameters: EntitiesApiGetEntityColorPalettesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiColorPaletteOutDocument> {
            return localVarFp
                .getEntityColorPalettes(requestParameters.id, requestParameters.filter, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityCookieSecurityConfigurations(
            requestParameters: EntitiesApiGetEntityCookieSecurityConfigurationsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument> {
            return localVarFp
                .getEntityCookieSecurityConfigurations(
                    requestParameters.id,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetEntityCspDirectivesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityCspDirectives(
            requestParameters: EntitiesApiGetEntityCspDirectivesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiCspDirectiveOutDocument> {
            return localVarFp
                .getEntityCspDirectives(requestParameters.id, requestParameters.filter, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityCustomApplicationSettings(
            requestParameters: EntitiesApiGetEntityCustomApplicationSettingsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiCustomApplicationSettingOutDocument> {
            return localVarFp
                .getEntityCustomApplicationSettings(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.filter,
                    requestParameters.xGDCVALIDATERELATIONS,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetEntityDashboardPluginsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDashboardPlugins(
            requestParameters: EntitiesApiGetEntityDashboardPluginsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiDashboardPluginOutDocument> {
            return localVarFp
                .getEntityDashboardPlugins(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.filter,
                    requestParameters.xGDCVALIDATERELATIONS,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetEntityDataSourceIdentifiersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDataSourceIdentifiers(
            requestParameters: EntitiesApiGetEntityDataSourceIdentifiersRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiDataSourceIdentifierOutDocument> {
            return localVarFp
                .getEntityDataSourceIdentifiers(
                    requestParameters.id,
                    requestParameters.filter,
                    requestParameters.metaInclude,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetEntityDataSourceTablesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDataSourceTables(
            requestParameters: EntitiesApiGetEntityDataSourceTablesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiDataSourceTableOutDocument> {
            return localVarFp
                .getEntityDataSourceTables(
                    requestParameters.dataSourceId,
                    requestParameters.id,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetEntityDataSourcesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDataSources(
            requestParameters: EntitiesApiGetEntityDataSourcesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiDataSourceOutDocument> {
            return localVarFp
                .getEntityDataSources(
                    requestParameters.id,
                    requestParameters.filter,
                    requestParameters.metaInclude,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetEntityDatasetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDatasets(
            requestParameters: EntitiesApiGetEntityDatasetsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiDatasetOutDocument> {
            return localVarFp
                .getEntityDatasets(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.filter,
                    requestParameters.include,
                    requestParameters.xGDCVALIDATERELATIONS,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetEntityEntitlementsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityEntitlements(
            requestParameters: EntitiesApiGetEntityEntitlementsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiEntitlementOutDocument> {
            return localVarFp
                .getEntityEntitlements(requestParameters.id, requestParameters.filter, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetEntityFactsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFacts(
            requestParameters: EntitiesApiGetEntityFactsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiFactOutDocument> {
            return localVarFp
                .getEntityFacts(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.filter,
                    requestParameters.include,
                    requestParameters.xGDCVALIDATERELATIONS,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetEntityFilterContextsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFilterContexts(
            requestParameters: EntitiesApiGetEntityFilterContextsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiFilterContextOutDocument> {
            return localVarFp
                .getEntityFilterContexts(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.filter,
                    requestParameters.include,
                    requestParameters.xGDCVALIDATERELATIONS,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetEntityLabelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityLabels(
            requestParameters: EntitiesApiGetEntityLabelsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiLabelOutDocument> {
            return localVarFp
                .getEntityLabels(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.filter,
                    requestParameters.include,
                    requestParameters.xGDCVALIDATERELATIONS,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetEntityMetricsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityMetrics(
            requestParameters: EntitiesApiGetEntityMetricsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiMetricOutDocument> {
            return localVarFp
                .getEntityMetrics(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.filter,
                    requestParameters.include,
                    requestParameters.xGDCVALIDATERELATIONS,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetEntityOrganizationSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityOrganizationSettings(
            requestParameters: EntitiesApiGetEntityOrganizationSettingsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiOrganizationSettingOutDocument> {
            return localVarFp
                .getEntityOrganizationSettings(requestParameters.id, requestParameters.filter, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetEntityOrganizationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityOrganizations(
            requestParameters: EntitiesApiGetEntityOrganizationsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiOrganizationOutDocument> {
            return localVarFp
                .getEntityOrganizations(
                    requestParameters.id,
                    requestParameters.filter,
                    requestParameters.include,
                    requestParameters.metaInclude,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetEntityThemesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityThemes(
            requestParameters: EntitiesApiGetEntityThemesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiThemeOutDocument> {
            return localVarFp
                .getEntityThemes(requestParameters.id, requestParameters.filter, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetEntityUserGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityUserGroups(
            requestParameters: EntitiesApiGetEntityUserGroupsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiUserGroupOutDocument> {
            return localVarFp
                .getEntityUserGroups(
                    requestParameters.id,
                    requestParameters.filter,
                    requestParameters.include,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetEntityUserSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityUserSettings(
            requestParameters: EntitiesApiGetEntityUserSettingsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiUserSettingOutDocument> {
            return localVarFp
                .getEntityUserSettings(
                    requestParameters.userId,
                    requestParameters.id,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetEntityUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityUsers(
            requestParameters: EntitiesApiGetEntityUsersRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiUserOutDocument> {
            return localVarFp
                .getEntityUsers(
                    requestParameters.id,
                    requestParameters.filter,
                    requestParameters.include,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetEntityVisualizationObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityVisualizationObjects(
            requestParameters: EntitiesApiGetEntityVisualizationObjectsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiVisualizationObjectOutDocument> {
            return localVarFp
                .getEntityVisualizationObjects(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.filter,
                    requestParameters.include,
                    requestParameters.xGDCVALIDATERELATIONS,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaceDataFilterSettings(
            requestParameters: EntitiesApiGetEntityWorkspaceDataFilterSettingsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument> {
            return localVarFp
                .getEntityWorkspaceDataFilterSettings(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.filter,
                    requestParameters.include,
                    requestParameters.xGDCVALIDATERELATIONS,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaceDataFilters(
            requestParameters: EntitiesApiGetEntityWorkspaceDataFiltersRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument> {
            return localVarFp
                .getEntityWorkspaceDataFilters(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.filter,
                    requestParameters.include,
                    requestParameters.xGDCVALIDATERELATIONS,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetEntityWorkspaceSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaceSettings(
            requestParameters: EntitiesApiGetEntityWorkspaceSettingsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiWorkspaceSettingOutDocument> {
            return localVarFp
                .getEntityWorkspaceSettings(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.filter,
                    requestParameters.xGDCVALIDATERELATIONS,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiGetEntityWorkspacesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaces(
            requestParameters: EntitiesApiGetEntityWorkspacesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiWorkspaceOutDocument> {
            return localVarFp
                .getEntityWorkspaces(
                    requestParameters.id,
                    requestParameters.filter,
                    requestParameters.include,
                    requestParameters.metaInclude,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         * Gets a basic information about organization.
         * @summary Get current organization info
         * @param {EntitiesApiGetOrganizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization(
            requestParameters: EntitiesApiGetOrganizationRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .getOrganization(requestParameters.metaInclude, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiPatchEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityAnalyticalDashboards(
            requestParameters: EntitiesApiPatchEntityAnalyticalDashboardsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiAnalyticalDashboardOutDocument> {
            return localVarFp
                .patchEntityAnalyticalDashboards(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.jsonApiAnalyticalDashboardPatchDocument,
                    requestParameters.filter,
                    requestParameters.include,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiPatchEntityColorPalettesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityColorPalettes(
            requestParameters: EntitiesApiPatchEntityColorPalettesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiColorPaletteOutDocument> {
            return localVarFp
                .patchEntityColorPalettes(
                    requestParameters.id,
                    requestParameters.jsonApiColorPalettePatchDocument,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiPatchEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityCookieSecurityConfigurations(
            requestParameters: EntitiesApiPatchEntityCookieSecurityConfigurationsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument> {
            return localVarFp
                .patchEntityCookieSecurityConfigurations(
                    requestParameters.id,
                    requestParameters.jsonApiCookieSecurityConfigurationPatchDocument,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiPatchEntityCspDirectivesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityCspDirectives(
            requestParameters: EntitiesApiPatchEntityCspDirectivesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiCspDirectiveOutDocument> {
            return localVarFp
                .patchEntityCspDirectives(
                    requestParameters.id,
                    requestParameters.jsonApiCspDirectivePatchDocument,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiPatchEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityCustomApplicationSettings(
            requestParameters: EntitiesApiPatchEntityCustomApplicationSettingsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiCustomApplicationSettingOutDocument> {
            return localVarFp
                .patchEntityCustomApplicationSettings(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.jsonApiCustomApplicationSettingPatchDocument,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiPatchEntityDashboardPluginsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityDashboardPlugins(
            requestParameters: EntitiesApiPatchEntityDashboardPluginsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiDashboardPluginOutDocument> {
            return localVarFp
                .patchEntityDashboardPlugins(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.jsonApiDashboardPluginPatchDocument,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiPatchEntityDataSourcesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityDataSources(
            requestParameters: EntitiesApiPatchEntityDataSourcesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiDataSourceOutDocument> {
            return localVarFp
                .patchEntityDataSources(
                    requestParameters.id,
                    requestParameters.jsonApiDataSourcePatchDocument,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiPatchEntityFilterContextsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityFilterContexts(
            requestParameters: EntitiesApiPatchEntityFilterContextsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiFilterContextOutDocument> {
            return localVarFp
                .patchEntityFilterContexts(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.jsonApiFilterContextPatchDocument,
                    requestParameters.filter,
                    requestParameters.include,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiPatchEntityMetricsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityMetrics(
            requestParameters: EntitiesApiPatchEntityMetricsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiMetricOutDocument> {
            return localVarFp
                .patchEntityMetrics(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.jsonApiMetricPatchDocument,
                    requestParameters.filter,
                    requestParameters.include,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiPatchEntityOrganizationSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityOrganizationSettings(
            requestParameters: EntitiesApiPatchEntityOrganizationSettingsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiOrganizationSettingOutDocument> {
            return localVarFp
                .patchEntityOrganizationSettings(
                    requestParameters.id,
                    requestParameters.jsonApiOrganizationSettingPatchDocument,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiPatchEntityOrganizationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityOrganizations(
            requestParameters: EntitiesApiPatchEntityOrganizationsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiOrganizationOutDocument> {
            return localVarFp
                .patchEntityOrganizations(
                    requestParameters.id,
                    requestParameters.jsonApiOrganizationPatchDocument,
                    requestParameters.filter,
                    requestParameters.include,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiPatchEntityThemesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityThemes(
            requestParameters: EntitiesApiPatchEntityThemesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiThemeOutDocument> {
            return localVarFp
                .patchEntityThemes(
                    requestParameters.id,
                    requestParameters.jsonApiThemePatchDocument,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiPatchEntityUserGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityUserGroups(
            requestParameters: EntitiesApiPatchEntityUserGroupsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiUserGroupOutDocument> {
            return localVarFp
                .patchEntityUserGroups(
                    requestParameters.id,
                    requestParameters.jsonApiUserGroupPatchDocument,
                    requestParameters.filter,
                    requestParameters.include,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiPatchEntityUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityUsers(
            requestParameters: EntitiesApiPatchEntityUsersRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiUserOutDocument> {
            return localVarFp
                .patchEntityUsers(
                    requestParameters.id,
                    requestParameters.jsonApiUserPatchDocument,
                    requestParameters.filter,
                    requestParameters.include,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiPatchEntityVisualizationObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityVisualizationObjects(
            requestParameters: EntitiesApiPatchEntityVisualizationObjectsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiVisualizationObjectOutDocument> {
            return localVarFp
                .patchEntityVisualizationObjects(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.jsonApiVisualizationObjectPatchDocument,
                    requestParameters.filter,
                    requestParameters.include,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiPatchEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityWorkspaceDataFilters(
            requestParameters: EntitiesApiPatchEntityWorkspaceDataFiltersRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument> {
            return localVarFp
                .patchEntityWorkspaceDataFilters(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.jsonApiWorkspaceDataFilterPatchDocument,
                    requestParameters.filter,
                    requestParameters.include,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiPatchEntityWorkspaceSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityWorkspaceSettings(
            requestParameters: EntitiesApiPatchEntityWorkspaceSettingsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiWorkspaceSettingOutDocument> {
            return localVarFp
                .patchEntityWorkspaceSettings(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.jsonApiWorkspaceSettingPatchDocument,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiPatchEntityWorkspacesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityWorkspaces(
            requestParameters: EntitiesApiPatchEntityWorkspacesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiWorkspaceOutDocument> {
            return localVarFp
                .patchEntityWorkspaces(
                    requestParameters.id,
                    requestParameters.jsonApiWorkspacePatchDocument,
                    requestParameters.filter,
                    requestParameters.include,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityAnalyticalDashboards(
            requestParameters: EntitiesApiUpdateEntityAnalyticalDashboardsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiAnalyticalDashboardOutDocument> {
            return localVarFp
                .updateEntityAnalyticalDashboards(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.jsonApiAnalyticalDashboardInDocument,
                    requestParameters.filter,
                    requestParameters.include,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityApiTokensRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityApiTokens(
            requestParameters: EntitiesApiUpdateEntityApiTokensRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiApiTokenOutDocument> {
            return localVarFp
                .updateEntityApiTokens(
                    requestParameters.userId,
                    requestParameters.id,
                    requestParameters.jsonApiApiTokenInDocument,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityColorPalettesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityColorPalettes(
            requestParameters: EntitiesApiUpdateEntityColorPalettesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiColorPaletteOutDocument> {
            return localVarFp
                .updateEntityColorPalettes(
                    requestParameters.id,
                    requestParameters.jsonApiColorPaletteInDocument,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityCookieSecurityConfigurations(
            requestParameters: EntitiesApiUpdateEntityCookieSecurityConfigurationsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument> {
            return localVarFp
                .updateEntityCookieSecurityConfigurations(
                    requestParameters.id,
                    requestParameters.jsonApiCookieSecurityConfigurationInDocument,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityCspDirectivesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityCspDirectives(
            requestParameters: EntitiesApiUpdateEntityCspDirectivesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiCspDirectiveOutDocument> {
            return localVarFp
                .updateEntityCspDirectives(
                    requestParameters.id,
                    requestParameters.jsonApiCspDirectiveInDocument,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityCustomApplicationSettings(
            requestParameters: EntitiesApiUpdateEntityCustomApplicationSettingsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiCustomApplicationSettingOutDocument> {
            return localVarFp
                .updateEntityCustomApplicationSettings(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.jsonApiCustomApplicationSettingInDocument,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityDashboardPluginsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityDashboardPlugins(
            requestParameters: EntitiesApiUpdateEntityDashboardPluginsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiDashboardPluginOutDocument> {
            return localVarFp
                .updateEntityDashboardPlugins(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.jsonApiDashboardPluginInDocument,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityDataSourcesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityDataSources(
            requestParameters: EntitiesApiUpdateEntityDataSourcesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiDataSourceOutDocument> {
            return localVarFp
                .updateEntityDataSources(
                    requestParameters.id,
                    requestParameters.jsonApiDataSourceInDocument,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityFilterContextsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityFilterContexts(
            requestParameters: EntitiesApiUpdateEntityFilterContextsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiFilterContextOutDocument> {
            return localVarFp
                .updateEntityFilterContexts(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.jsonApiFilterContextInDocument,
                    requestParameters.filter,
                    requestParameters.include,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityMetricsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityMetrics(
            requestParameters: EntitiesApiUpdateEntityMetricsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiMetricOutDocument> {
            return localVarFp
                .updateEntityMetrics(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.jsonApiMetricInDocument,
                    requestParameters.filter,
                    requestParameters.include,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityOrganizationSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityOrganizationSettings(
            requestParameters: EntitiesApiUpdateEntityOrganizationSettingsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiOrganizationSettingOutDocument> {
            return localVarFp
                .updateEntityOrganizationSettings(
                    requestParameters.id,
                    requestParameters.jsonApiOrganizationSettingInDocument,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityOrganizationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityOrganizations(
            requestParameters: EntitiesApiUpdateEntityOrganizationsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiOrganizationOutDocument> {
            return localVarFp
                .updateEntityOrganizations(
                    requestParameters.id,
                    requestParameters.jsonApiOrganizationInDocument,
                    requestParameters.filter,
                    requestParameters.include,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityThemesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityThemes(
            requestParameters: EntitiesApiUpdateEntityThemesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiThemeOutDocument> {
            return localVarFp
                .updateEntityThemes(
                    requestParameters.id,
                    requestParameters.jsonApiThemeInDocument,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityUserGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityUserGroups(
            requestParameters: EntitiesApiUpdateEntityUserGroupsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiUserGroupOutDocument> {
            return localVarFp
                .updateEntityUserGroups(
                    requestParameters.id,
                    requestParameters.jsonApiUserGroupInDocument,
                    requestParameters.filter,
                    requestParameters.include,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityUserSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityUserSettings(
            requestParameters: EntitiesApiUpdateEntityUserSettingsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiUserSettingOutDocument> {
            return localVarFp
                .updateEntityUserSettings(
                    requestParameters.userId,
                    requestParameters.id,
                    requestParameters.jsonApiUserSettingInDocument,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityUsers(
            requestParameters: EntitiesApiUpdateEntityUsersRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiUserOutDocument> {
            return localVarFp
                .updateEntityUsers(
                    requestParameters.id,
                    requestParameters.jsonApiUserInDocument,
                    requestParameters.filter,
                    requestParameters.include,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityVisualizationObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityVisualizationObjects(
            requestParameters: EntitiesApiUpdateEntityVisualizationObjectsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiVisualizationObjectOutDocument> {
            return localVarFp
                .updateEntityVisualizationObjects(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.jsonApiVisualizationObjectInDocument,
                    requestParameters.filter,
                    requestParameters.include,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityWorkspaceDataFilters(
            requestParameters: EntitiesApiUpdateEntityWorkspaceDataFiltersRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument> {
            return localVarFp
                .updateEntityWorkspaceDataFilters(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.jsonApiWorkspaceDataFilterInDocument,
                    requestParameters.filter,
                    requestParameters.include,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityWorkspaceSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityWorkspaceSettings(
            requestParameters: EntitiesApiUpdateEntityWorkspaceSettingsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiWorkspaceSettingOutDocument> {
            return localVarFp
                .updateEntityWorkspaceSettings(
                    requestParameters.workspaceId,
                    requestParameters.objectId,
                    requestParameters.jsonApiWorkspaceSettingInDocument,
                    requestParameters.filter,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityWorkspacesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityWorkspaces(
            requestParameters: EntitiesApiUpdateEntityWorkspacesRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<JsonApiWorkspaceOutDocument> {
            return localVarFp
                .updateEntityWorkspaces(
                    requestParameters.id,
                    requestParameters.jsonApiWorkspaceInDocument,
                    requestParameters.filter,
                    requestParameters.include,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * EntitiesApi - interface
 * @export
 * @interface EntitiesApi
 */
export interface EntitiesApiInterface {
    /**
     *
     * @param {EntitiesApiCreateEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityAnalyticalDashboards(
        requestParameters: EntitiesApiCreateEntityAnalyticalDashboardsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;

    /**
     *
     * @param {EntitiesApiCreateEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityApiTokens(
        requestParameters: EntitiesApiCreateEntityApiTokensRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiApiTokenOutDocument>;

    /**
     *
     * @param {EntitiesApiCreateEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityColorPalettes(
        requestParameters: EntitiesApiCreateEntityColorPalettesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiColorPaletteOutDocument>;

    /**
     *
     * @param {EntitiesApiCreateEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityCspDirectives(
        requestParameters: EntitiesApiCreateEntityCspDirectivesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiCspDirectiveOutDocument>;

    /**
     *
     * @param {EntitiesApiCreateEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityCustomApplicationSettings(
        requestParameters: EntitiesApiCreateEntityCustomApplicationSettingsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiCustomApplicationSettingOutDocument>;

    /**
     *
     * @param {EntitiesApiCreateEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityDashboardPlugins(
        requestParameters: EntitiesApiCreateEntityDashboardPluginsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiDashboardPluginOutDocument>;

    /**
     *
     * @param {EntitiesApiCreateEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityDataSources(
        requestParameters: EntitiesApiCreateEntityDataSourcesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiDataSourceOutDocument>;

    /**
     *
     * @param {EntitiesApiCreateEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityFilterContexts(
        requestParameters: EntitiesApiCreateEntityFilterContextsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiFilterContextOutDocument>;

    /**
     *
     * @param {EntitiesApiCreateEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityMetrics(
        requestParameters: EntitiesApiCreateEntityMetricsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiMetricOutDocument>;

    /**
     *
     * @param {EntitiesApiCreateEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityOrganizationSettings(
        requestParameters: EntitiesApiCreateEntityOrganizationSettingsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiOrganizationSettingOutDocument>;

    /**
     *
     * @param {EntitiesApiCreateEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityThemes(
        requestParameters: EntitiesApiCreateEntityThemesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiThemeOutDocument>;

    /**
     *
     * @param {EntitiesApiCreateEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityUserGroups(
        requestParameters: EntitiesApiCreateEntityUserGroupsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiUserGroupOutDocument>;

    /**
     *
     * @param {EntitiesApiCreateEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityUserSettings(
        requestParameters: EntitiesApiCreateEntityUserSettingsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiUserSettingOutDocument>;

    /**
     *
     * @param {EntitiesApiCreateEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityUsers(
        requestParameters: EntitiesApiCreateEntityUsersRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiUserOutDocument>;

    /**
     *
     * @param {EntitiesApiCreateEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityVisualizationObjects(
        requestParameters: EntitiesApiCreateEntityVisualizationObjectsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiVisualizationObjectOutDocument>;

    /**
     *
     * @param {EntitiesApiCreateEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityWorkspaceDataFilters(
        requestParameters: EntitiesApiCreateEntityWorkspaceDataFiltersRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;

    /**
     *
     * @param {EntitiesApiCreateEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityWorkspaceSettings(
        requestParameters: EntitiesApiCreateEntityWorkspaceSettingsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiWorkspaceSettingOutDocument>;

    /**
     *
     * @param {EntitiesApiCreateEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityWorkspaces(
        requestParameters: EntitiesApiCreateEntityWorkspacesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiWorkspaceOutDocument>;

    /**
     *
     * @param {EntitiesApiDeleteEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityAnalyticalDashboards(
        requestParameters: EntitiesApiDeleteEntityAnalyticalDashboardsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;

    /**
     *
     * @param {EntitiesApiDeleteEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityApiTokens(
        requestParameters: EntitiesApiDeleteEntityApiTokensRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;

    /**
     *
     * @param {EntitiesApiDeleteEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityColorPalettes(
        requestParameters: EntitiesApiDeleteEntityColorPalettesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;

    /**
     *
     * @param {EntitiesApiDeleteEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityCspDirectives(
        requestParameters: EntitiesApiDeleteEntityCspDirectivesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;

    /**
     *
     * @param {EntitiesApiDeleteEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityCustomApplicationSettings(
        requestParameters: EntitiesApiDeleteEntityCustomApplicationSettingsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;

    /**
     *
     * @param {EntitiesApiDeleteEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityDashboardPlugins(
        requestParameters: EntitiesApiDeleteEntityDashboardPluginsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;

    /**
     *
     * @param {EntitiesApiDeleteEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityDataSources(
        requestParameters: EntitiesApiDeleteEntityDataSourcesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;

    /**
     *
     * @param {EntitiesApiDeleteEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityFilterContexts(
        requestParameters: EntitiesApiDeleteEntityFilterContextsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;

    /**
     *
     * @param {EntitiesApiDeleteEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityMetrics(
        requestParameters: EntitiesApiDeleteEntityMetricsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;

    /**
     *
     * @param {EntitiesApiDeleteEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityOrganizationSettings(
        requestParameters: EntitiesApiDeleteEntityOrganizationSettingsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;

    /**
     *
     * @param {EntitiesApiDeleteEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityThemes(
        requestParameters: EntitiesApiDeleteEntityThemesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;

    /**
     *
     * @param {EntitiesApiDeleteEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityUserGroups(
        requestParameters: EntitiesApiDeleteEntityUserGroupsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;

    /**
     *
     * @param {EntitiesApiDeleteEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityUserSettings(
        requestParameters: EntitiesApiDeleteEntityUserSettingsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;

    /**
     *
     * @param {EntitiesApiDeleteEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityUsers(
        requestParameters: EntitiesApiDeleteEntityUsersRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;

    /**
     *
     * @param {EntitiesApiDeleteEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityVisualizationObjects(
        requestParameters: EntitiesApiDeleteEntityVisualizationObjectsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;

    /**
     *
     * @param {EntitiesApiDeleteEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityWorkspaceDataFilters(
        requestParameters: EntitiesApiDeleteEntityWorkspaceDataFiltersRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;

    /**
     *
     * @param {EntitiesApiDeleteEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityWorkspaceSettings(
        requestParameters: EntitiesApiDeleteEntityWorkspaceSettingsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;

    /**
     *
     * @param {EntitiesApiDeleteEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityWorkspaces(
        requestParameters: EntitiesApiDeleteEntityWorkspacesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;

    /**
     *
     * @param {EntitiesApiGetAllEntitiesAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesAnalyticalDashboards(
        requestParameters: EntitiesApiGetAllEntitiesAnalyticalDashboardsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiAnalyticalDashboardOutList>;

    /**
     *
     * @summary List all api tokens for a user
     * @param {EntitiesApiGetAllEntitiesApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesApiTokens(
        requestParameters: EntitiesApiGetAllEntitiesApiTokensRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiApiTokenOutList>;

    /**
     *
     * @param {EntitiesApiGetAllEntitiesAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesAttributes(
        requestParameters: EntitiesApiGetAllEntitiesAttributesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiAttributeOutList>;

    /**
     *
     * @param {EntitiesApiGetAllEntitiesColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesColorPalettes(
        requestParameters: EntitiesApiGetAllEntitiesColorPalettesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiColorPaletteOutList>;

    /**
     *
     * @param {EntitiesApiGetAllEntitiesCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesCspDirectives(
        requestParameters: EntitiesApiGetAllEntitiesCspDirectivesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiCspDirectiveOutList>;

    /**
     *
     * @param {EntitiesApiGetAllEntitiesCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesCustomApplicationSettings(
        requestParameters: EntitiesApiGetAllEntitiesCustomApplicationSettingsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiCustomApplicationSettingOutList>;

    /**
     *
     * @param {EntitiesApiGetAllEntitiesDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesDashboardPlugins(
        requestParameters: EntitiesApiGetAllEntitiesDashboardPluginsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiDashboardPluginOutList>;

    /**
     *
     * @param {EntitiesApiGetAllEntitiesDataSourceIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesDataSourceIdentifiers(
        requestParameters: EntitiesApiGetAllEntitiesDataSourceIdentifiersRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiDataSourceIdentifierOutList>;

    /**
     *
     * @param {EntitiesApiGetAllEntitiesDataSourceTablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesDataSourceTables(
        requestParameters: EntitiesApiGetAllEntitiesDataSourceTablesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiDataSourceTableOutList>;

    /**
     *
     * @param {EntitiesApiGetAllEntitiesDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesDataSources(
        requestParameters: EntitiesApiGetAllEntitiesDataSourcesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiDataSourceOutList>;

    /**
     *
     * @param {EntitiesApiGetAllEntitiesDatasetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesDatasets(
        requestParameters: EntitiesApiGetAllEntitiesDatasetsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiDatasetOutList>;

    /**
     *
     * @param {EntitiesApiGetAllEntitiesEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesEntitlements(
        requestParameters: EntitiesApiGetAllEntitiesEntitlementsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiEntitlementOutList>;

    /**
     *
     * @param {EntitiesApiGetAllEntitiesFactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesFacts(
        requestParameters: EntitiesApiGetAllEntitiesFactsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiFactOutList>;

    /**
     *
     * @param {EntitiesApiGetAllEntitiesFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesFilterContexts(
        requestParameters: EntitiesApiGetAllEntitiesFilterContextsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiFilterContextOutList>;

    /**
     *
     * @param {EntitiesApiGetAllEntitiesLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesLabels(
        requestParameters: EntitiesApiGetAllEntitiesLabelsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiLabelOutList>;

    /**
     *
     * @param {EntitiesApiGetAllEntitiesMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesMetrics(
        requestParameters: EntitiesApiGetAllEntitiesMetricsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiMetricOutList>;

    /**
     *
     * @param {EntitiesApiGetAllEntitiesOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesOrganizationSettings(
        requestParameters: EntitiesApiGetAllEntitiesOrganizationSettingsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiOrganizationSettingOutList>;

    /**
     *
     * @param {EntitiesApiGetAllEntitiesThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesThemes(
        requestParameters: EntitiesApiGetAllEntitiesThemesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiThemeOutList>;

    /**
     *
     * @param {EntitiesApiGetAllEntitiesUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesUserGroups(
        requestParameters: EntitiesApiGetAllEntitiesUserGroupsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiUserGroupOutList>;

    /**
     *
     * @summary List all settings for a user
     * @param {EntitiesApiGetAllEntitiesUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesUserSettings(
        requestParameters: EntitiesApiGetAllEntitiesUserSettingsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiUserSettingOutList>;

    /**
     *
     * @param {EntitiesApiGetAllEntitiesUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesUsers(
        requestParameters: EntitiesApiGetAllEntitiesUsersRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiUserOutList>;

    /**
     *
     * @param {EntitiesApiGetAllEntitiesVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesVisualizationObjects(
        requestParameters: EntitiesApiGetAllEntitiesVisualizationObjectsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiVisualizationObjectOutList>;

    /**
     *
     * @param {EntitiesApiGetAllEntitiesWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesWorkspaceDataFilterSettings(
        requestParameters: EntitiesApiGetAllEntitiesWorkspaceDataFilterSettingsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutList>;

    /**
     *
     * @param {EntitiesApiGetAllEntitiesWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesWorkspaceDataFilters(
        requestParameters: EntitiesApiGetAllEntitiesWorkspaceDataFiltersRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiWorkspaceDataFilterOutList>;

    /**
     *
     * @param {EntitiesApiGetAllEntitiesWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesWorkspaceSettings(
        requestParameters: EntitiesApiGetAllEntitiesWorkspaceSettingsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiWorkspaceSettingOutList>;

    /**
     *
     * @param {EntitiesApiGetAllEntitiesWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesWorkspaces(
        requestParameters: EntitiesApiGetAllEntitiesWorkspacesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiWorkspaceOutList>;

    /**
     * Retrieves links for all options for different configurations.
     * @summary Links for all configuration options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllOptions(options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * Retrieves a list of all supported data sources along with information about the used drivers.
     * @summary Get all available data source drivers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getDataSourceDrivers(options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     *
     * @param {EntitiesApiGetEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityAnalyticalDashboards(
        requestParameters: EntitiesApiGetEntityAnalyticalDashboardsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;

    /**
     *
     * @param {EntitiesApiGetEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityApiTokens(
        requestParameters: EntitiesApiGetEntityApiTokensRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiApiTokenOutDocument>;

    /**
     *
     * @param {EntitiesApiGetEntityAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityAttributes(
        requestParameters: EntitiesApiGetEntityAttributesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiAttributeOutDocument>;

    /**
     *
     * @param {EntitiesApiGetEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityColorPalettes(
        requestParameters: EntitiesApiGetEntityColorPalettesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiColorPaletteOutDocument>;

    /**
     *
     * @param {EntitiesApiGetEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityCookieSecurityConfigurations(
        requestParameters: EntitiesApiGetEntityCookieSecurityConfigurationsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;

    /**
     *
     * @param {EntitiesApiGetEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityCspDirectives(
        requestParameters: EntitiesApiGetEntityCspDirectivesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiCspDirectiveOutDocument>;

    /**
     *
     * @param {EntitiesApiGetEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityCustomApplicationSettings(
        requestParameters: EntitiesApiGetEntityCustomApplicationSettingsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiCustomApplicationSettingOutDocument>;

    /**
     *
     * @param {EntitiesApiGetEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityDashboardPlugins(
        requestParameters: EntitiesApiGetEntityDashboardPluginsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiDashboardPluginOutDocument>;

    /**
     *
     * @param {EntitiesApiGetEntityDataSourceIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityDataSourceIdentifiers(
        requestParameters: EntitiesApiGetEntityDataSourceIdentifiersRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiDataSourceIdentifierOutDocument>;

    /**
     *
     * @param {EntitiesApiGetEntityDataSourceTablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityDataSourceTables(
        requestParameters: EntitiesApiGetEntityDataSourceTablesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiDataSourceTableOutDocument>;

    /**
     *
     * @param {EntitiesApiGetEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityDataSources(
        requestParameters: EntitiesApiGetEntityDataSourcesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiDataSourceOutDocument>;

    /**
     *
     * @param {EntitiesApiGetEntityDatasetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityDatasets(
        requestParameters: EntitiesApiGetEntityDatasetsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiDatasetOutDocument>;

    /**
     *
     * @param {EntitiesApiGetEntityEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityEntitlements(
        requestParameters: EntitiesApiGetEntityEntitlementsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiEntitlementOutDocument>;

    /**
     *
     * @param {EntitiesApiGetEntityFactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityFacts(
        requestParameters: EntitiesApiGetEntityFactsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiFactOutDocument>;

    /**
     *
     * @param {EntitiesApiGetEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityFilterContexts(
        requestParameters: EntitiesApiGetEntityFilterContextsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiFilterContextOutDocument>;

    /**
     *
     * @param {EntitiesApiGetEntityLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityLabels(
        requestParameters: EntitiesApiGetEntityLabelsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiLabelOutDocument>;

    /**
     *
     * @param {EntitiesApiGetEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityMetrics(
        requestParameters: EntitiesApiGetEntityMetricsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiMetricOutDocument>;

    /**
     *
     * @param {EntitiesApiGetEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityOrganizationSettings(
        requestParameters: EntitiesApiGetEntityOrganizationSettingsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiOrganizationSettingOutDocument>;

    /**
     *
     * @param {EntitiesApiGetEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityOrganizations(
        requestParameters: EntitiesApiGetEntityOrganizationsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiOrganizationOutDocument>;

    /**
     *
     * @param {EntitiesApiGetEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityThemes(
        requestParameters: EntitiesApiGetEntityThemesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiThemeOutDocument>;

    /**
     *
     * @param {EntitiesApiGetEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityUserGroups(
        requestParameters: EntitiesApiGetEntityUserGroupsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiUserGroupOutDocument>;

    /**
     *
     * @param {EntitiesApiGetEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityUserSettings(
        requestParameters: EntitiesApiGetEntityUserSettingsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiUserSettingOutDocument>;

    /**
     *
     * @param {EntitiesApiGetEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityUsers(
        requestParameters: EntitiesApiGetEntityUsersRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiUserOutDocument>;

    /**
     *
     * @param {EntitiesApiGetEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityVisualizationObjects(
        requestParameters: EntitiesApiGetEntityVisualizationObjectsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiVisualizationObjectOutDocument>;

    /**
     *
     * @param {EntitiesApiGetEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityWorkspaceDataFilterSettings(
        requestParameters: EntitiesApiGetEntityWorkspaceDataFilterSettingsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;

    /**
     *
     * @param {EntitiesApiGetEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityWorkspaceDataFilters(
        requestParameters: EntitiesApiGetEntityWorkspaceDataFiltersRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;

    /**
     *
     * @param {EntitiesApiGetEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityWorkspaceSettings(
        requestParameters: EntitiesApiGetEntityWorkspaceSettingsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiWorkspaceSettingOutDocument>;

    /**
     *
     * @param {EntitiesApiGetEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityWorkspaces(
        requestParameters: EntitiesApiGetEntityWorkspacesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiWorkspaceOutDocument>;

    /**
     * Gets a basic information about organization.
     * @summary Get current organization info
     * @param {EntitiesApiGetOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getOrganization(
        requestParameters: EntitiesApiGetOrganizationRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;

    /**
     *
     * @param {EntitiesApiPatchEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityAnalyticalDashboards(
        requestParameters: EntitiesApiPatchEntityAnalyticalDashboardsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;

    /**
     *
     * @param {EntitiesApiPatchEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityColorPalettes(
        requestParameters: EntitiesApiPatchEntityColorPalettesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiColorPaletteOutDocument>;

    /**
     *
     * @param {EntitiesApiPatchEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityCookieSecurityConfigurations(
        requestParameters: EntitiesApiPatchEntityCookieSecurityConfigurationsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;

    /**
     *
     * @param {EntitiesApiPatchEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityCspDirectives(
        requestParameters: EntitiesApiPatchEntityCspDirectivesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiCspDirectiveOutDocument>;

    /**
     *
     * @param {EntitiesApiPatchEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityCustomApplicationSettings(
        requestParameters: EntitiesApiPatchEntityCustomApplicationSettingsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiCustomApplicationSettingOutDocument>;

    /**
     *
     * @param {EntitiesApiPatchEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityDashboardPlugins(
        requestParameters: EntitiesApiPatchEntityDashboardPluginsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiDashboardPluginOutDocument>;

    /**
     *
     * @param {EntitiesApiPatchEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityDataSources(
        requestParameters: EntitiesApiPatchEntityDataSourcesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiDataSourceOutDocument>;

    /**
     *
     * @param {EntitiesApiPatchEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityFilterContexts(
        requestParameters: EntitiesApiPatchEntityFilterContextsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiFilterContextOutDocument>;

    /**
     *
     * @param {EntitiesApiPatchEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityMetrics(
        requestParameters: EntitiesApiPatchEntityMetricsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiMetricOutDocument>;

    /**
     *
     * @param {EntitiesApiPatchEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityOrganizationSettings(
        requestParameters: EntitiesApiPatchEntityOrganizationSettingsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiOrganizationSettingOutDocument>;

    /**
     *
     * @param {EntitiesApiPatchEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityOrganizations(
        requestParameters: EntitiesApiPatchEntityOrganizationsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiOrganizationOutDocument>;

    /**
     *
     * @param {EntitiesApiPatchEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityThemes(
        requestParameters: EntitiesApiPatchEntityThemesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiThemeOutDocument>;

    /**
     *
     * @param {EntitiesApiPatchEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityUserGroups(
        requestParameters: EntitiesApiPatchEntityUserGroupsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiUserGroupOutDocument>;

    /**
     *
     * @param {EntitiesApiPatchEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityUsers(
        requestParameters: EntitiesApiPatchEntityUsersRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiUserOutDocument>;

    /**
     *
     * @param {EntitiesApiPatchEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityVisualizationObjects(
        requestParameters: EntitiesApiPatchEntityVisualizationObjectsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiVisualizationObjectOutDocument>;

    /**
     *
     * @param {EntitiesApiPatchEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityWorkspaceDataFilters(
        requestParameters: EntitiesApiPatchEntityWorkspaceDataFiltersRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;

    /**
     *
     * @param {EntitiesApiPatchEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityWorkspaceSettings(
        requestParameters: EntitiesApiPatchEntityWorkspaceSettingsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiWorkspaceSettingOutDocument>;

    /**
     *
     * @param {EntitiesApiPatchEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityWorkspaces(
        requestParameters: EntitiesApiPatchEntityWorkspacesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiWorkspaceOutDocument>;

    /**
     *
     * @param {EntitiesApiUpdateEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityAnalyticalDashboards(
        requestParameters: EntitiesApiUpdateEntityAnalyticalDashboardsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;

    /**
     *
     * @param {EntitiesApiUpdateEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityApiTokens(
        requestParameters: EntitiesApiUpdateEntityApiTokensRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiApiTokenOutDocument>;

    /**
     *
     * @param {EntitiesApiUpdateEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityColorPalettes(
        requestParameters: EntitiesApiUpdateEntityColorPalettesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiColorPaletteOutDocument>;

    /**
     *
     * @param {EntitiesApiUpdateEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityCookieSecurityConfigurations(
        requestParameters: EntitiesApiUpdateEntityCookieSecurityConfigurationsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;

    /**
     *
     * @param {EntitiesApiUpdateEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityCspDirectives(
        requestParameters: EntitiesApiUpdateEntityCspDirectivesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiCspDirectiveOutDocument>;

    /**
     *
     * @param {EntitiesApiUpdateEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityCustomApplicationSettings(
        requestParameters: EntitiesApiUpdateEntityCustomApplicationSettingsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiCustomApplicationSettingOutDocument>;

    /**
     *
     * @param {EntitiesApiUpdateEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityDashboardPlugins(
        requestParameters: EntitiesApiUpdateEntityDashboardPluginsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiDashboardPluginOutDocument>;

    /**
     *
     * @param {EntitiesApiUpdateEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityDataSources(
        requestParameters: EntitiesApiUpdateEntityDataSourcesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiDataSourceOutDocument>;

    /**
     *
     * @param {EntitiesApiUpdateEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityFilterContexts(
        requestParameters: EntitiesApiUpdateEntityFilterContextsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiFilterContextOutDocument>;

    /**
     *
     * @param {EntitiesApiUpdateEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityMetrics(
        requestParameters: EntitiesApiUpdateEntityMetricsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiMetricOutDocument>;

    /**
     *
     * @param {EntitiesApiUpdateEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityOrganizationSettings(
        requestParameters: EntitiesApiUpdateEntityOrganizationSettingsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiOrganizationSettingOutDocument>;

    /**
     *
     * @param {EntitiesApiUpdateEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityOrganizations(
        requestParameters: EntitiesApiUpdateEntityOrganizationsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiOrganizationOutDocument>;

    /**
     *
     * @param {EntitiesApiUpdateEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityThemes(
        requestParameters: EntitiesApiUpdateEntityThemesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiThemeOutDocument>;

    /**
     *
     * @param {EntitiesApiUpdateEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityUserGroups(
        requestParameters: EntitiesApiUpdateEntityUserGroupsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiUserGroupOutDocument>;

    /**
     *
     * @param {EntitiesApiUpdateEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityUserSettings(
        requestParameters: EntitiesApiUpdateEntityUserSettingsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiUserSettingOutDocument>;

    /**
     *
     * @param {EntitiesApiUpdateEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityUsers(
        requestParameters: EntitiesApiUpdateEntityUsersRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiUserOutDocument>;

    /**
     *
     * @param {EntitiesApiUpdateEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityVisualizationObjects(
        requestParameters: EntitiesApiUpdateEntityVisualizationObjectsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiVisualizationObjectOutDocument>;

    /**
     *
     * @param {EntitiesApiUpdateEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityWorkspaceDataFilters(
        requestParameters: EntitiesApiUpdateEntityWorkspaceDataFiltersRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;

    /**
     *
     * @param {EntitiesApiUpdateEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityWorkspaceSettings(
        requestParameters: EntitiesApiUpdateEntityWorkspaceSettingsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiWorkspaceSettingOutDocument>;

    /**
     *
     * @param {EntitiesApiUpdateEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityWorkspaces(
        requestParameters: EntitiesApiUpdateEntityWorkspacesRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<JsonApiWorkspaceOutDocument>;
}

/**
 * Request parameters for createEntityAnalyticalDashboards operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityAnalyticalDashboardsRequest
 */
export interface EntitiesApiCreateEntityAnalyticalDashboardsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiCreateEntityAnalyticalDashboards
     */
    readonly workspaceId: string;

    /**
     *
     * @type {JsonApiAnalyticalDashboardInDocument}
     * @memberof EntitiesApiCreateEntityAnalyticalDashboards
     */
    readonly jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>}
     * @memberof EntitiesApiCreateEntityAnalyticalDashboards
     */
    readonly include?: Array<
        | "visualizationObjects"
        | "analyticalDashboards"
        | "labels"
        | "metrics"
        | "datasets"
        | "filterContexts"
        | "dashboardPlugins"
        | "ALL"
    >;
}

/**
 * Request parameters for createEntityApiTokens operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityApiTokensRequest
 */
export interface EntitiesApiCreateEntityApiTokensRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiCreateEntityApiTokens
     */
    readonly userId: string;

    /**
     *
     * @type {JsonApiApiTokenInDocument}
     * @memberof EntitiesApiCreateEntityApiTokens
     */
    readonly jsonApiApiTokenInDocument: JsonApiApiTokenInDocument;
}

/**
 * Request parameters for createEntityColorPalettes operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityColorPalettesRequest
 */
export interface EntitiesApiCreateEntityColorPalettesRequest {
    /**
     *
     * @type {JsonApiColorPaletteInDocument}
     * @memberof EntitiesApiCreateEntityColorPalettes
     */
    readonly jsonApiColorPaletteInDocument: JsonApiColorPaletteInDocument;
}

/**
 * Request parameters for createEntityCspDirectives operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityCspDirectivesRequest
 */
export interface EntitiesApiCreateEntityCspDirectivesRequest {
    /**
     *
     * @type {JsonApiCspDirectiveInDocument}
     * @memberof EntitiesApiCreateEntityCspDirectives
     */
    readonly jsonApiCspDirectiveInDocument: JsonApiCspDirectiveInDocument;
}

/**
 * Request parameters for createEntityCustomApplicationSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityCustomApplicationSettingsRequest
 */
export interface EntitiesApiCreateEntityCustomApplicationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiCreateEntityCustomApplicationSettings
     */
    readonly workspaceId: string;

    /**
     *
     * @type {JsonApiCustomApplicationSettingInDocument}
     * @memberof EntitiesApiCreateEntityCustomApplicationSettings
     */
    readonly jsonApiCustomApplicationSettingInDocument: JsonApiCustomApplicationSettingInDocument;
}

/**
 * Request parameters for createEntityDashboardPlugins operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityDashboardPluginsRequest
 */
export interface EntitiesApiCreateEntityDashboardPluginsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiCreateEntityDashboardPlugins
     */
    readonly workspaceId: string;

    /**
     *
     * @type {JsonApiDashboardPluginInDocument}
     * @memberof EntitiesApiCreateEntityDashboardPlugins
     */
    readonly jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument;
}

/**
 * Request parameters for createEntityDataSources operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityDataSourcesRequest
 */
export interface EntitiesApiCreateEntityDataSourcesRequest {
    /**
     *
     * @type {JsonApiDataSourceInDocument}
     * @memberof EntitiesApiCreateEntityDataSources
     */
    readonly jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
}

/**
 * Request parameters for createEntityFilterContexts operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityFilterContextsRequest
 */
export interface EntitiesApiCreateEntityFilterContextsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiCreateEntityFilterContexts
     */
    readonly workspaceId: string;

    /**
     *
     * @type {JsonApiFilterContextInDocument}
     * @memberof EntitiesApiCreateEntityFilterContexts
     */
    readonly jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>}
     * @memberof EntitiesApiCreateEntityFilterContexts
     */
    readonly include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
}

/**
 * Request parameters for createEntityMetrics operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityMetricsRequest
 */
export interface EntitiesApiCreateEntityMetricsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiCreateEntityMetrics
     */
    readonly workspaceId: string;

    /**
     *
     * @type {JsonApiMetricInDocument}
     * @memberof EntitiesApiCreateEntityMetrics
     */
    readonly jsonApiMetricInDocument: JsonApiMetricInDocument;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>}
     * @memberof EntitiesApiCreateEntityMetrics
     */
    readonly include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
}

/**
 * Request parameters for createEntityOrganizationSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityOrganizationSettingsRequest
 */
export interface EntitiesApiCreateEntityOrganizationSettingsRequest {
    /**
     *
     * @type {JsonApiOrganizationSettingInDocument}
     * @memberof EntitiesApiCreateEntityOrganizationSettings
     */
    readonly jsonApiOrganizationSettingInDocument: JsonApiOrganizationSettingInDocument;
}

/**
 * Request parameters for createEntityThemes operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityThemesRequest
 */
export interface EntitiesApiCreateEntityThemesRequest {
    /**
     *
     * @type {JsonApiThemeInDocument}
     * @memberof EntitiesApiCreateEntityThemes
     */
    readonly jsonApiThemeInDocument: JsonApiThemeInDocument;
}

/**
 * Request parameters for createEntityUserGroups operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityUserGroupsRequest
 */
export interface EntitiesApiCreateEntityUserGroupsRequest {
    /**
     *
     * @type {JsonApiUserGroupInDocument}
     * @memberof EntitiesApiCreateEntityUserGroups
     */
    readonly jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'parents' | 'ALL'>}
     * @memberof EntitiesApiCreateEntityUserGroups
     */
    readonly include?: Array<"userGroups" | "parents" | "ALL">;
}

/**
 * Request parameters for createEntityUserSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityUserSettingsRequest
 */
export interface EntitiesApiCreateEntityUserSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiCreateEntityUserSettings
     */
    readonly userId: string;

    /**
     *
     * @type {JsonApiUserSettingInDocument}
     * @memberof EntitiesApiCreateEntityUserSettings
     */
    readonly jsonApiUserSettingInDocument: JsonApiUserSettingInDocument;
}

/**
 * Request parameters for createEntityUsers operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityUsersRequest
 */
export interface EntitiesApiCreateEntityUsersRequest {
    /**
     *
     * @type {JsonApiUserInDocument}
     * @memberof EntitiesApiCreateEntityUsers
     */
    readonly jsonApiUserInDocument: JsonApiUserInDocument;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'ALL'>}
     * @memberof EntitiesApiCreateEntityUsers
     */
    readonly include?: Array<"userGroups" | "ALL">;
}

/**
 * Request parameters for createEntityVisualizationObjects operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityVisualizationObjectsRequest
 */
export interface EntitiesApiCreateEntityVisualizationObjectsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiCreateEntityVisualizationObjects
     */
    readonly workspaceId: string;

    /**
     *
     * @type {JsonApiVisualizationObjectInDocument}
     * @memberof EntitiesApiCreateEntityVisualizationObjects
     */
    readonly jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>}
     * @memberof EntitiesApiCreateEntityVisualizationObjects
     */
    readonly include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
}

/**
 * Request parameters for createEntityWorkspaceDataFilters operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityWorkspaceDataFiltersRequest
 */
export interface EntitiesApiCreateEntityWorkspaceDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiCreateEntityWorkspaceDataFilters
     */
    readonly workspaceId: string;

    /**
     *
     * @type {JsonApiWorkspaceDataFilterInDocument}
     * @memberof EntitiesApiCreateEntityWorkspaceDataFilters
     */
    readonly jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>}
     * @memberof EntitiesApiCreateEntityWorkspaceDataFilters
     */
    readonly include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
}

/**
 * Request parameters for createEntityWorkspaceSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityWorkspaceSettingsRequest
 */
export interface EntitiesApiCreateEntityWorkspaceSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiCreateEntityWorkspaceSettings
     */
    readonly workspaceId: string;

    /**
     *
     * @type {JsonApiWorkspaceSettingInDocument}
     * @memberof EntitiesApiCreateEntityWorkspaceSettings
     */
    readonly jsonApiWorkspaceSettingInDocument: JsonApiWorkspaceSettingInDocument;
}

/**
 * Request parameters for createEntityWorkspaces operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityWorkspacesRequest
 */
export interface EntitiesApiCreateEntityWorkspacesRequest {
    /**
     *
     * @type {JsonApiWorkspaceInDocument}
     * @memberof EntitiesApiCreateEntityWorkspaces
     */
    readonly jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaces' | 'parent' | 'ALL'>}
     * @memberof EntitiesApiCreateEntityWorkspaces
     */
    readonly include?: Array<"workspaces" | "parent" | "ALL">;
}

/**
 * Request parameters for deleteEntityAnalyticalDashboards operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityAnalyticalDashboardsRequest
 */
export interface EntitiesApiDeleteEntityAnalyticalDashboardsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityAnalyticalDashboards
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityAnalyticalDashboards
     */
    readonly objectId: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityAnalyticalDashboards
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityApiTokens operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityApiTokensRequest
 */
export interface EntitiesApiDeleteEntityApiTokensRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityApiTokens
     */
    readonly userId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityApiTokens
     */
    readonly id: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityApiTokens
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityColorPalettes operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityColorPalettesRequest
 */
export interface EntitiesApiDeleteEntityColorPalettesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityColorPalettes
     */
    readonly id: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityColorPalettes
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityCspDirectives operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityCspDirectivesRequest
 */
export interface EntitiesApiDeleteEntityCspDirectivesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityCspDirectives
     */
    readonly id: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityCspDirectives
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityCustomApplicationSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityCustomApplicationSettingsRequest
 */
export interface EntitiesApiDeleteEntityCustomApplicationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityCustomApplicationSettings
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityCustomApplicationSettings
     */
    readonly objectId: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityCustomApplicationSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityDashboardPlugins operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityDashboardPluginsRequest
 */
export interface EntitiesApiDeleteEntityDashboardPluginsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityDashboardPlugins
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityDashboardPlugins
     */
    readonly objectId: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityDashboardPlugins
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityDataSources operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityDataSourcesRequest
 */
export interface EntitiesApiDeleteEntityDataSourcesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityDataSources
     */
    readonly id: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityDataSources
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityFilterContexts operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityFilterContextsRequest
 */
export interface EntitiesApiDeleteEntityFilterContextsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityFilterContexts
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityFilterContexts
     */
    readonly objectId: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityFilterContexts
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityMetrics operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityMetricsRequest
 */
export interface EntitiesApiDeleteEntityMetricsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityMetrics
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityMetrics
     */
    readonly objectId: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityMetrics
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityOrganizationSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityOrganizationSettingsRequest
 */
export interface EntitiesApiDeleteEntityOrganizationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityOrganizationSettings
     */
    readonly id: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityOrganizationSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityThemes operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityThemesRequest
 */
export interface EntitiesApiDeleteEntityThemesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityThemes
     */
    readonly id: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityThemes
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityUserGroups operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityUserGroupsRequest
 */
export interface EntitiesApiDeleteEntityUserGroupsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityUserGroups
     */
    readonly id: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityUserGroups
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityUserSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityUserSettingsRequest
 */
export interface EntitiesApiDeleteEntityUserSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityUserSettings
     */
    readonly userId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityUserSettings
     */
    readonly id: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityUserSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityUsers operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityUsersRequest
 */
export interface EntitiesApiDeleteEntityUsersRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityUsers
     */
    readonly id: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityUsers
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityVisualizationObjects operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityVisualizationObjectsRequest
 */
export interface EntitiesApiDeleteEntityVisualizationObjectsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityVisualizationObjects
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityVisualizationObjects
     */
    readonly objectId: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityVisualizationObjects
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityWorkspaceDataFilters operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityWorkspaceDataFiltersRequest
 */
export interface EntitiesApiDeleteEntityWorkspaceDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityWorkspaceDataFilters
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityWorkspaceDataFilters
     */
    readonly objectId: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityWorkspaceDataFilters
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityWorkspaceSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityWorkspaceSettingsRequest
 */
export interface EntitiesApiDeleteEntityWorkspaceSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityWorkspaceSettings
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityWorkspaceSettings
     */
    readonly objectId: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityWorkspaceSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityWorkspaces operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityWorkspacesRequest
 */
export interface EntitiesApiDeleteEntityWorkspacesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityWorkspaces
     */
    readonly id: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityWorkspaces
     */
    readonly filter?: string;
}

/**
 * Request parameters for getAllEntitiesAnalyticalDashboards operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesAnalyticalDashboardsRequest
 */
export interface EntitiesApiGetAllEntitiesAnalyticalDashboardsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesAnalyticalDashboards
     */
    readonly workspaceId: string;

    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof EntitiesApiGetAllEntitiesAnalyticalDashboards
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesAnalyticalDashboards
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesAnalyticalDashboards
     */
    readonly include?: Array<
        | "visualizationObjects"
        | "analyticalDashboards"
        | "labels"
        | "metrics"
        | "datasets"
        | "filterContexts"
        | "dashboardPlugins"
        | "ALL"
    >;

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesAnalyticalDashboards
     */
    readonly page?: number;

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesAnalyticalDashboards
     */
    readonly size?: number;

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesAnalyticalDashboards
     */
    readonly sort?: Array<string>;

    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetAllEntitiesAnalyticalDashboards
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getAllEntitiesApiTokens operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesApiTokensRequest
 */
export interface EntitiesApiGetAllEntitiesApiTokensRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesApiTokens
     */
    readonly userId: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesApiTokens
     */
    readonly filter?: string;

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesApiTokens
     */
    readonly page?: number;

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesApiTokens
     */
    readonly size?: number;

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesApiTokens
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getAllEntitiesAttributes operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesAttributesRequest
 */
export interface EntitiesApiGetAllEntitiesAttributesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesAttributes
     */
    readonly workspaceId: string;

    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof EntitiesApiGetAllEntitiesAttributes
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesAttributes
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'datasets' | 'labels' | 'dataset' | 'defaultView' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesAttributes
     */
    readonly include?: Array<"datasets" | "labels" | "dataset" | "defaultView" | "ALL">;

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesAttributes
     */
    readonly page?: number;

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesAttributes
     */
    readonly size?: number;

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesAttributes
     */
    readonly sort?: Array<string>;

    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetAllEntitiesAttributes
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getAllEntitiesColorPalettes operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesColorPalettesRequest
 */
export interface EntitiesApiGetAllEntitiesColorPalettesRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesColorPalettes
     */
    readonly filter?: string;

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesColorPalettes
     */
    readonly page?: number;

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesColorPalettes
     */
    readonly size?: number;

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesColorPalettes
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getAllEntitiesCspDirectives operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesCspDirectivesRequest
 */
export interface EntitiesApiGetAllEntitiesCspDirectivesRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesCspDirectives
     */
    readonly filter?: string;

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesCspDirectives
     */
    readonly page?: number;

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesCspDirectives
     */
    readonly size?: number;

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesCspDirectives
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getAllEntitiesCustomApplicationSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesCustomApplicationSettingsRequest
 */
export interface EntitiesApiGetAllEntitiesCustomApplicationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesCustomApplicationSettings
     */
    readonly workspaceId: string;

    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof EntitiesApiGetAllEntitiesCustomApplicationSettings
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesCustomApplicationSettings
     */
    readonly filter?: string;

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesCustomApplicationSettings
     */
    readonly page?: number;

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesCustomApplicationSettings
     */
    readonly size?: number;

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesCustomApplicationSettings
     */
    readonly sort?: Array<string>;

    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetAllEntitiesCustomApplicationSettings
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getAllEntitiesDashboardPlugins operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesDashboardPluginsRequest
 */
export interface EntitiesApiGetAllEntitiesDashboardPluginsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesDashboardPlugins
     */
    readonly workspaceId: string;

    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof EntitiesApiGetAllEntitiesDashboardPlugins
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesDashboardPlugins
     */
    readonly filter?: string;

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesDashboardPlugins
     */
    readonly page?: number;

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesDashboardPlugins
     */
    readonly size?: number;

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesDashboardPlugins
     */
    readonly sort?: Array<string>;

    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetAllEntitiesDashboardPlugins
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getAllEntitiesDataSourceIdentifiers operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesDataSourceIdentifiersRequest
 */
export interface EntitiesApiGetAllEntitiesDataSourceIdentifiersRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesDataSourceIdentifiers
     */
    readonly filter?: string;

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesDataSourceIdentifiers
     */
    readonly page?: number;

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesDataSourceIdentifiers
     */
    readonly size?: number;

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesDataSourceIdentifiers
     */
    readonly sort?: Array<string>;

    /**
     * Include Meta objects.
     * @type {Array<'permissions' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesDataSourceIdentifiers
     */
    readonly metaInclude?: Array<"permissions" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesDataSourceTables operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesDataSourceTablesRequest
 */
export interface EntitiesApiGetAllEntitiesDataSourceTablesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesDataSourceTables
     */
    readonly dataSourceId: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesDataSourceTables
     */
    readonly filter?: string;

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesDataSourceTables
     */
    readonly page?: number;

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesDataSourceTables
     */
    readonly size?: number;

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesDataSourceTables
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getAllEntitiesDataSources operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesDataSourcesRequest
 */
export interface EntitiesApiGetAllEntitiesDataSourcesRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesDataSources
     */
    readonly filter?: string;

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesDataSources
     */
    readonly page?: number;

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesDataSources
     */
    readonly size?: number;

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesDataSources
     */
    readonly sort?: Array<string>;

    /**
     * Include Meta objects.
     * @type {Array<'permissions' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesDataSources
     */
    readonly metaInclude?: Array<"permissions" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesDatasets operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesDatasetsRequest
 */
export interface EntitiesApiGetAllEntitiesDatasetsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesDatasets
     */
    readonly workspaceId: string;

    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof EntitiesApiGetAllEntitiesDatasets
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesDatasets
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'facts' | 'datasets' | 'references' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesDatasets
     */
    readonly include?: Array<"attributes" | "facts" | "datasets" | "references" | "ALL">;

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesDatasets
     */
    readonly page?: number;

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesDatasets
     */
    readonly size?: number;

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesDatasets
     */
    readonly sort?: Array<string>;

    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetAllEntitiesDatasets
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getAllEntitiesEntitlements operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesEntitlementsRequest
 */
export interface EntitiesApiGetAllEntitiesEntitlementsRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesEntitlements
     */
    readonly filter?: string;

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesEntitlements
     */
    readonly page?: number;

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesEntitlements
     */
    readonly size?: number;

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesEntitlements
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getAllEntitiesFacts operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesFactsRequest
 */
export interface EntitiesApiGetAllEntitiesFactsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesFacts
     */
    readonly workspaceId: string;

    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof EntitiesApiGetAllEntitiesFacts
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesFacts
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'datasets' | 'dataset' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesFacts
     */
    readonly include?: Array<"datasets" | "dataset" | "ALL">;

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesFacts
     */
    readonly page?: number;

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesFacts
     */
    readonly size?: number;

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesFacts
     */
    readonly sort?: Array<string>;

    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetAllEntitiesFacts
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getAllEntitiesFilterContexts operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesFilterContextsRequest
 */
export interface EntitiesApiGetAllEntitiesFilterContextsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesFilterContexts
     */
    readonly workspaceId: string;

    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof EntitiesApiGetAllEntitiesFilterContexts
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesFilterContexts
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesFilterContexts
     */
    readonly include?: Array<"attributes" | "datasets" | "labels" | "ALL">;

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesFilterContexts
     */
    readonly page?: number;

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesFilterContexts
     */
    readonly size?: number;

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesFilterContexts
     */
    readonly sort?: Array<string>;

    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetAllEntitiesFilterContexts
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getAllEntitiesLabels operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesLabelsRequest
 */
export interface EntitiesApiGetAllEntitiesLabelsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesLabels
     */
    readonly workspaceId: string;

    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof EntitiesApiGetAllEntitiesLabels
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesLabels
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'attribute' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesLabels
     */
    readonly include?: Array<"attributes" | "attribute" | "ALL">;

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesLabels
     */
    readonly page?: number;

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesLabels
     */
    readonly size?: number;

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesLabels
     */
    readonly sort?: Array<string>;

    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetAllEntitiesLabels
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getAllEntitiesMetrics operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesMetricsRequest
 */
export interface EntitiesApiGetAllEntitiesMetricsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesMetrics
     */
    readonly workspaceId: string;

    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof EntitiesApiGetAllEntitiesMetrics
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesMetrics
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesMetrics
     */
    readonly include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesMetrics
     */
    readonly page?: number;

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesMetrics
     */
    readonly size?: number;

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesMetrics
     */
    readonly sort?: Array<string>;

    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetAllEntitiesMetrics
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getAllEntitiesOrganizationSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesOrganizationSettingsRequest
 */
export interface EntitiesApiGetAllEntitiesOrganizationSettingsRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesOrganizationSettings
     */
    readonly filter?: string;

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesOrganizationSettings
     */
    readonly page?: number;

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesOrganizationSettings
     */
    readonly size?: number;

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesOrganizationSettings
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getAllEntitiesThemes operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesThemesRequest
 */
export interface EntitiesApiGetAllEntitiesThemesRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesThemes
     */
    readonly filter?: string;

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesThemes
     */
    readonly page?: number;

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesThemes
     */
    readonly size?: number;

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesThemes
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getAllEntitiesUserGroups operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesUserGroupsRequest
 */
export interface EntitiesApiGetAllEntitiesUserGroupsRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesUserGroups
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'parents' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesUserGroups
     */
    readonly include?: Array<"userGroups" | "parents" | "ALL">;

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesUserGroups
     */
    readonly page?: number;

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesUserGroups
     */
    readonly size?: number;

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesUserGroups
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getAllEntitiesUserSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesUserSettingsRequest
 */
export interface EntitiesApiGetAllEntitiesUserSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesUserSettings
     */
    readonly userId: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesUserSettings
     */
    readonly filter?: string;

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesUserSettings
     */
    readonly page?: number;

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesUserSettings
     */
    readonly size?: number;

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesUserSettings
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getAllEntitiesUsers operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesUsersRequest
 */
export interface EntitiesApiGetAllEntitiesUsersRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesUsers
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesUsers
     */
    readonly include?: Array<"userGroups" | "ALL">;

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesUsers
     */
    readonly page?: number;

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesUsers
     */
    readonly size?: number;

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesUsers
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getAllEntitiesVisualizationObjects operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesVisualizationObjectsRequest
 */
export interface EntitiesApiGetAllEntitiesVisualizationObjectsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesVisualizationObjects
     */
    readonly workspaceId: string;

    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof EntitiesApiGetAllEntitiesVisualizationObjects
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesVisualizationObjects
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesVisualizationObjects
     */
    readonly include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesVisualizationObjects
     */
    readonly page?: number;

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesVisualizationObjects
     */
    readonly size?: number;

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesVisualizationObjects
     */
    readonly sort?: Array<string>;

    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetAllEntitiesVisualizationObjects
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getAllEntitiesWorkspaceDataFilterSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesWorkspaceDataFilterSettingsRequest
 */
export interface EntitiesApiGetAllEntitiesWorkspaceDataFilterSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceDataFilterSettings
     */
    readonly workspaceId: string;

    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceDataFilterSettings
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceDataFilterSettings
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceDataFilterSettings
     */
    readonly include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">;

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceDataFilterSettings
     */
    readonly page?: number;

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceDataFilterSettings
     */
    readonly size?: number;

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceDataFilterSettings
     */
    readonly sort?: Array<string>;

    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceDataFilterSettings
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getAllEntitiesWorkspaceDataFilters operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesWorkspaceDataFiltersRequest
 */
export interface EntitiesApiGetAllEntitiesWorkspaceDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceDataFilters
     */
    readonly workspaceId: string;

    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceDataFilters
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceDataFilters
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceDataFilters
     */
    readonly include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceDataFilters
     */
    readonly page?: number;

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceDataFilters
     */
    readonly size?: number;

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceDataFilters
     */
    readonly sort?: Array<string>;

    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceDataFilters
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getAllEntitiesWorkspaceSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesWorkspaceSettingsRequest
 */
export interface EntitiesApiGetAllEntitiesWorkspaceSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceSettings
     */
    readonly workspaceId: string;

    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceSettings
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceSettings
     */
    readonly filter?: string;

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceSettings
     */
    readonly page?: number;

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceSettings
     */
    readonly size?: number;

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceSettings
     */
    readonly sort?: Array<string>;

    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceSettings
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getAllEntitiesWorkspaces operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesWorkspacesRequest
 */
export interface EntitiesApiGetAllEntitiesWorkspacesRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesWorkspaces
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaces' | 'parent' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesWorkspaces
     */
    readonly include?: Array<"workspaces" | "parent" | "ALL">;

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesWorkspaces
     */
    readonly page?: number;

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesWorkspaces
     */
    readonly size?: number;

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesWorkspaces
     */
    readonly sort?: Array<string>;

    /**
     * Include Meta objects.
     * @type {Array<'config' | 'permissions' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesWorkspaces
     */
    readonly metaInclude?: Array<"config" | "permissions" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityAnalyticalDashboards operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityAnalyticalDashboardsRequest
 */
export interface EntitiesApiGetEntityAnalyticalDashboardsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityAnalyticalDashboards
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityAnalyticalDashboards
     */
    readonly objectId: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityAnalyticalDashboards
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>}
     * @memberof EntitiesApiGetEntityAnalyticalDashboards
     */
    readonly include?: Array<
        | "visualizationObjects"
        | "analyticalDashboards"
        | "labels"
        | "metrics"
        | "datasets"
        | "filterContexts"
        | "dashboardPlugins"
        | "ALL"
    >;

    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetEntityAnalyticalDashboards
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getEntityApiTokens operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityApiTokensRequest
 */
export interface EntitiesApiGetEntityApiTokensRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityApiTokens
     */
    readonly userId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityApiTokens
     */
    readonly id: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityApiTokens
     */
    readonly filter?: string;
}

/**
 * Request parameters for getEntityAttributes operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityAttributesRequest
 */
export interface EntitiesApiGetEntityAttributesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityAttributes
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityAttributes
     */
    readonly objectId: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityAttributes
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'datasets' | 'labels' | 'dataset' | 'defaultView' | 'ALL'>}
     * @memberof EntitiesApiGetEntityAttributes
     */
    readonly include?: Array<"datasets" | "labels" | "dataset" | "defaultView" | "ALL">;

    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetEntityAttributes
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getEntityColorPalettes operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityColorPalettesRequest
 */
export interface EntitiesApiGetEntityColorPalettesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityColorPalettes
     */
    readonly id: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityColorPalettes
     */
    readonly filter?: string;
}

/**
 * Request parameters for getEntityCookieSecurityConfigurations operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityCookieSecurityConfigurationsRequest
 */
export interface EntitiesApiGetEntityCookieSecurityConfigurationsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityCookieSecurityConfigurations
     */
    readonly id: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityCookieSecurityConfigurations
     */
    readonly filter?: string;
}

/**
 * Request parameters for getEntityCspDirectives operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityCspDirectivesRequest
 */
export interface EntitiesApiGetEntityCspDirectivesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityCspDirectives
     */
    readonly id: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityCspDirectives
     */
    readonly filter?: string;
}

/**
 * Request parameters for getEntityCustomApplicationSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityCustomApplicationSettingsRequest
 */
export interface EntitiesApiGetEntityCustomApplicationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityCustomApplicationSettings
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityCustomApplicationSettings
     */
    readonly objectId: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityCustomApplicationSettings
     */
    readonly filter?: string;

    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetEntityCustomApplicationSettings
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getEntityDashboardPlugins operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityDashboardPluginsRequest
 */
export interface EntitiesApiGetEntityDashboardPluginsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityDashboardPlugins
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityDashboardPlugins
     */
    readonly objectId: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityDashboardPlugins
     */
    readonly filter?: string;

    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetEntityDashboardPlugins
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getEntityDataSourceIdentifiers operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityDataSourceIdentifiersRequest
 */
export interface EntitiesApiGetEntityDataSourceIdentifiersRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityDataSourceIdentifiers
     */
    readonly id: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityDataSourceIdentifiers
     */
    readonly filter?: string;

    /**
     * Include Meta objects.
     * @type {Array<'permissions' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetEntityDataSourceIdentifiers
     */
    readonly metaInclude?: Array<"permissions" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityDataSourceTables operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityDataSourceTablesRequest
 */
export interface EntitiesApiGetEntityDataSourceTablesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityDataSourceTables
     */
    readonly dataSourceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityDataSourceTables
     */
    readonly id: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityDataSourceTables
     */
    readonly filter?: string;
}

/**
 * Request parameters for getEntityDataSources operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityDataSourcesRequest
 */
export interface EntitiesApiGetEntityDataSourcesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityDataSources
     */
    readonly id: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityDataSources
     */
    readonly filter?: string;

    /**
     * Include Meta objects.
     * @type {Array<'permissions' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetEntityDataSources
     */
    readonly metaInclude?: Array<"permissions" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityDatasets operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityDatasetsRequest
 */
export interface EntitiesApiGetEntityDatasetsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityDatasets
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityDatasets
     */
    readonly objectId: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityDatasets
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'facts' | 'datasets' | 'references' | 'ALL'>}
     * @memberof EntitiesApiGetEntityDatasets
     */
    readonly include?: Array<"attributes" | "facts" | "datasets" | "references" | "ALL">;

    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetEntityDatasets
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getEntityEntitlements operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityEntitlementsRequest
 */
export interface EntitiesApiGetEntityEntitlementsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityEntitlements
     */
    readonly id: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityEntitlements
     */
    readonly filter?: string;
}

/**
 * Request parameters for getEntityFacts operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityFactsRequest
 */
export interface EntitiesApiGetEntityFactsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityFacts
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityFacts
     */
    readonly objectId: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityFacts
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'datasets' | 'dataset' | 'ALL'>}
     * @memberof EntitiesApiGetEntityFacts
     */
    readonly include?: Array<"datasets" | "dataset" | "ALL">;

    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetEntityFacts
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getEntityFilterContexts operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityFilterContextsRequest
 */
export interface EntitiesApiGetEntityFilterContextsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityFilterContexts
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityFilterContexts
     */
    readonly objectId: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityFilterContexts
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>}
     * @memberof EntitiesApiGetEntityFilterContexts
     */
    readonly include?: Array<"attributes" | "datasets" | "labels" | "ALL">;

    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetEntityFilterContexts
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getEntityLabels operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityLabelsRequest
 */
export interface EntitiesApiGetEntityLabelsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityLabels
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityLabels
     */
    readonly objectId: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityLabels
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'attribute' | 'ALL'>}
     * @memberof EntitiesApiGetEntityLabels
     */
    readonly include?: Array<"attributes" | "attribute" | "ALL">;

    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetEntityLabels
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getEntityMetrics operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityMetricsRequest
 */
export interface EntitiesApiGetEntityMetricsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityMetrics
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityMetrics
     */
    readonly objectId: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityMetrics
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>}
     * @memberof EntitiesApiGetEntityMetrics
     */
    readonly include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;

    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetEntityMetrics
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getEntityOrganizationSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityOrganizationSettingsRequest
 */
export interface EntitiesApiGetEntityOrganizationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityOrganizationSettings
     */
    readonly id: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityOrganizationSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for getEntityOrganizations operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityOrganizationsRequest
 */
export interface EntitiesApiGetEntityOrganizationsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityOrganizations
     */
    readonly id: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityOrganizations
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>}
     * @memberof EntitiesApiGetEntityOrganizations
     */
    readonly include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">;

    /**
     * Include Meta objects.
     * @type {Array<'permissions' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetEntityOrganizations
     */
    readonly metaInclude?: Array<"permissions" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityThemes operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityThemesRequest
 */
export interface EntitiesApiGetEntityThemesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityThemes
     */
    readonly id: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityThemes
     */
    readonly filter?: string;
}

/**
 * Request parameters for getEntityUserGroups operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityUserGroupsRequest
 */
export interface EntitiesApiGetEntityUserGroupsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityUserGroups
     */
    readonly id: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityUserGroups
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'parents' | 'ALL'>}
     * @memberof EntitiesApiGetEntityUserGroups
     */
    readonly include?: Array<"userGroups" | "parents" | "ALL">;
}

/**
 * Request parameters for getEntityUserSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityUserSettingsRequest
 */
export interface EntitiesApiGetEntityUserSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityUserSettings
     */
    readonly userId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityUserSettings
     */
    readonly id: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityUserSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for getEntityUsers operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityUsersRequest
 */
export interface EntitiesApiGetEntityUsersRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityUsers
     */
    readonly id: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityUsers
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'ALL'>}
     * @memberof EntitiesApiGetEntityUsers
     */
    readonly include?: Array<"userGroups" | "ALL">;
}

/**
 * Request parameters for getEntityVisualizationObjects operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityVisualizationObjectsRequest
 */
export interface EntitiesApiGetEntityVisualizationObjectsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityVisualizationObjects
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityVisualizationObjects
     */
    readonly objectId: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityVisualizationObjects
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>}
     * @memberof EntitiesApiGetEntityVisualizationObjects
     */
    readonly include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;

    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetEntityVisualizationObjects
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getEntityWorkspaceDataFilterSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityWorkspaceDataFilterSettingsRequest
 */
export interface EntitiesApiGetEntityWorkspaceDataFilterSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityWorkspaceDataFilterSettings
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityWorkspaceDataFilterSettings
     */
    readonly objectId: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityWorkspaceDataFilterSettings
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>}
     * @memberof EntitiesApiGetEntityWorkspaceDataFilterSettings
     */
    readonly include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">;

    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetEntityWorkspaceDataFilterSettings
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getEntityWorkspaceDataFilters operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityWorkspaceDataFiltersRequest
 */
export interface EntitiesApiGetEntityWorkspaceDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityWorkspaceDataFilters
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityWorkspaceDataFilters
     */
    readonly objectId: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityWorkspaceDataFilters
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>}
     * @memberof EntitiesApiGetEntityWorkspaceDataFilters
     */
    readonly include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;

    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetEntityWorkspaceDataFilters
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getEntityWorkspaceSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityWorkspaceSettingsRequest
 */
export interface EntitiesApiGetEntityWorkspaceSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityWorkspaceSettings
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityWorkspaceSettings
     */
    readonly objectId: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityWorkspaceSettings
     */
    readonly filter?: string;

    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetEntityWorkspaceSettings
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getEntityWorkspaces operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityWorkspacesRequest
 */
export interface EntitiesApiGetEntityWorkspacesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityWorkspaces
     */
    readonly id: string;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityWorkspaces
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaces' | 'parent' | 'ALL'>}
     * @memberof EntitiesApiGetEntityWorkspaces
     */
    readonly include?: Array<"workspaces" | "parent" | "ALL">;

    /**
     * Include Meta objects.
     * @type {Array<'config' | 'permissions' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetEntityWorkspaces
     */
    readonly metaInclude?: Array<"config" | "permissions" | "all" | "ALL">;
}

/**
 * Request parameters for getOrganization operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetOrganizationRequest
 */
export interface EntitiesApiGetOrganizationRequest {
    /**
     * Return list of permissions available to logged user.
     * @type {Array<'permissions' | 'all'>}
     * @memberof EntitiesApiGetOrganization
     */
    readonly metaInclude?: Array<"permissions" | "all">;
}

/**
 * Request parameters for patchEntityAnalyticalDashboards operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityAnalyticalDashboardsRequest
 */
export interface EntitiesApiPatchEntityAnalyticalDashboardsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityAnalyticalDashboards
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityAnalyticalDashboards
     */
    readonly objectId: string;

    /**
     *
     * @type {JsonApiAnalyticalDashboardPatchDocument}
     * @memberof EntitiesApiPatchEntityAnalyticalDashboards
     */
    readonly jsonApiAnalyticalDashboardPatchDocument: JsonApiAnalyticalDashboardPatchDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityAnalyticalDashboards
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>}
     * @memberof EntitiesApiPatchEntityAnalyticalDashboards
     */
    readonly include?: Array<
        | "visualizationObjects"
        | "analyticalDashboards"
        | "labels"
        | "metrics"
        | "datasets"
        | "filterContexts"
        | "dashboardPlugins"
        | "ALL"
    >;
}

/**
 * Request parameters for patchEntityColorPalettes operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityColorPalettesRequest
 */
export interface EntitiesApiPatchEntityColorPalettesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityColorPalettes
     */
    readonly id: string;

    /**
     *
     * @type {JsonApiColorPalettePatchDocument}
     * @memberof EntitiesApiPatchEntityColorPalettes
     */
    readonly jsonApiColorPalettePatchDocument: JsonApiColorPalettePatchDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityColorPalettes
     */
    readonly filter?: string;
}

/**
 * Request parameters for patchEntityCookieSecurityConfigurations operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityCookieSecurityConfigurationsRequest
 */
export interface EntitiesApiPatchEntityCookieSecurityConfigurationsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityCookieSecurityConfigurations
     */
    readonly id: string;

    /**
     *
     * @type {JsonApiCookieSecurityConfigurationPatchDocument}
     * @memberof EntitiesApiPatchEntityCookieSecurityConfigurations
     */
    readonly jsonApiCookieSecurityConfigurationPatchDocument: JsonApiCookieSecurityConfigurationPatchDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityCookieSecurityConfigurations
     */
    readonly filter?: string;
}

/**
 * Request parameters for patchEntityCspDirectives operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityCspDirectivesRequest
 */
export interface EntitiesApiPatchEntityCspDirectivesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityCspDirectives
     */
    readonly id: string;

    /**
     *
     * @type {JsonApiCspDirectivePatchDocument}
     * @memberof EntitiesApiPatchEntityCspDirectives
     */
    readonly jsonApiCspDirectivePatchDocument: JsonApiCspDirectivePatchDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityCspDirectives
     */
    readonly filter?: string;
}

/**
 * Request parameters for patchEntityCustomApplicationSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityCustomApplicationSettingsRequest
 */
export interface EntitiesApiPatchEntityCustomApplicationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityCustomApplicationSettings
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityCustomApplicationSettings
     */
    readonly objectId: string;

    /**
     *
     * @type {JsonApiCustomApplicationSettingPatchDocument}
     * @memberof EntitiesApiPatchEntityCustomApplicationSettings
     */
    readonly jsonApiCustomApplicationSettingPatchDocument: JsonApiCustomApplicationSettingPatchDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityCustomApplicationSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for patchEntityDashboardPlugins operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityDashboardPluginsRequest
 */
export interface EntitiesApiPatchEntityDashboardPluginsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityDashboardPlugins
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityDashboardPlugins
     */
    readonly objectId: string;

    /**
     *
     * @type {JsonApiDashboardPluginPatchDocument}
     * @memberof EntitiesApiPatchEntityDashboardPlugins
     */
    readonly jsonApiDashboardPluginPatchDocument: JsonApiDashboardPluginPatchDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityDashboardPlugins
     */
    readonly filter?: string;
}

/**
 * Request parameters for patchEntityDataSources operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityDataSourcesRequest
 */
export interface EntitiesApiPatchEntityDataSourcesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityDataSources
     */
    readonly id: string;

    /**
     *
     * @type {JsonApiDataSourcePatchDocument}
     * @memberof EntitiesApiPatchEntityDataSources
     */
    readonly jsonApiDataSourcePatchDocument: JsonApiDataSourcePatchDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityDataSources
     */
    readonly filter?: string;
}

/**
 * Request parameters for patchEntityFilterContexts operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityFilterContextsRequest
 */
export interface EntitiesApiPatchEntityFilterContextsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityFilterContexts
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityFilterContexts
     */
    readonly objectId: string;

    /**
     *
     * @type {JsonApiFilterContextPatchDocument}
     * @memberof EntitiesApiPatchEntityFilterContexts
     */
    readonly jsonApiFilterContextPatchDocument: JsonApiFilterContextPatchDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityFilterContexts
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>}
     * @memberof EntitiesApiPatchEntityFilterContexts
     */
    readonly include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
}

/**
 * Request parameters for patchEntityMetrics operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityMetricsRequest
 */
export interface EntitiesApiPatchEntityMetricsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityMetrics
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityMetrics
     */
    readonly objectId: string;

    /**
     *
     * @type {JsonApiMetricPatchDocument}
     * @memberof EntitiesApiPatchEntityMetrics
     */
    readonly jsonApiMetricPatchDocument: JsonApiMetricPatchDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityMetrics
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>}
     * @memberof EntitiesApiPatchEntityMetrics
     */
    readonly include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
}

/**
 * Request parameters for patchEntityOrganizationSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityOrganizationSettingsRequest
 */
export interface EntitiesApiPatchEntityOrganizationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityOrganizationSettings
     */
    readonly id: string;

    /**
     *
     * @type {JsonApiOrganizationSettingPatchDocument}
     * @memberof EntitiesApiPatchEntityOrganizationSettings
     */
    readonly jsonApiOrganizationSettingPatchDocument: JsonApiOrganizationSettingPatchDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityOrganizationSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for patchEntityOrganizations operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityOrganizationsRequest
 */
export interface EntitiesApiPatchEntityOrganizationsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityOrganizations
     */
    readonly id: string;

    /**
     *
     * @type {JsonApiOrganizationPatchDocument}
     * @memberof EntitiesApiPatchEntityOrganizations
     */
    readonly jsonApiOrganizationPatchDocument: JsonApiOrganizationPatchDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityOrganizations
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>}
     * @memberof EntitiesApiPatchEntityOrganizations
     */
    readonly include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">;
}

/**
 * Request parameters for patchEntityThemes operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityThemesRequest
 */
export interface EntitiesApiPatchEntityThemesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityThemes
     */
    readonly id: string;

    /**
     *
     * @type {JsonApiThemePatchDocument}
     * @memberof EntitiesApiPatchEntityThemes
     */
    readonly jsonApiThemePatchDocument: JsonApiThemePatchDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityThemes
     */
    readonly filter?: string;
}

/**
 * Request parameters for patchEntityUserGroups operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityUserGroupsRequest
 */
export interface EntitiesApiPatchEntityUserGroupsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityUserGroups
     */
    readonly id: string;

    /**
     *
     * @type {JsonApiUserGroupPatchDocument}
     * @memberof EntitiesApiPatchEntityUserGroups
     */
    readonly jsonApiUserGroupPatchDocument: JsonApiUserGroupPatchDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityUserGroups
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'parents' | 'ALL'>}
     * @memberof EntitiesApiPatchEntityUserGroups
     */
    readonly include?: Array<"userGroups" | "parents" | "ALL">;
}

/**
 * Request parameters for patchEntityUsers operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityUsersRequest
 */
export interface EntitiesApiPatchEntityUsersRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityUsers
     */
    readonly id: string;

    /**
     *
     * @type {JsonApiUserPatchDocument}
     * @memberof EntitiesApiPatchEntityUsers
     */
    readonly jsonApiUserPatchDocument: JsonApiUserPatchDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityUsers
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'ALL'>}
     * @memberof EntitiesApiPatchEntityUsers
     */
    readonly include?: Array<"userGroups" | "ALL">;
}

/**
 * Request parameters for patchEntityVisualizationObjects operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityVisualizationObjectsRequest
 */
export interface EntitiesApiPatchEntityVisualizationObjectsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityVisualizationObjects
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityVisualizationObjects
     */
    readonly objectId: string;

    /**
     *
     * @type {JsonApiVisualizationObjectPatchDocument}
     * @memberof EntitiesApiPatchEntityVisualizationObjects
     */
    readonly jsonApiVisualizationObjectPatchDocument: JsonApiVisualizationObjectPatchDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityVisualizationObjects
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>}
     * @memberof EntitiesApiPatchEntityVisualizationObjects
     */
    readonly include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
}

/**
 * Request parameters for patchEntityWorkspaceDataFilters operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityWorkspaceDataFiltersRequest
 */
export interface EntitiesApiPatchEntityWorkspaceDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityWorkspaceDataFilters
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityWorkspaceDataFilters
     */
    readonly objectId: string;

    /**
     *
     * @type {JsonApiWorkspaceDataFilterPatchDocument}
     * @memberof EntitiesApiPatchEntityWorkspaceDataFilters
     */
    readonly jsonApiWorkspaceDataFilterPatchDocument: JsonApiWorkspaceDataFilterPatchDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityWorkspaceDataFilters
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>}
     * @memberof EntitiesApiPatchEntityWorkspaceDataFilters
     */
    readonly include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
}

/**
 * Request parameters for patchEntityWorkspaceSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityWorkspaceSettingsRequest
 */
export interface EntitiesApiPatchEntityWorkspaceSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityWorkspaceSettings
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityWorkspaceSettings
     */
    readonly objectId: string;

    /**
     *
     * @type {JsonApiWorkspaceSettingPatchDocument}
     * @memberof EntitiesApiPatchEntityWorkspaceSettings
     */
    readonly jsonApiWorkspaceSettingPatchDocument: JsonApiWorkspaceSettingPatchDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityWorkspaceSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for patchEntityWorkspaces operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityWorkspacesRequest
 */
export interface EntitiesApiPatchEntityWorkspacesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityWorkspaces
     */
    readonly id: string;

    /**
     *
     * @type {JsonApiWorkspacePatchDocument}
     * @memberof EntitiesApiPatchEntityWorkspaces
     */
    readonly jsonApiWorkspacePatchDocument: JsonApiWorkspacePatchDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityWorkspaces
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaces' | 'parent' | 'ALL'>}
     * @memberof EntitiesApiPatchEntityWorkspaces
     */
    readonly include?: Array<"workspaces" | "parent" | "ALL">;
}

/**
 * Request parameters for updateEntityAnalyticalDashboards operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityAnalyticalDashboardsRequest
 */
export interface EntitiesApiUpdateEntityAnalyticalDashboardsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityAnalyticalDashboards
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityAnalyticalDashboards
     */
    readonly objectId: string;

    /**
     *
     * @type {JsonApiAnalyticalDashboardInDocument}
     * @memberof EntitiesApiUpdateEntityAnalyticalDashboards
     */
    readonly jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityAnalyticalDashboards
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>}
     * @memberof EntitiesApiUpdateEntityAnalyticalDashboards
     */
    readonly include?: Array<
        | "visualizationObjects"
        | "analyticalDashboards"
        | "labels"
        | "metrics"
        | "datasets"
        | "filterContexts"
        | "dashboardPlugins"
        | "ALL"
    >;
}

/**
 * Request parameters for updateEntityApiTokens operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityApiTokensRequest
 */
export interface EntitiesApiUpdateEntityApiTokensRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityApiTokens
     */
    readonly userId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityApiTokens
     */
    readonly id: string;

    /**
     *
     * @type {JsonApiApiTokenInDocument}
     * @memberof EntitiesApiUpdateEntityApiTokens
     */
    readonly jsonApiApiTokenInDocument: JsonApiApiTokenInDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityApiTokens
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityColorPalettes operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityColorPalettesRequest
 */
export interface EntitiesApiUpdateEntityColorPalettesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityColorPalettes
     */
    readonly id: string;

    /**
     *
     * @type {JsonApiColorPaletteInDocument}
     * @memberof EntitiesApiUpdateEntityColorPalettes
     */
    readonly jsonApiColorPaletteInDocument: JsonApiColorPaletteInDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityColorPalettes
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityCookieSecurityConfigurations operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityCookieSecurityConfigurationsRequest
 */
export interface EntitiesApiUpdateEntityCookieSecurityConfigurationsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityCookieSecurityConfigurations
     */
    readonly id: string;

    /**
     *
     * @type {JsonApiCookieSecurityConfigurationInDocument}
     * @memberof EntitiesApiUpdateEntityCookieSecurityConfigurations
     */
    readonly jsonApiCookieSecurityConfigurationInDocument: JsonApiCookieSecurityConfigurationInDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityCookieSecurityConfigurations
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityCspDirectives operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityCspDirectivesRequest
 */
export interface EntitiesApiUpdateEntityCspDirectivesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityCspDirectives
     */
    readonly id: string;

    /**
     *
     * @type {JsonApiCspDirectiveInDocument}
     * @memberof EntitiesApiUpdateEntityCspDirectives
     */
    readonly jsonApiCspDirectiveInDocument: JsonApiCspDirectiveInDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityCspDirectives
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityCustomApplicationSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityCustomApplicationSettingsRequest
 */
export interface EntitiesApiUpdateEntityCustomApplicationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityCustomApplicationSettings
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityCustomApplicationSettings
     */
    readonly objectId: string;

    /**
     *
     * @type {JsonApiCustomApplicationSettingInDocument}
     * @memberof EntitiesApiUpdateEntityCustomApplicationSettings
     */
    readonly jsonApiCustomApplicationSettingInDocument: JsonApiCustomApplicationSettingInDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityCustomApplicationSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityDashboardPlugins operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityDashboardPluginsRequest
 */
export interface EntitiesApiUpdateEntityDashboardPluginsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityDashboardPlugins
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityDashboardPlugins
     */
    readonly objectId: string;

    /**
     *
     * @type {JsonApiDashboardPluginInDocument}
     * @memberof EntitiesApiUpdateEntityDashboardPlugins
     */
    readonly jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityDashboardPlugins
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityDataSources operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityDataSourcesRequest
 */
export interface EntitiesApiUpdateEntityDataSourcesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityDataSources
     */
    readonly id: string;

    /**
     *
     * @type {JsonApiDataSourceInDocument}
     * @memberof EntitiesApiUpdateEntityDataSources
     */
    readonly jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityDataSources
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityFilterContexts operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityFilterContextsRequest
 */
export interface EntitiesApiUpdateEntityFilterContextsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityFilterContexts
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityFilterContexts
     */
    readonly objectId: string;

    /**
     *
     * @type {JsonApiFilterContextInDocument}
     * @memberof EntitiesApiUpdateEntityFilterContexts
     */
    readonly jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityFilterContexts
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>}
     * @memberof EntitiesApiUpdateEntityFilterContexts
     */
    readonly include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
}

/**
 * Request parameters for updateEntityMetrics operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityMetricsRequest
 */
export interface EntitiesApiUpdateEntityMetricsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityMetrics
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityMetrics
     */
    readonly objectId: string;

    /**
     *
     * @type {JsonApiMetricInDocument}
     * @memberof EntitiesApiUpdateEntityMetrics
     */
    readonly jsonApiMetricInDocument: JsonApiMetricInDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityMetrics
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>}
     * @memberof EntitiesApiUpdateEntityMetrics
     */
    readonly include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
}

/**
 * Request parameters for updateEntityOrganizationSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityOrganizationSettingsRequest
 */
export interface EntitiesApiUpdateEntityOrganizationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityOrganizationSettings
     */
    readonly id: string;

    /**
     *
     * @type {JsonApiOrganizationSettingInDocument}
     * @memberof EntitiesApiUpdateEntityOrganizationSettings
     */
    readonly jsonApiOrganizationSettingInDocument: JsonApiOrganizationSettingInDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityOrganizationSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityOrganizations operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityOrganizationsRequest
 */
export interface EntitiesApiUpdateEntityOrganizationsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityOrganizations
     */
    readonly id: string;

    /**
     *
     * @type {JsonApiOrganizationInDocument}
     * @memberof EntitiesApiUpdateEntityOrganizations
     */
    readonly jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityOrganizations
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>}
     * @memberof EntitiesApiUpdateEntityOrganizations
     */
    readonly include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">;
}

/**
 * Request parameters for updateEntityThemes operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityThemesRequest
 */
export interface EntitiesApiUpdateEntityThemesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityThemes
     */
    readonly id: string;

    /**
     *
     * @type {JsonApiThemeInDocument}
     * @memberof EntitiesApiUpdateEntityThemes
     */
    readonly jsonApiThemeInDocument: JsonApiThemeInDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityThemes
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityUserGroups operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityUserGroupsRequest
 */
export interface EntitiesApiUpdateEntityUserGroupsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityUserGroups
     */
    readonly id: string;

    /**
     *
     * @type {JsonApiUserGroupInDocument}
     * @memberof EntitiesApiUpdateEntityUserGroups
     */
    readonly jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityUserGroups
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'parents' | 'ALL'>}
     * @memberof EntitiesApiUpdateEntityUserGroups
     */
    readonly include?: Array<"userGroups" | "parents" | "ALL">;
}

/**
 * Request parameters for updateEntityUserSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityUserSettingsRequest
 */
export interface EntitiesApiUpdateEntityUserSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityUserSettings
     */
    readonly userId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityUserSettings
     */
    readonly id: string;

    /**
     *
     * @type {JsonApiUserSettingInDocument}
     * @memberof EntitiesApiUpdateEntityUserSettings
     */
    readonly jsonApiUserSettingInDocument: JsonApiUserSettingInDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityUserSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityUsers operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityUsersRequest
 */
export interface EntitiesApiUpdateEntityUsersRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityUsers
     */
    readonly id: string;

    /**
     *
     * @type {JsonApiUserInDocument}
     * @memberof EntitiesApiUpdateEntityUsers
     */
    readonly jsonApiUserInDocument: JsonApiUserInDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityUsers
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'ALL'>}
     * @memberof EntitiesApiUpdateEntityUsers
     */
    readonly include?: Array<"userGroups" | "ALL">;
}

/**
 * Request parameters for updateEntityVisualizationObjects operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityVisualizationObjectsRequest
 */
export interface EntitiesApiUpdateEntityVisualizationObjectsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityVisualizationObjects
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityVisualizationObjects
     */
    readonly objectId: string;

    /**
     *
     * @type {JsonApiVisualizationObjectInDocument}
     * @memberof EntitiesApiUpdateEntityVisualizationObjects
     */
    readonly jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityVisualizationObjects
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>}
     * @memberof EntitiesApiUpdateEntityVisualizationObjects
     */
    readonly include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
}

/**
 * Request parameters for updateEntityWorkspaceDataFilters operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityWorkspaceDataFiltersRequest
 */
export interface EntitiesApiUpdateEntityWorkspaceDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityWorkspaceDataFilters
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityWorkspaceDataFilters
     */
    readonly objectId: string;

    /**
     *
     * @type {JsonApiWorkspaceDataFilterInDocument}
     * @memberof EntitiesApiUpdateEntityWorkspaceDataFilters
     */
    readonly jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityWorkspaceDataFilters
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>}
     * @memberof EntitiesApiUpdateEntityWorkspaceDataFilters
     */
    readonly include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
}

/**
 * Request parameters for updateEntityWorkspaceSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityWorkspaceSettingsRequest
 */
export interface EntitiesApiUpdateEntityWorkspaceSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityWorkspaceSettings
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityWorkspaceSettings
     */
    readonly objectId: string;

    /**
     *
     * @type {JsonApiWorkspaceSettingInDocument}
     * @memberof EntitiesApiUpdateEntityWorkspaceSettings
     */
    readonly jsonApiWorkspaceSettingInDocument: JsonApiWorkspaceSettingInDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityWorkspaceSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityWorkspaces operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityWorkspacesRequest
 */
export interface EntitiesApiUpdateEntityWorkspacesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityWorkspaces
     */
    readonly id: string;

    /**
     *
     * @type {JsonApiWorkspaceInDocument}
     * @memberof EntitiesApiUpdateEntityWorkspaces
     */
    readonly jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;

    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityWorkspaces
     */
    readonly filter?: string;

    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaces' | 'parent' | 'ALL'>}
     * @memberof EntitiesApiUpdateEntityWorkspaces
     */
    readonly include?: Array<"workspaces" | "parent" | "ALL">;
}

/**
 * EntitiesApi - object-oriented interface
 * @export
 * @class EntitiesApi
 * @extends {BaseAPI}
 */
export class EntitiesApi extends BaseAPI implements EntitiesApiInterface {
    /**
     *
     * @param {EntitiesApiCreateEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public createEntityAnalyticalDashboards(
        requestParameters: EntitiesApiCreateEntityAnalyticalDashboardsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .createEntityAnalyticalDashboards(
                requestParameters.workspaceId,
                requestParameters.jsonApiAnalyticalDashboardInDocument,
                requestParameters.include,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiCreateEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public createEntityApiTokens(
        requestParameters: EntitiesApiCreateEntityApiTokensRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .createEntityApiTokens(
                requestParameters.userId,
                requestParameters.jsonApiApiTokenInDocument,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiCreateEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public createEntityColorPalettes(
        requestParameters: EntitiesApiCreateEntityColorPalettesRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .createEntityColorPalettes(requestParameters.jsonApiColorPaletteInDocument, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiCreateEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public createEntityCspDirectives(
        requestParameters: EntitiesApiCreateEntityCspDirectivesRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .createEntityCspDirectives(requestParameters.jsonApiCspDirectiveInDocument, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiCreateEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public createEntityCustomApplicationSettings(
        requestParameters: EntitiesApiCreateEntityCustomApplicationSettingsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .createEntityCustomApplicationSettings(
                requestParameters.workspaceId,
                requestParameters.jsonApiCustomApplicationSettingInDocument,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiCreateEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public createEntityDashboardPlugins(
        requestParameters: EntitiesApiCreateEntityDashboardPluginsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .createEntityDashboardPlugins(
                requestParameters.workspaceId,
                requestParameters.jsonApiDashboardPluginInDocument,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiCreateEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public createEntityDataSources(
        requestParameters: EntitiesApiCreateEntityDataSourcesRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .createEntityDataSources(requestParameters.jsonApiDataSourceInDocument, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiCreateEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public createEntityFilterContexts(
        requestParameters: EntitiesApiCreateEntityFilterContextsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .createEntityFilterContexts(
                requestParameters.workspaceId,
                requestParameters.jsonApiFilterContextInDocument,
                requestParameters.include,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiCreateEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public createEntityMetrics(
        requestParameters: EntitiesApiCreateEntityMetricsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .createEntityMetrics(
                requestParameters.workspaceId,
                requestParameters.jsonApiMetricInDocument,
                requestParameters.include,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiCreateEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public createEntityOrganizationSettings(
        requestParameters: EntitiesApiCreateEntityOrganizationSettingsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .createEntityOrganizationSettings(requestParameters.jsonApiOrganizationSettingInDocument, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiCreateEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public createEntityThemes(
        requestParameters: EntitiesApiCreateEntityThemesRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .createEntityThemes(requestParameters.jsonApiThemeInDocument, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiCreateEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public createEntityUserGroups(
        requestParameters: EntitiesApiCreateEntityUserGroupsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .createEntityUserGroups(
                requestParameters.jsonApiUserGroupInDocument,
                requestParameters.include,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiCreateEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public createEntityUserSettings(
        requestParameters: EntitiesApiCreateEntityUserSettingsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .createEntityUserSettings(
                requestParameters.userId,
                requestParameters.jsonApiUserSettingInDocument,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiCreateEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public createEntityUsers(
        requestParameters: EntitiesApiCreateEntityUsersRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .createEntityUsers(requestParameters.jsonApiUserInDocument, requestParameters.include, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiCreateEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public createEntityVisualizationObjects(
        requestParameters: EntitiesApiCreateEntityVisualizationObjectsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .createEntityVisualizationObjects(
                requestParameters.workspaceId,
                requestParameters.jsonApiVisualizationObjectInDocument,
                requestParameters.include,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiCreateEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public createEntityWorkspaceDataFilters(
        requestParameters: EntitiesApiCreateEntityWorkspaceDataFiltersRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .createEntityWorkspaceDataFilters(
                requestParameters.workspaceId,
                requestParameters.jsonApiWorkspaceDataFilterInDocument,
                requestParameters.include,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiCreateEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public createEntityWorkspaceSettings(
        requestParameters: EntitiesApiCreateEntityWorkspaceSettingsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .createEntityWorkspaceSettings(
                requestParameters.workspaceId,
                requestParameters.jsonApiWorkspaceSettingInDocument,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiCreateEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public createEntityWorkspaces(
        requestParameters: EntitiesApiCreateEntityWorkspacesRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .createEntityWorkspaces(
                requestParameters.jsonApiWorkspaceInDocument,
                requestParameters.include,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiDeleteEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public deleteEntityAnalyticalDashboards(
        requestParameters: EntitiesApiDeleteEntityAnalyticalDashboardsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .deleteEntityAnalyticalDashboards(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.filter,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiDeleteEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public deleteEntityApiTokens(
        requestParameters: EntitiesApiDeleteEntityApiTokensRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .deleteEntityApiTokens(
                requestParameters.userId,
                requestParameters.id,
                requestParameters.filter,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiDeleteEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public deleteEntityColorPalettes(
        requestParameters: EntitiesApiDeleteEntityColorPalettesRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .deleteEntityColorPalettes(requestParameters.id, requestParameters.filter, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiDeleteEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public deleteEntityCspDirectives(
        requestParameters: EntitiesApiDeleteEntityCspDirectivesRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .deleteEntityCspDirectives(requestParameters.id, requestParameters.filter, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiDeleteEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public deleteEntityCustomApplicationSettings(
        requestParameters: EntitiesApiDeleteEntityCustomApplicationSettingsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .deleteEntityCustomApplicationSettings(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.filter,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiDeleteEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public deleteEntityDashboardPlugins(
        requestParameters: EntitiesApiDeleteEntityDashboardPluginsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .deleteEntityDashboardPlugins(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.filter,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiDeleteEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public deleteEntityDataSources(
        requestParameters: EntitiesApiDeleteEntityDataSourcesRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .deleteEntityDataSources(requestParameters.id, requestParameters.filter, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiDeleteEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public deleteEntityFilterContexts(
        requestParameters: EntitiesApiDeleteEntityFilterContextsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .deleteEntityFilterContexts(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.filter,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiDeleteEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public deleteEntityMetrics(
        requestParameters: EntitiesApiDeleteEntityMetricsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .deleteEntityMetrics(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.filter,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiDeleteEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public deleteEntityOrganizationSettings(
        requestParameters: EntitiesApiDeleteEntityOrganizationSettingsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .deleteEntityOrganizationSettings(requestParameters.id, requestParameters.filter, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiDeleteEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public deleteEntityThemes(
        requestParameters: EntitiesApiDeleteEntityThemesRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .deleteEntityThemes(requestParameters.id, requestParameters.filter, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiDeleteEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public deleteEntityUserGroups(
        requestParameters: EntitiesApiDeleteEntityUserGroupsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .deleteEntityUserGroups(requestParameters.id, requestParameters.filter, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiDeleteEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public deleteEntityUserSettings(
        requestParameters: EntitiesApiDeleteEntityUserSettingsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .deleteEntityUserSettings(
                requestParameters.userId,
                requestParameters.id,
                requestParameters.filter,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiDeleteEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public deleteEntityUsers(
        requestParameters: EntitiesApiDeleteEntityUsersRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .deleteEntityUsers(requestParameters.id, requestParameters.filter, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiDeleteEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public deleteEntityVisualizationObjects(
        requestParameters: EntitiesApiDeleteEntityVisualizationObjectsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .deleteEntityVisualizationObjects(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.filter,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiDeleteEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public deleteEntityWorkspaceDataFilters(
        requestParameters: EntitiesApiDeleteEntityWorkspaceDataFiltersRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .deleteEntityWorkspaceDataFilters(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.filter,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiDeleteEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public deleteEntityWorkspaceSettings(
        requestParameters: EntitiesApiDeleteEntityWorkspaceSettingsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .deleteEntityWorkspaceSettings(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.filter,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiDeleteEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public deleteEntityWorkspaces(
        requestParameters: EntitiesApiDeleteEntityWorkspacesRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .deleteEntityWorkspaces(requestParameters.id, requestParameters.filter, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetAllEntitiesAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getAllEntitiesAnalyticalDashboards(
        requestParameters: EntitiesApiGetAllEntitiesAnalyticalDashboardsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesAnalyticalDashboards(
                requestParameters.workspaceId,
                requestParameters.origin,
                requestParameters.filter,
                requestParameters.include,
                requestParameters.page,
                requestParameters.size,
                requestParameters.sort,
                requestParameters.xGDCVALIDATERELATIONS,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary List all api tokens for a user
     * @param {EntitiesApiGetAllEntitiesApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getAllEntitiesApiTokens(
        requestParameters: EntitiesApiGetAllEntitiesApiTokensRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesApiTokens(
                requestParameters.userId,
                requestParameters.filter,
                requestParameters.page,
                requestParameters.size,
                requestParameters.sort,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetAllEntitiesAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getAllEntitiesAttributes(
        requestParameters: EntitiesApiGetAllEntitiesAttributesRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesAttributes(
                requestParameters.workspaceId,
                requestParameters.origin,
                requestParameters.filter,
                requestParameters.include,
                requestParameters.page,
                requestParameters.size,
                requestParameters.sort,
                requestParameters.xGDCVALIDATERELATIONS,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetAllEntitiesColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getAllEntitiesColorPalettes(
        requestParameters: EntitiesApiGetAllEntitiesColorPalettesRequest = {},
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesColorPalettes(
                requestParameters.filter,
                requestParameters.page,
                requestParameters.size,
                requestParameters.sort,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetAllEntitiesCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getAllEntitiesCspDirectives(
        requestParameters: EntitiesApiGetAllEntitiesCspDirectivesRequest = {},
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesCspDirectives(
                requestParameters.filter,
                requestParameters.page,
                requestParameters.size,
                requestParameters.sort,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetAllEntitiesCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getAllEntitiesCustomApplicationSettings(
        requestParameters: EntitiesApiGetAllEntitiesCustomApplicationSettingsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesCustomApplicationSettings(
                requestParameters.workspaceId,
                requestParameters.origin,
                requestParameters.filter,
                requestParameters.page,
                requestParameters.size,
                requestParameters.sort,
                requestParameters.xGDCVALIDATERELATIONS,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetAllEntitiesDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getAllEntitiesDashboardPlugins(
        requestParameters: EntitiesApiGetAllEntitiesDashboardPluginsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesDashboardPlugins(
                requestParameters.workspaceId,
                requestParameters.origin,
                requestParameters.filter,
                requestParameters.page,
                requestParameters.size,
                requestParameters.sort,
                requestParameters.xGDCVALIDATERELATIONS,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetAllEntitiesDataSourceIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getAllEntitiesDataSourceIdentifiers(
        requestParameters: EntitiesApiGetAllEntitiesDataSourceIdentifiersRequest = {},
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesDataSourceIdentifiers(
                requestParameters.filter,
                requestParameters.page,
                requestParameters.size,
                requestParameters.sort,
                requestParameters.metaInclude,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetAllEntitiesDataSourceTablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getAllEntitiesDataSourceTables(
        requestParameters: EntitiesApiGetAllEntitiesDataSourceTablesRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesDataSourceTables(
                requestParameters.dataSourceId,
                requestParameters.filter,
                requestParameters.page,
                requestParameters.size,
                requestParameters.sort,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetAllEntitiesDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getAllEntitiesDataSources(
        requestParameters: EntitiesApiGetAllEntitiesDataSourcesRequest = {},
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesDataSources(
                requestParameters.filter,
                requestParameters.page,
                requestParameters.size,
                requestParameters.sort,
                requestParameters.metaInclude,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetAllEntitiesDatasetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getAllEntitiesDatasets(
        requestParameters: EntitiesApiGetAllEntitiesDatasetsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesDatasets(
                requestParameters.workspaceId,
                requestParameters.origin,
                requestParameters.filter,
                requestParameters.include,
                requestParameters.page,
                requestParameters.size,
                requestParameters.sort,
                requestParameters.xGDCVALIDATERELATIONS,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetAllEntitiesEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getAllEntitiesEntitlements(
        requestParameters: EntitiesApiGetAllEntitiesEntitlementsRequest = {},
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesEntitlements(
                requestParameters.filter,
                requestParameters.page,
                requestParameters.size,
                requestParameters.sort,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetAllEntitiesFactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getAllEntitiesFacts(
        requestParameters: EntitiesApiGetAllEntitiesFactsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesFacts(
                requestParameters.workspaceId,
                requestParameters.origin,
                requestParameters.filter,
                requestParameters.include,
                requestParameters.page,
                requestParameters.size,
                requestParameters.sort,
                requestParameters.xGDCVALIDATERELATIONS,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetAllEntitiesFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getAllEntitiesFilterContexts(
        requestParameters: EntitiesApiGetAllEntitiesFilterContextsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesFilterContexts(
                requestParameters.workspaceId,
                requestParameters.origin,
                requestParameters.filter,
                requestParameters.include,
                requestParameters.page,
                requestParameters.size,
                requestParameters.sort,
                requestParameters.xGDCVALIDATERELATIONS,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetAllEntitiesLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getAllEntitiesLabels(
        requestParameters: EntitiesApiGetAllEntitiesLabelsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesLabels(
                requestParameters.workspaceId,
                requestParameters.origin,
                requestParameters.filter,
                requestParameters.include,
                requestParameters.page,
                requestParameters.size,
                requestParameters.sort,
                requestParameters.xGDCVALIDATERELATIONS,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetAllEntitiesMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getAllEntitiesMetrics(
        requestParameters: EntitiesApiGetAllEntitiesMetricsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesMetrics(
                requestParameters.workspaceId,
                requestParameters.origin,
                requestParameters.filter,
                requestParameters.include,
                requestParameters.page,
                requestParameters.size,
                requestParameters.sort,
                requestParameters.xGDCVALIDATERELATIONS,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetAllEntitiesOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getAllEntitiesOrganizationSettings(
        requestParameters: EntitiesApiGetAllEntitiesOrganizationSettingsRequest = {},
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesOrganizationSettings(
                requestParameters.filter,
                requestParameters.page,
                requestParameters.size,
                requestParameters.sort,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetAllEntitiesThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getAllEntitiesThemes(
        requestParameters: EntitiesApiGetAllEntitiesThemesRequest = {},
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesThemes(
                requestParameters.filter,
                requestParameters.page,
                requestParameters.size,
                requestParameters.sort,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetAllEntitiesUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getAllEntitiesUserGroups(
        requestParameters: EntitiesApiGetAllEntitiesUserGroupsRequest = {},
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesUserGroups(
                requestParameters.filter,
                requestParameters.include,
                requestParameters.page,
                requestParameters.size,
                requestParameters.sort,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary List all settings for a user
     * @param {EntitiesApiGetAllEntitiesUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getAllEntitiesUserSettings(
        requestParameters: EntitiesApiGetAllEntitiesUserSettingsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesUserSettings(
                requestParameters.userId,
                requestParameters.filter,
                requestParameters.page,
                requestParameters.size,
                requestParameters.sort,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetAllEntitiesUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getAllEntitiesUsers(
        requestParameters: EntitiesApiGetAllEntitiesUsersRequest = {},
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesUsers(
                requestParameters.filter,
                requestParameters.include,
                requestParameters.page,
                requestParameters.size,
                requestParameters.sort,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetAllEntitiesVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getAllEntitiesVisualizationObjects(
        requestParameters: EntitiesApiGetAllEntitiesVisualizationObjectsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesVisualizationObjects(
                requestParameters.workspaceId,
                requestParameters.origin,
                requestParameters.filter,
                requestParameters.include,
                requestParameters.page,
                requestParameters.size,
                requestParameters.sort,
                requestParameters.xGDCVALIDATERELATIONS,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetAllEntitiesWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getAllEntitiesWorkspaceDataFilterSettings(
        requestParameters: EntitiesApiGetAllEntitiesWorkspaceDataFilterSettingsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesWorkspaceDataFilterSettings(
                requestParameters.workspaceId,
                requestParameters.origin,
                requestParameters.filter,
                requestParameters.include,
                requestParameters.page,
                requestParameters.size,
                requestParameters.sort,
                requestParameters.xGDCVALIDATERELATIONS,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetAllEntitiesWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getAllEntitiesWorkspaceDataFilters(
        requestParameters: EntitiesApiGetAllEntitiesWorkspaceDataFiltersRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesWorkspaceDataFilters(
                requestParameters.workspaceId,
                requestParameters.origin,
                requestParameters.filter,
                requestParameters.include,
                requestParameters.page,
                requestParameters.size,
                requestParameters.sort,
                requestParameters.xGDCVALIDATERELATIONS,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetAllEntitiesWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getAllEntitiesWorkspaceSettings(
        requestParameters: EntitiesApiGetAllEntitiesWorkspaceSettingsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesWorkspaceSettings(
                requestParameters.workspaceId,
                requestParameters.origin,
                requestParameters.filter,
                requestParameters.page,
                requestParameters.size,
                requestParameters.sort,
                requestParameters.xGDCVALIDATERELATIONS,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetAllEntitiesWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getAllEntitiesWorkspaces(
        requestParameters: EntitiesApiGetAllEntitiesWorkspacesRequest = {},
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesWorkspaces(
                requestParameters.filter,
                requestParameters.include,
                requestParameters.page,
                requestParameters.size,
                requestParameters.sort,
                requestParameters.metaInclude,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves links for all options for different configurations.
     * @summary Links for all configuration options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getAllOptions(options?: AxiosRequestConfig) {
        return EntitiesApiFp(this.configuration)
            .getAllOptions(options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of all supported data sources along with information about the used drivers.
     * @summary Get all available data source drivers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getDataSourceDrivers(options?: AxiosRequestConfig) {
        return EntitiesApiFp(this.configuration)
            .getDataSourceDrivers(options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getEntityAnalyticalDashboards(
        requestParameters: EntitiesApiGetEntityAnalyticalDashboardsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getEntityAnalyticalDashboards(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.filter,
                requestParameters.include,
                requestParameters.xGDCVALIDATERELATIONS,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getEntityApiTokens(
        requestParameters: EntitiesApiGetEntityApiTokensRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getEntityApiTokens(
                requestParameters.userId,
                requestParameters.id,
                requestParameters.filter,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetEntityAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getEntityAttributes(
        requestParameters: EntitiesApiGetEntityAttributesRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getEntityAttributes(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.filter,
                requestParameters.include,
                requestParameters.xGDCVALIDATERELATIONS,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getEntityColorPalettes(
        requestParameters: EntitiesApiGetEntityColorPalettesRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getEntityColorPalettes(requestParameters.id, requestParameters.filter, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getEntityCookieSecurityConfigurations(
        requestParameters: EntitiesApiGetEntityCookieSecurityConfigurationsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getEntityCookieSecurityConfigurations(requestParameters.id, requestParameters.filter, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getEntityCspDirectives(
        requestParameters: EntitiesApiGetEntityCspDirectivesRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getEntityCspDirectives(requestParameters.id, requestParameters.filter, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getEntityCustomApplicationSettings(
        requestParameters: EntitiesApiGetEntityCustomApplicationSettingsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getEntityCustomApplicationSettings(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.filter,
                requestParameters.xGDCVALIDATERELATIONS,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getEntityDashboardPlugins(
        requestParameters: EntitiesApiGetEntityDashboardPluginsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getEntityDashboardPlugins(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.filter,
                requestParameters.xGDCVALIDATERELATIONS,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetEntityDataSourceIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getEntityDataSourceIdentifiers(
        requestParameters: EntitiesApiGetEntityDataSourceIdentifiersRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getEntityDataSourceIdentifiers(
                requestParameters.id,
                requestParameters.filter,
                requestParameters.metaInclude,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetEntityDataSourceTablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getEntityDataSourceTables(
        requestParameters: EntitiesApiGetEntityDataSourceTablesRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getEntityDataSourceTables(
                requestParameters.dataSourceId,
                requestParameters.id,
                requestParameters.filter,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getEntityDataSources(
        requestParameters: EntitiesApiGetEntityDataSourcesRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getEntityDataSources(
                requestParameters.id,
                requestParameters.filter,
                requestParameters.metaInclude,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetEntityDatasetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getEntityDatasets(
        requestParameters: EntitiesApiGetEntityDatasetsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getEntityDatasets(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.filter,
                requestParameters.include,
                requestParameters.xGDCVALIDATERELATIONS,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetEntityEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getEntityEntitlements(
        requestParameters: EntitiesApiGetEntityEntitlementsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getEntityEntitlements(requestParameters.id, requestParameters.filter, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetEntityFactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getEntityFacts(requestParameters: EntitiesApiGetEntityFactsRequest, options?: AxiosRequestConfig) {
        return EntitiesApiFp(this.configuration)
            .getEntityFacts(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.filter,
                requestParameters.include,
                requestParameters.xGDCVALIDATERELATIONS,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getEntityFilterContexts(
        requestParameters: EntitiesApiGetEntityFilterContextsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getEntityFilterContexts(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.filter,
                requestParameters.include,
                requestParameters.xGDCVALIDATERELATIONS,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetEntityLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getEntityLabels(
        requestParameters: EntitiesApiGetEntityLabelsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getEntityLabels(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.filter,
                requestParameters.include,
                requestParameters.xGDCVALIDATERELATIONS,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getEntityMetrics(
        requestParameters: EntitiesApiGetEntityMetricsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getEntityMetrics(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.filter,
                requestParameters.include,
                requestParameters.xGDCVALIDATERELATIONS,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getEntityOrganizationSettings(
        requestParameters: EntitiesApiGetEntityOrganizationSettingsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getEntityOrganizationSettings(requestParameters.id, requestParameters.filter, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getEntityOrganizations(
        requestParameters: EntitiesApiGetEntityOrganizationsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getEntityOrganizations(
                requestParameters.id,
                requestParameters.filter,
                requestParameters.include,
                requestParameters.metaInclude,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getEntityThemes(
        requestParameters: EntitiesApiGetEntityThemesRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getEntityThemes(requestParameters.id, requestParameters.filter, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getEntityUserGroups(
        requestParameters: EntitiesApiGetEntityUserGroupsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getEntityUserGroups(
                requestParameters.id,
                requestParameters.filter,
                requestParameters.include,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getEntityUserSettings(
        requestParameters: EntitiesApiGetEntityUserSettingsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getEntityUserSettings(
                requestParameters.userId,
                requestParameters.id,
                requestParameters.filter,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getEntityUsers(requestParameters: EntitiesApiGetEntityUsersRequest, options?: AxiosRequestConfig) {
        return EntitiesApiFp(this.configuration)
            .getEntityUsers(
                requestParameters.id,
                requestParameters.filter,
                requestParameters.include,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getEntityVisualizationObjects(
        requestParameters: EntitiesApiGetEntityVisualizationObjectsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getEntityVisualizationObjects(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.filter,
                requestParameters.include,
                requestParameters.xGDCVALIDATERELATIONS,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getEntityWorkspaceDataFilterSettings(
        requestParameters: EntitiesApiGetEntityWorkspaceDataFilterSettingsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getEntityWorkspaceDataFilterSettings(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.filter,
                requestParameters.include,
                requestParameters.xGDCVALIDATERELATIONS,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getEntityWorkspaceDataFilters(
        requestParameters: EntitiesApiGetEntityWorkspaceDataFiltersRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getEntityWorkspaceDataFilters(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.filter,
                requestParameters.include,
                requestParameters.xGDCVALIDATERELATIONS,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getEntityWorkspaceSettings(
        requestParameters: EntitiesApiGetEntityWorkspaceSettingsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getEntityWorkspaceSettings(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.filter,
                requestParameters.xGDCVALIDATERELATIONS,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiGetEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getEntityWorkspaces(
        requestParameters: EntitiesApiGetEntityWorkspacesRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getEntityWorkspaces(
                requestParameters.id,
                requestParameters.filter,
                requestParameters.include,
                requestParameters.metaInclude,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a basic information about organization.
     * @summary Get current organization info
     * @param {EntitiesApiGetOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public getOrganization(
        requestParameters: EntitiesApiGetOrganizationRequest = {},
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .getOrganization(requestParameters.metaInclude, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiPatchEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public patchEntityAnalyticalDashboards(
        requestParameters: EntitiesApiPatchEntityAnalyticalDashboardsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .patchEntityAnalyticalDashboards(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.jsonApiAnalyticalDashboardPatchDocument,
                requestParameters.filter,
                requestParameters.include,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiPatchEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public patchEntityColorPalettes(
        requestParameters: EntitiesApiPatchEntityColorPalettesRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .patchEntityColorPalettes(
                requestParameters.id,
                requestParameters.jsonApiColorPalettePatchDocument,
                requestParameters.filter,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiPatchEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public patchEntityCookieSecurityConfigurations(
        requestParameters: EntitiesApiPatchEntityCookieSecurityConfigurationsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .patchEntityCookieSecurityConfigurations(
                requestParameters.id,
                requestParameters.jsonApiCookieSecurityConfigurationPatchDocument,
                requestParameters.filter,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiPatchEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public patchEntityCspDirectives(
        requestParameters: EntitiesApiPatchEntityCspDirectivesRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .patchEntityCspDirectives(
                requestParameters.id,
                requestParameters.jsonApiCspDirectivePatchDocument,
                requestParameters.filter,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiPatchEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public patchEntityCustomApplicationSettings(
        requestParameters: EntitiesApiPatchEntityCustomApplicationSettingsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .patchEntityCustomApplicationSettings(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.jsonApiCustomApplicationSettingPatchDocument,
                requestParameters.filter,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiPatchEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public patchEntityDashboardPlugins(
        requestParameters: EntitiesApiPatchEntityDashboardPluginsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .patchEntityDashboardPlugins(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.jsonApiDashboardPluginPatchDocument,
                requestParameters.filter,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiPatchEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public patchEntityDataSources(
        requestParameters: EntitiesApiPatchEntityDataSourcesRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .patchEntityDataSources(
                requestParameters.id,
                requestParameters.jsonApiDataSourcePatchDocument,
                requestParameters.filter,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiPatchEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public patchEntityFilterContexts(
        requestParameters: EntitiesApiPatchEntityFilterContextsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .patchEntityFilterContexts(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.jsonApiFilterContextPatchDocument,
                requestParameters.filter,
                requestParameters.include,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiPatchEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public patchEntityMetrics(
        requestParameters: EntitiesApiPatchEntityMetricsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .patchEntityMetrics(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.jsonApiMetricPatchDocument,
                requestParameters.filter,
                requestParameters.include,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiPatchEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public patchEntityOrganizationSettings(
        requestParameters: EntitiesApiPatchEntityOrganizationSettingsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .patchEntityOrganizationSettings(
                requestParameters.id,
                requestParameters.jsonApiOrganizationSettingPatchDocument,
                requestParameters.filter,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiPatchEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public patchEntityOrganizations(
        requestParameters: EntitiesApiPatchEntityOrganizationsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .patchEntityOrganizations(
                requestParameters.id,
                requestParameters.jsonApiOrganizationPatchDocument,
                requestParameters.filter,
                requestParameters.include,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiPatchEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public patchEntityThemes(
        requestParameters: EntitiesApiPatchEntityThemesRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .patchEntityThemes(
                requestParameters.id,
                requestParameters.jsonApiThemePatchDocument,
                requestParameters.filter,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiPatchEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public patchEntityUserGroups(
        requestParameters: EntitiesApiPatchEntityUserGroupsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .patchEntityUserGroups(
                requestParameters.id,
                requestParameters.jsonApiUserGroupPatchDocument,
                requestParameters.filter,
                requestParameters.include,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiPatchEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public patchEntityUsers(
        requestParameters: EntitiesApiPatchEntityUsersRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .patchEntityUsers(
                requestParameters.id,
                requestParameters.jsonApiUserPatchDocument,
                requestParameters.filter,
                requestParameters.include,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiPatchEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public patchEntityVisualizationObjects(
        requestParameters: EntitiesApiPatchEntityVisualizationObjectsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .patchEntityVisualizationObjects(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.jsonApiVisualizationObjectPatchDocument,
                requestParameters.filter,
                requestParameters.include,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiPatchEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public patchEntityWorkspaceDataFilters(
        requestParameters: EntitiesApiPatchEntityWorkspaceDataFiltersRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .patchEntityWorkspaceDataFilters(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.jsonApiWorkspaceDataFilterPatchDocument,
                requestParameters.filter,
                requestParameters.include,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiPatchEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public patchEntityWorkspaceSettings(
        requestParameters: EntitiesApiPatchEntityWorkspaceSettingsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .patchEntityWorkspaceSettings(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.jsonApiWorkspaceSettingPatchDocument,
                requestParameters.filter,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiPatchEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public patchEntityWorkspaces(
        requestParameters: EntitiesApiPatchEntityWorkspacesRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .patchEntityWorkspaces(
                requestParameters.id,
                requestParameters.jsonApiWorkspacePatchDocument,
                requestParameters.filter,
                requestParameters.include,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiUpdateEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public updateEntityAnalyticalDashboards(
        requestParameters: EntitiesApiUpdateEntityAnalyticalDashboardsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .updateEntityAnalyticalDashboards(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.jsonApiAnalyticalDashboardInDocument,
                requestParameters.filter,
                requestParameters.include,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiUpdateEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public updateEntityApiTokens(
        requestParameters: EntitiesApiUpdateEntityApiTokensRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .updateEntityApiTokens(
                requestParameters.userId,
                requestParameters.id,
                requestParameters.jsonApiApiTokenInDocument,
                requestParameters.filter,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiUpdateEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public updateEntityColorPalettes(
        requestParameters: EntitiesApiUpdateEntityColorPalettesRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .updateEntityColorPalettes(
                requestParameters.id,
                requestParameters.jsonApiColorPaletteInDocument,
                requestParameters.filter,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiUpdateEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public updateEntityCookieSecurityConfigurations(
        requestParameters: EntitiesApiUpdateEntityCookieSecurityConfigurationsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .updateEntityCookieSecurityConfigurations(
                requestParameters.id,
                requestParameters.jsonApiCookieSecurityConfigurationInDocument,
                requestParameters.filter,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiUpdateEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public updateEntityCspDirectives(
        requestParameters: EntitiesApiUpdateEntityCspDirectivesRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .updateEntityCspDirectives(
                requestParameters.id,
                requestParameters.jsonApiCspDirectiveInDocument,
                requestParameters.filter,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiUpdateEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public updateEntityCustomApplicationSettings(
        requestParameters: EntitiesApiUpdateEntityCustomApplicationSettingsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .updateEntityCustomApplicationSettings(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.jsonApiCustomApplicationSettingInDocument,
                requestParameters.filter,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiUpdateEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public updateEntityDashboardPlugins(
        requestParameters: EntitiesApiUpdateEntityDashboardPluginsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .updateEntityDashboardPlugins(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.jsonApiDashboardPluginInDocument,
                requestParameters.filter,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiUpdateEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public updateEntityDataSources(
        requestParameters: EntitiesApiUpdateEntityDataSourcesRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .updateEntityDataSources(
                requestParameters.id,
                requestParameters.jsonApiDataSourceInDocument,
                requestParameters.filter,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiUpdateEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public updateEntityFilterContexts(
        requestParameters: EntitiesApiUpdateEntityFilterContextsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .updateEntityFilterContexts(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.jsonApiFilterContextInDocument,
                requestParameters.filter,
                requestParameters.include,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiUpdateEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public updateEntityMetrics(
        requestParameters: EntitiesApiUpdateEntityMetricsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .updateEntityMetrics(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.jsonApiMetricInDocument,
                requestParameters.filter,
                requestParameters.include,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiUpdateEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public updateEntityOrganizationSettings(
        requestParameters: EntitiesApiUpdateEntityOrganizationSettingsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .updateEntityOrganizationSettings(
                requestParameters.id,
                requestParameters.jsonApiOrganizationSettingInDocument,
                requestParameters.filter,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiUpdateEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public updateEntityOrganizations(
        requestParameters: EntitiesApiUpdateEntityOrganizationsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .updateEntityOrganizations(
                requestParameters.id,
                requestParameters.jsonApiOrganizationInDocument,
                requestParameters.filter,
                requestParameters.include,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiUpdateEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public updateEntityThemes(
        requestParameters: EntitiesApiUpdateEntityThemesRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .updateEntityThemes(
                requestParameters.id,
                requestParameters.jsonApiThemeInDocument,
                requestParameters.filter,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiUpdateEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public updateEntityUserGroups(
        requestParameters: EntitiesApiUpdateEntityUserGroupsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .updateEntityUserGroups(
                requestParameters.id,
                requestParameters.jsonApiUserGroupInDocument,
                requestParameters.filter,
                requestParameters.include,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiUpdateEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public updateEntityUserSettings(
        requestParameters: EntitiesApiUpdateEntityUserSettingsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .updateEntityUserSettings(
                requestParameters.userId,
                requestParameters.id,
                requestParameters.jsonApiUserSettingInDocument,
                requestParameters.filter,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiUpdateEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public updateEntityUsers(
        requestParameters: EntitiesApiUpdateEntityUsersRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .updateEntityUsers(
                requestParameters.id,
                requestParameters.jsonApiUserInDocument,
                requestParameters.filter,
                requestParameters.include,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiUpdateEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public updateEntityVisualizationObjects(
        requestParameters: EntitiesApiUpdateEntityVisualizationObjectsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .updateEntityVisualizationObjects(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.jsonApiVisualizationObjectInDocument,
                requestParameters.filter,
                requestParameters.include,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiUpdateEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public updateEntityWorkspaceDataFilters(
        requestParameters: EntitiesApiUpdateEntityWorkspaceDataFiltersRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .updateEntityWorkspaceDataFilters(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.jsonApiWorkspaceDataFilterInDocument,
                requestParameters.filter,
                requestParameters.include,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiUpdateEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public updateEntityWorkspaceSettings(
        requestParameters: EntitiesApiUpdateEntityWorkspaceSettingsRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .updateEntityWorkspaceSettings(
                requestParameters.workspaceId,
                requestParameters.objectId,
                requestParameters.jsonApiWorkspaceSettingInDocument,
                requestParameters.filter,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {EntitiesApiUpdateEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public updateEntityWorkspaces(
        requestParameters: EntitiesApiUpdateEntityWorkspacesRequest,
        options?: AxiosRequestConfig,
    ) {
        return EntitiesApiFp(this.configuration)
            .updateEntityWorkspaces(
                requestParameters.id,
                requestParameters.jsonApiWorkspaceInDocument,
                requestParameters.filter,
                requestParameters.include,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }
}

/**
 * LayoutApi - axios parameter creator
 * @export
 */
export const LayoutApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve current analytics model of the workspace.
         * @summary Get analytics model
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalyticsModel: async (
            workspaceId: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getAnalyticsModel", "workspaceId", workspaceId);
            const localVarPath = `/api/v1/layout/workspaces/{workspaceId}/analyticsModel`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all data sources including related physical model.
         * @summary Get all data sources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSourcesLayout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/layout/dataSources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve current logical model of the workspace in declarative form.
         * @summary Get logical model
         * @param {string} workspaceId
         * @param {boolean} [includeParents]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogicalModel: async (
            workspaceId: string,
            includeParents?: boolean,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getLogicalModel", "workspaceId", workspaceId);
            const localVarPath = `/api/v1/layout/workspaces/{workspaceId}/logicalModel`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includeParents !== undefined) {
                localVarQueryParameter["includeParents"] = includeParents;
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve complete layout of organization, workspaces, user-groups, etc.
         * @summary Get organization layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationLayout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/layout/organization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve complete layout of tables with their columns
         * @summary Get data source physical model layout
         * @param {string} dataSourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPdmLayout: async (
            dataSourceId: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'dataSourceId' is not null or undefined
            assertParamExists("getPdmLayout", "dataSourceId", dataSourceId);
            const localVarPath = `/api/v1/layout/dataSources/{dataSourceId}/physicalModel`.replace(
                `{${"dataSourceId"}}`,
                encodeURIComponent(String(dataSourceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all user-groups eventually with parent group.
         * @summary Get all user groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserGroupsLayout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/layout/userGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all users including authentication properties.
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersLayout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/layout/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all users and user groups with theirs properties.
         * @summary Get all users and user groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersUserGroupsLayout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/layout/usersAndUserGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all workspaces and related workspace data filters (and their settings / values).
         * @summary Get workspace data filters for all workspaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceDataFiltersLayout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/layout/workspaceDataFilters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve current model of the workspace in declarative form.
         * @summary Get workspace layout
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceLayout: async (
            workspaceId: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getWorkspaceLayout", "workspaceId", workspaceId);
            const localVarPath = `/api/v1/layout/workspaces/{workspaceId}`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve current set of permissions of the workspace in a declarative form.
         * @summary Get permissions for the workspace
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspacePermissions: async (
            workspaceId: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getWorkspacePermissions", "workspaceId", workspaceId);
            const localVarPath = `/api/v1/layout/workspaces/{workspaceId}/permissions`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets complete layout of workspaces, their hierarchy, models.
         * @summary Get all workspaces layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspacesLayout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/layout/workspaces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set all data sources including related physical model.
         * @summary Put all data sources
         * @param {DeclarativeDataSources} declarativeDataSources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDataSourcesLayout: async (
            declarativeDataSources: DeclarativeDataSources,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'declarativeDataSources' is not null or undefined
            assertParamExists("putDataSourcesLayout", "declarativeDataSources", declarativeDataSources);
            const localVarPath = `/api/v1/layout/dataSources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof declarativeDataSources !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(declarativeDataSources !== undefined ? declarativeDataSources : {})
                : declarativeDataSources || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Define all user groups with their parents eventually.
         * @summary Put all user groups
         * @param {DeclarativeUserGroups} declarativeUserGroups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserGroupsLayout: async (
            declarativeUserGroups: DeclarativeUserGroups,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'declarativeUserGroups' is not null or undefined
            assertParamExists("putUserGroupsLayout", "declarativeUserGroups", declarativeUserGroups);
            const localVarPath = `/api/v1/layout/userGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof declarativeUserGroups !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(declarativeUserGroups !== undefined ? declarativeUserGroups : {})
                : declarativeUserGroups || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set all users and their authentication properties.
         * @summary Put all users
         * @param {DeclarativeUsers} declarativeUsers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUsersLayout: async (
            declarativeUsers: DeclarativeUsers,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'declarativeUsers' is not null or undefined
            assertParamExists("putUsersLayout", "declarativeUsers", declarativeUsers);
            const localVarPath = `/api/v1/layout/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof declarativeUsers !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(declarativeUsers !== undefined ? declarativeUsers : {})
                : declarativeUsers || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Define all users and user groups with theirs properties.
         * @summary Put all users and user groups
         * @param {DeclarativeUsersUserGroups} declarativeUsersUserGroups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUsersUserGroupsLayout: async (
            declarativeUsersUserGroups: DeclarativeUsersUserGroups,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'declarativeUsersUserGroups' is not null or undefined
            assertParamExists(
                "putUsersUserGroupsLayout",
                "declarativeUsersUserGroups",
                declarativeUsersUserGroups,
            );
            const localVarPath = `/api/v1/layout/usersAndUserGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof declarativeUsersUserGroups !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(declarativeUsersUserGroups !== undefined ? declarativeUsersUserGroups : {})
                : declarativeUsersUserGroups || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set complete layout of workspace, like model, authorization, etc.
         * @summary Set workspace layout
         * @param {string} workspaceId
         * @param {DeclarativeWorkspaceModel} declarativeWorkspaceModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWorkspaceLayout: async (
            workspaceId: string,
            declarativeWorkspaceModel: DeclarativeWorkspaceModel,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("putWorkspaceLayout", "workspaceId", workspaceId);
            // verify required parameter 'declarativeWorkspaceModel' is not null or undefined
            assertParamExists("putWorkspaceLayout", "declarativeWorkspaceModel", declarativeWorkspaceModel);
            const localVarPath = `/api/v1/layout/workspaces/{workspaceId}`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof declarativeWorkspaceModel !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(declarativeWorkspaceModel !== undefined ? declarativeWorkspaceModel : {})
                : declarativeWorkspaceModel || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set effective analytics model of the workspace.
         * @summary Set analytics model
         * @param {string} workspaceId
         * @param {DeclarativeAnalytics} declarativeAnalytics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAnalyticsModel: async (
            workspaceId: string,
            declarativeAnalytics: DeclarativeAnalytics,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("setAnalyticsModel", "workspaceId", workspaceId);
            // verify required parameter 'declarativeAnalytics' is not null or undefined
            assertParamExists("setAnalyticsModel", "declarativeAnalytics", declarativeAnalytics);
            const localVarPath = `/api/v1/layout/workspaces/{workspaceId}/analyticsModel`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof declarativeAnalytics !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(declarativeAnalytics !== undefined ? declarativeAnalytics : {})
                : declarativeAnalytics || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set effective logical model of the workspace.
         * @summary Set logical model
         * @param {string} workspaceId
         * @param {DeclarativeModel} declarativeModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLogicalModel: async (
            workspaceId: string,
            declarativeModel: DeclarativeModel,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("setLogicalModel", "workspaceId", workspaceId);
            // verify required parameter 'declarativeModel' is not null or undefined
            assertParamExists("setLogicalModel", "declarativeModel", declarativeModel);
            const localVarPath = `/api/v1/layout/workspaces/{workspaceId}/logicalModel`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof declarativeModel !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(declarativeModel !== undefined ? declarativeModel : {})
                : declarativeModel || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets complete layout of organization, like workspaces, user-groups, etc.
         * @summary Set organization layout
         * @param {DeclarativeOrganization} declarativeOrganization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOrganizationLayout: async (
            declarativeOrganization: DeclarativeOrganization,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'declarativeOrganization' is not null or undefined
            assertParamExists("setOrganizationLayout", "declarativeOrganization", declarativeOrganization);
            const localVarPath = `/api/v1/layout/organization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof declarativeOrganization !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(declarativeOrganization !== undefined ? declarativeOrganization : {})
                : declarativeOrganization || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets complete layout of tables with their columns under corresponding Data Source.
         * @summary Set data source physical model layout
         * @param {string} dataSourceId
         * @param {DeclarativePdm} declarativePdm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPdmLayout: async (
            dataSourceId: string,
            declarativePdm: DeclarativePdm,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'dataSourceId' is not null or undefined
            assertParamExists("setPdmLayout", "dataSourceId", dataSourceId);
            // verify required parameter 'declarativePdm' is not null or undefined
            assertParamExists("setPdmLayout", "declarativePdm", declarativePdm);
            const localVarPath = `/api/v1/layout/dataSources/{dataSourceId}/physicalModel`.replace(
                `{${"dataSourceId"}}`,
                encodeURIComponent(String(dataSourceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof declarativePdm !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(declarativePdm !== undefined ? declarativePdm : {})
                : declarativePdm || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets workspace data filters in all workspaces in entire organization.
         * @summary Set all workspace data filters
         * @param {DeclarativeWorkspaceDataFilters} declarativeWorkspaceDataFilters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkspaceDataFiltersLayout: async (
            declarativeWorkspaceDataFilters: DeclarativeWorkspaceDataFilters,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'declarativeWorkspaceDataFilters' is not null or undefined
            assertParamExists(
                "setWorkspaceDataFiltersLayout",
                "declarativeWorkspaceDataFilters",
                declarativeWorkspaceDataFilters,
            );
            const localVarPath = `/api/v1/layout/workspaceDataFilters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof declarativeWorkspaceDataFilters !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      declarativeWorkspaceDataFilters !== undefined ? declarativeWorkspaceDataFilters : {},
                  )
                : declarativeWorkspaceDataFilters || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set effective permissions for the workspace
         * @summary Set permissions for the workspace
         * @param {string} workspaceId
         * @param {DeclarativeWorkspacePermissions} declarativeWorkspacePermissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkspacePermissions: async (
            workspaceId: string,
            declarativeWorkspacePermissions: DeclarativeWorkspacePermissions,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("setWorkspacePermissions", "workspaceId", workspaceId);
            // verify required parameter 'declarativeWorkspacePermissions' is not null or undefined
            assertParamExists(
                "setWorkspacePermissions",
                "declarativeWorkspacePermissions",
                declarativeWorkspacePermissions,
            );
            const localVarPath = `/api/v1/layout/workspaces/{workspaceId}/permissions`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof declarativeWorkspacePermissions !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      declarativeWorkspacePermissions !== undefined ? declarativeWorkspacePermissions : {},
                  )
                : declarativeWorkspacePermissions || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets complete layout of workspaces, their hierarchy, models.
         * @summary Set all workspaces layout
         * @param {DeclarativeWorkspaces} declarativeWorkspaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkspacesLayout: async (
            declarativeWorkspaces: DeclarativeWorkspaces,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'declarativeWorkspaces' is not null or undefined
            assertParamExists("setWorkspacesLayout", "declarativeWorkspaces", declarativeWorkspaces);
            const localVarPath = `/api/v1/layout/workspaces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof declarativeWorkspaces !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(declarativeWorkspaces !== undefined ? declarativeWorkspaces : {})
                : declarativeWorkspaces || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * LayoutApi - functional programming interface
 * @export
 */
export const LayoutApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = LayoutApiAxiosParamCreator(configuration);
    return {
        /**
         * Retrieve current analytics model of the workspace.
         * @summary Get analytics model
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnalyticsModel(
            workspaceId: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeAnalytics>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnalyticsModel(workspaceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all data sources including related physical model.
         * @summary Get all data sources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataSourcesLayout(
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeDataSources>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataSourcesLayout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve current logical model of the workspace in declarative form.
         * @summary Get logical model
         * @param {string} workspaceId
         * @param {boolean} [includeParents]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLogicalModel(
            workspaceId: string,
            includeParents?: boolean,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLogicalModel(
                workspaceId,
                includeParents,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve complete layout of organization, workspaces, user-groups, etc.
         * @summary Get organization layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationLayout(
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeOrganization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationLayout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve complete layout of tables with their columns
         * @summary Get data source physical model layout
         * @param {string} dataSourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPdmLayout(
            dataSourceId: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativePdm>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPdmLayout(dataSourceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all user-groups eventually with parent group.
         * @summary Get all user groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserGroupsLayout(
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeUserGroups>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserGroupsLayout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all users including authentication properties.
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersLayout(
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeUsers>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersLayout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all users and user groups with theirs properties.
         * @summary Get all users and user groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersUserGroupsLayout(
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeUsersUserGroups>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersUserGroupsLayout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all workspaces and related workspace data filters (and their settings / values).
         * @summary Get workspace data filters for all workspaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkspaceDataFiltersLayout(
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeWorkspaceDataFilters>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkspaceDataFiltersLayout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve current model of the workspace in declarative form.
         * @summary Get workspace layout
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkspaceLayout(
            workspaceId: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeWorkspaceModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkspaceLayout(
                workspaceId,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve current set of permissions of the workspace in a declarative form.
         * @summary Get permissions for the workspace
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkspacePermissions(
            workspaceId: string,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeWorkspacePermissions>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkspacePermissions(
                workspaceId,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets complete layout of workspaces, their hierarchy, models.
         * @summary Get all workspaces layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkspacesLayout(
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeWorkspaces>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkspacesLayout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set all data sources including related physical model.
         * @summary Put all data sources
         * @param {DeclarativeDataSources} declarativeDataSources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putDataSourcesLayout(
            declarativeDataSources: DeclarativeDataSources,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putDataSourcesLayout(
                declarativeDataSources,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Define all user groups with their parents eventually.
         * @summary Put all user groups
         * @param {DeclarativeUserGroups} declarativeUserGroups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUserGroupsLayout(
            declarativeUserGroups: DeclarativeUserGroups,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUserGroupsLayout(
                declarativeUserGroups,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set all users and their authentication properties.
         * @summary Put all users
         * @param {DeclarativeUsers} declarativeUsers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUsersLayout(
            declarativeUsers: DeclarativeUsers,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUsersLayout(
                declarativeUsers,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Define all users and user groups with theirs properties.
         * @summary Put all users and user groups
         * @param {DeclarativeUsersUserGroups} declarativeUsersUserGroups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUsersUserGroupsLayout(
            declarativeUsersUserGroups: DeclarativeUsersUserGroups,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUsersUserGroupsLayout(
                declarativeUsersUserGroups,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set complete layout of workspace, like model, authorization, etc.
         * @summary Set workspace layout
         * @param {string} workspaceId
         * @param {DeclarativeWorkspaceModel} declarativeWorkspaceModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWorkspaceLayout(
            workspaceId: string,
            declarativeWorkspaceModel: DeclarativeWorkspaceModel,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putWorkspaceLayout(
                workspaceId,
                declarativeWorkspaceModel,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set effective analytics model of the workspace.
         * @summary Set analytics model
         * @param {string} workspaceId
         * @param {DeclarativeAnalytics} declarativeAnalytics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setAnalyticsModel(
            workspaceId: string,
            declarativeAnalytics: DeclarativeAnalytics,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setAnalyticsModel(
                workspaceId,
                declarativeAnalytics,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set effective logical model of the workspace.
         * @summary Set logical model
         * @param {string} workspaceId
         * @param {DeclarativeModel} declarativeModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setLogicalModel(
            workspaceId: string,
            declarativeModel: DeclarativeModel,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setLogicalModel(
                workspaceId,
                declarativeModel,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sets complete layout of organization, like workspaces, user-groups, etc.
         * @summary Set organization layout
         * @param {DeclarativeOrganization} declarativeOrganization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setOrganizationLayout(
            declarativeOrganization: DeclarativeOrganization,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setOrganizationLayout(
                declarativeOrganization,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sets complete layout of tables with their columns under corresponding Data Source.
         * @summary Set data source physical model layout
         * @param {string} dataSourceId
         * @param {DeclarativePdm} declarativePdm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setPdmLayout(
            dataSourceId: string,
            declarativePdm: DeclarativePdm,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setPdmLayout(
                dataSourceId,
                declarativePdm,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sets workspace data filters in all workspaces in entire organization.
         * @summary Set all workspace data filters
         * @param {DeclarativeWorkspaceDataFilters} declarativeWorkspaceDataFilters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setWorkspaceDataFiltersLayout(
            declarativeWorkspaceDataFilters: DeclarativeWorkspaceDataFilters,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setWorkspaceDataFiltersLayout(
                declarativeWorkspaceDataFilters,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set effective permissions for the workspace
         * @summary Set permissions for the workspace
         * @param {string} workspaceId
         * @param {DeclarativeWorkspacePermissions} declarativeWorkspacePermissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setWorkspacePermissions(
            workspaceId: string,
            declarativeWorkspacePermissions: DeclarativeWorkspacePermissions,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setWorkspacePermissions(
                workspaceId,
                declarativeWorkspacePermissions,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sets complete layout of workspaces, their hierarchy, models.
         * @summary Set all workspaces layout
         * @param {DeclarativeWorkspaces} declarativeWorkspaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setWorkspacesLayout(
            declarativeWorkspaces: DeclarativeWorkspaces,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setWorkspacesLayout(
                declarativeWorkspaces,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};

/**
 * LayoutApi - factory interface
 * @export
 */
export const LayoutApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    const localVarFp = LayoutApiFp(configuration);
    return {
        /**
         * Retrieve current analytics model of the workspace.
         * @summary Get analytics model
         * @param {LayoutApiGetAnalyticsModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalyticsModel(
            requestParameters: LayoutApiGetAnalyticsModelRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<DeclarativeAnalytics> {
            return localVarFp
                .getAnalyticsModel(requestParameters.workspaceId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all data sources including related physical model.
         * @summary Get all data sources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSourcesLayout(options?: AxiosRequestConfig): AxiosPromise<DeclarativeDataSources> {
            return localVarFp.getDataSourcesLayout(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve current logical model of the workspace in declarative form.
         * @summary Get logical model
         * @param {LayoutApiGetLogicalModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogicalModel(
            requestParameters: LayoutApiGetLogicalModelRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<DeclarativeModel> {
            return localVarFp
                .getLogicalModel(requestParameters.workspaceId, requestParameters.includeParents, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Retrieve complete layout of organization, workspaces, user-groups, etc.
         * @summary Get organization layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationLayout(options?: AxiosRequestConfig): AxiosPromise<DeclarativeOrganization> {
            return localVarFp.getOrganizationLayout(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve complete layout of tables with their columns
         * @summary Get data source physical model layout
         * @param {LayoutApiGetPdmLayoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPdmLayout(
            requestParameters: LayoutApiGetPdmLayoutRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<DeclarativePdm> {
            return localVarFp
                .getPdmLayout(requestParameters.dataSourceId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all user-groups eventually with parent group.
         * @summary Get all user groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserGroupsLayout(options?: AxiosRequestConfig): AxiosPromise<DeclarativeUserGroups> {
            return localVarFp.getUserGroupsLayout(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all users including authentication properties.
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersLayout(options?: AxiosRequestConfig): AxiosPromise<DeclarativeUsers> {
            return localVarFp.getUsersLayout(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all users and user groups with theirs properties.
         * @summary Get all users and user groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersUserGroupsLayout(options?: AxiosRequestConfig): AxiosPromise<DeclarativeUsersUserGroups> {
            return localVarFp.getUsersUserGroupsLayout(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all workspaces and related workspace data filters (and their settings / values).
         * @summary Get workspace data filters for all workspaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceDataFiltersLayout(
            options?: AxiosRequestConfig,
        ): AxiosPromise<DeclarativeWorkspaceDataFilters> {
            return localVarFp
                .getWorkspaceDataFiltersLayout(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Retrieve current model of the workspace in declarative form.
         * @summary Get workspace layout
         * @param {LayoutApiGetWorkspaceLayoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceLayout(
            requestParameters: LayoutApiGetWorkspaceLayoutRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<DeclarativeWorkspaceModel> {
            return localVarFp
                .getWorkspaceLayout(requestParameters.workspaceId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Retrieve current set of permissions of the workspace in a declarative form.
         * @summary Get permissions for the workspace
         * @param {LayoutApiGetWorkspacePermissionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspacePermissions(
            requestParameters: LayoutApiGetWorkspacePermissionsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<DeclarativeWorkspacePermissions> {
            return localVarFp
                .getWorkspacePermissions(requestParameters.workspaceId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Gets complete layout of workspaces, their hierarchy, models.
         * @summary Get all workspaces layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspacesLayout(options?: AxiosRequestConfig): AxiosPromise<DeclarativeWorkspaces> {
            return localVarFp.getWorkspacesLayout(options).then((request) => request(axios, basePath));
        },
        /**
         * Set all data sources including related physical model.
         * @summary Put all data sources
         * @param {LayoutApiPutDataSourcesLayoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDataSourcesLayout(
            requestParameters: LayoutApiPutDataSourcesLayoutRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .putDataSourcesLayout(requestParameters.declarativeDataSources, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Define all user groups with their parents eventually.
         * @summary Put all user groups
         * @param {LayoutApiPutUserGroupsLayoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserGroupsLayout(
            requestParameters: LayoutApiPutUserGroupsLayoutRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .putUserGroupsLayout(requestParameters.declarativeUserGroups, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Set all users and their authentication properties.
         * @summary Put all users
         * @param {LayoutApiPutUsersLayoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUsersLayout(
            requestParameters: LayoutApiPutUsersLayoutRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .putUsersLayout(requestParameters.declarativeUsers, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Define all users and user groups with theirs properties.
         * @summary Put all users and user groups
         * @param {LayoutApiPutUsersUserGroupsLayoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUsersUserGroupsLayout(
            requestParameters: LayoutApiPutUsersUserGroupsLayoutRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .putUsersUserGroupsLayout(requestParameters.declarativeUsersUserGroups, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Set complete layout of workspace, like model, authorization, etc.
         * @summary Set workspace layout
         * @param {LayoutApiPutWorkspaceLayoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWorkspaceLayout(
            requestParameters: LayoutApiPutWorkspaceLayoutRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .putWorkspaceLayout(
                    requestParameters.workspaceId,
                    requestParameters.declarativeWorkspaceModel,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         * Set effective analytics model of the workspace.
         * @summary Set analytics model
         * @param {LayoutApiSetAnalyticsModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAnalyticsModel(
            requestParameters: LayoutApiSetAnalyticsModelRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .setAnalyticsModel(
                    requestParameters.workspaceId,
                    requestParameters.declarativeAnalytics,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         * Set effective logical model of the workspace.
         * @summary Set logical model
         * @param {LayoutApiSetLogicalModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLogicalModel(
            requestParameters: LayoutApiSetLogicalModelRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .setLogicalModel(requestParameters.workspaceId, requestParameters.declarativeModel, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Sets complete layout of organization, like workspaces, user-groups, etc.
         * @summary Set organization layout
         * @param {LayoutApiSetOrganizationLayoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOrganizationLayout(
            requestParameters: LayoutApiSetOrganizationLayoutRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .setOrganizationLayout(requestParameters.declarativeOrganization, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Sets complete layout of tables with their columns under corresponding Data Source.
         * @summary Set data source physical model layout
         * @param {LayoutApiSetPdmLayoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPdmLayout(
            requestParameters: LayoutApiSetPdmLayoutRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .setPdmLayout(requestParameters.dataSourceId, requestParameters.declarativePdm, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Sets workspace data filters in all workspaces in entire organization.
         * @summary Set all workspace data filters
         * @param {LayoutApiSetWorkspaceDataFiltersLayoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkspaceDataFiltersLayout(
            requestParameters: LayoutApiSetWorkspaceDataFiltersLayoutRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .setWorkspaceDataFiltersLayout(requestParameters.declarativeWorkspaceDataFilters, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Set effective permissions for the workspace
         * @summary Set permissions for the workspace
         * @param {LayoutApiSetWorkspacePermissionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkspacePermissions(
            requestParameters: LayoutApiSetWorkspacePermissionsRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .setWorkspacePermissions(
                    requestParameters.workspaceId,
                    requestParameters.declarativeWorkspacePermissions,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         * Sets complete layout of workspaces, their hierarchy, models.
         * @summary Set all workspaces layout
         * @param {LayoutApiSetWorkspacesLayoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkspacesLayout(
            requestParameters: LayoutApiSetWorkspacesLayoutRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .setWorkspacesLayout(requestParameters.declarativeWorkspaces, options)
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * LayoutApi - interface
 * @export
 * @interface LayoutApi
 */
export interface LayoutApiInterface {
    /**
     * Retrieve current analytics model of the workspace.
     * @summary Get analytics model
     * @param {LayoutApiGetAnalyticsModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getAnalyticsModel(
        requestParameters: LayoutApiGetAnalyticsModelRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<DeclarativeAnalytics>;

    /**
     * Retrieve all data sources including related physical model.
     * @summary Get all data sources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getDataSourcesLayout(options?: AxiosRequestConfig): AxiosPromise<DeclarativeDataSources>;

    /**
     * Retrieve current logical model of the workspace in declarative form.
     * @summary Get logical model
     * @param {LayoutApiGetLogicalModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getLogicalModel(
        requestParameters: LayoutApiGetLogicalModelRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<DeclarativeModel>;

    /**
     * Retrieve complete layout of organization, workspaces, user-groups, etc.
     * @summary Get organization layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getOrganizationLayout(options?: AxiosRequestConfig): AxiosPromise<DeclarativeOrganization>;

    /**
     * Retrieve complete layout of tables with their columns
     * @summary Get data source physical model layout
     * @param {LayoutApiGetPdmLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getPdmLayout(
        requestParameters: LayoutApiGetPdmLayoutRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<DeclarativePdm>;

    /**
     * Retrieve all user-groups eventually with parent group.
     * @summary Get all user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getUserGroupsLayout(options?: AxiosRequestConfig): AxiosPromise<DeclarativeUserGroups>;

    /**
     * Retrieve all users including authentication properties.
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getUsersLayout(options?: AxiosRequestConfig): AxiosPromise<DeclarativeUsers>;

    /**
     * Retrieve all users and user groups with theirs properties.
     * @summary Get all users and user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getUsersUserGroupsLayout(options?: AxiosRequestConfig): AxiosPromise<DeclarativeUsersUserGroups>;

    /**
     * Retrieve all workspaces and related workspace data filters (and their settings / values).
     * @summary Get workspace data filters for all workspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getWorkspaceDataFiltersLayout(
        options?: AxiosRequestConfig,
    ): AxiosPromise<DeclarativeWorkspaceDataFilters>;

    /**
     * Retrieve current model of the workspace in declarative form.
     * @summary Get workspace layout
     * @param {LayoutApiGetWorkspaceLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getWorkspaceLayout(
        requestParameters: LayoutApiGetWorkspaceLayoutRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<DeclarativeWorkspaceModel>;

    /**
     * Retrieve current set of permissions of the workspace in a declarative form.
     * @summary Get permissions for the workspace
     * @param {LayoutApiGetWorkspacePermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getWorkspacePermissions(
        requestParameters: LayoutApiGetWorkspacePermissionsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<DeclarativeWorkspacePermissions>;

    /**
     * Gets complete layout of workspaces, their hierarchy, models.
     * @summary Get all workspaces layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getWorkspacesLayout(options?: AxiosRequestConfig): AxiosPromise<DeclarativeWorkspaces>;

    /**
     * Set all data sources including related physical model.
     * @summary Put all data sources
     * @param {LayoutApiPutDataSourcesLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    putDataSourcesLayout(
        requestParameters: LayoutApiPutDataSourcesLayoutRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;

    /**
     * Define all user groups with their parents eventually.
     * @summary Put all user groups
     * @param {LayoutApiPutUserGroupsLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    putUserGroupsLayout(
        requestParameters: LayoutApiPutUserGroupsLayoutRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;

    /**
     * Set all users and their authentication properties.
     * @summary Put all users
     * @param {LayoutApiPutUsersLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    putUsersLayout(
        requestParameters: LayoutApiPutUsersLayoutRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;

    /**
     * Define all users and user groups with theirs properties.
     * @summary Put all users and user groups
     * @param {LayoutApiPutUsersUserGroupsLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    putUsersUserGroupsLayout(
        requestParameters: LayoutApiPutUsersUserGroupsLayoutRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;

    /**
     * Set complete layout of workspace, like model, authorization, etc.
     * @summary Set workspace layout
     * @param {LayoutApiPutWorkspaceLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    putWorkspaceLayout(
        requestParameters: LayoutApiPutWorkspaceLayoutRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;

    /**
     * Set effective analytics model of the workspace.
     * @summary Set analytics model
     * @param {LayoutApiSetAnalyticsModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    setAnalyticsModel(
        requestParameters: LayoutApiSetAnalyticsModelRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;

    /**
     * Set effective logical model of the workspace.
     * @summary Set logical model
     * @param {LayoutApiSetLogicalModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    setLogicalModel(
        requestParameters: LayoutApiSetLogicalModelRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;

    /**
     * Sets complete layout of organization, like workspaces, user-groups, etc.
     * @summary Set organization layout
     * @param {LayoutApiSetOrganizationLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    setOrganizationLayout(
        requestParameters: LayoutApiSetOrganizationLayoutRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;

    /**
     * Sets complete layout of tables with their columns under corresponding Data Source.
     * @summary Set data source physical model layout
     * @param {LayoutApiSetPdmLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    setPdmLayout(
        requestParameters: LayoutApiSetPdmLayoutRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;

    /**
     * Sets workspace data filters in all workspaces in entire organization.
     * @summary Set all workspace data filters
     * @param {LayoutApiSetWorkspaceDataFiltersLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    setWorkspaceDataFiltersLayout(
        requestParameters: LayoutApiSetWorkspaceDataFiltersLayoutRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;

    /**
     * Set effective permissions for the workspace
     * @summary Set permissions for the workspace
     * @param {LayoutApiSetWorkspacePermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    setWorkspacePermissions(
        requestParameters: LayoutApiSetWorkspacePermissionsRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;

    /**
     * Sets complete layout of workspaces, their hierarchy, models.
     * @summary Set all workspaces layout
     * @param {LayoutApiSetWorkspacesLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    setWorkspacesLayout(
        requestParameters: LayoutApiSetWorkspacesLayoutRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;
}

/**
 * Request parameters for getAnalyticsModel operation in LayoutApi.
 * @export
 * @interface LayoutApiGetAnalyticsModelRequest
 */
export interface LayoutApiGetAnalyticsModelRequest {
    /**
     *
     * @type {string}
     * @memberof LayoutApiGetAnalyticsModel
     */
    readonly workspaceId: string;
}

/**
 * Request parameters for getLogicalModel operation in LayoutApi.
 * @export
 * @interface LayoutApiGetLogicalModelRequest
 */
export interface LayoutApiGetLogicalModelRequest {
    /**
     *
     * @type {string}
     * @memberof LayoutApiGetLogicalModel
     */
    readonly workspaceId: string;

    /**
     *
     * @type {boolean}
     * @memberof LayoutApiGetLogicalModel
     */
    readonly includeParents?: boolean;
}

/**
 * Request parameters for getPdmLayout operation in LayoutApi.
 * @export
 * @interface LayoutApiGetPdmLayoutRequest
 */
export interface LayoutApiGetPdmLayoutRequest {
    /**
     *
     * @type {string}
     * @memberof LayoutApiGetPdmLayout
     */
    readonly dataSourceId: string;
}

/**
 * Request parameters for getWorkspaceLayout operation in LayoutApi.
 * @export
 * @interface LayoutApiGetWorkspaceLayoutRequest
 */
export interface LayoutApiGetWorkspaceLayoutRequest {
    /**
     *
     * @type {string}
     * @memberof LayoutApiGetWorkspaceLayout
     */
    readonly workspaceId: string;
}

/**
 * Request parameters for getWorkspacePermissions operation in LayoutApi.
 * @export
 * @interface LayoutApiGetWorkspacePermissionsRequest
 */
export interface LayoutApiGetWorkspacePermissionsRequest {
    /**
     *
     * @type {string}
     * @memberof LayoutApiGetWorkspacePermissions
     */
    readonly workspaceId: string;
}

/**
 * Request parameters for putDataSourcesLayout operation in LayoutApi.
 * @export
 * @interface LayoutApiPutDataSourcesLayoutRequest
 */
export interface LayoutApiPutDataSourcesLayoutRequest {
    /**
     *
     * @type {DeclarativeDataSources}
     * @memberof LayoutApiPutDataSourcesLayout
     */
    readonly declarativeDataSources: DeclarativeDataSources;
}

/**
 * Request parameters for putUserGroupsLayout operation in LayoutApi.
 * @export
 * @interface LayoutApiPutUserGroupsLayoutRequest
 */
export interface LayoutApiPutUserGroupsLayoutRequest {
    /**
     *
     * @type {DeclarativeUserGroups}
     * @memberof LayoutApiPutUserGroupsLayout
     */
    readonly declarativeUserGroups: DeclarativeUserGroups;
}

/**
 * Request parameters for putUsersLayout operation in LayoutApi.
 * @export
 * @interface LayoutApiPutUsersLayoutRequest
 */
export interface LayoutApiPutUsersLayoutRequest {
    /**
     *
     * @type {DeclarativeUsers}
     * @memberof LayoutApiPutUsersLayout
     */
    readonly declarativeUsers: DeclarativeUsers;
}

/**
 * Request parameters for putUsersUserGroupsLayout operation in LayoutApi.
 * @export
 * @interface LayoutApiPutUsersUserGroupsLayoutRequest
 */
export interface LayoutApiPutUsersUserGroupsLayoutRequest {
    /**
     *
     * @type {DeclarativeUsersUserGroups}
     * @memberof LayoutApiPutUsersUserGroupsLayout
     */
    readonly declarativeUsersUserGroups: DeclarativeUsersUserGroups;
}

/**
 * Request parameters for putWorkspaceLayout operation in LayoutApi.
 * @export
 * @interface LayoutApiPutWorkspaceLayoutRequest
 */
export interface LayoutApiPutWorkspaceLayoutRequest {
    /**
     *
     * @type {string}
     * @memberof LayoutApiPutWorkspaceLayout
     */
    readonly workspaceId: string;

    /**
     *
     * @type {DeclarativeWorkspaceModel}
     * @memberof LayoutApiPutWorkspaceLayout
     */
    readonly declarativeWorkspaceModel: DeclarativeWorkspaceModel;
}

/**
 * Request parameters for setAnalyticsModel operation in LayoutApi.
 * @export
 * @interface LayoutApiSetAnalyticsModelRequest
 */
export interface LayoutApiSetAnalyticsModelRequest {
    /**
     *
     * @type {string}
     * @memberof LayoutApiSetAnalyticsModel
     */
    readonly workspaceId: string;

    /**
     *
     * @type {DeclarativeAnalytics}
     * @memberof LayoutApiSetAnalyticsModel
     */
    readonly declarativeAnalytics: DeclarativeAnalytics;
}

/**
 * Request parameters for setLogicalModel operation in LayoutApi.
 * @export
 * @interface LayoutApiSetLogicalModelRequest
 */
export interface LayoutApiSetLogicalModelRequest {
    /**
     *
     * @type {string}
     * @memberof LayoutApiSetLogicalModel
     */
    readonly workspaceId: string;

    /**
     *
     * @type {DeclarativeModel}
     * @memberof LayoutApiSetLogicalModel
     */
    readonly declarativeModel: DeclarativeModel;
}

/**
 * Request parameters for setOrganizationLayout operation in LayoutApi.
 * @export
 * @interface LayoutApiSetOrganizationLayoutRequest
 */
export interface LayoutApiSetOrganizationLayoutRequest {
    /**
     *
     * @type {DeclarativeOrganization}
     * @memberof LayoutApiSetOrganizationLayout
     */
    readonly declarativeOrganization: DeclarativeOrganization;
}

/**
 * Request parameters for setPdmLayout operation in LayoutApi.
 * @export
 * @interface LayoutApiSetPdmLayoutRequest
 */
export interface LayoutApiSetPdmLayoutRequest {
    /**
     *
     * @type {string}
     * @memberof LayoutApiSetPdmLayout
     */
    readonly dataSourceId: string;

    /**
     *
     * @type {DeclarativePdm}
     * @memberof LayoutApiSetPdmLayout
     */
    readonly declarativePdm: DeclarativePdm;
}

/**
 * Request parameters for setWorkspaceDataFiltersLayout operation in LayoutApi.
 * @export
 * @interface LayoutApiSetWorkspaceDataFiltersLayoutRequest
 */
export interface LayoutApiSetWorkspaceDataFiltersLayoutRequest {
    /**
     *
     * @type {DeclarativeWorkspaceDataFilters}
     * @memberof LayoutApiSetWorkspaceDataFiltersLayout
     */
    readonly declarativeWorkspaceDataFilters: DeclarativeWorkspaceDataFilters;
}

/**
 * Request parameters for setWorkspacePermissions operation in LayoutApi.
 * @export
 * @interface LayoutApiSetWorkspacePermissionsRequest
 */
export interface LayoutApiSetWorkspacePermissionsRequest {
    /**
     *
     * @type {string}
     * @memberof LayoutApiSetWorkspacePermissions
     */
    readonly workspaceId: string;

    /**
     *
     * @type {DeclarativeWorkspacePermissions}
     * @memberof LayoutApiSetWorkspacePermissions
     */
    readonly declarativeWorkspacePermissions: DeclarativeWorkspacePermissions;
}

/**
 * Request parameters for setWorkspacesLayout operation in LayoutApi.
 * @export
 * @interface LayoutApiSetWorkspacesLayoutRequest
 */
export interface LayoutApiSetWorkspacesLayoutRequest {
    /**
     *
     * @type {DeclarativeWorkspaces}
     * @memberof LayoutApiSetWorkspacesLayout
     */
    readonly declarativeWorkspaces: DeclarativeWorkspaces;
}

/**
 * LayoutApi - object-oriented interface
 * @export
 * @class LayoutApi
 * @extends {BaseAPI}
 */
export class LayoutApi extends BaseAPI implements LayoutApiInterface {
    /**
     * Retrieve current analytics model of the workspace.
     * @summary Get analytics model
     * @param {LayoutApiGetAnalyticsModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    public getAnalyticsModel(
        requestParameters: LayoutApiGetAnalyticsModelRequest,
        options?: AxiosRequestConfig,
    ) {
        return LayoutApiFp(this.configuration)
            .getAnalyticsModel(requestParameters.workspaceId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all data sources including related physical model.
     * @summary Get all data sources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    public getDataSourcesLayout(options?: AxiosRequestConfig) {
        return LayoutApiFp(this.configuration)
            .getDataSourcesLayout(options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve current logical model of the workspace in declarative form.
     * @summary Get logical model
     * @param {LayoutApiGetLogicalModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    public getLogicalModel(requestParameters: LayoutApiGetLogicalModelRequest, options?: AxiosRequestConfig) {
        return LayoutApiFp(this.configuration)
            .getLogicalModel(requestParameters.workspaceId, requestParameters.includeParents, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve complete layout of organization, workspaces, user-groups, etc.
     * @summary Get organization layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    public getOrganizationLayout(options?: AxiosRequestConfig) {
        return LayoutApiFp(this.configuration)
            .getOrganizationLayout(options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve complete layout of tables with their columns
     * @summary Get data source physical model layout
     * @param {LayoutApiGetPdmLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    public getPdmLayout(requestParameters: LayoutApiGetPdmLayoutRequest, options?: AxiosRequestConfig) {
        return LayoutApiFp(this.configuration)
            .getPdmLayout(requestParameters.dataSourceId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all user-groups eventually with parent group.
     * @summary Get all user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    public getUserGroupsLayout(options?: AxiosRequestConfig) {
        return LayoutApiFp(this.configuration)
            .getUserGroupsLayout(options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all users including authentication properties.
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    public getUsersLayout(options?: AxiosRequestConfig) {
        return LayoutApiFp(this.configuration)
            .getUsersLayout(options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all users and user groups with theirs properties.
     * @summary Get all users and user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    public getUsersUserGroupsLayout(options?: AxiosRequestConfig) {
        return LayoutApiFp(this.configuration)
            .getUsersUserGroupsLayout(options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all workspaces and related workspace data filters (and their settings / values).
     * @summary Get workspace data filters for all workspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    public getWorkspaceDataFiltersLayout(options?: AxiosRequestConfig) {
        return LayoutApiFp(this.configuration)
            .getWorkspaceDataFiltersLayout(options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve current model of the workspace in declarative form.
     * @summary Get workspace layout
     * @param {LayoutApiGetWorkspaceLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    public getWorkspaceLayout(
        requestParameters: LayoutApiGetWorkspaceLayoutRequest,
        options?: AxiosRequestConfig,
    ) {
        return LayoutApiFp(this.configuration)
            .getWorkspaceLayout(requestParameters.workspaceId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve current set of permissions of the workspace in a declarative form.
     * @summary Get permissions for the workspace
     * @param {LayoutApiGetWorkspacePermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    public getWorkspacePermissions(
        requestParameters: LayoutApiGetWorkspacePermissionsRequest,
        options?: AxiosRequestConfig,
    ) {
        return LayoutApiFp(this.configuration)
            .getWorkspacePermissions(requestParameters.workspaceId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets complete layout of workspaces, their hierarchy, models.
     * @summary Get all workspaces layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    public getWorkspacesLayout(options?: AxiosRequestConfig) {
        return LayoutApiFp(this.configuration)
            .getWorkspacesLayout(options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set all data sources including related physical model.
     * @summary Put all data sources
     * @param {LayoutApiPutDataSourcesLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    public putDataSourcesLayout(
        requestParameters: LayoutApiPutDataSourcesLayoutRequest,
        options?: AxiosRequestConfig,
    ) {
        return LayoutApiFp(this.configuration)
            .putDataSourcesLayout(requestParameters.declarativeDataSources, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Define all user groups with their parents eventually.
     * @summary Put all user groups
     * @param {LayoutApiPutUserGroupsLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    public putUserGroupsLayout(
        requestParameters: LayoutApiPutUserGroupsLayoutRequest,
        options?: AxiosRequestConfig,
    ) {
        return LayoutApiFp(this.configuration)
            .putUserGroupsLayout(requestParameters.declarativeUserGroups, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set all users and their authentication properties.
     * @summary Put all users
     * @param {LayoutApiPutUsersLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    public putUsersLayout(requestParameters: LayoutApiPutUsersLayoutRequest, options?: AxiosRequestConfig) {
        return LayoutApiFp(this.configuration)
            .putUsersLayout(requestParameters.declarativeUsers, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Define all users and user groups with theirs properties.
     * @summary Put all users and user groups
     * @param {LayoutApiPutUsersUserGroupsLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    public putUsersUserGroupsLayout(
        requestParameters: LayoutApiPutUsersUserGroupsLayoutRequest,
        options?: AxiosRequestConfig,
    ) {
        return LayoutApiFp(this.configuration)
            .putUsersUserGroupsLayout(requestParameters.declarativeUsersUserGroups, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set complete layout of workspace, like model, authorization, etc.
     * @summary Set workspace layout
     * @param {LayoutApiPutWorkspaceLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    public putWorkspaceLayout(
        requestParameters: LayoutApiPutWorkspaceLayoutRequest,
        options?: AxiosRequestConfig,
    ) {
        return LayoutApiFp(this.configuration)
            .putWorkspaceLayout(
                requestParameters.workspaceId,
                requestParameters.declarativeWorkspaceModel,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set effective analytics model of the workspace.
     * @summary Set analytics model
     * @param {LayoutApiSetAnalyticsModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    public setAnalyticsModel(
        requestParameters: LayoutApiSetAnalyticsModelRequest,
        options?: AxiosRequestConfig,
    ) {
        return LayoutApiFp(this.configuration)
            .setAnalyticsModel(requestParameters.workspaceId, requestParameters.declarativeAnalytics, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set effective logical model of the workspace.
     * @summary Set logical model
     * @param {LayoutApiSetLogicalModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    public setLogicalModel(requestParameters: LayoutApiSetLogicalModelRequest, options?: AxiosRequestConfig) {
        return LayoutApiFp(this.configuration)
            .setLogicalModel(requestParameters.workspaceId, requestParameters.declarativeModel, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sets complete layout of organization, like workspaces, user-groups, etc.
     * @summary Set organization layout
     * @param {LayoutApiSetOrganizationLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    public setOrganizationLayout(
        requestParameters: LayoutApiSetOrganizationLayoutRequest,
        options?: AxiosRequestConfig,
    ) {
        return LayoutApiFp(this.configuration)
            .setOrganizationLayout(requestParameters.declarativeOrganization, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sets complete layout of tables with their columns under corresponding Data Source.
     * @summary Set data source physical model layout
     * @param {LayoutApiSetPdmLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    public setPdmLayout(requestParameters: LayoutApiSetPdmLayoutRequest, options?: AxiosRequestConfig) {
        return LayoutApiFp(this.configuration)
            .setPdmLayout(requestParameters.dataSourceId, requestParameters.declarativePdm, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sets workspace data filters in all workspaces in entire organization.
     * @summary Set all workspace data filters
     * @param {LayoutApiSetWorkspaceDataFiltersLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    public setWorkspaceDataFiltersLayout(
        requestParameters: LayoutApiSetWorkspaceDataFiltersLayoutRequest,
        options?: AxiosRequestConfig,
    ) {
        return LayoutApiFp(this.configuration)
            .setWorkspaceDataFiltersLayout(requestParameters.declarativeWorkspaceDataFilters, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set effective permissions for the workspace
     * @summary Set permissions for the workspace
     * @param {LayoutApiSetWorkspacePermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    public setWorkspacePermissions(
        requestParameters: LayoutApiSetWorkspacePermissionsRequest,
        options?: AxiosRequestConfig,
    ) {
        return LayoutApiFp(this.configuration)
            .setWorkspacePermissions(
                requestParameters.workspaceId,
                requestParameters.declarativeWorkspacePermissions,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sets complete layout of workspaces, their hierarchy, models.
     * @summary Set all workspaces layout
     * @param {LayoutApiSetWorkspacesLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    public setWorkspacesLayout(
        requestParameters: LayoutApiSetWorkspacesLayoutRequest,
        options?: AxiosRequestConfig,
    ) {
        return LayoutApiFp(this.configuration)
            .setWorkspacesLayout(requestParameters.declarativeWorkspaces, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
