// (C) 2021 GoodData Corporation

/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// @ts-ignore
import globalImportUrl from "url";
import globalImportQs from "qs";
import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from "./base";

// utility function that adds support for nested objects in query
const addFlattenedObjectTo = (object: any, target: any): void => {
    const flattened = globalImportQs.parse(globalImportQs.stringify(object, { allowDots: true }), {
        depth: 0,
    });
    Object.keys(flattened).forEach((key) => {
        target[key] = (flattened as any)[key];
    });
};

/**
 * An id of the table from PDM mapped to this dataset. Including ID of data source.
 * @export
 * @interface DataSourceTableIdentifier
 */
export interface DataSourceTableIdentifier {
    /**
     * ID of table.
     * @type {string}
     * @memberof DataSourceTableIdentifier
     */
    id: string;
    /**
     * Data source ID.
     * @type {string}
     * @memberof DataSourceTableIdentifier
     */
    dataSourceId: string;
    /**
     * Data source entity type.
     * @type {string}
     * @memberof DataSourceTableIdentifier
     */
    type: DataSourceTableIdentifierTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum DataSourceTableIdentifierTypeEnum {
    DataSource = "dataSource",
}

/**
 *
 * @export
 * @interface DatasetReferenceIdentifier
 */
export interface DatasetReferenceIdentifier {
    /**
     *
     * @type {string}
     * @memberof DatasetReferenceIdentifier
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof DatasetReferenceIdentifier
     */
    type: DatasetReferenceIdentifierTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum DatasetReferenceIdentifierTypeEnum {
    Dataset = "dataset",
}

/**
 *
 * @export
 * @interface DeclarativeAnalyticalDashboard
 */
export interface DeclarativeAnalyticalDashboard {
    /**
     * Analytical dashboard ID.
     * @type {string}
     * @memberof DeclarativeAnalyticalDashboard
     */
    id: string;
    /**
     * Analytical dashboard title.
     * @type {string}
     * @memberof DeclarativeAnalyticalDashboard
     */
    title: string;
    /**
     * Analytical dashboard description.
     * @type {string}
     * @memberof DeclarativeAnalyticalDashboard
     */
    description?: string;
    /**
     * A server agnostic definition of the visualization object in JSON format.
     * @type {object}
     * @memberof DeclarativeAnalyticalDashboard
     */
    content: object;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeAnalyticalDashboard
     */
    tags?: Array<string>;
}
/**
 * Entities describing users\' view on data.
 * @export
 * @interface DeclarativeAnalytics
 */
export interface DeclarativeAnalytics {
    /**
     *
     * @type {DeclarativeAnalyticsLayer}
     * @memberof DeclarativeAnalytics
     */
    analytics: DeclarativeAnalyticsLayer;
}
/**
 *
 * @export
 * @interface DeclarativeAnalyticsLayer
 */
export interface DeclarativeAnalyticsLayer {
    /**
     * A list of analytical dashboards available in the model.
     * @type {Array<DeclarativeAnalyticalDashboard>}
     * @memberof DeclarativeAnalyticsLayer
     */
    analyticalDashboards: Array<DeclarativeAnalyticalDashboard>;
    /**
     * A list of filter contexts available in the model.
     * @type {Array<DeclarativeFilterContext>}
     * @memberof DeclarativeAnalyticsLayer
     */
    filterContexts: Array<DeclarativeFilterContext>;
    /**
     * A list of metrics available in the model.
     * @type {Array<DeclarativeMetric>}
     * @memberof DeclarativeAnalyticsLayer
     */
    metrics: Array<DeclarativeMetric>;
    /**
     * A list of visualization objects available in the model.
     * @type {Array<DeclarativeVisualizationObject>}
     * @memberof DeclarativeAnalyticsLayer
     */
    visualizationObjects: Array<DeclarativeVisualizationObject>;
}
/**
 * A dataset attribute.
 * @export
 * @interface DeclarativeAttribute
 */
export interface DeclarativeAttribute {
    /**
     * Attribute ID.
     * @type {string}
     * @memberof DeclarativeAttribute
     */
    id: string;
    /**
     * Attribute title.
     * @type {string}
     * @memberof DeclarativeAttribute
     */
    title: string;
    /**
     * Attribute description.
     * @type {string}
     * @memberof DeclarativeAttribute
     */
    description?: string;
    /**
     * An array of attribute labels.
     * @type {Array<DeclarativeLabel>}
     * @memberof DeclarativeAttribute
     */
    labels: Array<DeclarativeLabel>;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeAttribute
     */
    tags?: Array<string>;
}
/**
 * A table column.
 * @export
 * @interface DeclarativeColumn
 */
export interface DeclarativeColumn {
    /**
     * Column name
     * @type {string}
     * @memberof DeclarativeColumn
     */
    name: string;
    /**
     * Column type
     * @type {string}
     * @memberof DeclarativeColumn
     */
    dataType: DeclarativeColumnDataTypeEnum;
    /**
     * Is column part of primary key?
     * @type {boolean}
     * @memberof DeclarativeColumn
     */
    isPrimaryKey?: boolean;
    /**
     * Referenced table (Foreign key)
     * @type {string}
     * @memberof DeclarativeColumn
     */
    referencedTableId?: string;
    /**
     * Referenced table (Foreign key)
     * @type {string}
     * @memberof DeclarativeColumn
     */
    referencedTableColumn?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum DeclarativeColumnDataTypeEnum {
    INT = "INT",
    STRING = "STRING",
    DATE = "DATE",
    NUMERIC = "NUMERIC",
    TIMESTAMP = "TIMESTAMP",
    BOOLEAN = "BOOLEAN",
}

/**
 * A data source and its properties.
 * @export
 * @interface DeclarativeDataSource
 */
export interface DeclarativeDataSource {
    /**
     * Data source ID.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    id: string;
    /**
     * Name of the data source.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    name: string;
    /**
     * Type of database.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    type: DeclarativeDataSourceTypeEnum;
    /**
     * An connection string relevant to type of database.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    url: string;
    /**
     * A scheme/database with the data.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    schema: string;
    /**
     * User with permission connect the data source/database.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    username?: string;
    /**
     * Password for the data-source user, property is never returned back.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    password?: string;
    /**
     *
     * @type {DeclarativeTables}
     * @memberof DeclarativeDataSource
     */
    pdm: DeclarativeTables;
}

/**
 * @export
 * @enum {string}
 */
export enum DeclarativeDataSourceTypeEnum {
    POSTGRESQL = "POSTGRESQL",
    REDSHIFT = "REDSHIFT",
    VERTICA = "VERTICA",
    SNOWFLAKE = "SNOWFLAKE",
    ADS = "ADS",
    BIGQUERY = "BIGQUERY",
    MSSQL = "MSSQL",
    PRESTO = "PRESTO",
}

/**
 * A data source and its properties.
 * @export
 * @interface DeclarativeDataSources
 */
export interface DeclarativeDataSources {
    /**
     *
     * @type {Array<DeclarativeDataSource>}
     * @memberof DeclarativeDataSources
     */
    dataSources: Array<DeclarativeDataSource>;
}
/**
 * A dataset defined by its properties.
 * @export
 * @interface DeclarativeDataset
 */
export interface DeclarativeDataset {
    /**
     * The Dataset ID. This ID is further used to refer to this instance of dataset.
     * @type {string}
     * @memberof DeclarativeDataset
     */
    id: string;
    /**
     * A dataset title.
     * @type {string}
     * @memberof DeclarativeDataset
     */
    title: string;
    /**
     * A dataset description.
     * @type {string}
     * @memberof DeclarativeDataset
     */
    description?: string;
    /**
     * An array of grain identifiers.
     * @type {Array<GrainIdentifier>}
     * @memberof DeclarativeDataset
     */
    grain: Array<GrainIdentifier>;
    /**
     * An array of attributes.
     * @type {Array<DeclarativeAttribute>}
     * @memberof DeclarativeDataset
     */
    attributes: Array<DeclarativeAttribute>;
    /**
     * An array of facts.
     * @type {Array<DeclarativeFact>}
     * @memberof DeclarativeDataset
     */
    facts: Array<DeclarativeFact>;
    /**
     * An array of references.
     * @type {Array<DeclarativeReference>}
     * @memberof DeclarativeDataset
     */
    references: Array<DeclarativeReference>;
    /**
     *
     * @type {DataSourceTableIdentifier}
     * @memberof DeclarativeDataset
     */
    dataSourceTableId?: DataSourceTableIdentifier;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeDataset
     */
    tags?: Array<string>;
}
/**
 * A date dataset.
 * @export
 * @interface DeclarativeDateDataset
 */
export interface DeclarativeDateDataset {
    /**
     * Date dataset ID.
     * @type {string}
     * @memberof DeclarativeDateDataset
     */
    id: string;
    /**
     * Date dataset title.
     * @type {string}
     * @memberof DeclarativeDateDataset
     */
    title: string;
    /**
     * Date dataset description.
     * @type {string}
     * @memberof DeclarativeDateDataset
     */
    description?: string;
    /**
     *
     * @type {GranularitiesFormatting}
     * @memberof DeclarativeDateDataset
     */
    granularitiesFormatting: GranularitiesFormatting;
    /**
     * An array of date granularities. All listed granularities will be available for date dataset.
     * @type {Array<string>}
     * @memberof DeclarativeDateDataset
     */
    granularities: Array<DeclarativeDateDatasetGranularitiesEnum>;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeDateDataset
     */
    tags?: Array<string>;
}

/**
 * @export
 * @enum {string}
 */
export enum DeclarativeDateDatasetGranularitiesEnum {
    MINUTE = "MINUTE",
    HOUR = "HOUR",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    QUARTER = "QUARTER",
    YEAR = "YEAR",
    MINUTEOFHOUR = "MINUTE_OF_HOUR",
    HOUROFDAY = "HOUR_OF_DAY",
    DAYOFWEEK = "DAY_OF_WEEK",
    DAYOFMONTH = "DAY_OF_MONTH",
    DAYOFYEAR = "DAY_OF_YEAR",
    WEEKOFYEAR = "WEEK_OF_YEAR",
    MONTHOFYEAR = "MONTH_OF_YEAR",
    QUARTEROFYEAR = "QUARTER_OF_YEAR",
}

/**
 * A dataset fact.
 * @export
 * @interface DeclarativeFact
 */
export interface DeclarativeFact {
    /**
     * Fact ID.
     * @type {string}
     * @memberof DeclarativeFact
     */
    id: string;
    /**
     * Fact title.
     * @type {string}
     * @memberof DeclarativeFact
     */
    title: string;
    /**
     * Fact description.
     * @type {string}
     * @memberof DeclarativeFact
     */
    description?: string;
    /**
     * A name of the source column in the table.
     * @type {string}
     * @memberof DeclarativeFact
     */
    sourceColumn: string;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeFact
     */
    tags?: Array<string>;
}
/**
 *
 * @export
 * @interface DeclarativeFilterContext
 */
export interface DeclarativeFilterContext {
    /**
     * Filter Context ID.
     * @type {string}
     * @memberof DeclarativeFilterContext
     */
    id: string;
    /**
     * Filter Context title.
     * @type {string}
     * @memberof DeclarativeFilterContext
     */
    title: string;
    /**
     * Filter Context description.
     * @type {string}
     * @memberof DeclarativeFilterContext
     */
    description?: string;
    /**
     * A server agnostic definition of the visualization object in JSON format.
     * @type {object}
     * @memberof DeclarativeFilterContext
     */
    content: object;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeFilterContext
     */
    tags?: Array<string>;
}
/**
 * A attribute label.
 * @export
 * @interface DeclarativeLabel
 */
export interface DeclarativeLabel {
    /**
     * Label ID.
     * @type {string}
     * @memberof DeclarativeLabel
     */
    id: string;
    /**
     * Label title.
     * @type {string}
     * @memberof DeclarativeLabel
     */
    title: string;
    /**
     * Label description.
     * @type {string}
     * @memberof DeclarativeLabel
     */
    description?: string;
    /**
     * A flag indicating whether the label should be treated as a primary one.
     * @type {boolean}
     * @memberof DeclarativeLabel
     */
    primary: boolean;
    /**
     * A name of the source column in the table.
     * @type {string}
     * @memberof DeclarativeLabel
     */
    sourceColumn: string;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeLabel
     */
    tags?: Array<string>;
}
/**
 * A logical data model (LDM) representation.
 * @export
 * @interface DeclarativeLdm
 */
export interface DeclarativeLdm {
    /**
     * An array containing datasets.
     * @type {Array<DeclarativeDataset>}
     * @memberof DeclarativeLdm
     */
    datasets: Array<DeclarativeDataset>;
    /**
     * An array containing date-related datasets.
     * @type {Array<DeclarativeDateDataset>}
     * @memberof DeclarativeLdm
     */
    dateInstances: Array<DeclarativeDateDataset>;
}
/**
 *
 * @export
 * @interface DeclarativeMetric
 */
export interface DeclarativeMetric {
    /**
     * Metric ID.
     * @type {string}
     * @memberof DeclarativeMetric
     */
    id: string;
    /**
     * Metric title.
     * @type {string}
     * @memberof DeclarativeMetric
     */
    title: string;
    /**
     * Metric description.
     * @type {string}
     * @memberof DeclarativeMetric
     */
    description?: string;
    /**
     * A server agnostic definition of the visualization object in JSON format.
     * @type {object}
     * @memberof DeclarativeMetric
     */
    content: object;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeMetric
     */
    tags?: Array<string>;
}
/**
 * A data model structured as a set of its attributes.
 * @export
 * @interface DeclarativeModel
 */
export interface DeclarativeModel {
    /**
     *
     * @type {DeclarativeLdm}
     * @memberof DeclarativeModel
     */
    ldm: DeclarativeLdm;
}
/**
 * A physical data model (PDM) representation for single data source.
 * @export
 * @interface DeclarativePdm
 */
export interface DeclarativePdm {
    /**
     *
     * @type {DeclarativeTables}
     * @memberof DeclarativePdm
     */
    pdm: DeclarativeTables;
}
/**
 * A dataset reference.
 * @export
 * @interface DeclarativeReference
 */
export interface DeclarativeReference {
    /**
     *
     * @type {ReferenceIdentifier}
     * @memberof DeclarativeReference
     */
    identifier: ReferenceIdentifier;
    /**
     * The multi-value flag enables many-to-many cardinality for references.
     * @type {boolean}
     * @memberof DeclarativeReference
     */
    multivalue: boolean;
    /**
     * An array of source column names for a given reference.
     * @type {Array<string>}
     * @memberof DeclarativeReference
     */
    sourceColumns: Array<string>;
}
/**
 * A database table.
 * @export
 * @interface DeclarativeTable
 */
export interface DeclarativeTable {
    /**
     * Table id.
     * @type {string}
     * @memberof DeclarativeTable
     */
    id: string;
    /**
     * Path to table.
     * @type {Array<string>}
     * @memberof DeclarativeTable
     */
    path: Array<string>;
    /**
     * An array of physical columns
     * @type {Array<DeclarativeColumn>}
     * @memberof DeclarativeTable
     */
    columns: Array<DeclarativeColumn>;
}
/**
 * A physical data model (PDM) tables.
 * @export
 * @interface DeclarativeTables
 */
export interface DeclarativeTables {
    /**
     * An array of physical database tables.
     * @type {Array<DeclarativeTable>}
     * @memberof DeclarativeTables
     */
    tables: Array<DeclarativeTable>;
}
/**
 *
 * @export
 * @interface DeclarativeVisualizationObject
 */
export interface DeclarativeVisualizationObject {
    /**
     * Visualization object ID.
     * @type {string}
     * @memberof DeclarativeVisualizationObject
     */
    id: string;
    /**
     * Visualization object title.
     * @type {string}
     * @memberof DeclarativeVisualizationObject
     */
    title: string;
    /**
     * Visualization object description.
     * @type {string}
     * @memberof DeclarativeVisualizationObject
     */
    description?: string;
    /**
     * A server agnostic definition of the visualization object in JSON format.
     * @type {object}
     * @memberof DeclarativeVisualizationObject
     */
    content: object;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeVisualizationObject
     */
    tags?: Array<string>;
}
/**
 *
 * @export
 * @interface DeclarativeWorkspace
 */
export interface DeclarativeWorkspace {
    /**
     *
     * @type {string}
     * @memberof DeclarativeWorkspace
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof DeclarativeWorkspace
     */
    name: string;
    /**
     *
     * @type {DeclarativeWorkspaceModel}
     * @memberof DeclarativeWorkspace
     */
    model: DeclarativeWorkspaceModel;
    /**
     *
     * @type {WorkspaceIdentifier}
     * @memberof DeclarativeWorkspace
     */
    parent?: WorkspaceIdentifier;
}
/**
 * Workspace Data Filters serving the filtering of what data users can see in workspaces.
 * @export
 * @interface DeclarativeWorkspaceDataFilter
 */
export interface DeclarativeWorkspaceDataFilter {
    /**
     * Workspace Data Filters ID. This ID is further used to refer to this instance.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilter
     */
    id: string;
    /**
     * Workspace Data Filters title.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilter
     */
    title: string;
    /**
     * Workspace Data Filters description.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilter
     */
    description?: string;
    /**
     * Workspace Data Filters column name. Data are filtered using this physical column.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilter
     */
    columnName: string;
    /**
     * Data source ID. Workspace Data Filters must always be connected to single data source.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilter
     */
    dataSourceId: string;
    /**
     * Filter settings specifying values of filters valid for the workspace.
     * @type {Array<DeclarativeWorkspaceDataFilterSetting>}
     * @memberof DeclarativeWorkspaceDataFilter
     */
    workspaceDataFilterSettings: Array<DeclarativeWorkspaceDataFilterSetting>;
    /**
     *
     * @type {WorkspaceIdentifier}
     * @memberof DeclarativeWorkspaceDataFilter
     */
    workspace?: WorkspaceIdentifier;
}
/**
 * Workspace Data Filters serving the filtering of what data users can see in workspaces.
 * @export
 * @interface DeclarativeWorkspaceDataFilterSetting
 */
export interface DeclarativeWorkspaceDataFilterSetting {
    /**
     * Workspace Data Filters ID. This ID is further used to refer to this instance.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilterSetting
     */
    id: string;
    /**
     * Workspace Data Filters setting title.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilterSetting
     */
    title: string;
    /**
     * Workspace Data Filters setting description.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilterSetting
     */
    description?: string;
    /**
     * Only those rows are returned, where columnName from filter matches those values.
     * @type {Array<string>}
     * @memberof DeclarativeWorkspaceDataFilterSetting
     */
    filterValues: Array<string>;
    /**
     *
     * @type {WorkspaceIdentifier}
     * @memberof DeclarativeWorkspaceDataFilterSetting
     */
    workspace: WorkspaceIdentifier;
}
/**
 *
 * @export
 * @interface DeclarativeWorkspaceDataFilters
 */
export interface DeclarativeWorkspaceDataFilters {
    /**
     *
     * @type {Array<DeclarativeWorkspaceDataFilter>}
     * @memberof DeclarativeWorkspaceDataFilters
     */
    workspaceDataFilters: Array<DeclarativeWorkspaceDataFilter>;
}
/**
 *
 * @export
 * @interface DeclarativeWorkspaceModel
 */
export interface DeclarativeWorkspaceModel {
    /**
     *
     * @type {DeclarativeLdm}
     * @memberof DeclarativeWorkspaceModel
     */
    ldm: DeclarativeLdm;
    /**
     *
     * @type {DeclarativeAnalyticsLayer}
     * @memberof DeclarativeWorkspaceModel
     */
    analytics: DeclarativeAnalyticsLayer;
}
/**
 *
 * @export
 * @interface DeclarativeWorkspaces
 */
export interface DeclarativeWorkspaces {
    /**
     *
     * @type {Array<DeclarativeWorkspace>}
     * @memberof DeclarativeWorkspaces
     */
    workspaces: Array<DeclarativeWorkspace>;
    /**
     *
     * @type {Array<DeclarativeWorkspaceDataFilter>}
     * @memberof DeclarativeWorkspaces
     */
    workspaceDataFilters: Array<DeclarativeWorkspaceDataFilter>;
}
/**
 * A request containing all information needed for generation of logical model.
 * @export
 * @interface GenerateLdmRequest
 */
export interface GenerateLdmRequest {
    /**
     * A separator between prefixes and the names. Default is \"__\".
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    separator: string;
    /**
     * Tables starting with this prefix will be included. The prefix is then followed by the value of `separator` parameter. Given the table prefix is `out_table` and separator is `__`, the table with name like `out_table__customers` will be scanned.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    tablePrefix?: string;
    /**
     * Views starting with this prefix will be included. The prefix is then followed by the value of `separator` parameter. Given the view prefix is `out_view` and separator is `__`, the table with name like `out_view__us_customers` will be scanned.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    viewPrefix?: string;
    /**
     * Columns starting with this prefix will be considered as primary labels. The prefix is then followed by the value of `separator` parameter. Given the primary label prefix is `pl` and separator is `__`, the columns with name like `pl__country_id` will be considered as primary labels.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    primaryLabelPrefix?: string;
    /**
     * Columns starting with this prefix will be considered as secondary labels. The prefix is then followed by the value of `separator` parameter. Given the secondary label prefix is `sl` and separator is `__`, the columns with name like `sl__country_id_country_name` will be considered as secondary labels.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    secondaryLabelPrefix?: string;
    /**
     * Columns starting with this prefix will be considered as facts. The prefix is then followed by the value of `separator` parameter. Given the fact prefix is `f` and separator is `__`, the columns with name like `f__sold` will be considered as facts.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    factPrefix?: string;
    /**
     * Option to control date granularities for date datasets. Empty value enables common date granularities (DAY, WEEK, MONTH, QUARTER, YEAR). Default value is `all` which enables all available date granularities, including time granularities (like hours, minutes).
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    dateGranularities?: string;
    /**
     * Columns starting with this prefix will be considered as grains. The prefix is then followed by the value of `separator` parameter. Given the grain prefix is `g` and separator is `__`, the columns with name like `g__name` will be considered as grains.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    grainPrefix?: string;
    /**
     * Columns starting with this prefix will be considered as references. The prefix is then followed by the value of `separator` parameter. Given the reference prefix is `r` and separator is `__`, the columns with name like `r__customer_name` will be considered as references.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    referencePrefix?: string;
    /**
     * Columns starting with this prefix will be considered as grain references. The prefix is then followed by the value of `separator` parameter. Given the reference prefix is `gr` and separator is `__`, the columns with name like `gr__customer_name` will be considered as grain references.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    grainReferencePrefix?: string;
    /**
     * Columns starting with this prefix will be considered as denormalization references. The prefix is then followed by the value of `separator` parameter. Given the denormalization reference prefix is `dr` and separator is `__`, the columns with name like `dr__customer_name` will be considered as denormalization references.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    denormPrefix?: string;
    /**
     * Column serving as workspace data filter. No labels are auto generated for such columns.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    wdfPrefix?: string;
}
/**
 * A grain identifier.
 * @export
 * @interface GrainIdentifier
 */
export interface GrainIdentifier {
    /**
     * Grain ID.
     * @type {string}
     * @memberof GrainIdentifier
     */
    id: string;
    /**
     * A type of the grain.
     * @type {string}
     * @memberof GrainIdentifier
     */
    type: GrainIdentifierTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum GrainIdentifierTypeEnum {
    Attribute = "attribute",
    Dataset = "dataset",
}

/**
 * A date dataset granularities title formatting rules.
 * @export
 * @interface GranularitiesFormatting
 */
export interface GranularitiesFormatting {
    /**
     * Title base is used as a token in title pattern. If left empty, it is replaced by date dataset title.
     * @type {string}
     * @memberof GranularitiesFormatting
     */
    titleBase: string;
    /**
     * This pattern is used to generate the title of attributes and labels that result from the granularities. There are two tokens available:  * `%titleBase` - represents shared part by all titles, or title of Date Dataset if left empty * `%granularityTitle` - represents `DateGranularity` built-in title
     * @type {string}
     * @memberof GranularitiesFormatting
     */
    titlePattern: string;
}
/**
 * JSON:API representation of acl entity.
 * @export
 * @interface JsonApiACLIn
 */
export interface JsonApiACLIn {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiACLIn
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiACLIn
     */
    type: JsonApiACLInTypeEnum;
    /**
     *
     * @type {JsonApiACLInAttributes}
     * @memberof JsonApiACLIn
     */
    attributes?: JsonApiACLInAttributes;
    /**
     *
     * @type {JsonApiACLInRelationships}
     * @memberof JsonApiACLIn
     */
    relationships?: JsonApiACLInRelationships;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiACLInTypeEnum {
    Acl = "acl",
}

/**
 *
 * @export
 * @interface JsonApiACLInAttributes
 */
export interface JsonApiACLInAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiACLInAttributes
     */
    access?: JsonApiACLInAttributesAccessEnum;
    /**
     *
     * @type {number}
     * @memberof JsonApiACLInAttributes
     */
    priority?: number;
    /**
     *
     * @type {string}
     * @memberof JsonApiACLInAttributes
     */
    control?: JsonApiACLInAttributesControlEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiACLInAttributesAccessEnum {
    FULLACCESS = "FULL_ACCESS",
}
/**
 * @export
 * @enum {string}
 */
export enum JsonApiACLInAttributesControlEnum {
    ALLOW = "ALLOW",
    DENY = "DENY",
}

/**
 *
 * @export
 * @interface JsonApiACLInDocument
 */
export interface JsonApiACLInDocument {
    /**
     *
     * @type {JsonApiACLIn}
     * @memberof JsonApiACLInDocument
     */
    data: JsonApiACLIn;
}
/**
 *
 * @export
 * @interface JsonApiACLInRelationships
 */
export interface JsonApiACLInRelationships {
    /**
     *
     * @type {JsonApiACLInRelationshipsSubjects}
     * @memberof JsonApiACLInRelationships
     */
    subjects?: JsonApiACLInRelationshipsSubjects;
    /**
     *
     * @type {JsonApiACLInRelationshipsObjects}
     * @memberof JsonApiACLInRelationships
     */
    objects?: JsonApiACLInRelationshipsObjects;
}
/**
 *
 * @export
 * @interface JsonApiACLInRelationshipsObjects
 */
export interface JsonApiACLInRelationshipsObjects {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiUserGroupLinkage>}
     * @memberof JsonApiACLInRelationshipsObjects
     */
    data: Array<JsonApiUserGroupLinkage>;
}
/**
 *
 * @export
 * @interface JsonApiACLInRelationshipsSubjects
 */
export interface JsonApiACLInRelationshipsSubjects {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiUserLinkage>}
     * @memberof JsonApiACLInRelationshipsSubjects
     */
    data: Array<JsonApiUserLinkage>;
}
/**
 * JSON:API representation of acl entity.
 * @export
 * @interface JsonApiACLOut
 */
export interface JsonApiACLOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiACLOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiACLOut
     */
    type: JsonApiACLOutTypeEnum;
    /**
     *
     * @type {JsonApiACLInAttributes}
     * @memberof JsonApiACLOut
     */
    attributes?: JsonApiACLInAttributes;
    /**
     *
     * @type {JsonApiACLInRelationships}
     * @memberof JsonApiACLOut
     */
    relationships?: JsonApiACLInRelationships;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiACLOutTypeEnum {
    Acl = "acl",
}

/**
 *
 * @export
 * @interface JsonApiACLOutDocument
 */
export interface JsonApiACLOutDocument {
    /**
     *
     * @type {JsonApiACLOut}
     * @memberof JsonApiACLOutDocument
     */
    data: JsonApiACLOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiACLOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserOutWithLinks | JsonApiUserGroupOutWithLinks>}
     * @memberof JsonApiACLOutDocument
     */
    included?: Array<JsonApiUserOutWithLinks | JsonApiUserGroupOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiACLOutList
 */
export interface JsonApiACLOutList {
    /**
     *
     * @type {Array<JsonApiACLOutWithLinks>}
     * @memberof JsonApiACLOutList
     */
    data: Array<JsonApiACLOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiACLOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserOutWithLinks | JsonApiUserGroupOutWithLinks>}
     * @memberof JsonApiACLOutList
     */
    included?: Array<JsonApiUserOutWithLinks | JsonApiUserGroupOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiACLOutWithLinks
 */
export interface JsonApiACLOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiACLOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiACLOutWithLinks
     */
    type: JsonApiACLOutWithLinksTypeEnum;
    /**
     *
     * @type {JsonApiACLInAttributes}
     * @memberof JsonApiACLOutWithLinks
     */
    attributes?: JsonApiACLInAttributes;
    /**
     *
     * @type {JsonApiACLInRelationships}
     * @memberof JsonApiACLOutWithLinks
     */
    relationships?: JsonApiACLInRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiACLOutWithLinks
     */
    links?: ObjectLinks;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiACLOutWithLinksTypeEnum {
    Acl = "acl",
}

/**
 * JSON:API representation of analyticalDashboard entity.
 * @export
 * @interface JsonApiAnalyticalDashboardIn
 */
export interface JsonApiAnalyticalDashboardIn {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardIn
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardIn
     */
    type: JsonApiAnalyticalDashboardInTypeEnum;
    /**
     *
     * @type {JsonApiAnalyticalDashboardInAttributes}
     * @memberof JsonApiAnalyticalDashboardIn
     */
    attributes?: JsonApiAnalyticalDashboardInAttributes;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiAnalyticalDashboardInTypeEnum {
    AnalyticalDashboard = "analyticalDashboard",
}

/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardInAttributes
 */
export interface JsonApiAnalyticalDashboardInAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardInAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardInAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiAnalyticalDashboardInAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiAnalyticalDashboardInAttributes
     */
    areRelationsValid?: boolean;
    /**
     * Free-form JSON content.
     * @type {object}
     * @memberof JsonApiAnalyticalDashboardInAttributes
     */
    content?: object;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardInDocument
 */
export interface JsonApiAnalyticalDashboardInDocument {
    /**
     *
     * @type {JsonApiAnalyticalDashboardIn}
     * @memberof JsonApiAnalyticalDashboardInDocument
     */
    data: JsonApiAnalyticalDashboardIn;
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiAnalyticalDashboardLinkage
 */
export interface JsonApiAnalyticalDashboardLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardLinkage
     */
    type: JsonApiAnalyticalDashboardLinkageTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiAnalyticalDashboardLinkageTypeEnum {
    AnalyticalDashboard = "analyticalDashboard",
}

/**
 * JSON:API representation of analyticalDashboard entity.
 * @export
 * @interface JsonApiAnalyticalDashboardOut
 */
export interface JsonApiAnalyticalDashboardOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardOut
     */
    type: JsonApiAnalyticalDashboardOutTypeEnum;
    /**
     *
     * @type {JsonApiAnalyticalDashboardInAttributes}
     * @memberof JsonApiAnalyticalDashboardOut
     */
    attributes?: JsonApiAnalyticalDashboardInAttributes;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationships}
     * @memberof JsonApiAnalyticalDashboardOut
     */
    relationships?: JsonApiAnalyticalDashboardOutRelationships;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiAnalyticalDashboardOutTypeEnum {
    AnalyticalDashboard = "analyticalDashboard",
}

/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutDocument
 */
export interface JsonApiAnalyticalDashboardOutDocument {
    /**
     *
     * @type {JsonApiAnalyticalDashboardOut}
     * @memberof JsonApiAnalyticalDashboardOutDocument
     */
    data: JsonApiAnalyticalDashboardOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiAnalyticalDashboardOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiVisualizationObjectOutWithLinks | JsonApiAnalyticalDashboardOutWithLinks | JsonApiLabelOutWithLinks | JsonApiMetricOutWithLinks | JsonApiDatasetOutWithLinks | JsonApiFilterContextOutWithLinks>}
     * @memberof JsonApiAnalyticalDashboardOutDocument
     */
    included?: Array<
        | JsonApiVisualizationObjectOutWithLinks
        | JsonApiAnalyticalDashboardOutWithLinks
        | JsonApiLabelOutWithLinks
        | JsonApiMetricOutWithLinks
        | JsonApiDatasetOutWithLinks
        | JsonApiFilterContextOutWithLinks
    >;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiAnalyticalDashboardOutList
 */
export interface JsonApiAnalyticalDashboardOutList {
    /**
     *
     * @type {Array<JsonApiAnalyticalDashboardOutWithLinks>}
     * @memberof JsonApiAnalyticalDashboardOutList
     */
    data: Array<JsonApiAnalyticalDashboardOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiAnalyticalDashboardOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiVisualizationObjectOutWithLinks | JsonApiAnalyticalDashboardOutWithLinks | JsonApiLabelOutWithLinks | JsonApiMetricOutWithLinks | JsonApiDatasetOutWithLinks | JsonApiFilterContextOutWithLinks>}
     * @memberof JsonApiAnalyticalDashboardOutList
     */
    included?: Array<
        | JsonApiVisualizationObjectOutWithLinks
        | JsonApiAnalyticalDashboardOutWithLinks
        | JsonApiLabelOutWithLinks
        | JsonApiMetricOutWithLinks
        | JsonApiDatasetOutWithLinks
        | JsonApiFilterContextOutWithLinks
    >;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutRelationships
 */
export interface JsonApiAnalyticalDashboardOutRelationships {
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsVisualizationObjects}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    visualizationObjects?: JsonApiAnalyticalDashboardOutRelationshipsVisualizationObjects;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsAnalyticalDashboards}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    analyticalDashboards?: JsonApiAnalyticalDashboardOutRelationshipsAnalyticalDashboards;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsLabels}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    labels?: JsonApiAnalyticalDashboardOutRelationshipsLabels;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsMetrics}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    metrics?: JsonApiAnalyticalDashboardOutRelationshipsMetrics;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsDatasets}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    datasets?: JsonApiAnalyticalDashboardOutRelationshipsDatasets;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsFilterContexts}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    filterContexts?: JsonApiAnalyticalDashboardOutRelationshipsFilterContexts;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutRelationshipsAnalyticalDashboards
 */
export interface JsonApiAnalyticalDashboardOutRelationshipsAnalyticalDashboards {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiAnalyticalDashboardLinkage>}
     * @memberof JsonApiAnalyticalDashboardOutRelationshipsAnalyticalDashboards
     */
    data: Array<JsonApiAnalyticalDashboardLinkage>;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutRelationshipsDatasets
 */
export interface JsonApiAnalyticalDashboardOutRelationshipsDatasets {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiDatasetLinkage>}
     * @memberof JsonApiAnalyticalDashboardOutRelationshipsDatasets
     */
    data: Array<JsonApiDatasetLinkage>;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutRelationshipsFilterContexts
 */
export interface JsonApiAnalyticalDashboardOutRelationshipsFilterContexts {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiFilterContextLinkage>}
     * @memberof JsonApiAnalyticalDashboardOutRelationshipsFilterContexts
     */
    data: Array<JsonApiFilterContextLinkage>;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutRelationshipsLabels
 */
export interface JsonApiAnalyticalDashboardOutRelationshipsLabels {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiLabelLinkage>}
     * @memberof JsonApiAnalyticalDashboardOutRelationshipsLabels
     */
    data: Array<JsonApiLabelLinkage>;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutRelationshipsMetrics
 */
export interface JsonApiAnalyticalDashboardOutRelationshipsMetrics {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiMetricLinkage>}
     * @memberof JsonApiAnalyticalDashboardOutRelationshipsMetrics
     */
    data: Array<JsonApiMetricLinkage>;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutRelationshipsVisualizationObjects
 */
export interface JsonApiAnalyticalDashboardOutRelationshipsVisualizationObjects {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiVisualizationObjectLinkage>}
     * @memberof JsonApiAnalyticalDashboardOutRelationshipsVisualizationObjects
     */
    data: Array<JsonApiVisualizationObjectLinkage>;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutWithLinks
 */
export interface JsonApiAnalyticalDashboardOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardOutWithLinks
     */
    type: JsonApiAnalyticalDashboardOutWithLinksTypeEnum;
    /**
     *
     * @type {JsonApiAnalyticalDashboardInAttributes}
     * @memberof JsonApiAnalyticalDashboardOutWithLinks
     */
    attributes?: JsonApiAnalyticalDashboardInAttributes;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationships}
     * @memberof JsonApiAnalyticalDashboardOutWithLinks
     */
    relationships?: JsonApiAnalyticalDashboardOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiAnalyticalDashboardOutWithLinks
     */
    links?: ObjectLinks;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiAnalyticalDashboardOutWithLinksTypeEnum {
    AnalyticalDashboard = "analyticalDashboard",
}

/**
 * JSON:API representation of apiToken entity.
 * @export
 * @interface JsonApiApiTokenIn
 */
export interface JsonApiApiTokenIn {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiApiTokenIn
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiApiTokenIn
     */
    type: JsonApiApiTokenInTypeEnum;
    /**
     *
     * @type {object}
     * @memberof JsonApiApiTokenIn
     */
    attributes?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiApiTokenInTypeEnum {
    ApiToken = "apiToken",
}

/**
 *
 * @export
 * @interface JsonApiApiTokenInDocument
 */
export interface JsonApiApiTokenInDocument {
    /**
     *
     * @type {JsonApiApiTokenIn}
     * @memberof JsonApiApiTokenInDocument
     */
    data: JsonApiApiTokenIn;
}
/**
 * JSON:API representation of apiToken entity.
 * @export
 * @interface JsonApiApiTokenOut
 */
export interface JsonApiApiTokenOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiApiTokenOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiApiTokenOut
     */
    type: JsonApiApiTokenOutTypeEnum;
    /**
     *
     * @type {JsonApiApiTokenOutAttributes}
     * @memberof JsonApiApiTokenOut
     */
    attributes?: JsonApiApiTokenOutAttributes;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiApiTokenOutTypeEnum {
    ApiToken = "apiToken",
}

/**
 *
 * @export
 * @interface JsonApiApiTokenOutAttributes
 */
export interface JsonApiApiTokenOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiApiTokenOutAttributes
     */
    bearerToken?: string;
}
/**
 *
 * @export
 * @interface JsonApiApiTokenOutDocument
 */
export interface JsonApiApiTokenOutDocument {
    /**
     *
     * @type {JsonApiApiTokenOut}
     * @memberof JsonApiApiTokenOutDocument
     */
    data: JsonApiApiTokenOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiApiTokenOutDocument
     */
    links?: ObjectLinks;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiApiTokenOutList
 */
export interface JsonApiApiTokenOutList {
    /**
     *
     * @type {Array<JsonApiApiTokenOutWithLinks>}
     * @memberof JsonApiApiTokenOutList
     */
    data: Array<JsonApiApiTokenOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiApiTokenOutList
     */
    links?: ListLinks;
}
/**
 *
 * @export
 * @interface JsonApiApiTokenOutWithLinks
 */
export interface JsonApiApiTokenOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiApiTokenOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiApiTokenOutWithLinks
     */
    type: JsonApiApiTokenOutWithLinksTypeEnum;
    /**
     *
     * @type {JsonApiApiTokenOutAttributes}
     * @memberof JsonApiApiTokenOutWithLinks
     */
    attributes?: JsonApiApiTokenOutAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiApiTokenOutWithLinks
     */
    links?: ObjectLinks;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiApiTokenOutWithLinksTypeEnum {
    ApiToken = "apiToken",
}

/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiAttributeLinkage
 */
export interface JsonApiAttributeLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeLinkage
     */
    type: JsonApiAttributeLinkageTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiAttributeLinkageTypeEnum {
    Attribute = "attribute",
}

/**
 * JSON:API representation of attribute entity.
 * @export
 * @interface JsonApiAttributeOut
 */
export interface JsonApiAttributeOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAttributeOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAttributeOut
     */
    type: JsonApiAttributeOutTypeEnum;
    /**
     *
     * @type {JsonApiAttributeOutAttributes}
     * @memberof JsonApiAttributeOut
     */
    attributes?: JsonApiAttributeOutAttributes;
    /**
     *
     * @type {JsonApiAttributeOutRelationships}
     * @memberof JsonApiAttributeOut
     */
    relationships?: JsonApiAttributeOutRelationships;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiAttributeOutTypeEnum {
    Attribute = "attribute",
}

/**
 *
 * @export
 * @interface JsonApiAttributeOutAttributes
 */
export interface JsonApiAttributeOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeOutAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeOutAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiAttributeOutAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeOutAttributes
     */
    granularity?: JsonApiAttributeOutAttributesGranularityEnum;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiAttributeOutAttributes
     */
    areRelationsValid?: boolean;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiAttributeOutAttributesGranularityEnum {
    MINUTE = "MINUTE",
    HOUR = "HOUR",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    QUARTER = "QUARTER",
    YEAR = "YEAR",
    MINUTEOFHOUR = "MINUTE_OF_HOUR",
    HOUROFDAY = "HOUR_OF_DAY",
    DAYOFWEEK = "DAY_OF_WEEK",
    DAYOFMONTH = "DAY_OF_MONTH",
    DAYOFYEAR = "DAY_OF_YEAR",
    WEEKOFYEAR = "WEEK_OF_YEAR",
    MONTHOFYEAR = "MONTH_OF_YEAR",
    QUARTEROFYEAR = "QUARTER_OF_YEAR",
}

/**
 *
 * @export
 * @interface JsonApiAttributeOutDocument
 */
export interface JsonApiAttributeOutDocument {
    /**
     *
     * @type {JsonApiAttributeOut}
     * @memberof JsonApiAttributeOutDocument
     */
    data: JsonApiAttributeOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiAttributeOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiDatasetOutWithLinks | JsonApiLabelOutWithLinks>}
     * @memberof JsonApiAttributeOutDocument
     */
    included?: Array<JsonApiDatasetOutWithLinks | JsonApiLabelOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiAttributeOutList
 */
export interface JsonApiAttributeOutList {
    /**
     *
     * @type {Array<JsonApiAttributeOutWithLinks>}
     * @memberof JsonApiAttributeOutList
     */
    data: Array<JsonApiAttributeOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiAttributeOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiDatasetOutWithLinks | JsonApiLabelOutWithLinks>}
     * @memberof JsonApiAttributeOutList
     */
    included?: Array<JsonApiDatasetOutWithLinks | JsonApiLabelOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiAttributeOutRelationships
 */
export interface JsonApiAttributeOutRelationships {
    /**
     *
     * @type {JsonApiAttributeOutRelationshipsDataset}
     * @memberof JsonApiAttributeOutRelationships
     */
    dataset?: JsonApiAttributeOutRelationshipsDataset;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsLabels}
     * @memberof JsonApiAttributeOutRelationships
     */
    labels?: JsonApiAnalyticalDashboardOutRelationshipsLabels;
}
/**
 *
 * @export
 * @interface JsonApiAttributeOutRelationshipsDataset
 */
export interface JsonApiAttributeOutRelationshipsDataset {
    /**
     *
     * @type {JsonApiDatasetToOneLinkage}
     * @memberof JsonApiAttributeOutRelationshipsDataset
     */
    data: JsonApiDatasetToOneLinkage | null;
}
/**
 *
 * @export
 * @interface JsonApiAttributeOutWithLinks
 */
export interface JsonApiAttributeOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAttributeOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAttributeOutWithLinks
     */
    type: JsonApiAttributeOutWithLinksTypeEnum;
    /**
     *
     * @type {JsonApiAttributeOutAttributes}
     * @memberof JsonApiAttributeOutWithLinks
     */
    attributes?: JsonApiAttributeOutAttributes;
    /**
     *
     * @type {JsonApiAttributeOutRelationships}
     * @memberof JsonApiAttributeOutWithLinks
     */
    relationships?: JsonApiAttributeOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiAttributeOutWithLinks
     */
    links?: ObjectLinks;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiAttributeOutWithLinksTypeEnum {
    Attribute = "attribute",
}

/**
 * @type JsonApiAttributeToOneLinkage
 * References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
 * @export
 */
export type JsonApiAttributeToOneLinkage = JsonApiAttributeLinkage;
/**
 * JSON:API representation of cookieSecurityProperties entity.
 * @export
 * @interface JsonApiCookieSecurityPropertiesIn
 */
export interface JsonApiCookieSecurityPropertiesIn {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiCookieSecurityPropertiesIn
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiCookieSecurityPropertiesIn
     */
    type: JsonApiCookieSecurityPropertiesInTypeEnum;
    /**
     *
     * @type {JsonApiCookieSecurityPropertiesInAttributes}
     * @memberof JsonApiCookieSecurityPropertiesIn
     */
    attributes?: JsonApiCookieSecurityPropertiesInAttributes;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiCookieSecurityPropertiesInTypeEnum {
    CookieSecurityProperties = "cookieSecurityProperties",
}

/**
 *
 * @export
 * @interface JsonApiCookieSecurityPropertiesInAttributes
 */
export interface JsonApiCookieSecurityPropertiesInAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiCookieSecurityPropertiesInAttributes
     */
    lastRotation?: string;
    /**
     *
     * @type {JsonApiCookieSecurityPropertiesInAttributesRotationInterval}
     * @memberof JsonApiCookieSecurityPropertiesInAttributes
     */
    rotationInterval?: JsonApiCookieSecurityPropertiesInAttributesRotationInterval;
}
/**
 *
 * @export
 * @interface JsonApiCookieSecurityPropertiesInAttributesRotationInterval
 */
export interface JsonApiCookieSecurityPropertiesInAttributesRotationInterval {
    /**
     *
     * @type {number}
     * @memberof JsonApiCookieSecurityPropertiesInAttributesRotationInterval
     */
    seconds?: number;
    /**
     *
     * @type {Array<JsonApiCookieSecurityPropertiesInAttributesRotationIntervalUnits>}
     * @memberof JsonApiCookieSecurityPropertiesInAttributesRotationInterval
     */
    units?: Array<JsonApiCookieSecurityPropertiesInAttributesRotationIntervalUnits>;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiCookieSecurityPropertiesInAttributesRotationInterval
     */
    zero?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiCookieSecurityPropertiesInAttributesRotationInterval
     */
    negative?: boolean;
    /**
     *
     * @type {number}
     * @memberof JsonApiCookieSecurityPropertiesInAttributesRotationInterval
     */
    nano?: number;
}
/**
 *
 * @export
 * @interface JsonApiCookieSecurityPropertiesInAttributesRotationIntervalDuration
 */
export interface JsonApiCookieSecurityPropertiesInAttributesRotationIntervalDuration {
    /**
     *
     * @type {number}
     * @memberof JsonApiCookieSecurityPropertiesInAttributesRotationIntervalDuration
     */
    seconds?: number;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiCookieSecurityPropertiesInAttributesRotationIntervalDuration
     */
    zero?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiCookieSecurityPropertiesInAttributesRotationIntervalDuration
     */
    negative?: boolean;
    /**
     *
     * @type {number}
     * @memberof JsonApiCookieSecurityPropertiesInAttributesRotationIntervalDuration
     */
    nano?: number;
}
/**
 *
 * @export
 * @interface JsonApiCookieSecurityPropertiesInAttributesRotationIntervalUnits
 */
export interface JsonApiCookieSecurityPropertiesInAttributesRotationIntervalUnits {
    /**
     *
     * @type {JsonApiCookieSecurityPropertiesInAttributesRotationIntervalDuration}
     * @memberof JsonApiCookieSecurityPropertiesInAttributesRotationIntervalUnits
     */
    duration?: JsonApiCookieSecurityPropertiesInAttributesRotationIntervalDuration;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiCookieSecurityPropertiesInAttributesRotationIntervalUnits
     */
    durationEstimated?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiCookieSecurityPropertiesInAttributesRotationIntervalUnits
     */
    dateBased?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiCookieSecurityPropertiesInAttributesRotationIntervalUnits
     */
    timeBased?: boolean;
}
/**
 *
 * @export
 * @interface JsonApiCookieSecurityPropertiesInDocument
 */
export interface JsonApiCookieSecurityPropertiesInDocument {
    /**
     *
     * @type {JsonApiCookieSecurityPropertiesIn}
     * @memberof JsonApiCookieSecurityPropertiesInDocument
     */
    data: JsonApiCookieSecurityPropertiesIn;
}
/**
 * JSON:API representation of cookieSecurityProperties entity.
 * @export
 * @interface JsonApiCookieSecurityPropertiesOut
 */
export interface JsonApiCookieSecurityPropertiesOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiCookieSecurityPropertiesOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiCookieSecurityPropertiesOut
     */
    type: JsonApiCookieSecurityPropertiesOutTypeEnum;
    /**
     *
     * @type {JsonApiCookieSecurityPropertiesInAttributes}
     * @memberof JsonApiCookieSecurityPropertiesOut
     */
    attributes?: JsonApiCookieSecurityPropertiesInAttributes;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiCookieSecurityPropertiesOutTypeEnum {
    CookieSecurityProperties = "cookieSecurityProperties",
}

/**
 *
 * @export
 * @interface JsonApiCookieSecurityPropertiesOutDocument
 */
export interface JsonApiCookieSecurityPropertiesOutDocument {
    /**
     *
     * @type {JsonApiCookieSecurityPropertiesOut}
     * @memberof JsonApiCookieSecurityPropertiesOutDocument
     */
    data: JsonApiCookieSecurityPropertiesOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiCookieSecurityPropertiesOutDocument
     */
    links?: ObjectLinks;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiCookieSecurityPropertiesOutList
 */
export interface JsonApiCookieSecurityPropertiesOutList {
    /**
     *
     * @type {Array<JsonApiCookieSecurityPropertiesOutWithLinks>}
     * @memberof JsonApiCookieSecurityPropertiesOutList
     */
    data: Array<JsonApiCookieSecurityPropertiesOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiCookieSecurityPropertiesOutList
     */
    links?: ListLinks;
}
/**
 *
 * @export
 * @interface JsonApiCookieSecurityPropertiesOutWithLinks
 */
export interface JsonApiCookieSecurityPropertiesOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiCookieSecurityPropertiesOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiCookieSecurityPropertiesOutWithLinks
     */
    type: JsonApiCookieSecurityPropertiesOutWithLinksTypeEnum;
    /**
     *
     * @type {JsonApiCookieSecurityPropertiesInAttributes}
     * @memberof JsonApiCookieSecurityPropertiesOutWithLinks
     */
    attributes?: JsonApiCookieSecurityPropertiesInAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiCookieSecurityPropertiesOutWithLinks
     */
    links?: ObjectLinks;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiCookieSecurityPropertiesOutWithLinksTypeEnum {
    CookieSecurityProperties = "cookieSecurityProperties",
}

/**
 * JSON:API representation of dataSource entity.
 * @export
 * @interface JsonApiDataSourceIn
 */
export interface JsonApiDataSourceIn {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDataSourceIn
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDataSourceIn
     */
    type: JsonApiDataSourceInTypeEnum;
    /**
     *
     * @type {JsonApiDataSourceInAttributes}
     * @memberof JsonApiDataSourceIn
     */
    attributes: JsonApiDataSourceInAttributes;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiDataSourceInTypeEnum {
    DataSource = "dataSource",
}

/**
 *
 * @export
 * @interface JsonApiDataSourceInAttributes
 */
export interface JsonApiDataSourceInAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    type: JsonApiDataSourceInAttributesTypeEnum;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    url: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    schema: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    password?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiDataSourceInAttributesTypeEnum {
    POSTGRESQL = "POSTGRESQL",
    REDSHIFT = "REDSHIFT",
    VERTICA = "VERTICA",
    SNOWFLAKE = "SNOWFLAKE",
    ADS = "ADS",
    BIGQUERY = "BIGQUERY",
    MSSQL = "MSSQL",
    PRESTO = "PRESTO",
}

/**
 *
 * @export
 * @interface JsonApiDataSourceInDocument
 */
export interface JsonApiDataSourceInDocument {
    /**
     *
     * @type {JsonApiDataSourceIn}
     * @memberof JsonApiDataSourceInDocument
     */
    data: JsonApiDataSourceIn;
}
/**
 * JSON:API representation of dataSource entity.
 * @export
 * @interface JsonApiDataSourceOut
 */
export interface JsonApiDataSourceOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDataSourceOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDataSourceOut
     */
    type: JsonApiDataSourceOutTypeEnum;
    /**
     *
     * @type {JsonApiDataSourceOutAttributes}
     * @memberof JsonApiDataSourceOut
     */
    attributes: JsonApiDataSourceOutAttributes;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiDataSourceOutTypeEnum {
    DataSource = "dataSource",
}

/**
 *
 * @export
 * @interface JsonApiDataSourceOutAttributes
 */
export interface JsonApiDataSourceOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceOutAttributes
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceOutAttributes
     */
    type: JsonApiDataSourceOutAttributesTypeEnum;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceOutAttributes
     */
    url: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceOutAttributes
     */
    schema: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceOutAttributes
     */
    username?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiDataSourceOutAttributesTypeEnum {
    POSTGRESQL = "POSTGRESQL",
    REDSHIFT = "REDSHIFT",
    VERTICA = "VERTICA",
    SNOWFLAKE = "SNOWFLAKE",
    ADS = "ADS",
    BIGQUERY = "BIGQUERY",
    MSSQL = "MSSQL",
    PRESTO = "PRESTO",
}

/**
 *
 * @export
 * @interface JsonApiDataSourceOutDocument
 */
export interface JsonApiDataSourceOutDocument {
    /**
     *
     * @type {JsonApiDataSourceOut}
     * @memberof JsonApiDataSourceOutDocument
     */
    data: JsonApiDataSourceOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDataSourceOutDocument
     */
    links?: ObjectLinks;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiDataSourceOutList
 */
export interface JsonApiDataSourceOutList {
    /**
     *
     * @type {Array<JsonApiDataSourceOutWithLinks>}
     * @memberof JsonApiDataSourceOutList
     */
    data: Array<JsonApiDataSourceOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiDataSourceOutList
     */
    links?: ListLinks;
}
/**
 *
 * @export
 * @interface JsonApiDataSourceOutWithLinks
 */
export interface JsonApiDataSourceOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDataSourceOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDataSourceOutWithLinks
     */
    type: JsonApiDataSourceOutWithLinksTypeEnum;
    /**
     *
     * @type {JsonApiDataSourceOutAttributes}
     * @memberof JsonApiDataSourceOutWithLinks
     */
    attributes: JsonApiDataSourceOutAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDataSourceOutWithLinks
     */
    links?: ObjectLinks;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiDataSourceOutWithLinksTypeEnum {
    DataSource = "dataSource",
}

/**
 * Tables in data source
 * @export
 * @interface JsonApiDataSourceTableOut
 */
export interface JsonApiDataSourceTableOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDataSourceTableOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDataSourceTableOut
     */
    type: JsonApiDataSourceTableOutTypeEnum;
    /**
     *
     * @type {JsonApiDataSourceTableOutAttributes}
     * @memberof JsonApiDataSourceTableOut
     */
    attributes?: JsonApiDataSourceTableOutAttributes;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiDataSourceTableOutTypeEnum {
    DataSourceTable = "dataSourceTable",
}

/**
 *
 * @export
 * @interface JsonApiDataSourceTableOutAttributes
 */
export interface JsonApiDataSourceTableOutAttributes {
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiDataSourceTableOutAttributes
     */
    path?: Array<string>;
    /**
     *
     * @type {Array<JsonApiDataSourceTableOutAttributesColumns>}
     * @memberof JsonApiDataSourceTableOutAttributes
     */
    columns?: Array<JsonApiDataSourceTableOutAttributesColumns>;
}
/**
 * Table columns in data source
 * @export
 * @interface JsonApiDataSourceTableOutAttributesColumns
 */
export interface JsonApiDataSourceTableOutAttributesColumns {
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceTableOutAttributesColumns
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceTableOutAttributesColumns
     */
    dataType: JsonApiDataSourceTableOutAttributesColumnsDataTypeEnum;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiDataSourceTableOutAttributesColumns
     */
    isPrimaryKey?: boolean;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceTableOutAttributesColumns
     */
    referencedTableId?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceTableOutAttributesColumns
     */
    referencedTableColumn?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiDataSourceTableOutAttributesColumnsDataTypeEnum {
    INT = "INT",
    STRING = "STRING",
    DATE = "DATE",
    NUMERIC = "NUMERIC",
    TIMESTAMP = "TIMESTAMP",
    BOOLEAN = "BOOLEAN",
}

/**
 *
 * @export
 * @interface JsonApiDataSourceTableOutDocument
 */
export interface JsonApiDataSourceTableOutDocument {
    /**
     *
     * @type {JsonApiDataSourceTableOut}
     * @memberof JsonApiDataSourceTableOutDocument
     */
    data: JsonApiDataSourceTableOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDataSourceTableOutDocument
     */
    links?: ObjectLinks;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiDataSourceTableOutList
 */
export interface JsonApiDataSourceTableOutList {
    /**
     *
     * @type {Array<JsonApiDataSourceTableOutWithLinks>}
     * @memberof JsonApiDataSourceTableOutList
     */
    data: Array<JsonApiDataSourceTableOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiDataSourceTableOutList
     */
    links?: ListLinks;
}
/**
 *
 * @export
 * @interface JsonApiDataSourceTableOutWithLinks
 */
export interface JsonApiDataSourceTableOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDataSourceTableOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDataSourceTableOutWithLinks
     */
    type: JsonApiDataSourceTableOutWithLinksTypeEnum;
    /**
     *
     * @type {JsonApiDataSourceTableOutAttributes}
     * @memberof JsonApiDataSourceTableOutWithLinks
     */
    attributes?: JsonApiDataSourceTableOutAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDataSourceTableOutWithLinks
     */
    links?: ObjectLinks;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiDataSourceTableOutWithLinksTypeEnum {
    DataSourceTable = "dataSourceTable",
}

/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiDatasetLinkage
 */
export interface JsonApiDatasetLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetLinkage
     */
    type: JsonApiDatasetLinkageTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiDatasetLinkageTypeEnum {
    Dataset = "dataset",
}

/**
 * JSON:API representation of dataset entity.
 * @export
 * @interface JsonApiDatasetOut
 */
export interface JsonApiDatasetOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDatasetOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDatasetOut
     */
    type: JsonApiDatasetOutTypeEnum;
    /**
     *
     * @type {JsonApiDatasetOutAttributes}
     * @memberof JsonApiDatasetOut
     */
    attributes?: JsonApiDatasetOutAttributes;
    /**
     *
     * @type {JsonApiDatasetOutRelationships}
     * @memberof JsonApiDatasetOut
     */
    relationships?: JsonApiDatasetOutRelationships;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiDatasetOutTypeEnum {
    Dataset = "dataset",
}

/**
 *
 * @export
 * @interface JsonApiDatasetOutAttributes
 */
export interface JsonApiDatasetOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiDatasetOutAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributes
     */
    type?: JsonApiDatasetOutAttributesTypeEnum;
    /**
     *
     * @type {Array<JsonApiDatasetOutAttributesGrain>}
     * @memberof JsonApiDatasetOutAttributes
     */
    grain?: Array<JsonApiDatasetOutAttributesGrain>;
    /**
     *
     * @type {Array<JsonApiDatasetOutAttributesReferenceProperties>}
     * @memberof JsonApiDatasetOutAttributes
     */
    referenceProperties?: Array<JsonApiDatasetOutAttributesReferenceProperties>;
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributes
     */
    dataSourceTableId?: string;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiDatasetOutAttributes
     */
    areRelationsValid?: boolean;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiDatasetOutAttributesTypeEnum {
    NORMAL = "NORMAL",
    DATE = "DATE",
}

/**
 *
 * @export
 * @interface JsonApiDatasetOutAttributesGrain
 */
export interface JsonApiDatasetOutAttributesGrain {
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributesGrain
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributesGrain
     */
    type: JsonApiDatasetOutAttributesGrainTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiDatasetOutAttributesGrainTypeEnum {
    Attribute = "attribute",
    Dataset = "dataset",
}

/**
 *
 * @export
 * @interface JsonApiDatasetOutAttributesReferenceProperties
 */
export interface JsonApiDatasetOutAttributesReferenceProperties {
    /**
     *
     * @type {DatasetReferenceIdentifier}
     * @memberof JsonApiDatasetOutAttributesReferenceProperties
     */
    identifier: DatasetReferenceIdentifier;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiDatasetOutAttributesReferenceProperties
     */
    multivalue: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiDatasetOutAttributesReferenceProperties
     */
    sourceColumns: Array<string>;
}
/**
 *
 * @export
 * @interface JsonApiDatasetOutDocument
 */
export interface JsonApiDatasetOutDocument {
    /**
     *
     * @type {JsonApiDatasetOut}
     * @memberof JsonApiDatasetOutDocument
     */
    data: JsonApiDatasetOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDatasetOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAttributeOutWithLinks | JsonApiFactOutWithLinks | JsonApiDatasetOutWithLinks>}
     * @memberof JsonApiDatasetOutDocument
     */
    included?: Array<JsonApiAttributeOutWithLinks | JsonApiFactOutWithLinks | JsonApiDatasetOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiDatasetOutList
 */
export interface JsonApiDatasetOutList {
    /**
     *
     * @type {Array<JsonApiDatasetOutWithLinks>}
     * @memberof JsonApiDatasetOutList
     */
    data: Array<JsonApiDatasetOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiDatasetOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAttributeOutWithLinks | JsonApiFactOutWithLinks | JsonApiDatasetOutWithLinks>}
     * @memberof JsonApiDatasetOutList
     */
    included?: Array<JsonApiAttributeOutWithLinks | JsonApiFactOutWithLinks | JsonApiDatasetOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiDatasetOutRelationships
 */
export interface JsonApiDatasetOutRelationships {
    /**
     *
     * @type {JsonApiFilterContextOutRelationshipsAttributes}
     * @memberof JsonApiDatasetOutRelationships
     */
    attributes?: JsonApiFilterContextOutRelationshipsAttributes;
    /**
     *
     * @type {JsonApiMetricOutRelationshipsFacts}
     * @memberof JsonApiDatasetOutRelationships
     */
    facts?: JsonApiMetricOutRelationshipsFacts;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsDatasets}
     * @memberof JsonApiDatasetOutRelationships
     */
    references?: JsonApiAnalyticalDashboardOutRelationshipsDatasets;
}
/**
 *
 * @export
 * @interface JsonApiDatasetOutWithLinks
 */
export interface JsonApiDatasetOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDatasetOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDatasetOutWithLinks
     */
    type: JsonApiDatasetOutWithLinksTypeEnum;
    /**
     *
     * @type {JsonApiDatasetOutAttributes}
     * @memberof JsonApiDatasetOutWithLinks
     */
    attributes?: JsonApiDatasetOutAttributes;
    /**
     *
     * @type {JsonApiDatasetOutRelationships}
     * @memberof JsonApiDatasetOutWithLinks
     */
    relationships?: JsonApiDatasetOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDatasetOutWithLinks
     */
    links?: ObjectLinks;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiDatasetOutWithLinksTypeEnum {
    Dataset = "dataset",
}

/**
 * @type JsonApiDatasetToOneLinkage
 * References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
 * @export
 */
export type JsonApiDatasetToOneLinkage = JsonApiDatasetLinkage;
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiFactLinkage
 */
export interface JsonApiFactLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiFactLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiFactLinkage
     */
    type: JsonApiFactLinkageTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiFactLinkageTypeEnum {
    Fact = "fact",
}

/**
 * JSON:API representation of fact entity.
 * @export
 * @interface JsonApiFactOut
 */
export interface JsonApiFactOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiFactOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiFactOut
     */
    type: JsonApiFactOutTypeEnum;
    /**
     *
     * @type {JsonApiFactOutAttributes}
     * @memberof JsonApiFactOut
     */
    attributes?: JsonApiFactOutAttributes;
    /**
     *
     * @type {JsonApiFactOutRelationships}
     * @memberof JsonApiFactOut
     */
    relationships?: JsonApiFactOutRelationships;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiFactOutTypeEnum {
    Fact = "fact",
}

/**
 *
 * @export
 * @interface JsonApiFactOutAttributes
 */
export interface JsonApiFactOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiFactOutAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiFactOutAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiFactOutAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof JsonApiFactOutAttributes
     */
    sourceColumn?: string;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiFactOutAttributes
     */
    areRelationsValid?: boolean;
}
/**
 *
 * @export
 * @interface JsonApiFactOutDocument
 */
export interface JsonApiFactOutDocument {
    /**
     *
     * @type {JsonApiFactOut}
     * @memberof JsonApiFactOutDocument
     */
    data: JsonApiFactOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiFactOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiDatasetOutWithLinks>}
     * @memberof JsonApiFactOutDocument
     */
    included?: Array<JsonApiDatasetOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiFactOutList
 */
export interface JsonApiFactOutList {
    /**
     *
     * @type {Array<JsonApiFactOutWithLinks>}
     * @memberof JsonApiFactOutList
     */
    data: Array<JsonApiFactOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiFactOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiDatasetOutWithLinks>}
     * @memberof JsonApiFactOutList
     */
    included?: Array<JsonApiDatasetOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiFactOutRelationships
 */
export interface JsonApiFactOutRelationships {
    /**
     *
     * @type {JsonApiAttributeOutRelationshipsDataset}
     * @memberof JsonApiFactOutRelationships
     */
    dataset?: JsonApiAttributeOutRelationshipsDataset;
}
/**
 *
 * @export
 * @interface JsonApiFactOutWithLinks
 */
export interface JsonApiFactOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiFactOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiFactOutWithLinks
     */
    type: JsonApiFactOutWithLinksTypeEnum;
    /**
     *
     * @type {JsonApiFactOutAttributes}
     * @memberof JsonApiFactOutWithLinks
     */
    attributes?: JsonApiFactOutAttributes;
    /**
     *
     * @type {JsonApiFactOutRelationships}
     * @memberof JsonApiFactOutWithLinks
     */
    relationships?: JsonApiFactOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiFactOutWithLinks
     */
    links?: ObjectLinks;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiFactOutWithLinksTypeEnum {
    Fact = "fact",
}

/**
 * JSON:API representation of filterContext entity.
 * @export
 * @interface JsonApiFilterContextIn
 */
export interface JsonApiFilterContextIn {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiFilterContextIn
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiFilterContextIn
     */
    type: JsonApiFilterContextInTypeEnum;
    /**
     *
     * @type {JsonApiAnalyticalDashboardInAttributes}
     * @memberof JsonApiFilterContextIn
     */
    attributes?: JsonApiAnalyticalDashboardInAttributes;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiFilterContextInTypeEnum {
    FilterContext = "filterContext",
}

/**
 *
 * @export
 * @interface JsonApiFilterContextInDocument
 */
export interface JsonApiFilterContextInDocument {
    /**
     *
     * @type {JsonApiFilterContextIn}
     * @memberof JsonApiFilterContextInDocument
     */
    data: JsonApiFilterContextIn;
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiFilterContextLinkage
 */
export interface JsonApiFilterContextLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiFilterContextLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiFilterContextLinkage
     */
    type: JsonApiFilterContextLinkageTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiFilterContextLinkageTypeEnum {
    FilterContext = "filterContext",
}

/**
 * JSON:API representation of filterContext entity.
 * @export
 * @interface JsonApiFilterContextOut
 */
export interface JsonApiFilterContextOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiFilterContextOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiFilterContextOut
     */
    type: JsonApiFilterContextOutTypeEnum;
    /**
     *
     * @type {JsonApiAnalyticalDashboardInAttributes}
     * @memberof JsonApiFilterContextOut
     */
    attributes?: JsonApiAnalyticalDashboardInAttributes;
    /**
     *
     * @type {JsonApiFilterContextOutRelationships}
     * @memberof JsonApiFilterContextOut
     */
    relationships?: JsonApiFilterContextOutRelationships;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiFilterContextOutTypeEnum {
    FilterContext = "filterContext",
}

/**
 *
 * @export
 * @interface JsonApiFilterContextOutDocument
 */
export interface JsonApiFilterContextOutDocument {
    /**
     *
     * @type {JsonApiFilterContextOut}
     * @memberof JsonApiFilterContextOutDocument
     */
    data: JsonApiFilterContextOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiFilterContextOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAttributeOutWithLinks | JsonApiDatasetOutWithLinks | JsonApiLabelOutWithLinks>}
     * @memberof JsonApiFilterContextOutDocument
     */
    included?: Array<JsonApiAttributeOutWithLinks | JsonApiDatasetOutWithLinks | JsonApiLabelOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiFilterContextOutList
 */
export interface JsonApiFilterContextOutList {
    /**
     *
     * @type {Array<JsonApiFilterContextOutWithLinks>}
     * @memberof JsonApiFilterContextOutList
     */
    data: Array<JsonApiFilterContextOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiFilterContextOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAttributeOutWithLinks | JsonApiDatasetOutWithLinks | JsonApiLabelOutWithLinks>}
     * @memberof JsonApiFilterContextOutList
     */
    included?: Array<JsonApiAttributeOutWithLinks | JsonApiDatasetOutWithLinks | JsonApiLabelOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiFilterContextOutRelationships
 */
export interface JsonApiFilterContextOutRelationships {
    /**
     *
     * @type {JsonApiFilterContextOutRelationshipsAttributes}
     * @memberof JsonApiFilterContextOutRelationships
     */
    attributes?: JsonApiFilterContextOutRelationshipsAttributes;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsDatasets}
     * @memberof JsonApiFilterContextOutRelationships
     */
    datasets?: JsonApiAnalyticalDashboardOutRelationshipsDatasets;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsLabels}
     * @memberof JsonApiFilterContextOutRelationships
     */
    labels?: JsonApiAnalyticalDashboardOutRelationshipsLabels;
}
/**
 *
 * @export
 * @interface JsonApiFilterContextOutRelationshipsAttributes
 */
export interface JsonApiFilterContextOutRelationshipsAttributes {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiAttributeLinkage>}
     * @memberof JsonApiFilterContextOutRelationshipsAttributes
     */
    data: Array<JsonApiAttributeLinkage>;
}
/**
 *
 * @export
 * @interface JsonApiFilterContextOutWithLinks
 */
export interface JsonApiFilterContextOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiFilterContextOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiFilterContextOutWithLinks
     */
    type: JsonApiFilterContextOutWithLinksTypeEnum;
    /**
     *
     * @type {JsonApiAnalyticalDashboardInAttributes}
     * @memberof JsonApiFilterContextOutWithLinks
     */
    attributes?: JsonApiAnalyticalDashboardInAttributes;
    /**
     *
     * @type {JsonApiFilterContextOutRelationships}
     * @memberof JsonApiFilterContextOutWithLinks
     */
    relationships?: JsonApiFilterContextOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiFilterContextOutWithLinks
     */
    links?: ObjectLinks;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiFilterContextOutWithLinksTypeEnum {
    FilterContext = "filterContext",
}

/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiLabelLinkage
 */
export interface JsonApiLabelLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiLabelLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiLabelLinkage
     */
    type: JsonApiLabelLinkageTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiLabelLinkageTypeEnum {
    Label = "label",
}

/**
 * JSON:API representation of label entity.
 * @export
 * @interface JsonApiLabelOut
 */
export interface JsonApiLabelOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiLabelOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiLabelOut
     */
    type: JsonApiLabelOutTypeEnum;
    /**
     *
     * @type {JsonApiLabelOutAttributes}
     * @memberof JsonApiLabelOut
     */
    attributes?: JsonApiLabelOutAttributes;
    /**
     *
     * @type {JsonApiLabelOutRelationships}
     * @memberof JsonApiLabelOut
     */
    relationships?: JsonApiLabelOutRelationships;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiLabelOutTypeEnum {
    Label = "label",
}

/**
 *
 * @export
 * @interface JsonApiLabelOutAttributes
 */
export interface JsonApiLabelOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiLabelOutAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiLabelOutAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiLabelOutAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiLabelOutAttributes
     */
    primary?: boolean;
    /**
     *
     * @type {string}
     * @memberof JsonApiLabelOutAttributes
     */
    sourceColumn?: string;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiLabelOutAttributes
     */
    areRelationsValid?: boolean;
}
/**
 *
 * @export
 * @interface JsonApiLabelOutDocument
 */
export interface JsonApiLabelOutDocument {
    /**
     *
     * @type {JsonApiLabelOut}
     * @memberof JsonApiLabelOutDocument
     */
    data: JsonApiLabelOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiLabelOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAttributeOutWithLinks>}
     * @memberof JsonApiLabelOutDocument
     */
    included?: Array<JsonApiAttributeOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiLabelOutList
 */
export interface JsonApiLabelOutList {
    /**
     *
     * @type {Array<JsonApiLabelOutWithLinks>}
     * @memberof JsonApiLabelOutList
     */
    data: Array<JsonApiLabelOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiLabelOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAttributeOutWithLinks>}
     * @memberof JsonApiLabelOutList
     */
    included?: Array<JsonApiAttributeOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiLabelOutRelationships
 */
export interface JsonApiLabelOutRelationships {
    /**
     *
     * @type {JsonApiLabelOutRelationshipsAttribute}
     * @memberof JsonApiLabelOutRelationships
     */
    attribute?: JsonApiLabelOutRelationshipsAttribute;
}
/**
 *
 * @export
 * @interface JsonApiLabelOutRelationshipsAttribute
 */
export interface JsonApiLabelOutRelationshipsAttribute {
    /**
     *
     * @type {JsonApiAttributeToOneLinkage}
     * @memberof JsonApiLabelOutRelationshipsAttribute
     */
    data: JsonApiAttributeToOneLinkage | null;
}
/**
 *
 * @export
 * @interface JsonApiLabelOutWithLinks
 */
export interface JsonApiLabelOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiLabelOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiLabelOutWithLinks
     */
    type: JsonApiLabelOutWithLinksTypeEnum;
    /**
     *
     * @type {JsonApiLabelOutAttributes}
     * @memberof JsonApiLabelOutWithLinks
     */
    attributes?: JsonApiLabelOutAttributes;
    /**
     *
     * @type {JsonApiLabelOutRelationships}
     * @memberof JsonApiLabelOutWithLinks
     */
    relationships?: JsonApiLabelOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiLabelOutWithLinks
     */
    links?: ObjectLinks;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiLabelOutWithLinksTypeEnum {
    Label = "label",
}

/**
 * JSON:API representation of metric entity.
 * @export
 * @interface JsonApiMetricIn
 */
export interface JsonApiMetricIn {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiMetricIn
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiMetricIn
     */
    type: JsonApiMetricInTypeEnum;
    /**
     *
     * @type {JsonApiMetricInAttributes}
     * @memberof JsonApiMetricIn
     */
    attributes: JsonApiMetricInAttributes;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiMetricInTypeEnum {
    Metric = "metric",
}

/**
 *
 * @export
 * @interface JsonApiMetricInAttributes
 */
export interface JsonApiMetricInAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricInAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricInAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiMetricInAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiMetricInAttributes
     */
    areRelationsValid?: boolean;
    /**
     *
     * @type {JsonApiMetricInAttributesContent}
     * @memberof JsonApiMetricInAttributes
     */
    content: JsonApiMetricInAttributesContent;
}
/**
 *
 * @export
 * @interface JsonApiMetricInAttributesContent
 */
export interface JsonApiMetricInAttributesContent {
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricInAttributesContent
     */
    format?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricInAttributesContent
     */
    maql: string;
}
/**
 *
 * @export
 * @interface JsonApiMetricInDocument
 */
export interface JsonApiMetricInDocument {
    /**
     *
     * @type {JsonApiMetricIn}
     * @memberof JsonApiMetricInDocument
     */
    data: JsonApiMetricIn;
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiMetricLinkage
 */
export interface JsonApiMetricLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricLinkage
     */
    type: JsonApiMetricLinkageTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiMetricLinkageTypeEnum {
    Metric = "metric",
}

/**
 * JSON:API representation of metric entity.
 * @export
 * @interface JsonApiMetricOut
 */
export interface JsonApiMetricOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiMetricOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiMetricOut
     */
    type: JsonApiMetricOutTypeEnum;
    /**
     *
     * @type {JsonApiMetricInAttributes}
     * @memberof JsonApiMetricOut
     */
    attributes: JsonApiMetricInAttributes;
    /**
     *
     * @type {JsonApiMetricOutRelationships}
     * @memberof JsonApiMetricOut
     */
    relationships?: JsonApiMetricOutRelationships;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiMetricOutTypeEnum {
    Metric = "metric",
}

/**
 *
 * @export
 * @interface JsonApiMetricOutDocument
 */
export interface JsonApiMetricOutDocument {
    /**
     *
     * @type {JsonApiMetricOut}
     * @memberof JsonApiMetricOutDocument
     */
    data: JsonApiMetricOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiMetricOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiFactOutWithLinks | JsonApiAttributeOutWithLinks | JsonApiLabelOutWithLinks | JsonApiMetricOutWithLinks>}
     * @memberof JsonApiMetricOutDocument
     */
    included?: Array<
        | JsonApiFactOutWithLinks
        | JsonApiAttributeOutWithLinks
        | JsonApiLabelOutWithLinks
        | JsonApiMetricOutWithLinks
    >;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiMetricOutList
 */
export interface JsonApiMetricOutList {
    /**
     *
     * @type {Array<JsonApiMetricOutWithLinks>}
     * @memberof JsonApiMetricOutList
     */
    data: Array<JsonApiMetricOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiMetricOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiFactOutWithLinks | JsonApiAttributeOutWithLinks | JsonApiLabelOutWithLinks | JsonApiMetricOutWithLinks>}
     * @memberof JsonApiMetricOutList
     */
    included?: Array<
        | JsonApiFactOutWithLinks
        | JsonApiAttributeOutWithLinks
        | JsonApiLabelOutWithLinks
        | JsonApiMetricOutWithLinks
    >;
}
/**
 *
 * @export
 * @interface JsonApiMetricOutRelationships
 */
export interface JsonApiMetricOutRelationships {
    /**
     *
     * @type {JsonApiMetricOutRelationshipsFacts}
     * @memberof JsonApiMetricOutRelationships
     */
    facts?: JsonApiMetricOutRelationshipsFacts;
    /**
     *
     * @type {JsonApiFilterContextOutRelationshipsAttributes}
     * @memberof JsonApiMetricOutRelationships
     */
    attributes?: JsonApiFilterContextOutRelationshipsAttributes;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsLabels}
     * @memberof JsonApiMetricOutRelationships
     */
    labels?: JsonApiAnalyticalDashboardOutRelationshipsLabels;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsMetrics}
     * @memberof JsonApiMetricOutRelationships
     */
    metrics?: JsonApiAnalyticalDashboardOutRelationshipsMetrics;
}
/**
 *
 * @export
 * @interface JsonApiMetricOutRelationshipsFacts
 */
export interface JsonApiMetricOutRelationshipsFacts {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiFactLinkage>}
     * @memberof JsonApiMetricOutRelationshipsFacts
     */
    data: Array<JsonApiFactLinkage>;
}
/**
 *
 * @export
 * @interface JsonApiMetricOutWithLinks
 */
export interface JsonApiMetricOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiMetricOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiMetricOutWithLinks
     */
    type: JsonApiMetricOutWithLinksTypeEnum;
    /**
     *
     * @type {JsonApiMetricInAttributes}
     * @memberof JsonApiMetricOutWithLinks
     */
    attributes: JsonApiMetricInAttributes;
    /**
     *
     * @type {JsonApiMetricOutRelationships}
     * @memberof JsonApiMetricOutWithLinks
     */
    relationships?: JsonApiMetricOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiMetricOutWithLinks
     */
    links?: ObjectLinks;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiMetricOutWithLinksTypeEnum {
    Metric = "metric",
}

/**
 * JSON:API representation of organization entity.
 * @export
 * @interface JsonApiOrganizationIn
 */
export interface JsonApiOrganizationIn {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiOrganizationIn
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiOrganizationIn
     */
    type: JsonApiOrganizationInTypeEnum;
    /**
     *
     * @type {JsonApiOrganizationInAttributes}
     * @memberof JsonApiOrganizationIn
     */
    attributes?: JsonApiOrganizationInAttributes;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiOrganizationInTypeEnum {
    Organization = "organization",
}

/**
 *
 * @export
 * @interface JsonApiOrganizationInAttributes
 */
export interface JsonApiOrganizationInAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationInAttributes
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationInAttributes
     */
    hostname?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationInAttributes
     */
    oauthIssuerLocation?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationInAttributes
     */
    oauthClientId?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationInAttributes
     */
    oauthClientSecret?: string;
}
/**
 *
 * @export
 * @interface JsonApiOrganizationInDocument
 */
export interface JsonApiOrganizationInDocument {
    /**
     *
     * @type {JsonApiOrganizationIn}
     * @memberof JsonApiOrganizationInDocument
     */
    data: JsonApiOrganizationIn;
}
/**
 * JSON:API representation of organization entity.
 * @export
 * @interface JsonApiOrganizationOut
 */
export interface JsonApiOrganizationOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiOrganizationOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiOrganizationOut
     */
    type: JsonApiOrganizationOutTypeEnum;
    /**
     *
     * @type {JsonApiOrganizationOutAttributes}
     * @memberof JsonApiOrganizationOut
     */
    attributes?: JsonApiOrganizationOutAttributes;
    /**
     *
     * @type {JsonApiOrganizationOutRelationships}
     * @memberof JsonApiOrganizationOut
     */
    relationships?: JsonApiOrganizationOutRelationships;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiOrganizationOutTypeEnum {
    Organization = "organization",
}

/**
 *
 * @export
 * @interface JsonApiOrganizationOutAttributes
 */
export interface JsonApiOrganizationOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationOutAttributes
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationOutAttributes
     */
    hostname?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationOutAttributes
     */
    oauthIssuerLocation?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationOutAttributes
     */
    oauthClientId?: string;
}
/**
 *
 * @export
 * @interface JsonApiOrganizationOutDocument
 */
export interface JsonApiOrganizationOutDocument {
    /**
     *
     * @type {JsonApiOrganizationOut}
     * @memberof JsonApiOrganizationOutDocument
     */
    data: JsonApiOrganizationOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiOrganizationOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserOutWithLinks | JsonApiUserGroupOutWithLinks>}
     * @memberof JsonApiOrganizationOutDocument
     */
    included?: Array<JsonApiUserOutWithLinks | JsonApiUserGroupOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiOrganizationOutRelationships
 */
export interface JsonApiOrganizationOutRelationships {
    /**
     *
     * @type {JsonApiOrganizationOutRelationshipsBootstrapUser}
     * @memberof JsonApiOrganizationOutRelationships
     */
    bootstrapUser?: JsonApiOrganizationOutRelationshipsBootstrapUser;
    /**
     *
     * @type {JsonApiOrganizationOutRelationshipsBootstrapUserGroup}
     * @memberof JsonApiOrganizationOutRelationships
     */
    bootstrapUserGroup?: JsonApiOrganizationOutRelationshipsBootstrapUserGroup;
}
/**
 *
 * @export
 * @interface JsonApiOrganizationOutRelationshipsBootstrapUser
 */
export interface JsonApiOrganizationOutRelationshipsBootstrapUser {
    /**
     *
     * @type {JsonApiUserToOneLinkage}
     * @memberof JsonApiOrganizationOutRelationshipsBootstrapUser
     */
    data: JsonApiUserToOneLinkage | null;
}
/**
 *
 * @export
 * @interface JsonApiOrganizationOutRelationshipsBootstrapUserGroup
 */
export interface JsonApiOrganizationOutRelationshipsBootstrapUserGroup {
    /**
     *
     * @type {JsonApiUserGroupToOneLinkage}
     * @memberof JsonApiOrganizationOutRelationshipsBootstrapUserGroup
     */
    data: JsonApiUserGroupToOneLinkage | null;
}
/**
 * JSON:API representation of userGroup entity.
 * @export
 * @interface JsonApiUserGroupIn
 */
export interface JsonApiUserGroupIn {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserGroupIn
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserGroupIn
     */
    type: JsonApiUserGroupInTypeEnum;
    /**
     *
     * @type {object}
     * @memberof JsonApiUserGroupIn
     */
    attributes?: object;
    /**
     *
     * @type {JsonApiUserGroupInRelationships}
     * @memberof JsonApiUserGroupIn
     */
    relationships?: JsonApiUserGroupInRelationships;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiUserGroupInTypeEnum {
    UserGroup = "userGroup",
}

/**
 *
 * @export
 * @interface JsonApiUserGroupInDocument
 */
export interface JsonApiUserGroupInDocument {
    /**
     *
     * @type {JsonApiUserGroupIn}
     * @memberof JsonApiUserGroupInDocument
     */
    data: JsonApiUserGroupIn;
}
/**
 *
 * @export
 * @interface JsonApiUserGroupInRelationships
 */
export interface JsonApiUserGroupInRelationships {
    /**
     *
     * @type {JsonApiOrganizationOutRelationshipsBootstrapUserGroup}
     * @memberof JsonApiUserGroupInRelationships
     */
    parent?: JsonApiOrganizationOutRelationshipsBootstrapUserGroup;
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiUserGroupLinkage
 */
export interface JsonApiUserGroupLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiUserGroupLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiUserGroupLinkage
     */
    type: JsonApiUserGroupLinkageTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiUserGroupLinkageTypeEnum {
    UserGroup = "userGroup",
}

/**
 * JSON:API representation of userGroup entity.
 * @export
 * @interface JsonApiUserGroupOut
 */
export interface JsonApiUserGroupOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserGroupOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserGroupOut
     */
    type: JsonApiUserGroupOutTypeEnum;
    /**
     *
     * @type {object}
     * @memberof JsonApiUserGroupOut
     */
    attributes?: object;
    /**
     *
     * @type {JsonApiUserGroupInRelationships}
     * @memberof JsonApiUserGroupOut
     */
    relationships?: JsonApiUserGroupInRelationships;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiUserGroupOutTypeEnum {
    UserGroup = "userGroup",
}

/**
 *
 * @export
 * @interface JsonApiUserGroupOutDocument
 */
export interface JsonApiUserGroupOutDocument {
    /**
     *
     * @type {JsonApiUserGroupOut}
     * @memberof JsonApiUserGroupOutDocument
     */
    data: JsonApiUserGroupOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiUserGroupOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserGroupOutWithLinks>}
     * @memberof JsonApiUserGroupOutDocument
     */
    included?: Array<JsonApiUserGroupOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiUserGroupOutList
 */
export interface JsonApiUserGroupOutList {
    /**
     *
     * @type {Array<JsonApiUserGroupOutWithLinks>}
     * @memberof JsonApiUserGroupOutList
     */
    data: Array<JsonApiUserGroupOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiUserGroupOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserGroupOutWithLinks>}
     * @memberof JsonApiUserGroupOutList
     */
    included?: Array<JsonApiUserGroupOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiUserGroupOutWithLinks
 */
export interface JsonApiUserGroupOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserGroupOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserGroupOutWithLinks
     */
    type: JsonApiUserGroupOutWithLinksTypeEnum;
    /**
     *
     * @type {object}
     * @memberof JsonApiUserGroupOutWithLinks
     */
    attributes?: object;
    /**
     *
     * @type {JsonApiUserGroupInRelationships}
     * @memberof JsonApiUserGroupOutWithLinks
     */
    relationships?: JsonApiUserGroupInRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiUserGroupOutWithLinks
     */
    links?: ObjectLinks;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiUserGroupOutWithLinksTypeEnum {
    UserGroup = "userGroup",
}

/**
 * @type JsonApiUserGroupToOneLinkage
 * References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
 * @export
 */
export type JsonApiUserGroupToOneLinkage = JsonApiUserGroupLinkage;
/**
 * JSON:API representation of user entity.
 * @export
 * @interface JsonApiUserIn
 */
export interface JsonApiUserIn {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserIn
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserIn
     */
    type: JsonApiUserInTypeEnum;
    /**
     *
     * @type {JsonApiUserInAttributes}
     * @memberof JsonApiUserIn
     */
    attributes?: JsonApiUserInAttributes;
    /**
     *
     * @type {JsonApiUserInRelationships}
     * @memberof JsonApiUserIn
     */
    relationships: JsonApiUserInRelationships;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiUserInTypeEnum {
    User = "user",
}

/**
 *
 * @export
 * @interface JsonApiUserInAttributes
 */
export interface JsonApiUserInAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiUserInAttributes
     */
    authenticationId?: string;
}
/**
 *
 * @export
 * @interface JsonApiUserInDocument
 */
export interface JsonApiUserInDocument {
    /**
     *
     * @type {JsonApiUserIn}
     * @memberof JsonApiUserInDocument
     */
    data: JsonApiUserIn;
}
/**
 *
 * @export
 * @interface JsonApiUserInRelationships
 */
export interface JsonApiUserInRelationships {
    /**
     *
     * @type {JsonApiOrganizationOutRelationshipsBootstrapUserGroup}
     * @memberof JsonApiUserInRelationships
     */
    userGroup: JsonApiOrganizationOutRelationshipsBootstrapUserGroup;
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiUserLinkage
 */
export interface JsonApiUserLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiUserLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiUserLinkage
     */
    type: JsonApiUserLinkageTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiUserLinkageTypeEnum {
    User = "user",
}

/**
 * JSON:API representation of user entity.
 * @export
 * @interface JsonApiUserOut
 */
export interface JsonApiUserOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserOut
     */
    type: JsonApiUserOutTypeEnum;
    /**
     *
     * @type {JsonApiUserInAttributes}
     * @memberof JsonApiUserOut
     */
    attributes?: JsonApiUserInAttributes;
    /**
     *
     * @type {JsonApiUserOutRelationships}
     * @memberof JsonApiUserOut
     */
    relationships?: JsonApiUserOutRelationships;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiUserOutTypeEnum {
    User = "user",
}

/**
 *
 * @export
 * @interface JsonApiUserOutDocument
 */
export interface JsonApiUserOutDocument {
    /**
     *
     * @type {JsonApiUserOut}
     * @memberof JsonApiUserOutDocument
     */
    data: JsonApiUserOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiUserOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserGroupOutWithLinks>}
     * @memberof JsonApiUserOutDocument
     */
    included?: Array<JsonApiUserGroupOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiUserOutList
 */
export interface JsonApiUserOutList {
    /**
     *
     * @type {Array<JsonApiUserOutWithLinks>}
     * @memberof JsonApiUserOutList
     */
    data: Array<JsonApiUserOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiUserOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserGroupOutWithLinks>}
     * @memberof JsonApiUserOutList
     */
    included?: Array<JsonApiUserGroupOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiUserOutRelationships
 */
export interface JsonApiUserOutRelationships {
    /**
     *
     * @type {JsonApiOrganizationOutRelationshipsBootstrapUserGroup}
     * @memberof JsonApiUserOutRelationships
     */
    userGroup?: JsonApiOrganizationOutRelationshipsBootstrapUserGroup;
}
/**
 *
 * @export
 * @interface JsonApiUserOutWithLinks
 */
export interface JsonApiUserOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserOutWithLinks
     */
    type: JsonApiUserOutWithLinksTypeEnum;
    /**
     *
     * @type {JsonApiUserInAttributes}
     * @memberof JsonApiUserOutWithLinks
     */
    attributes?: JsonApiUserInAttributes;
    /**
     *
     * @type {JsonApiUserOutRelationships}
     * @memberof JsonApiUserOutWithLinks
     */
    relationships?: JsonApiUserOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiUserOutWithLinks
     */
    links?: ObjectLinks;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiUserOutWithLinksTypeEnum {
    User = "user",
}

/**
 * @type JsonApiUserToOneLinkage
 * References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
 * @export
 */
export type JsonApiUserToOneLinkage = JsonApiUserLinkage;
/**
 * JSON:API representation of visualizationObject entity.
 * @export
 * @interface JsonApiVisualizationObjectIn
 */
export interface JsonApiVisualizationObjectIn {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiVisualizationObjectIn
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiVisualizationObjectIn
     */
    type: JsonApiVisualizationObjectInTypeEnum;
    /**
     *
     * @type {JsonApiAnalyticalDashboardInAttributes}
     * @memberof JsonApiVisualizationObjectIn
     */
    attributes?: JsonApiAnalyticalDashboardInAttributes;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiVisualizationObjectInTypeEnum {
    VisualizationObject = "visualizationObject",
}

/**
 *
 * @export
 * @interface JsonApiVisualizationObjectInDocument
 */
export interface JsonApiVisualizationObjectInDocument {
    /**
     *
     * @type {JsonApiVisualizationObjectIn}
     * @memberof JsonApiVisualizationObjectInDocument
     */
    data: JsonApiVisualizationObjectIn;
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiVisualizationObjectLinkage
 */
export interface JsonApiVisualizationObjectLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiVisualizationObjectLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiVisualizationObjectLinkage
     */
    type: JsonApiVisualizationObjectLinkageTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiVisualizationObjectLinkageTypeEnum {
    VisualizationObject = "visualizationObject",
}

/**
 * JSON:API representation of visualizationObject entity.
 * @export
 * @interface JsonApiVisualizationObjectOut
 */
export interface JsonApiVisualizationObjectOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiVisualizationObjectOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiVisualizationObjectOut
     */
    type: JsonApiVisualizationObjectOutTypeEnum;
    /**
     *
     * @type {JsonApiAnalyticalDashboardInAttributes}
     * @memberof JsonApiVisualizationObjectOut
     */
    attributes?: JsonApiAnalyticalDashboardInAttributes;
    /**
     *
     * @type {JsonApiVisualizationObjectOutRelationships}
     * @memberof JsonApiVisualizationObjectOut
     */
    relationships?: JsonApiVisualizationObjectOutRelationships;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiVisualizationObjectOutTypeEnum {
    VisualizationObject = "visualizationObject",
}

/**
 *
 * @export
 * @interface JsonApiVisualizationObjectOutDocument
 */
export interface JsonApiVisualizationObjectOutDocument {
    /**
     *
     * @type {JsonApiVisualizationObjectOut}
     * @memberof JsonApiVisualizationObjectOutDocument
     */
    data: JsonApiVisualizationObjectOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiVisualizationObjectOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiFactOutWithLinks | JsonApiAttributeOutWithLinks | JsonApiLabelOutWithLinks | JsonApiMetricOutWithLinks | JsonApiDatasetOutWithLinks>}
     * @memberof JsonApiVisualizationObjectOutDocument
     */
    included?: Array<
        | JsonApiFactOutWithLinks
        | JsonApiAttributeOutWithLinks
        | JsonApiLabelOutWithLinks
        | JsonApiMetricOutWithLinks
        | JsonApiDatasetOutWithLinks
    >;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiVisualizationObjectOutList
 */
export interface JsonApiVisualizationObjectOutList {
    /**
     *
     * @type {Array<JsonApiVisualizationObjectOutWithLinks>}
     * @memberof JsonApiVisualizationObjectOutList
     */
    data: Array<JsonApiVisualizationObjectOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiVisualizationObjectOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiFactOutWithLinks | JsonApiAttributeOutWithLinks | JsonApiLabelOutWithLinks | JsonApiMetricOutWithLinks | JsonApiDatasetOutWithLinks>}
     * @memberof JsonApiVisualizationObjectOutList
     */
    included?: Array<
        | JsonApiFactOutWithLinks
        | JsonApiAttributeOutWithLinks
        | JsonApiLabelOutWithLinks
        | JsonApiMetricOutWithLinks
        | JsonApiDatasetOutWithLinks
    >;
}
/**
 *
 * @export
 * @interface JsonApiVisualizationObjectOutRelationships
 */
export interface JsonApiVisualizationObjectOutRelationships {
    /**
     *
     * @type {JsonApiMetricOutRelationshipsFacts}
     * @memberof JsonApiVisualizationObjectOutRelationships
     */
    facts?: JsonApiMetricOutRelationshipsFacts;
    /**
     *
     * @type {JsonApiFilterContextOutRelationshipsAttributes}
     * @memberof JsonApiVisualizationObjectOutRelationships
     */
    attributes?: JsonApiFilterContextOutRelationshipsAttributes;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsLabels}
     * @memberof JsonApiVisualizationObjectOutRelationships
     */
    labels?: JsonApiAnalyticalDashboardOutRelationshipsLabels;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsMetrics}
     * @memberof JsonApiVisualizationObjectOutRelationships
     */
    metrics?: JsonApiAnalyticalDashboardOutRelationshipsMetrics;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsDatasets}
     * @memberof JsonApiVisualizationObjectOutRelationships
     */
    datasets?: JsonApiAnalyticalDashboardOutRelationshipsDatasets;
}
/**
 *
 * @export
 * @interface JsonApiVisualizationObjectOutWithLinks
 */
export interface JsonApiVisualizationObjectOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiVisualizationObjectOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiVisualizationObjectOutWithLinks
     */
    type: JsonApiVisualizationObjectOutWithLinksTypeEnum;
    /**
     *
     * @type {JsonApiAnalyticalDashboardInAttributes}
     * @memberof JsonApiVisualizationObjectOutWithLinks
     */
    attributes?: JsonApiAnalyticalDashboardInAttributes;
    /**
     *
     * @type {JsonApiVisualizationObjectOutRelationships}
     * @memberof JsonApiVisualizationObjectOutWithLinks
     */
    relationships?: JsonApiVisualizationObjectOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiVisualizationObjectOutWithLinks
     */
    links?: ObjectLinks;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiVisualizationObjectOutWithLinksTypeEnum {
    VisualizationObject = "visualizationObject",
}

/**
 * JSON:API representation of workspaceDataFilter entity.
 * @export
 * @interface JsonApiWorkspaceDataFilterIn
 */
export interface JsonApiWorkspaceDataFilterIn {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterIn
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterIn
     */
    type: JsonApiWorkspaceDataFilterInTypeEnum;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterInAttributes}
     * @memberof JsonApiWorkspaceDataFilterIn
     */
    attributes?: JsonApiWorkspaceDataFilterInAttributes;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterInRelationships}
     * @memberof JsonApiWorkspaceDataFilterIn
     */
    relationships?: JsonApiWorkspaceDataFilterInRelationships;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiWorkspaceDataFilterInTypeEnum {
    WorkspaceDataFilter = "workspaceDataFilter",
}

/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterInAttributes
 */
export interface JsonApiWorkspaceDataFilterInAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterInAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterInAttributes
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterInAttributes
     */
    columnName?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterInAttributes
     */
    dataSourceId?: string;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterInDocument
 */
export interface JsonApiWorkspaceDataFilterInDocument {
    /**
     *
     * @type {JsonApiWorkspaceDataFilterIn}
     * @memberof JsonApiWorkspaceDataFilterInDocument
     */
    data: JsonApiWorkspaceDataFilterIn;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterInRelationships
 */
export interface JsonApiWorkspaceDataFilterInRelationships {
    /**
     *
     * @type {JsonApiWorkspaceDataFilterInRelationshipsFilterSettings}
     * @memberof JsonApiWorkspaceDataFilterInRelationships
     */
    filterSettings?: JsonApiWorkspaceDataFilterInRelationshipsFilterSettings;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterInRelationshipsFilterSettings
 */
export interface JsonApiWorkspaceDataFilterInRelationshipsFilterSettings {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiWorkspaceDataFilterSettingLinkage>}
     * @memberof JsonApiWorkspaceDataFilterInRelationshipsFilterSettings
     */
    data: Array<JsonApiWorkspaceDataFilterSettingLinkage>;
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiWorkspaceDataFilterLinkage
 */
export interface JsonApiWorkspaceDataFilterLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterLinkage
     */
    type: JsonApiWorkspaceDataFilterLinkageTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiWorkspaceDataFilterLinkageTypeEnum {
    WorkspaceDataFilter = "workspaceDataFilter",
}

/**
 * JSON:API representation of workspaceDataFilter entity.
 * @export
 * @interface JsonApiWorkspaceDataFilterOut
 */
export interface JsonApiWorkspaceDataFilterOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterOut
     */
    type: JsonApiWorkspaceDataFilterOutTypeEnum;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterInAttributes}
     * @memberof JsonApiWorkspaceDataFilterOut
     */
    attributes?: JsonApiWorkspaceDataFilterInAttributes;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterInRelationships}
     * @memberof JsonApiWorkspaceDataFilterOut
     */
    relationships?: JsonApiWorkspaceDataFilterInRelationships;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiWorkspaceDataFilterOutTypeEnum {
    WorkspaceDataFilter = "workspaceDataFilter",
}

/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterOutDocument
 */
export interface JsonApiWorkspaceDataFilterOutDocument {
    /**
     *
     * @type {JsonApiWorkspaceDataFilterOut}
     * @memberof JsonApiWorkspaceDataFilterOutDocument
     */
    data: JsonApiWorkspaceDataFilterOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceDataFilterOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiWorkspaceDataFilterSettingOutWithLinks>}
     * @memberof JsonApiWorkspaceDataFilterOutDocument
     */
    included?: Array<JsonApiWorkspaceDataFilterSettingOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiWorkspaceDataFilterOutList
 */
export interface JsonApiWorkspaceDataFilterOutList {
    /**
     *
     * @type {Array<JsonApiWorkspaceDataFilterOutWithLinks>}
     * @memberof JsonApiWorkspaceDataFilterOutList
     */
    data: Array<JsonApiWorkspaceDataFilterOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiWorkspaceDataFilterOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiWorkspaceDataFilterSettingOutWithLinks>}
     * @memberof JsonApiWorkspaceDataFilterOutList
     */
    included?: Array<JsonApiWorkspaceDataFilterSettingOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterOutWithLinks
 */
export interface JsonApiWorkspaceDataFilterOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterOutWithLinks
     */
    type: JsonApiWorkspaceDataFilterOutWithLinksTypeEnum;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterInAttributes}
     * @memberof JsonApiWorkspaceDataFilterOutWithLinks
     */
    attributes?: JsonApiWorkspaceDataFilterInAttributes;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterInRelationships}
     * @memberof JsonApiWorkspaceDataFilterOutWithLinks
     */
    relationships?: JsonApiWorkspaceDataFilterInRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceDataFilterOutWithLinks
     */
    links?: ObjectLinks;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiWorkspaceDataFilterOutWithLinksTypeEnum {
    WorkspaceDataFilter = "workspaceDataFilter",
}

/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingLinkage
 */
export interface JsonApiWorkspaceDataFilterSettingLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingLinkage
     */
    type: JsonApiWorkspaceDataFilterSettingLinkageTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiWorkspaceDataFilterSettingLinkageTypeEnum {
    WorkspaceDataFilterSetting = "workspaceDataFilterSetting",
}

/**
 * JSON:API representation of workspaceDataFilterSetting entity.
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingOut
 */
export interface JsonApiWorkspaceDataFilterSettingOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingOut
     */
    type: JsonApiWorkspaceDataFilterSettingOutTypeEnum;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingOutAttributes}
     * @memberof JsonApiWorkspaceDataFilterSettingOut
     */
    attributes?: JsonApiWorkspaceDataFilterSettingOutAttributes;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingOutRelationships}
     * @memberof JsonApiWorkspaceDataFilterSettingOut
     */
    relationships?: JsonApiWorkspaceDataFilterSettingOutRelationships;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiWorkspaceDataFilterSettingOutTypeEnum {
    WorkspaceDataFilterSetting = "workspaceDataFilterSetting",
}

/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingOutAttributes
 */
export interface JsonApiWorkspaceDataFilterSettingOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingOutAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingOutAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiWorkspaceDataFilterSettingOutAttributes
     */
    filterValues?: Array<string>;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingOutDocument
 */
export interface JsonApiWorkspaceDataFilterSettingOutDocument {
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingOut}
     * @memberof JsonApiWorkspaceDataFilterSettingOutDocument
     */
    data: JsonApiWorkspaceDataFilterSettingOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceDataFilterSettingOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiWorkspaceDataFilterOutWithLinks>}
     * @memberof JsonApiWorkspaceDataFilterSettingOutDocument
     */
    included?: Array<JsonApiWorkspaceDataFilterOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingOutList
 */
export interface JsonApiWorkspaceDataFilterSettingOutList {
    /**
     *
     * @type {Array<JsonApiWorkspaceDataFilterSettingOutWithLinks>}
     * @memberof JsonApiWorkspaceDataFilterSettingOutList
     */
    data: Array<JsonApiWorkspaceDataFilterSettingOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiWorkspaceDataFilterSettingOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiWorkspaceDataFilterOutWithLinks>}
     * @memberof JsonApiWorkspaceDataFilterSettingOutList
     */
    included?: Array<JsonApiWorkspaceDataFilterOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingOutRelationships
 */
export interface JsonApiWorkspaceDataFilterSettingOutRelationships {
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingOutRelationshipsWorkspaceDataFilter}
     * @memberof JsonApiWorkspaceDataFilterSettingOutRelationships
     */
    workspaceDataFilter?: JsonApiWorkspaceDataFilterSettingOutRelationshipsWorkspaceDataFilter;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingOutRelationshipsWorkspaceDataFilter
 */
export interface JsonApiWorkspaceDataFilterSettingOutRelationshipsWorkspaceDataFilter {
    /**
     *
     * @type {JsonApiWorkspaceDataFilterToOneLinkage}
     * @memberof JsonApiWorkspaceDataFilterSettingOutRelationshipsWorkspaceDataFilter
     */
    data: JsonApiWorkspaceDataFilterToOneLinkage | null;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingOutWithLinks
 */
export interface JsonApiWorkspaceDataFilterSettingOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingOutWithLinks
     */
    type: JsonApiWorkspaceDataFilterSettingOutWithLinksTypeEnum;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingOutAttributes}
     * @memberof JsonApiWorkspaceDataFilterSettingOutWithLinks
     */
    attributes?: JsonApiWorkspaceDataFilterSettingOutAttributes;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingOutRelationships}
     * @memberof JsonApiWorkspaceDataFilterSettingOutWithLinks
     */
    relationships?: JsonApiWorkspaceDataFilterSettingOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceDataFilterSettingOutWithLinks
     */
    links?: ObjectLinks;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiWorkspaceDataFilterSettingOutWithLinksTypeEnum {
    WorkspaceDataFilterSetting = "workspaceDataFilterSetting",
}

/**
 * @type JsonApiWorkspaceDataFilterToOneLinkage
 * References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
 * @export
 */
export type JsonApiWorkspaceDataFilterToOneLinkage = JsonApiWorkspaceDataFilterLinkage;
/**
 * JSON:API representation of workspace entity.
 * @export
 * @interface JsonApiWorkspaceIn
 */
export interface JsonApiWorkspaceIn {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceIn
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceIn
     */
    type: JsonApiWorkspaceInTypeEnum;
    /**
     *
     * @type {JsonApiWorkspaceInAttributes}
     * @memberof JsonApiWorkspaceIn
     */
    attributes?: JsonApiWorkspaceInAttributes;
    /**
     *
     * @type {JsonApiWorkspaceInRelationships}
     * @memberof JsonApiWorkspaceIn
     */
    relationships?: JsonApiWorkspaceInRelationships;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiWorkspaceInTypeEnum {
    Workspace = "workspace",
}

/**
 *
 * @export
 * @interface JsonApiWorkspaceInAttributes
 */
export interface JsonApiWorkspaceInAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceInAttributes
     */
    name?: string;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceInDocument
 */
export interface JsonApiWorkspaceInDocument {
    /**
     *
     * @type {JsonApiWorkspaceIn}
     * @memberof JsonApiWorkspaceInDocument
     */
    data: JsonApiWorkspaceIn;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceInRelationships
 */
export interface JsonApiWorkspaceInRelationships {
    /**
     *
     * @type {JsonApiWorkspaceInRelationshipsParent}
     * @memberof JsonApiWorkspaceInRelationships
     */
    parent?: JsonApiWorkspaceInRelationshipsParent;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceInRelationshipsParent
 */
export interface JsonApiWorkspaceInRelationshipsParent {
    /**
     *
     * @type {JsonApiWorkspaceToOneLinkage}
     * @memberof JsonApiWorkspaceInRelationshipsParent
     */
    data: JsonApiWorkspaceToOneLinkage | null;
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiWorkspaceLinkage
 */
export interface JsonApiWorkspaceLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceLinkage
     */
    type: JsonApiWorkspaceLinkageTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiWorkspaceLinkageTypeEnum {
    Workspace = "workspace",
}

/**
 * JSON:API representation of workspace entity.
 * @export
 * @interface JsonApiWorkspaceOut
 */
export interface JsonApiWorkspaceOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceOut
     */
    type: JsonApiWorkspaceOutTypeEnum;
    /**
     *
     * @type {JsonApiWorkspaceInAttributes}
     * @memberof JsonApiWorkspaceOut
     */
    attributes?: JsonApiWorkspaceInAttributes;
    /**
     *
     * @type {JsonApiWorkspaceInRelationships}
     * @memberof JsonApiWorkspaceOut
     */
    relationships?: JsonApiWorkspaceInRelationships;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiWorkspaceOutTypeEnum {
    Workspace = "workspace",
}

/**
 *
 * @export
 * @interface JsonApiWorkspaceOutDocument
 */
export interface JsonApiWorkspaceOutDocument {
    /**
     *
     * @type {JsonApiWorkspaceOut}
     * @memberof JsonApiWorkspaceOutDocument
     */
    data: JsonApiWorkspaceOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiWorkspaceOutWithLinks>}
     * @memberof JsonApiWorkspaceOutDocument
     */
    included?: Array<JsonApiWorkspaceOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiWorkspaceOutList
 */
export interface JsonApiWorkspaceOutList {
    /**
     *
     * @type {Array<JsonApiWorkspaceOutWithLinks>}
     * @memberof JsonApiWorkspaceOutList
     */
    data: Array<JsonApiWorkspaceOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiWorkspaceOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiWorkspaceOutWithLinks>}
     * @memberof JsonApiWorkspaceOutList
     */
    included?: Array<JsonApiWorkspaceOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceOutWithLinks
 */
export interface JsonApiWorkspaceOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceOutWithLinks
     */
    type: JsonApiWorkspaceOutWithLinksTypeEnum;
    /**
     *
     * @type {JsonApiWorkspaceInAttributes}
     * @memberof JsonApiWorkspaceOutWithLinks
     */
    attributes?: JsonApiWorkspaceInAttributes;
    /**
     *
     * @type {JsonApiWorkspaceInRelationships}
     * @memberof JsonApiWorkspaceOutWithLinks
     */
    relationships?: JsonApiWorkspaceInRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceOutWithLinks
     */
    links?: ObjectLinks;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiWorkspaceOutWithLinksTypeEnum {
    Workspace = "workspace",
}

/**
 * @type JsonApiWorkspaceToOneLinkage
 * References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
 * @export
 */
export type JsonApiWorkspaceToOneLinkage = JsonApiWorkspaceLinkage;
/**
 *
 * @export
 * @interface ListLinks
 */
export interface ListLinks {
    /**
     * A string containing the link\'s URL.
     * @type {string}
     * @memberof ListLinks
     */
    self: string;
    /**
     * A string containing the link\'s URL for the next page of data.
     * @type {string}
     * @memberof ListLinks
     */
    next?: string;
}
/**
 *
 * @export
 * @interface ListLinksAllOf
 */
export interface ListLinksAllOf {
    /**
     * A string containing the link\'s URL for the next page of data.
     * @type {string}
     * @memberof ListLinksAllOf
     */
    next?: string;
}
/**
 *
 * @export
 * @interface ObjectLinks
 */
export interface ObjectLinks {
    /**
     * A string containing the link\'s URL.
     * @type {string}
     * @memberof ObjectLinks
     */
    self: string;
}
/**
 *
 * @export
 * @interface ObjectLinksContainer
 */
export interface ObjectLinksContainer {
    /**
     *
     * @type {ObjectLinks}
     * @memberof ObjectLinksContainer
     */
    links?: ObjectLinks;
}
/**
 * A reference identifier.
 * @export
 * @interface ReferenceIdentifier
 */
export interface ReferenceIdentifier {
    /**
     * Reference ID.
     * @type {string}
     * @memberof ReferenceIdentifier
     */
    id: string;
    /**
     * A type of the reference.
     * @type {string}
     * @memberof ReferenceIdentifier
     */
    type: ReferenceIdentifierTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum ReferenceIdentifierTypeEnum {
    Dataset = "dataset",
}

/**
 * Store filter into this workspace. Empty if it is part of layout of workspaces.
 * @export
 * @interface WorkspaceIdentifier
 */
export interface WorkspaceIdentifier {
    /**
     *
     * @type {string}
     * @memberof WorkspaceIdentifier
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceIdentifier
     */
    type: WorkspaceIdentifierTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum WorkspaceIdentifierTypeEnum {
    Workspace = "workspace",
}

/**
 * DataSourceActionsControllerApi - axios parameter creator
 * @export
 */
export const DataSourceActionsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generate LDM from PDM stored in data source.
         * @summary Generate LDM from PDM
         * @param {string} dataSourceId
         * @param {GenerateLdmRequest} generateLdmRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateLogicalModel(
            params: {
                dataSourceId: string;
                generateLdmRequest: GenerateLdmRequest;
            },
            options: any = {},
        ): RequestArgs {
            const { dataSourceId, generateLdmRequest } = params;
            // verify required parameter 'dataSourceId' is not null or undefined
            if (dataSourceId === null || dataSourceId === undefined) {
                throw new RequiredError(
                    "dataSourceId",
                    "Required parameter dataSourceId was null or undefined when calling generateLogicalModel.",
                );
            }
            // verify required parameter 'generateLdmRequest' is not null or undefined
            if (generateLdmRequest === null || generateLdmRequest === undefined) {
                throw new RequiredError(
                    "generateLdmRequest",
                    "Required parameter generateLdmRequest was null or undefined when calling generateLogicalModel.",
                );
            }
            const localVarPath = `/api/actions/dataSources/{dataSourceId}/generateLogicalModel`.replace(
                `{${"dataSourceId"}}`,
                encodeURIComponent(String(dataSourceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof generateLdmRequest !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(generateLdmRequest !== undefined ? generateLdmRequest : {})
                : generateLdmRequest || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Notification sets up all reports to be computed again with new data.
         * @summary Register an upload notification
         * @param {string} dataSourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUploadNotification(
            params: {
                dataSourceId: string;
            },
            options: any = {},
        ): RequestArgs {
            const { dataSourceId } = params;
            // verify required parameter 'dataSourceId' is not null or undefined
            if (dataSourceId === null || dataSourceId === undefined) {
                throw new RequiredError(
                    "dataSourceId",
                    "Required parameter dataSourceId was null or undefined when calling registerUploadNotification.",
                );
            }
            const localVarPath = `/api/actions/dataSources/{dataSourceId}/uploadNotification`.replace(
                `{${"dataSourceId"}}`,
                encodeURIComponent(String(dataSourceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * DataSourceActionsControllerApi - functional programming interface
 * @export
 */
export const DataSourceActionsControllerApiFp = function (configuration?: Configuration) {
    return {
        /**
         * Generate LDM from PDM stored in data source.
         * @summary Generate LDM from PDM
         * @param {string} dataSourceId
         * @param {GenerateLdmRequest} generateLdmRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateLogicalModel(
            params: {
                dataSourceId: string;
                generateLdmRequest: GenerateLdmRequest;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeModel> {
            const localVarAxiosArgs = DataSourceActionsControllerApiAxiosParamCreator(
                configuration,
            ).generateLogicalModel(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Notification sets up all reports to be computed again with new data.
         * @summary Register an upload notification
         * @param {string} dataSourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUploadNotification(
            params: {
                dataSourceId: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DataSourceActionsControllerApiAxiosParamCreator(
                configuration,
            ).registerUploadNotification(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * DataSourceActionsControllerApi - factory interface
 * @export
 */
export const DataSourceActionsControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         * Generate LDM from PDM stored in data source.
         * @summary Generate LDM from PDM
         * @param {string} dataSourceId
         * @param {GenerateLdmRequest} generateLdmRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateLogicalModel(
            params: {
                dataSourceId: string;
                generateLdmRequest: GenerateLdmRequest;
            },
            options?: any,
        ): AxiosPromise<DeclarativeModel> {
            return DataSourceActionsControllerApiFp(configuration).generateLogicalModel(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Notification sets up all reports to be computed again with new data.
         * @summary Register an upload notification
         * @param {string} dataSourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUploadNotification(
            params: {
                dataSourceId: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DataSourceActionsControllerApiFp(configuration).registerUploadNotification(
                params,
                options,
            )(axios, basePath);
        },
    };
};

/**
 * DataSourceActionsControllerApi - interface
 * @export
 * @interface DataSourceActionsControllerApi
 */
export interface DataSourceActionsControllerApiInterface {
    /**
     * Generate LDM from PDM stored in data source.
     * @summary Generate LDM from PDM
     * @param {string} dataSourceId
     * @param {GenerateLdmRequest} generateLdmRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceActionsControllerApiInterface
     */
    generateLogicalModel(
        params: {
            dataSourceId: string;
            generateLdmRequest: GenerateLdmRequest;
        },
        options?: any,
    ): AxiosPromise<DeclarativeModel>;

    /**
     * Notification sets up all reports to be computed again with new data.
     * @summary Register an upload notification
     * @param {string} dataSourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceActionsControllerApiInterface
     */
    registerUploadNotification(
        params: {
            dataSourceId: string;
        },
        options?: any,
    ): AxiosPromise<void>;
}

/**
 * DataSourceActionsControllerApi - object-oriented interface
 * @export
 * @class DataSourceActionsControllerApi
 * @extends {BaseAPI}
 */
export class DataSourceActionsControllerApi
    extends BaseAPI
    implements DataSourceActionsControllerApiInterface
{
    /**
     * Generate LDM from PDM stored in data source.
     * @summary Generate LDM from PDM
     * @param {string} dataSourceId
     * @param {GenerateLdmRequest} generateLdmRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceActionsControllerApi
     */
    public generateLogicalModel(
        params: {
            dataSourceId: string;
            generateLdmRequest: GenerateLdmRequest;
        },
        options?: any,
    ) {
        return DataSourceActionsControllerApiFp(this.configuration).generateLogicalModel(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Notification sets up all reports to be computed again with new data.
     * @summary Register an upload notification
     * @param {string} dataSourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceActionsControllerApi
     */
    public registerUploadNotification(
        params: {
            dataSourceId: string;
        },
        options?: any,
    ) {
        return DataSourceActionsControllerApiFp(this.configuration).registerUploadNotification(
            params,
            options,
        )(this.axios, this.basePath);
    }
}

/**
 * DataSourceEntitiesControllerApi - axios parameter creator
 * @export
 */
export const DataSourceEntitiesControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} dataSourceId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDataSourceTables(
            params: {
                dataSourceId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { dataSourceId, predicate, filter, page, size, sort } = params;
            // verify required parameter 'dataSourceId' is not null or undefined
            if (dataSourceId === null || dataSourceId === undefined) {
                throw new RequiredError(
                    "dataSourceId",
                    "Required parameter dataSourceId was null or undefined when calling getAllEntitiesDataSourceTables.",
                );
            }
            const localVarPath = `/api/entities/dataSources/{dataSourceId}/dataSourceTables`.replace(
                `{${"dataSourceId"}}`,
                encodeURIComponent(String(dataSourceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} dataSourceId
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDataSourceTables(
            params: {
                dataSourceId: string;
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { dataSourceId, id, predicate, filter } = params;
            // verify required parameter 'dataSourceId' is not null or undefined
            if (dataSourceId === null || dataSourceId === undefined) {
                throw new RequiredError(
                    "dataSourceId",
                    "Required parameter dataSourceId was null or undefined when calling getEntityDataSourceTables.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityDataSourceTables.",
                );
            }
            const localVarPath = `/api/entities/dataSources/{dataSourceId}/dataSourceTables/{id}`
                .replace(`{${"dataSourceId"}}`, encodeURIComponent(String(dataSourceId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * DataSourceEntitiesControllerApi - functional programming interface
 * @export
 */
export const DataSourceEntitiesControllerApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} dataSourceId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDataSourceTables(
            params: {
                dataSourceId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceTableOutList> {
            const localVarAxiosArgs = DataSourceEntitiesControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesDataSourceTables(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} dataSourceId
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDataSourceTables(
            params: {
                dataSourceId: string;
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceTableOutDocument> {
            const localVarAxiosArgs = DataSourceEntitiesControllerApiAxiosParamCreator(
                configuration,
            ).getEntityDataSourceTables(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * DataSourceEntitiesControllerApi - factory interface
 * @export
 */
export const DataSourceEntitiesControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         *
         * @param {string} dataSourceId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDataSourceTables(
            params: {
                dataSourceId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiDataSourceTableOutList> {
            return DataSourceEntitiesControllerApiFp(configuration).getAllEntitiesDataSourceTables(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} dataSourceId
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDataSourceTables(
            params: {
                dataSourceId: string;
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options?: any,
        ): AxiosPromise<JsonApiDataSourceTableOutDocument> {
            return DataSourceEntitiesControllerApiFp(configuration).getEntityDataSourceTables(
                params,
                options,
            )(axios, basePath);
        },
    };
};

/**
 * DataSourceEntitiesControllerApi - interface
 * @export
 * @interface DataSourceEntitiesControllerApi
 */
export interface DataSourceEntitiesControllerApiInterface {
    /**
     *
     * @param {string} dataSourceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceEntitiesControllerApiInterface
     */
    getAllEntitiesDataSourceTables(
        params: {
            dataSourceId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiDataSourceTableOutList>;

    /**
     *
     * @param {string} dataSourceId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceEntitiesControllerApiInterface
     */
    getEntityDataSourceTables(
        params: {
            dataSourceId: string;
            id: string;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ): AxiosPromise<JsonApiDataSourceTableOutDocument>;
}

/**
 * DataSourceEntitiesControllerApi - object-oriented interface
 * @export
 * @class DataSourceEntitiesControllerApi
 * @extends {BaseAPI}
 */
export class DataSourceEntitiesControllerApi
    extends BaseAPI
    implements DataSourceEntitiesControllerApiInterface
{
    /**
     *
     * @param {string} dataSourceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceEntitiesControllerApi
     */
    public getAllEntitiesDataSourceTables(
        params: {
            dataSourceId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return DataSourceEntitiesControllerApiFp(this.configuration).getAllEntitiesDataSourceTables(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} dataSourceId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceEntitiesControllerApi
     */
    public getEntityDataSourceTables(
        params: {
            dataSourceId: string;
            id: string;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ) {
        return DataSourceEntitiesControllerApiFp(this.configuration).getEntityDataSourceTables(
            params,
            options,
        )(this.axios, this.basePath);
    }
}

/**
 * DataSourceLayoutControllerApi - axios parameter creator
 * @export
 */
export const DataSourceLayoutControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve complete layout of tables with their columns
         * @summary Get data source physical model layout
         * @param {string} dataSourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPdmLayout(
            params: {
                dataSourceId: string;
            },
            options: any = {},
        ): RequestArgs {
            const { dataSourceId } = params;
            // verify required parameter 'dataSourceId' is not null or undefined
            if (dataSourceId === null || dataSourceId === undefined) {
                throw new RequiredError(
                    "dataSourceId",
                    "Required parameter dataSourceId was null or undefined when calling getPdmLayout.",
                );
            }
            const localVarPath = `/api/layout/dataSources/{dataSourceId}/physicalModel`.replace(
                `{${"dataSourceId"}}`,
                encodeURIComponent(String(dataSourceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets complete layout of tables with their columns under corresponding Data Source.
         * @summary Set data source physical model layout
         * @param {string} dataSourceId
         * @param {DeclarativePdm} declarativePdm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPdmLayout(
            params: {
                dataSourceId: string;
                declarativePdm: DeclarativePdm;
            },
            options: any = {},
        ): RequestArgs {
            const { dataSourceId, declarativePdm } = params;
            // verify required parameter 'dataSourceId' is not null or undefined
            if (dataSourceId === null || dataSourceId === undefined) {
                throw new RequiredError(
                    "dataSourceId",
                    "Required parameter dataSourceId was null or undefined when calling setPdmLayout.",
                );
            }
            // verify required parameter 'declarativePdm' is not null or undefined
            if (declarativePdm === null || declarativePdm === undefined) {
                throw new RequiredError(
                    "declarativePdm",
                    "Required parameter declarativePdm was null or undefined when calling setPdmLayout.",
                );
            }
            const localVarPath = `/api/layout/dataSources/{dataSourceId}/physicalModel`.replace(
                `{${"dataSourceId"}}`,
                encodeURIComponent(String(dataSourceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof declarativePdm !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(declarativePdm !== undefined ? declarativePdm : {})
                : declarativePdm || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * DataSourceLayoutControllerApi - functional programming interface
 * @export
 */
export const DataSourceLayoutControllerApiFp = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve complete layout of tables with their columns
         * @summary Get data source physical model layout
         * @param {string} dataSourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPdmLayout(
            params: {
                dataSourceId: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativePdm> {
            const localVarAxiosArgs = DataSourceLayoutControllerApiAxiosParamCreator(
                configuration,
            ).getPdmLayout(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sets complete layout of tables with their columns under corresponding Data Source.
         * @summary Set data source physical model layout
         * @param {string} dataSourceId
         * @param {DeclarativePdm} declarativePdm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPdmLayout(
            params: {
                dataSourceId: string;
                declarativePdm: DeclarativePdm;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DataSourceLayoutControllerApiAxiosParamCreator(
                configuration,
            ).setPdmLayout(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * DataSourceLayoutControllerApi - factory interface
 * @export
 */
export const DataSourceLayoutControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         * Retrieve complete layout of tables with their columns
         * @summary Get data source physical model layout
         * @param {string} dataSourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPdmLayout(
            params: {
                dataSourceId: string;
            },
            options?: any,
        ): AxiosPromise<DeclarativePdm> {
            return DataSourceLayoutControllerApiFp(configuration).getPdmLayout(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Sets complete layout of tables with their columns under corresponding Data Source.
         * @summary Set data source physical model layout
         * @param {string} dataSourceId
         * @param {DeclarativePdm} declarativePdm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPdmLayout(
            params: {
                dataSourceId: string;
                declarativePdm: DeclarativePdm;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DataSourceLayoutControllerApiFp(configuration).setPdmLayout(params, options)(
                axios,
                basePath,
            );
        },
    };
};

/**
 * DataSourceLayoutControllerApi - interface
 * @export
 * @interface DataSourceLayoutControllerApi
 */
export interface DataSourceLayoutControllerApiInterface {
    /**
     * Retrieve complete layout of tables with their columns
     * @summary Get data source physical model layout
     * @param {string} dataSourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceLayoutControllerApiInterface
     */
    getPdmLayout(
        params: {
            dataSourceId: string;
        },
        options?: any,
    ): AxiosPromise<DeclarativePdm>;

    /**
     * Sets complete layout of tables with their columns under corresponding Data Source.
     * @summary Set data source physical model layout
     * @param {string} dataSourceId
     * @param {DeclarativePdm} declarativePdm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceLayoutControllerApiInterface
     */
    setPdmLayout(
        params: {
            dataSourceId: string;
            declarativePdm: DeclarativePdm;
        },
        options?: any,
    ): AxiosPromise<void>;
}

/**
 * DataSourceLayoutControllerApi - object-oriented interface
 * @export
 * @class DataSourceLayoutControllerApi
 * @extends {BaseAPI}
 */
export class DataSourceLayoutControllerApi extends BaseAPI implements DataSourceLayoutControllerApiInterface {
    /**
     * Retrieve complete layout of tables with their columns
     * @summary Get data source physical model layout
     * @param {string} dataSourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceLayoutControllerApi
     */
    public getPdmLayout(
        params: {
            dataSourceId: string;
        },
        options?: any,
    ) {
        return DataSourceLayoutControllerApiFp(this.configuration).getPdmLayout(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Sets complete layout of tables with their columns under corresponding Data Source.
     * @summary Set data source physical model layout
     * @param {string} dataSourceId
     * @param {DeclarativePdm} declarativePdm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceLayoutControllerApi
     */
    public setPdmLayout(
        params: {
            dataSourceId: string;
            declarativePdm: DeclarativePdm;
        },
        options?: any,
    ) {
        return DataSourceLayoutControllerApiFp(this.configuration).setPdmLayout(params, options)(
            this.axios,
            this.basePath,
        );
    }
}

/**
 * DeclarativeLayoutControllerApi - axios parameter creator
 * @export
 */
export const DeclarativeLayoutControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve current analytics model of the workspace.
         * @summary Get analytics model
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalyticsModel(
            params: {
                workspaceId: string;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getAnalyticsModel.",
                );
            }
            const localVarPath = `/api/layout/workspaces/{workspaceId}/analyticsModel`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all data sources including related physical model.
         * @summary Get all data sources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSourcesLayout(params: {}, options: any = {}): RequestArgs {
            const {} = params;
            const localVarPath = `/api/layout/dataSources`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve current logical model of the workspace in declarative form.
         * @summary Get logical model
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogicalModel(
            params: {
                workspaceId: string;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getLogicalModel.",
                );
            }
            const localVarPath = `/api/layout/workspaces/{workspaceId}/logicalModel`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve complete layout of organization, workspaces, user-groups, etc.
         * @summary Get organization layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationLayout(params: {}, options: any = {}): RequestArgs {
            const {} = params;
            const localVarPath = `/api/layout/organization`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all workspaces and related workspace data filters (and their settings / values).
         * @summary Get workspace data filters for all workspaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceDataFiltersLayout(params: {}, options: any = {}): RequestArgs {
            const {} = params;
            const localVarPath = `/api/layout/workspaceDataFilters`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve current model of the workspace in declarative form.
         * @summary Get workspace layout
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceLayout(
            params: {
                workspaceId: string;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getWorkspaceLayout.",
                );
            }
            const localVarPath = `/api/layout/workspaces/{workspaceId}`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets complete layout of workspaces, their hierarchy, models.
         * @summary Get all workspaces layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspacesLayout(params: {}, options: any = {}): RequestArgs {
            const {} = params;
            const localVarPath = `/api/layout/workspaces`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set all data sources including related physical model.
         * @summary Put all data sources
         * @param {DeclarativeDataSources} declarativeDataSources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDataSourcesLayout(
            params: {
                declarativeDataSources: DeclarativeDataSources;
            },
            options: any = {},
        ): RequestArgs {
            const { declarativeDataSources } = params;
            // verify required parameter 'declarativeDataSources' is not null or undefined
            if (declarativeDataSources === null || declarativeDataSources === undefined) {
                throw new RequiredError(
                    "declarativeDataSources",
                    "Required parameter declarativeDataSources was null or undefined when calling putDataSourcesLayout.",
                );
            }
            const localVarPath = `/api/layout/dataSources`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof declarativeDataSources !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(declarativeDataSources !== undefined ? declarativeDataSources : {})
                : declarativeDataSources || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set complete layout of workspace, like model, ACLs, etc.
         * @summary Set workspace layout
         * @param {string} workspaceId
         * @param {DeclarativeWorkspaceModel} declarativeWorkspaceModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWorkspaceLayout(
            params: {
                workspaceId: string;
                declarativeWorkspaceModel: DeclarativeWorkspaceModel;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, declarativeWorkspaceModel } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling putWorkspaceLayout.",
                );
            }
            // verify required parameter 'declarativeWorkspaceModel' is not null or undefined
            if (declarativeWorkspaceModel === null || declarativeWorkspaceModel === undefined) {
                throw new RequiredError(
                    "declarativeWorkspaceModel",
                    "Required parameter declarativeWorkspaceModel was null or undefined when calling putWorkspaceLayout.",
                );
            }
            const localVarPath = `/api/layout/workspaces/{workspaceId}`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof declarativeWorkspaceModel !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(declarativeWorkspaceModel !== undefined ? declarativeWorkspaceModel : {})
                : declarativeWorkspaceModel || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set effective analytics model of the workspace.
         * @summary Set analytics model
         * @param {string} workspaceId
         * @param {DeclarativeAnalytics} declarativeAnalytics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAnalyticsModel(
            params: {
                workspaceId: string;
                declarativeAnalytics: DeclarativeAnalytics;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, declarativeAnalytics } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling setAnalyticsModel.",
                );
            }
            // verify required parameter 'declarativeAnalytics' is not null or undefined
            if (declarativeAnalytics === null || declarativeAnalytics === undefined) {
                throw new RequiredError(
                    "declarativeAnalytics",
                    "Required parameter declarativeAnalytics was null or undefined when calling setAnalyticsModel.",
                );
            }
            const localVarPath = `/api/layout/workspaces/{workspaceId}/analyticsModel`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof declarativeAnalytics !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(declarativeAnalytics !== undefined ? declarativeAnalytics : {})
                : declarativeAnalytics || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set effective logical model of the workspace.
         * @summary Set logical model
         * @param {string} workspaceId
         * @param {DeclarativeModel} declarativeModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLogicalModel(
            params: {
                workspaceId: string;
                declarativeModel: DeclarativeModel;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, declarativeModel } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling setLogicalModel.",
                );
            }
            // verify required parameter 'declarativeModel' is not null or undefined
            if (declarativeModel === null || declarativeModel === undefined) {
                throw new RequiredError(
                    "declarativeModel",
                    "Required parameter declarativeModel was null or undefined when calling setLogicalModel.",
                );
            }
            const localVarPath = `/api/layout/workspaces/{workspaceId}/logicalModel`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof declarativeModel !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(declarativeModel !== undefined ? declarativeModel : {})
                : declarativeModel || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets complete layout of organization, like workspaces, user-groups, etc.
         * @summary Set organization layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOrganizationLayout(params: {}, options: any = {}): RequestArgs {
            const {} = params;
            const localVarPath = `/api/layout/data`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets workspace data filters in all workspaces in entire organization.
         * @summary Set all workspace data filters
         * @param {DeclarativeWorkspaceDataFilters} declarativeWorkspaceDataFilters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkspaceDataFiltersLayout(
            params: {
                declarativeWorkspaceDataFilters: DeclarativeWorkspaceDataFilters;
            },
            options: any = {},
        ): RequestArgs {
            const { declarativeWorkspaceDataFilters } = params;
            // verify required parameter 'declarativeWorkspaceDataFilters' is not null or undefined
            if (declarativeWorkspaceDataFilters === null || declarativeWorkspaceDataFilters === undefined) {
                throw new RequiredError(
                    "declarativeWorkspaceDataFilters",
                    "Required parameter declarativeWorkspaceDataFilters was null or undefined when calling setWorkspaceDataFiltersLayout.",
                );
            }
            const localVarPath = `/api/layout/workspaceDataFilters`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof declarativeWorkspaceDataFilters !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      declarativeWorkspaceDataFilters !== undefined ? declarativeWorkspaceDataFilters : {},
                  )
                : declarativeWorkspaceDataFilters || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets complete layout of workspaces, their hierarchy, models.
         * @summary Set all workspaces layout
         * @param {DeclarativeWorkspaces} declarativeWorkspaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkspacesLayout(
            params: {
                declarativeWorkspaces: DeclarativeWorkspaces;
            },
            options: any = {},
        ): RequestArgs {
            const { declarativeWorkspaces } = params;
            // verify required parameter 'declarativeWorkspaces' is not null or undefined
            if (declarativeWorkspaces === null || declarativeWorkspaces === undefined) {
                throw new RequiredError(
                    "declarativeWorkspaces",
                    "Required parameter declarativeWorkspaces was null or undefined when calling setWorkspacesLayout.",
                );
            }
            const localVarPath = `/api/layout/workspaces`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof declarativeWorkspaces !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(declarativeWorkspaces !== undefined ? declarativeWorkspaces : {})
                : declarativeWorkspaces || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * DeclarativeLayoutControllerApi - functional programming interface
 * @export
 */
export const DeclarativeLayoutControllerApiFp = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve current analytics model of the workspace.
         * @summary Get analytics model
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalyticsModel(
            params: {
                workspaceId: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeAnalytics> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).getAnalyticsModel(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve all data sources including related physical model.
         * @summary Get all data sources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSourcesLayout(
            params: {},
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeDataSources> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).getDataSourcesLayout(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve current logical model of the workspace in declarative form.
         * @summary Get logical model
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogicalModel(
            params: {
                workspaceId: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeModel> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).getLogicalModel(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve complete layout of organization, workspaces, user-groups, etc.
         * @summary Get organization layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationLayout(
            params: {},
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).getOrganizationLayout(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve all workspaces and related workspace data filters (and their settings / values).
         * @summary Get workspace data filters for all workspaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceDataFiltersLayout(
            params: {},
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeWorkspaceDataFilters> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).getWorkspaceDataFiltersLayout(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve current model of the workspace in declarative form.
         * @summary Get workspace layout
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceLayout(
            params: {
                workspaceId: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeWorkspaceModel> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).getWorkspaceLayout(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets complete layout of workspaces, their hierarchy, models.
         * @summary Get all workspaces layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspacesLayout(
            params: {},
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeWorkspaces> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).getWorkspacesLayout(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Set all data sources including related physical model.
         * @summary Put all data sources
         * @param {DeclarativeDataSources} declarativeDataSources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDataSourcesLayout(
            params: {
                declarativeDataSources: DeclarativeDataSources;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).putDataSourcesLayout(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Set complete layout of workspace, like model, ACLs, etc.
         * @summary Set workspace layout
         * @param {string} workspaceId
         * @param {DeclarativeWorkspaceModel} declarativeWorkspaceModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWorkspaceLayout(
            params: {
                workspaceId: string;
                declarativeWorkspaceModel: DeclarativeWorkspaceModel;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).putWorkspaceLayout(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Set effective analytics model of the workspace.
         * @summary Set analytics model
         * @param {string} workspaceId
         * @param {DeclarativeAnalytics} declarativeAnalytics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAnalyticsModel(
            params: {
                workspaceId: string;
                declarativeAnalytics: DeclarativeAnalytics;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).setAnalyticsModel(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Set effective logical model of the workspace.
         * @summary Set logical model
         * @param {string} workspaceId
         * @param {DeclarativeModel} declarativeModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLogicalModel(
            params: {
                workspaceId: string;
                declarativeModel: DeclarativeModel;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).setLogicalModel(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sets complete layout of organization, like workspaces, user-groups, etc.
         * @summary Set organization layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOrganizationLayout(
            params: {},
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).setOrganizationLayout(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sets workspace data filters in all workspaces in entire organization.
         * @summary Set all workspace data filters
         * @param {DeclarativeWorkspaceDataFilters} declarativeWorkspaceDataFilters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkspaceDataFiltersLayout(
            params: {
                declarativeWorkspaceDataFilters: DeclarativeWorkspaceDataFilters;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).setWorkspaceDataFiltersLayout(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sets complete layout of workspaces, their hierarchy, models.
         * @summary Set all workspaces layout
         * @param {DeclarativeWorkspaces} declarativeWorkspaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkspacesLayout(
            params: {
                declarativeWorkspaces: DeclarativeWorkspaces;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).setWorkspacesLayout(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * DeclarativeLayoutControllerApi - factory interface
 * @export
 */
export const DeclarativeLayoutControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         * Retrieve current analytics model of the workspace.
         * @summary Get analytics model
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalyticsModel(
            params: {
                workspaceId: string;
            },
            options?: any,
        ): AxiosPromise<DeclarativeAnalytics> {
            return DeclarativeLayoutControllerApiFp(configuration).getAnalyticsModel(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve all data sources including related physical model.
         * @summary Get all data sources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSourcesLayout(params: {}, options?: any): AxiosPromise<DeclarativeDataSources> {
            return DeclarativeLayoutControllerApiFp(configuration).getDataSourcesLayout(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve current logical model of the workspace in declarative form.
         * @summary Get logical model
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogicalModel(
            params: {
                workspaceId: string;
            },
            options?: any,
        ): AxiosPromise<DeclarativeModel> {
            return DeclarativeLayoutControllerApiFp(configuration).getLogicalModel(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve complete layout of organization, workspaces, user-groups, etc.
         * @summary Get organization layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationLayout(params: {}, options?: any): AxiosPromise<void> {
            return DeclarativeLayoutControllerApiFp(configuration).getOrganizationLayout(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve all workspaces and related workspace data filters (and their settings / values).
         * @summary Get workspace data filters for all workspaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceDataFiltersLayout(
            params: {},
            options?: any,
        ): AxiosPromise<DeclarativeWorkspaceDataFilters> {
            return DeclarativeLayoutControllerApiFp(configuration).getWorkspaceDataFiltersLayout(
                params,
                options,
            )(axios, basePath);
        },
        /**
         * Retrieve current model of the workspace in declarative form.
         * @summary Get workspace layout
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceLayout(
            params: {
                workspaceId: string;
            },
            options?: any,
        ): AxiosPromise<DeclarativeWorkspaceModel> {
            return DeclarativeLayoutControllerApiFp(configuration).getWorkspaceLayout(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Gets complete layout of workspaces, their hierarchy, models.
         * @summary Get all workspaces layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspacesLayout(params: {}, options?: any): AxiosPromise<DeclarativeWorkspaces> {
            return DeclarativeLayoutControllerApiFp(configuration).getWorkspacesLayout(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Set all data sources including related physical model.
         * @summary Put all data sources
         * @param {DeclarativeDataSources} declarativeDataSources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDataSourcesLayout(
            params: {
                declarativeDataSources: DeclarativeDataSources;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DeclarativeLayoutControllerApiFp(configuration).putDataSourcesLayout(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Set complete layout of workspace, like model, ACLs, etc.
         * @summary Set workspace layout
         * @param {string} workspaceId
         * @param {DeclarativeWorkspaceModel} declarativeWorkspaceModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWorkspaceLayout(
            params: {
                workspaceId: string;
                declarativeWorkspaceModel: DeclarativeWorkspaceModel;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DeclarativeLayoutControllerApiFp(configuration).putWorkspaceLayout(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Set effective analytics model of the workspace.
         * @summary Set analytics model
         * @param {string} workspaceId
         * @param {DeclarativeAnalytics} declarativeAnalytics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAnalyticsModel(
            params: {
                workspaceId: string;
                declarativeAnalytics: DeclarativeAnalytics;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DeclarativeLayoutControllerApiFp(configuration).setAnalyticsModel(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Set effective logical model of the workspace.
         * @summary Set logical model
         * @param {string} workspaceId
         * @param {DeclarativeModel} declarativeModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLogicalModel(
            params: {
                workspaceId: string;
                declarativeModel: DeclarativeModel;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DeclarativeLayoutControllerApiFp(configuration).setLogicalModel(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Sets complete layout of organization, like workspaces, user-groups, etc.
         * @summary Set organization layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOrganizationLayout(params: {}, options?: any): AxiosPromise<void> {
            return DeclarativeLayoutControllerApiFp(configuration).setOrganizationLayout(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Sets workspace data filters in all workspaces in entire organization.
         * @summary Set all workspace data filters
         * @param {DeclarativeWorkspaceDataFilters} declarativeWorkspaceDataFilters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkspaceDataFiltersLayout(
            params: {
                declarativeWorkspaceDataFilters: DeclarativeWorkspaceDataFilters;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DeclarativeLayoutControllerApiFp(configuration).setWorkspaceDataFiltersLayout(
                params,
                options,
            )(axios, basePath);
        },
        /**
         * Sets complete layout of workspaces, their hierarchy, models.
         * @summary Set all workspaces layout
         * @param {DeclarativeWorkspaces} declarativeWorkspaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkspacesLayout(
            params: {
                declarativeWorkspaces: DeclarativeWorkspaces;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DeclarativeLayoutControllerApiFp(configuration).setWorkspacesLayout(params, options)(
                axios,
                basePath,
            );
        },
    };
};

/**
 * DeclarativeLayoutControllerApi - interface
 * @export
 * @interface DeclarativeLayoutControllerApi
 */
export interface DeclarativeLayoutControllerApiInterface {
    /**
     * Retrieve current analytics model of the workspace.
     * @summary Get analytics model
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    getAnalyticsModel(
        params: {
            workspaceId: string;
        },
        options?: any,
    ): AxiosPromise<DeclarativeAnalytics>;

    /**
     * Retrieve all data sources including related physical model.
     * @summary Get all data sources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    getDataSourcesLayout(params: {}, options?: any): AxiosPromise<DeclarativeDataSources>;

    /**
     * Retrieve current logical model of the workspace in declarative form.
     * @summary Get logical model
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    getLogicalModel(
        params: {
            workspaceId: string;
        },
        options?: any,
    ): AxiosPromise<DeclarativeModel>;

    /**
     * Retrieve complete layout of organization, workspaces, user-groups, etc.
     * @summary Get organization layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    getOrganizationLayout(params: {}, options?: any): AxiosPromise<void>;

    /**
     * Retrieve all workspaces and related workspace data filters (and their settings / values).
     * @summary Get workspace data filters for all workspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    getWorkspaceDataFiltersLayout(params: {}, options?: any): AxiosPromise<DeclarativeWorkspaceDataFilters>;

    /**
     * Retrieve current model of the workspace in declarative form.
     * @summary Get workspace layout
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    getWorkspaceLayout(
        params: {
            workspaceId: string;
        },
        options?: any,
    ): AxiosPromise<DeclarativeWorkspaceModel>;

    /**
     * Gets complete layout of workspaces, their hierarchy, models.
     * @summary Get all workspaces layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    getWorkspacesLayout(params: {}, options?: any): AxiosPromise<DeclarativeWorkspaces>;

    /**
     * Set all data sources including related physical model.
     * @summary Put all data sources
     * @param {DeclarativeDataSources} declarativeDataSources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    putDataSourcesLayout(
        params: {
            declarativeDataSources: DeclarativeDataSources;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     * Set complete layout of workspace, like model, ACLs, etc.
     * @summary Set workspace layout
     * @param {string} workspaceId
     * @param {DeclarativeWorkspaceModel} declarativeWorkspaceModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    putWorkspaceLayout(
        params: {
            workspaceId: string;
            declarativeWorkspaceModel: DeclarativeWorkspaceModel;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     * Set effective analytics model of the workspace.
     * @summary Set analytics model
     * @param {string} workspaceId
     * @param {DeclarativeAnalytics} declarativeAnalytics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    setAnalyticsModel(
        params: {
            workspaceId: string;
            declarativeAnalytics: DeclarativeAnalytics;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     * Set effective logical model of the workspace.
     * @summary Set logical model
     * @param {string} workspaceId
     * @param {DeclarativeModel} declarativeModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    setLogicalModel(
        params: {
            workspaceId: string;
            declarativeModel: DeclarativeModel;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     * Sets complete layout of organization, like workspaces, user-groups, etc.
     * @summary Set organization layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    setOrganizationLayout(params: {}, options?: any): AxiosPromise<void>;

    /**
     * Sets workspace data filters in all workspaces in entire organization.
     * @summary Set all workspace data filters
     * @param {DeclarativeWorkspaceDataFilters} declarativeWorkspaceDataFilters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    setWorkspaceDataFiltersLayout(
        params: {
            declarativeWorkspaceDataFilters: DeclarativeWorkspaceDataFilters;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     * Sets complete layout of workspaces, their hierarchy, models.
     * @summary Set all workspaces layout
     * @param {DeclarativeWorkspaces} declarativeWorkspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    setWorkspacesLayout(
        params: {
            declarativeWorkspaces: DeclarativeWorkspaces;
        },
        options?: any,
    ): AxiosPromise<void>;
}

/**
 * DeclarativeLayoutControllerApi - object-oriented interface
 * @export
 * @class DeclarativeLayoutControllerApi
 * @extends {BaseAPI}
 */
export class DeclarativeLayoutControllerApi
    extends BaseAPI
    implements DeclarativeLayoutControllerApiInterface
{
    /**
     * Retrieve current analytics model of the workspace.
     * @summary Get analytics model
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public getAnalyticsModel(
        params: {
            workspaceId: string;
        },
        options?: any,
    ) {
        return DeclarativeLayoutControllerApiFp(this.configuration).getAnalyticsModel(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve all data sources including related physical model.
     * @summary Get all data sources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public getDataSourcesLayout(params: {}, options?: any) {
        return DeclarativeLayoutControllerApiFp(this.configuration).getDataSourcesLayout(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve current logical model of the workspace in declarative form.
     * @summary Get logical model
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public getLogicalModel(
        params: {
            workspaceId: string;
        },
        options?: any,
    ) {
        return DeclarativeLayoutControllerApiFp(this.configuration).getLogicalModel(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve complete layout of organization, workspaces, user-groups, etc.
     * @summary Get organization layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public getOrganizationLayout(params: {}, options?: any) {
        return DeclarativeLayoutControllerApiFp(this.configuration).getOrganizationLayout(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve all workspaces and related workspace data filters (and their settings / values).
     * @summary Get workspace data filters for all workspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public getWorkspaceDataFiltersLayout(params: {}, options?: any) {
        return DeclarativeLayoutControllerApiFp(this.configuration).getWorkspaceDataFiltersLayout(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     * Retrieve current model of the workspace in declarative form.
     * @summary Get workspace layout
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public getWorkspaceLayout(
        params: {
            workspaceId: string;
        },
        options?: any,
    ) {
        return DeclarativeLayoutControllerApiFp(this.configuration).getWorkspaceLayout(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Gets complete layout of workspaces, their hierarchy, models.
     * @summary Get all workspaces layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public getWorkspacesLayout(params: {}, options?: any) {
        return DeclarativeLayoutControllerApiFp(this.configuration).getWorkspacesLayout(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Set all data sources including related physical model.
     * @summary Put all data sources
     * @param {DeclarativeDataSources} declarativeDataSources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public putDataSourcesLayout(
        params: {
            declarativeDataSources: DeclarativeDataSources;
        },
        options?: any,
    ) {
        return DeclarativeLayoutControllerApiFp(this.configuration).putDataSourcesLayout(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Set complete layout of workspace, like model, ACLs, etc.
     * @summary Set workspace layout
     * @param {string} workspaceId
     * @param {DeclarativeWorkspaceModel} declarativeWorkspaceModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public putWorkspaceLayout(
        params: {
            workspaceId: string;
            declarativeWorkspaceModel: DeclarativeWorkspaceModel;
        },
        options?: any,
    ) {
        return DeclarativeLayoutControllerApiFp(this.configuration).putWorkspaceLayout(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Set effective analytics model of the workspace.
     * @summary Set analytics model
     * @param {string} workspaceId
     * @param {DeclarativeAnalytics} declarativeAnalytics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public setAnalyticsModel(
        params: {
            workspaceId: string;
            declarativeAnalytics: DeclarativeAnalytics;
        },
        options?: any,
    ) {
        return DeclarativeLayoutControllerApiFp(this.configuration).setAnalyticsModel(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Set effective logical model of the workspace.
     * @summary Set logical model
     * @param {string} workspaceId
     * @param {DeclarativeModel} declarativeModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public setLogicalModel(
        params: {
            workspaceId: string;
            declarativeModel: DeclarativeModel;
        },
        options?: any,
    ) {
        return DeclarativeLayoutControllerApiFp(this.configuration).setLogicalModel(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Sets complete layout of organization, like workspaces, user-groups, etc.
     * @summary Set organization layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public setOrganizationLayout(params: {}, options?: any) {
        return DeclarativeLayoutControllerApiFp(this.configuration).setOrganizationLayout(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Sets workspace data filters in all workspaces in entire organization.
     * @summary Set all workspace data filters
     * @param {DeclarativeWorkspaceDataFilters} declarativeWorkspaceDataFilters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public setWorkspaceDataFiltersLayout(
        params: {
            declarativeWorkspaceDataFilters: DeclarativeWorkspaceDataFilters;
        },
        options?: any,
    ) {
        return DeclarativeLayoutControllerApiFp(this.configuration).setWorkspaceDataFiltersLayout(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     * Sets complete layout of workspaces, their hierarchy, models.
     * @summary Set all workspaces layout
     * @param {DeclarativeWorkspaces} declarativeWorkspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public setWorkspacesLayout(
        params: {
            declarativeWorkspaces: DeclarativeWorkspaces;
        },
        options?: any,
    ) {
        return DeclarativeLayoutControllerApiFp(this.configuration).setWorkspacesLayout(params, options)(
            this.axios,
            this.basePath,
        );
    }
}

/**
 * OptionsControllerApi - axios parameter creator
 * @export
 */
export const OptionsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves links for all options for different configurations.
         * @summary Links for all configuration options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOptions(params: {}, options: any = {}): RequestArgs {
            const {} = params;
            const localVarPath = `/api/options`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all supported data sources along with information about the used drivers.
         * @summary Get all available data source drivers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSourceDrivers(params: {}, options: any = {}): RequestArgs {
            const {} = params;
            const localVarPath = `/api/options/availableDrivers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * OptionsControllerApi - functional programming interface
 * @export
 */
export const OptionsControllerApiFp = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves links for all options for different configurations.
         * @summary Links for all configuration options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOptions(
            params: {},
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OptionsControllerApiAxiosParamCreator(configuration).getAllOptions(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a list of all supported data sources along with information about the used drivers.
         * @summary Get all available data source drivers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSourceDrivers(
            params: {},
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OptionsControllerApiAxiosParamCreator(
                configuration,
            ).getDataSourceDrivers(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * OptionsControllerApi - factory interface
 * @export
 */
export const OptionsControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         * Retrieves links for all options for different configurations.
         * @summary Links for all configuration options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOptions(params: {}, options?: any): AxiosPromise<void> {
            return OptionsControllerApiFp(configuration).getAllOptions(params, options)(axios, basePath);
        },
        /**
         * Retrieves a list of all supported data sources along with information about the used drivers.
         * @summary Get all available data source drivers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSourceDrivers(params: {}, options?: any): AxiosPromise<void> {
            return OptionsControllerApiFp(configuration).getDataSourceDrivers(params, options)(
                axios,
                basePath,
            );
        },
    };
};

/**
 * OptionsControllerApi - interface
 * @export
 * @interface OptionsControllerApi
 */
export interface OptionsControllerApiInterface {
    /**
     * Retrieves links for all options for different configurations.
     * @summary Links for all configuration options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptionsControllerApiInterface
     */
    getAllOptions(params: {}, options?: any): AxiosPromise<void>;

    /**
     * Retrieves a list of all supported data sources along with information about the used drivers.
     * @summary Get all available data source drivers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptionsControllerApiInterface
     */
    getDataSourceDrivers(params: {}, options?: any): AxiosPromise<void>;
}

/**
 * OptionsControllerApi - object-oriented interface
 * @export
 * @class OptionsControllerApi
 * @extends {BaseAPI}
 */
export class OptionsControllerApi extends BaseAPI implements OptionsControllerApiInterface {
    /**
     * Retrieves links for all options for different configurations.
     * @summary Links for all configuration options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptionsControllerApi
     */
    public getAllOptions(params: {}, options?: any) {
        return OptionsControllerApiFp(this.configuration).getAllOptions(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieves a list of all supported data sources along with information about the used drivers.
     * @summary Get all available data source drivers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptionsControllerApi
     */
    public getDataSourceDrivers(params: {}, options?: any) {
        return OptionsControllerApiFp(this.configuration).getDataSourceDrivers(params, options)(
            this.axios,
            this.basePath,
        );
    }
}

/**
 * OrganizationControllerApi - axios parameter creator
 * @export
 */
export const OrganizationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'users' | 'userGroups' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityOrganizations(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"users" | "userGroups" | "ALL">;
            },
            options: any = {},
        ): RequestArgs {
            const { id, predicate, filter, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityOrganizations.",
                );
            }
            const localVarPath = `/api/entities/admin/organizations/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationOrganizations(params: {}, options: any = {}): RequestArgs {
            const {} = params;
            const localVarPath = `/api/entities/organization`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'users' | 'userGroups' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityOrganizations(
            params: {
                id: string;
                jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"users" | "userGroups" | "ALL">;
            },
            options: any = {},
        ): RequestArgs {
            const { id, jsonApiOrganizationInDocument, predicate, filter, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling updateEntityOrganizations.",
                );
            }
            // verify required parameter 'jsonApiOrganizationInDocument' is not null or undefined
            if (jsonApiOrganizationInDocument === null || jsonApiOrganizationInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiOrganizationInDocument",
                    "Required parameter jsonApiOrganizationInDocument was null or undefined when calling updateEntityOrganizations.",
                );
            }
            const localVarPath = `/api/entities/admin/organizations/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiOrganizationInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiOrganizationInDocument !== undefined ? jsonApiOrganizationInDocument : {},
                  )
                : jsonApiOrganizationInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * OrganizationControllerApi - functional programming interface
 * @export
 */
export const OrganizationControllerApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'users' | 'userGroups' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityOrganizations(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"users" | "userGroups" | "ALL">;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationOutDocument> {
            const localVarAxiosArgs = OrganizationControllerApiAxiosParamCreator(
                configuration,
            ).getEntityOrganizations(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationOrganizations(
            params: {},
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationOutDocument> {
            const localVarAxiosArgs = OrganizationControllerApiAxiosParamCreator(
                configuration,
            ).getOrganizationOrganizations(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'users' | 'userGroups' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityOrganizations(
            params: {
                id: string;
                jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"users" | "userGroups" | "ALL">;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationOutDocument> {
            const localVarAxiosArgs = OrganizationControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityOrganizations(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * OrganizationControllerApi - factory interface
 * @export
 */
export const OrganizationControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'users' | 'userGroups' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityOrganizations(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"users" | "userGroups" | "ALL">;
            },
            options?: any,
        ): AxiosPromise<JsonApiOrganizationOutDocument> {
            return OrganizationControllerApiFp(configuration).getEntityOrganizations(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationOrganizations(
            params: {},
            options?: any,
        ): AxiosPromise<JsonApiOrganizationOutDocument> {
            return OrganizationControllerApiFp(configuration).getOrganizationOrganizations(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'users' | 'userGroups' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityOrganizations(
            params: {
                id: string;
                jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"users" | "userGroups" | "ALL">;
            },
            options?: any,
        ): AxiosPromise<JsonApiOrganizationOutDocument> {
            return OrganizationControllerApiFp(configuration).updateEntityOrganizations(params, options)(
                axios,
                basePath,
            );
        },
    };
};

/**
 * OrganizationControllerApi - interface
 * @export
 * @interface OrganizationControllerApi
 */
export interface OrganizationControllerApiInterface {
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'users' | 'userGroups' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApiInterface
     */
    getEntityOrganizations(
        params: {
            id: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"users" | "userGroups" | "ALL">;
        },
        options?: any,
    ): AxiosPromise<JsonApiOrganizationOutDocument>;

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApiInterface
     */
    getOrganizationOrganizations(params: {}, options?: any): AxiosPromise<JsonApiOrganizationOutDocument>;

    /**
     *
     * @param {string} id
     * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'users' | 'userGroups' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApiInterface
     */
    updateEntityOrganizations(
        params: {
            id: string;
            jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"users" | "userGroups" | "ALL">;
        },
        options?: any,
    ): AxiosPromise<JsonApiOrganizationOutDocument>;
}

/**
 * OrganizationControllerApi - object-oriented interface
 * @export
 * @class OrganizationControllerApi
 * @extends {BaseAPI}
 */
export class OrganizationControllerApi extends BaseAPI implements OrganizationControllerApiInterface {
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'users' | 'userGroups' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    public getEntityOrganizations(
        params: {
            id: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"users" | "userGroups" | "ALL">;
        },
        options?: any,
    ) {
        return OrganizationControllerApiFp(this.configuration).getEntityOrganizations(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    public getOrganizationOrganizations(params: {}, options?: any) {
        return OrganizationControllerApiFp(this.configuration).getOrganizationOrganizations(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'users' | 'userGroups' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    public updateEntityOrganizations(
        params: {
            id: string;
            jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"users" | "userGroups" | "ALL">;
        },
        options?: any,
    ) {
        return OrganizationControllerApiFp(this.configuration).updateEntityOrganizations(params, options)(
            this.axios,
            this.basePath,
        );
    }
}

/**
 * OrganizationModelControllerApi - axios parameter creator
 * @export
 */
export const OrganizationModelControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {JsonApiACLInDocument} jsonApiACLInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'users' | 'userGroups' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityAcls(
            params: {
                jsonApiACLInDocument: JsonApiACLInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"users" | "userGroups" | "ALL">;
            },
            options: any = {},
        ): RequestArgs {
            const { jsonApiACLInDocument, predicate, filter, include } = params;
            // verify required parameter 'jsonApiACLInDocument' is not null or undefined
            if (jsonApiACLInDocument === null || jsonApiACLInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiACLInDocument",
                    "Required parameter jsonApiACLInDocument was null or undefined when calling createEntityAcls.",
                );
            }
            const localVarPath = `/api/entities/acls`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiACLInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiACLInDocument !== undefined ? jsonApiACLInDocument : {})
                : jsonApiACLInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {JsonApiCookieSecurityPropertiesInDocument} jsonApiCookieSecurityPropertiesInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityCookieSecurityPropertieses(
            params: {
                jsonApiCookieSecurityPropertiesInDocument: JsonApiCookieSecurityPropertiesInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { jsonApiCookieSecurityPropertiesInDocument, predicate, filter } = params;
            // verify required parameter 'jsonApiCookieSecurityPropertiesInDocument' is not null or undefined
            if (
                jsonApiCookieSecurityPropertiesInDocument === null ||
                jsonApiCookieSecurityPropertiesInDocument === undefined
            ) {
                throw new RequiredError(
                    "jsonApiCookieSecurityPropertiesInDocument",
                    "Required parameter jsonApiCookieSecurityPropertiesInDocument was null or undefined when calling createEntityCookieSecurityPropertieses.",
                );
            }
            const localVarPath = `/api/entities/cookieSecurityPropertieses`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiCookieSecurityPropertiesInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiCookieSecurityPropertiesInDocument !== undefined
                          ? jsonApiCookieSecurityPropertiesInDocument
                          : {},
                  )
                : jsonApiCookieSecurityPropertiesInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityDataSources(
            params: {
                jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { jsonApiDataSourceInDocument, predicate, filter } = params;
            // verify required parameter 'jsonApiDataSourceInDocument' is not null or undefined
            if (jsonApiDataSourceInDocument === null || jsonApiDataSourceInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiDataSourceInDocument",
                    "Required parameter jsonApiDataSourceInDocument was null or undefined when calling createEntityDataSources.",
                );
            }
            const localVarPath = `/api/entities/dataSources`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiDataSourceInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiDataSourceInDocument !== undefined ? jsonApiDataSourceInDocument : {})
                : jsonApiDataSourceInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityUserGroups(
            params: {
                jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"userGroups" | "acls" | "ALL">;
            },
            options: any = {},
        ): RequestArgs {
            const { jsonApiUserGroupInDocument, predicate, filter, include } = params;
            // verify required parameter 'jsonApiUserGroupInDocument' is not null or undefined
            if (jsonApiUserGroupInDocument === null || jsonApiUserGroupInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiUserGroupInDocument",
                    "Required parameter jsonApiUserGroupInDocument was null or undefined when calling createEntityUserGroups.",
                );
            }
            const localVarPath = `/api/entities/userGroups`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiUserGroupInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiUserGroupInDocument !== undefined ? jsonApiUserGroupInDocument : {})
                : jsonApiUserGroupInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {JsonApiUserInDocument} jsonApiUserInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityUsers(
            params: {
                jsonApiUserInDocument: JsonApiUserInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"userGroups" | "acls" | "ALL">;
            },
            options: any = {},
        ): RequestArgs {
            const { jsonApiUserInDocument, predicate, filter, include } = params;
            // verify required parameter 'jsonApiUserInDocument' is not null or undefined
            if (jsonApiUserInDocument === null || jsonApiUserInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiUserInDocument",
                    "Required parameter jsonApiUserInDocument was null or undefined when calling createEntityUsers.",
                );
            }
            const localVarPath = `/api/entities/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiUserInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiUserInDocument !== undefined ? jsonApiUserInDocument : {})
                : jsonApiUserInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'workspaces' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityWorkspaces(
            params: {
                jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"workspaces" | "ALL">;
            },
            options: any = {},
        ): RequestArgs {
            const { jsonApiWorkspaceInDocument, predicate, filter, include } = params;
            // verify required parameter 'jsonApiWorkspaceInDocument' is not null or undefined
            if (jsonApiWorkspaceInDocument === null || jsonApiWorkspaceInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiWorkspaceInDocument",
                    "Required parameter jsonApiWorkspaceInDocument was null or undefined when calling createEntityWorkspaces.",
                );
            }
            const localVarPath = `/api/entities/workspaces`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiWorkspaceInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiWorkspaceInDocument !== undefined ? jsonApiWorkspaceInDocument : {})
                : jsonApiWorkspaceInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityAcls(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { id, predicate, filter } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling deleteEntityAcls.",
                );
            }
            const localVarPath = `/api/entities/acls/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityCookieSecurityPropertieses(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { id, predicate, filter } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling deleteEntityCookieSecurityPropertieses.",
                );
            }
            const localVarPath = `/api/entities/cookieSecurityPropertieses/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityDataSources(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { id, predicate, filter } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling deleteEntityDataSources.",
                );
            }
            const localVarPath = `/api/entities/dataSources/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityUserGroups(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { id, predicate, filter } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling deleteEntityUserGroups.",
                );
            }
            const localVarPath = `/api/entities/userGroups/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityUsers(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { id, predicate, filter } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling deleteEntityUsers.",
                );
            }
            const localVarPath = `/api/entities/users/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityWorkspaces(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { id, predicate, filter } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling deleteEntityWorkspaces.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'users' | 'userGroups' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesAcls(
            params: {
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"users" | "userGroups" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { predicate, filter, include, page, size, sort } = params;
            const localVarPath = `/api/entities/acls`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesCookieSecurityPropertieses(
            params: {
                predicate?: { [key: string]: object };
                filter?: string;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { predicate, filter, page, size, sort } = params;
            const localVarPath = `/api/entities/cookieSecurityPropertieses`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDataSources(
            params: {
                predicate?: { [key: string]: object };
                filter?: string;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { predicate, filter, page, size, sort } = params;
            const localVarPath = `/api/entities/dataSources`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesUserGroups(
            params: {
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"userGroups" | "acls" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { predicate, filter, include, page, size, sort } = params;
            const localVarPath = `/api/entities/userGroups`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesUsers(
            params: {
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"userGroups" | "acls" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { predicate, filter, include, page, size, sort } = params;
            const localVarPath = `/api/entities/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'workspaces' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaces(
            params: {
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"workspaces" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { predicate, filter, include, page, size, sort } = params;
            const localVarPath = `/api/entities/workspaces`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'users' | 'userGroups' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAcls(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"users" | "userGroups" | "ALL">;
            },
            options: any = {},
        ): RequestArgs {
            const { id, predicate, filter, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityAcls.",
                );
            }
            const localVarPath = `/api/entities/acls/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityCookieSecurityPropertieses(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { id, predicate, filter } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityCookieSecurityPropertieses.",
                );
            }
            const localVarPath = `/api/entities/cookieSecurityPropertieses/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDataSources(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { id, predicate, filter } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityDataSources.",
                );
            }
            const localVarPath = `/api/entities/dataSources/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityUserGroups(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"userGroups" | "acls" | "ALL">;
            },
            options: any = {},
        ): RequestArgs {
            const { id, predicate, filter, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityUserGroups.",
                );
            }
            const localVarPath = `/api/entities/userGroups/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityUsers(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"userGroups" | "acls" | "ALL">;
            },
            options: any = {},
        ): RequestArgs {
            const { id, predicate, filter, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityUsers.",
                );
            }
            const localVarPath = `/api/entities/users/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'workspaces' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaces(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"workspaces" | "ALL">;
            },
            options: any = {},
        ): RequestArgs {
            const { id, predicate, filter, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityWorkspaces.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiACLInDocument} jsonApiACLInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'users' | 'userGroups' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityAcls(
            params: {
                id: string;
                jsonApiACLInDocument: JsonApiACLInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"users" | "userGroups" | "ALL">;
            },
            options: any = {},
        ): RequestArgs {
            const { id, jsonApiACLInDocument, predicate, filter, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling updateEntityAcls.",
                );
            }
            // verify required parameter 'jsonApiACLInDocument' is not null or undefined
            if (jsonApiACLInDocument === null || jsonApiACLInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiACLInDocument",
                    "Required parameter jsonApiACLInDocument was null or undefined when calling updateEntityAcls.",
                );
            }
            const localVarPath = `/api/entities/acls/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiACLInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiACLInDocument !== undefined ? jsonApiACLInDocument : {})
                : jsonApiACLInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiCookieSecurityPropertiesInDocument} jsonApiCookieSecurityPropertiesInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityCookieSecurityPropertieses(
            params: {
                id: string;
                jsonApiCookieSecurityPropertiesInDocument: JsonApiCookieSecurityPropertiesInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { id, jsonApiCookieSecurityPropertiesInDocument, predicate, filter } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling updateEntityCookieSecurityPropertieses.",
                );
            }
            // verify required parameter 'jsonApiCookieSecurityPropertiesInDocument' is not null or undefined
            if (
                jsonApiCookieSecurityPropertiesInDocument === null ||
                jsonApiCookieSecurityPropertiesInDocument === undefined
            ) {
                throw new RequiredError(
                    "jsonApiCookieSecurityPropertiesInDocument",
                    "Required parameter jsonApiCookieSecurityPropertiesInDocument was null or undefined when calling updateEntityCookieSecurityPropertieses.",
                );
            }
            const localVarPath = `/api/entities/cookieSecurityPropertieses/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiCookieSecurityPropertiesInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiCookieSecurityPropertiesInDocument !== undefined
                          ? jsonApiCookieSecurityPropertiesInDocument
                          : {},
                  )
                : jsonApiCookieSecurityPropertiesInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityDataSources(
            params: {
                id: string;
                jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { id, jsonApiDataSourceInDocument, predicate, filter } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling updateEntityDataSources.",
                );
            }
            // verify required parameter 'jsonApiDataSourceInDocument' is not null or undefined
            if (jsonApiDataSourceInDocument === null || jsonApiDataSourceInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiDataSourceInDocument",
                    "Required parameter jsonApiDataSourceInDocument was null or undefined when calling updateEntityDataSources.",
                );
            }
            const localVarPath = `/api/entities/dataSources/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiDataSourceInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiDataSourceInDocument !== undefined ? jsonApiDataSourceInDocument : {})
                : jsonApiDataSourceInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityUserGroups(
            params: {
                id: string;
                jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"userGroups" | "acls" | "ALL">;
            },
            options: any = {},
        ): RequestArgs {
            const { id, jsonApiUserGroupInDocument, predicate, filter, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling updateEntityUserGroups.",
                );
            }
            // verify required parameter 'jsonApiUserGroupInDocument' is not null or undefined
            if (jsonApiUserGroupInDocument === null || jsonApiUserGroupInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiUserGroupInDocument",
                    "Required parameter jsonApiUserGroupInDocument was null or undefined when calling updateEntityUserGroups.",
                );
            }
            const localVarPath = `/api/entities/userGroups/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiUserGroupInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiUserGroupInDocument !== undefined ? jsonApiUserGroupInDocument : {})
                : jsonApiUserGroupInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserInDocument} jsonApiUserInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityUsers(
            params: {
                id: string;
                jsonApiUserInDocument: JsonApiUserInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"userGroups" | "acls" | "ALL">;
            },
            options: any = {},
        ): RequestArgs {
            const { id, jsonApiUserInDocument, predicate, filter, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling updateEntityUsers.",
                );
            }
            // verify required parameter 'jsonApiUserInDocument' is not null or undefined
            if (jsonApiUserInDocument === null || jsonApiUserInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiUserInDocument",
                    "Required parameter jsonApiUserInDocument was null or undefined when calling updateEntityUsers.",
                );
            }
            const localVarPath = `/api/entities/users/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiUserInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiUserInDocument !== undefined ? jsonApiUserInDocument : {})
                : jsonApiUserInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'workspaces' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityWorkspaces(
            params: {
                id: string;
                jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"workspaces" | "ALL">;
            },
            options: any = {},
        ): RequestArgs {
            const { id, jsonApiWorkspaceInDocument, predicate, filter, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling updateEntityWorkspaces.",
                );
            }
            // verify required parameter 'jsonApiWorkspaceInDocument' is not null or undefined
            if (jsonApiWorkspaceInDocument === null || jsonApiWorkspaceInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiWorkspaceInDocument",
                    "Required parameter jsonApiWorkspaceInDocument was null or undefined when calling updateEntityWorkspaces.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiWorkspaceInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiWorkspaceInDocument !== undefined ? jsonApiWorkspaceInDocument : {})
                : jsonApiWorkspaceInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * OrganizationModelControllerApi - functional programming interface
 * @export
 */
export const OrganizationModelControllerApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {JsonApiACLInDocument} jsonApiACLInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'users' | 'userGroups' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityAcls(
            params: {
                jsonApiACLInDocument: JsonApiACLInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"users" | "userGroups" | "ALL">;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiACLOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createEntityAcls(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {JsonApiCookieSecurityPropertiesInDocument} jsonApiCookieSecurityPropertiesInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityCookieSecurityPropertieses(
            params: {
                jsonApiCookieSecurityPropertiesInDocument: JsonApiCookieSecurityPropertiesInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<JsonApiCookieSecurityPropertiesOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createEntityCookieSecurityPropertieses(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityDataSources(
            params: {
                jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createEntityDataSources(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityUserGroups(
            params: {
                jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"userGroups" | "acls" | "ALL">;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createEntityUserGroups(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {JsonApiUserInDocument} jsonApiUserInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityUsers(
            params: {
                jsonApiUserInDocument: JsonApiUserInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"userGroups" | "acls" | "ALL">;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createEntityUsers(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'workspaces' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityWorkspaces(
            params: {
                jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"workspaces" | "ALL">;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createEntityWorkspaces(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityAcls(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityAcls(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityCookieSecurityPropertieses(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityCookieSecurityPropertieses(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityDataSources(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityDataSources(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityUserGroups(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityUserGroups(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityUsers(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityUsers(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityWorkspaces(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityWorkspaces(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'users' | 'userGroups' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesAcls(
            params: {
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"users" | "userGroups" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiACLOutList> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesAcls(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesCookieSecurityPropertieses(
            params: {
                predicate?: { [key: string]: object };
                filter?: string;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<JsonApiCookieSecurityPropertiesOutList> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesCookieSecurityPropertieses(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDataSources(
            params: {
                predicate?: { [key: string]: object };
                filter?: string;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceOutList> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesDataSources(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesUserGroups(
            params: {
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"userGroups" | "acls" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupOutList> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesUserGroups(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesUsers(
            params: {
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"userGroups" | "acls" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserOutList> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesUsers(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'workspaces' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaces(
            params: {
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"workspaces" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceOutList> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesWorkspaces(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'users' | 'userGroups' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAcls(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"users" | "userGroups" | "ALL">;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiACLOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntityAcls(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityCookieSecurityPropertieses(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<JsonApiCookieSecurityPropertiesOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntityCookieSecurityPropertieses(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDataSources(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntityDataSources(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityUserGroups(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"userGroups" | "acls" | "ALL">;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntityUserGroups(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityUsers(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"userGroups" | "acls" | "ALL">;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntityUsers(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'workspaces' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaces(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"workspaces" | "ALL">;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntityWorkspaces(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiACLInDocument} jsonApiACLInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'users' | 'userGroups' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityAcls(
            params: {
                id: string;
                jsonApiACLInDocument: JsonApiACLInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"users" | "userGroups" | "ALL">;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiACLOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityAcls(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiCookieSecurityPropertiesInDocument} jsonApiCookieSecurityPropertiesInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityCookieSecurityPropertieses(
            params: {
                id: string;
                jsonApiCookieSecurityPropertiesInDocument: JsonApiCookieSecurityPropertiesInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<JsonApiCookieSecurityPropertiesOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityCookieSecurityPropertieses(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityDataSources(
            params: {
                id: string;
                jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityDataSources(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityUserGroups(
            params: {
                id: string;
                jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"userGroups" | "acls" | "ALL">;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityUserGroups(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserInDocument} jsonApiUserInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityUsers(
            params: {
                id: string;
                jsonApiUserInDocument: JsonApiUserInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"userGroups" | "acls" | "ALL">;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityUsers(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'workspaces' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityWorkspaces(
            params: {
                id: string;
                jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"workspaces" | "ALL">;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityWorkspaces(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * OrganizationModelControllerApi - factory interface
 * @export
 */
export const OrganizationModelControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         *
         * @param {JsonApiACLInDocument} jsonApiACLInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'users' | 'userGroups' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityAcls(
            params: {
                jsonApiACLInDocument: JsonApiACLInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"users" | "userGroups" | "ALL">;
            },
            options?: any,
        ): AxiosPromise<JsonApiACLOutDocument> {
            return OrganizationModelControllerApiFp(configuration).createEntityAcls(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {JsonApiCookieSecurityPropertiesInDocument} jsonApiCookieSecurityPropertiesInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityCookieSecurityPropertieses(
            params: {
                jsonApiCookieSecurityPropertiesInDocument: JsonApiCookieSecurityPropertiesInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options?: any,
        ): AxiosPromise<JsonApiCookieSecurityPropertiesOutDocument> {
            return OrganizationModelControllerApiFp(configuration).createEntityCookieSecurityPropertieses(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityDataSources(
            params: {
                jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options?: any,
        ): AxiosPromise<JsonApiDataSourceOutDocument> {
            return OrganizationModelControllerApiFp(configuration).createEntityDataSources(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityUserGroups(
            params: {
                jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"userGroups" | "acls" | "ALL">;
            },
            options?: any,
        ): AxiosPromise<JsonApiUserGroupOutDocument> {
            return OrganizationModelControllerApiFp(configuration).createEntityUserGroups(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {JsonApiUserInDocument} jsonApiUserInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityUsers(
            params: {
                jsonApiUserInDocument: JsonApiUserInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"userGroups" | "acls" | "ALL">;
            },
            options?: any,
        ): AxiosPromise<JsonApiUserOutDocument> {
            return OrganizationModelControllerApiFp(configuration).createEntityUsers(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'workspaces' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityWorkspaces(
            params: {
                jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"workspaces" | "ALL">;
            },
            options?: any,
        ): AxiosPromise<JsonApiWorkspaceOutDocument> {
            return OrganizationModelControllerApiFp(configuration).createEntityWorkspaces(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityAcls(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return OrganizationModelControllerApiFp(configuration).deleteEntityAcls(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityCookieSecurityPropertieses(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return OrganizationModelControllerApiFp(configuration).deleteEntityCookieSecurityPropertieses(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityDataSources(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return OrganizationModelControllerApiFp(configuration).deleteEntityDataSources(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityUserGroups(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return OrganizationModelControllerApiFp(configuration).deleteEntityUserGroups(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityUsers(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return OrganizationModelControllerApiFp(configuration).deleteEntityUsers(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityWorkspaces(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return OrganizationModelControllerApiFp(configuration).deleteEntityWorkspaces(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'users' | 'userGroups' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesAcls(
            params: {
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"users" | "userGroups" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiACLOutList> {
            return OrganizationModelControllerApiFp(configuration).getAllEntitiesAcls(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesCookieSecurityPropertieses(
            params: {
                predicate?: { [key: string]: object };
                filter?: string;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiCookieSecurityPropertiesOutList> {
            return OrganizationModelControllerApiFp(configuration).getAllEntitiesCookieSecurityPropertieses(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDataSources(
            params: {
                predicate?: { [key: string]: object };
                filter?: string;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiDataSourceOutList> {
            return OrganizationModelControllerApiFp(configuration).getAllEntitiesDataSources(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesUserGroups(
            params: {
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"userGroups" | "acls" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiUserGroupOutList> {
            return OrganizationModelControllerApiFp(configuration).getAllEntitiesUserGroups(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesUsers(
            params: {
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"userGroups" | "acls" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiUserOutList> {
            return OrganizationModelControllerApiFp(configuration).getAllEntitiesUsers(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'workspaces' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaces(
            params: {
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"workspaces" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiWorkspaceOutList> {
            return OrganizationModelControllerApiFp(configuration).getAllEntitiesWorkspaces(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'users' | 'userGroups' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAcls(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"users" | "userGroups" | "ALL">;
            },
            options?: any,
        ): AxiosPromise<JsonApiACLOutDocument> {
            return OrganizationModelControllerApiFp(configuration).getEntityAcls(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityCookieSecurityPropertieses(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options?: any,
        ): AxiosPromise<JsonApiCookieSecurityPropertiesOutDocument> {
            return OrganizationModelControllerApiFp(configuration).getEntityCookieSecurityPropertieses(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDataSources(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options?: any,
        ): AxiosPromise<JsonApiDataSourceOutDocument> {
            return OrganizationModelControllerApiFp(configuration).getEntityDataSources(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityUserGroups(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"userGroups" | "acls" | "ALL">;
            },
            options?: any,
        ): AxiosPromise<JsonApiUserGroupOutDocument> {
            return OrganizationModelControllerApiFp(configuration).getEntityUserGroups(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityUsers(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"userGroups" | "acls" | "ALL">;
            },
            options?: any,
        ): AxiosPromise<JsonApiUserOutDocument> {
            return OrganizationModelControllerApiFp(configuration).getEntityUsers(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'workspaces' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaces(
            params: {
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"workspaces" | "ALL">;
            },
            options?: any,
        ): AxiosPromise<JsonApiWorkspaceOutDocument> {
            return OrganizationModelControllerApiFp(configuration).getEntityWorkspaces(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiACLInDocument} jsonApiACLInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'users' | 'userGroups' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityAcls(
            params: {
                id: string;
                jsonApiACLInDocument: JsonApiACLInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"users" | "userGroups" | "ALL">;
            },
            options?: any,
        ): AxiosPromise<JsonApiACLOutDocument> {
            return OrganizationModelControllerApiFp(configuration).updateEntityAcls(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiCookieSecurityPropertiesInDocument} jsonApiCookieSecurityPropertiesInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityCookieSecurityPropertieses(
            params: {
                id: string;
                jsonApiCookieSecurityPropertiesInDocument: JsonApiCookieSecurityPropertiesInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options?: any,
        ): AxiosPromise<JsonApiCookieSecurityPropertiesOutDocument> {
            return OrganizationModelControllerApiFp(configuration).updateEntityCookieSecurityPropertieses(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityDataSources(
            params: {
                id: string;
                jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options?: any,
        ): AxiosPromise<JsonApiDataSourceOutDocument> {
            return OrganizationModelControllerApiFp(configuration).updateEntityDataSources(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityUserGroups(
            params: {
                id: string;
                jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"userGroups" | "acls" | "ALL">;
            },
            options?: any,
        ): AxiosPromise<JsonApiUserGroupOutDocument> {
            return OrganizationModelControllerApiFp(configuration).updateEntityUserGroups(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserInDocument} jsonApiUserInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityUsers(
            params: {
                id: string;
                jsonApiUserInDocument: JsonApiUserInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"userGroups" | "acls" | "ALL">;
            },
            options?: any,
        ): AxiosPromise<JsonApiUserOutDocument> {
            return OrganizationModelControllerApiFp(configuration).updateEntityUsers(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'workspaces' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityWorkspaces(
            params: {
                id: string;
                jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"workspaces" | "ALL">;
            },
            options?: any,
        ): AxiosPromise<JsonApiWorkspaceOutDocument> {
            return OrganizationModelControllerApiFp(configuration).updateEntityWorkspaces(params, options)(
                axios,
                basePath,
            );
        },
    };
};

/**
 * OrganizationModelControllerApi - interface
 * @export
 * @interface OrganizationModelControllerApi
 */
export interface OrganizationModelControllerApiInterface {
    /**
     *
     * @param {JsonApiACLInDocument} jsonApiACLInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'users' | 'userGroups' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createEntityAcls(
        params: {
            jsonApiACLInDocument: JsonApiACLInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"users" | "userGroups" | "ALL">;
        },
        options?: any,
    ): AxiosPromise<JsonApiACLOutDocument>;

    /**
     *
     * @param {JsonApiCookieSecurityPropertiesInDocument} jsonApiCookieSecurityPropertiesInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createEntityCookieSecurityPropertieses(
        params: {
            jsonApiCookieSecurityPropertiesInDocument: JsonApiCookieSecurityPropertiesInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ): AxiosPromise<JsonApiCookieSecurityPropertiesOutDocument>;

    /**
     *
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createEntityDataSources(
        params: {
            jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ): AxiosPromise<JsonApiDataSourceOutDocument>;

    /**
     *
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createEntityUserGroups(
        params: {
            jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"userGroups" | "acls" | "ALL">;
        },
        options?: any,
    ): AxiosPromise<JsonApiUserGroupOutDocument>;

    /**
     *
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createEntityUsers(
        params: {
            jsonApiUserInDocument: JsonApiUserInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"userGroups" | "acls" | "ALL">;
        },
        options?: any,
    ): AxiosPromise<JsonApiUserOutDocument>;

    /**
     *
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'workspaces' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createEntityWorkspaces(
        params: {
            jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"workspaces" | "ALL">;
        },
        options?: any,
    ): AxiosPromise<JsonApiWorkspaceOutDocument>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    deleteEntityAcls(
        params: {
            id: string;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    deleteEntityCookieSecurityPropertieses(
        params: {
            id: string;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    deleteEntityDataSources(
        params: {
            id: string;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    deleteEntityUserGroups(
        params: {
            id: string;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    deleteEntityUsers(
        params: {
            id: string;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    deleteEntityWorkspaces(
        params: {
            id: string;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'users' | 'userGroups' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesAcls(
        params: {
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"users" | "userGroups" | "ALL">;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiACLOutList>;

    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesCookieSecurityPropertieses(
        params: {
            predicate?: { [key: string]: object };
            filter?: string;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiCookieSecurityPropertiesOutList>;

    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesDataSources(
        params: {
            predicate?: { [key: string]: object };
            filter?: string;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiDataSourceOutList>;

    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesUserGroups(
        params: {
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"userGroups" | "acls" | "ALL">;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiUserGroupOutList>;

    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesUsers(
        params: {
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"userGroups" | "acls" | "ALL">;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiUserOutList>;

    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'workspaces' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesWorkspaces(
        params: {
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"workspaces" | "ALL">;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiWorkspaceOutList>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'users' | 'userGroups' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityAcls(
        params: {
            id: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"users" | "userGroups" | "ALL">;
        },
        options?: any,
    ): AxiosPromise<JsonApiACLOutDocument>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityCookieSecurityPropertieses(
        params: {
            id: string;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ): AxiosPromise<JsonApiCookieSecurityPropertiesOutDocument>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityDataSources(
        params: {
            id: string;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ): AxiosPromise<JsonApiDataSourceOutDocument>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityUserGroups(
        params: {
            id: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"userGroups" | "acls" | "ALL">;
        },
        options?: any,
    ): AxiosPromise<JsonApiUserGroupOutDocument>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityUsers(
        params: {
            id: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"userGroups" | "acls" | "ALL">;
        },
        options?: any,
    ): AxiosPromise<JsonApiUserOutDocument>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'workspaces' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityWorkspaces(
        params: {
            id: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"workspaces" | "ALL">;
        },
        options?: any,
    ): AxiosPromise<JsonApiWorkspaceOutDocument>;

    /**
     *
     * @param {string} id
     * @param {JsonApiACLInDocument} jsonApiACLInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'users' | 'userGroups' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    updateEntityAcls(
        params: {
            id: string;
            jsonApiACLInDocument: JsonApiACLInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"users" | "userGroups" | "ALL">;
        },
        options?: any,
    ): AxiosPromise<JsonApiACLOutDocument>;

    /**
     *
     * @param {string} id
     * @param {JsonApiCookieSecurityPropertiesInDocument} jsonApiCookieSecurityPropertiesInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    updateEntityCookieSecurityPropertieses(
        params: {
            id: string;
            jsonApiCookieSecurityPropertiesInDocument: JsonApiCookieSecurityPropertiesInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ): AxiosPromise<JsonApiCookieSecurityPropertiesOutDocument>;

    /**
     *
     * @param {string} id
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    updateEntityDataSources(
        params: {
            id: string;
            jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ): AxiosPromise<JsonApiDataSourceOutDocument>;

    /**
     *
     * @param {string} id
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    updateEntityUserGroups(
        params: {
            id: string;
            jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"userGroups" | "acls" | "ALL">;
        },
        options?: any,
    ): AxiosPromise<JsonApiUserGroupOutDocument>;

    /**
     *
     * @param {string} id
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    updateEntityUsers(
        params: {
            id: string;
            jsonApiUserInDocument: JsonApiUserInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"userGroups" | "acls" | "ALL">;
        },
        options?: any,
    ): AxiosPromise<JsonApiUserOutDocument>;

    /**
     *
     * @param {string} id
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'workspaces' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    updateEntityWorkspaces(
        params: {
            id: string;
            jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"workspaces" | "ALL">;
        },
        options?: any,
    ): AxiosPromise<JsonApiWorkspaceOutDocument>;
}

/**
 * OrganizationModelControllerApi - object-oriented interface
 * @export
 * @class OrganizationModelControllerApi
 * @extends {BaseAPI}
 */
export class OrganizationModelControllerApi
    extends BaseAPI
    implements OrganizationModelControllerApiInterface
{
    /**
     *
     * @param {JsonApiACLInDocument} jsonApiACLInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'users' | 'userGroups' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createEntityAcls(
        params: {
            jsonApiACLInDocument: JsonApiACLInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"users" | "userGroups" | "ALL">;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createEntityAcls(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {JsonApiCookieSecurityPropertiesInDocument} jsonApiCookieSecurityPropertiesInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createEntityCookieSecurityPropertieses(
        params: {
            jsonApiCookieSecurityPropertiesInDocument: JsonApiCookieSecurityPropertiesInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createEntityCookieSecurityPropertieses(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createEntityDataSources(
        params: {
            jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createEntityDataSources(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createEntityUserGroups(
        params: {
            jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"userGroups" | "acls" | "ALL">;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createEntityUserGroups(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createEntityUsers(
        params: {
            jsonApiUserInDocument: JsonApiUserInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"userGroups" | "acls" | "ALL">;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createEntityUsers(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'workspaces' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createEntityWorkspaces(
        params: {
            jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"workspaces" | "ALL">;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createEntityWorkspaces(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public deleteEntityAcls(
        params: {
            id: string;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).deleteEntityAcls(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public deleteEntityCookieSecurityPropertieses(
        params: {
            id: string;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).deleteEntityCookieSecurityPropertieses(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public deleteEntityDataSources(
        params: {
            id: string;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).deleteEntityDataSources(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public deleteEntityUserGroups(
        params: {
            id: string;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).deleteEntityUserGroups(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public deleteEntityUsers(
        params: {
            id: string;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).deleteEntityUsers(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public deleteEntityWorkspaces(
        params: {
            id: string;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).deleteEntityWorkspaces(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'users' | 'userGroups' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getAllEntitiesAcls(
        params: {
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"users" | "userGroups" | "ALL">;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getAllEntitiesAcls(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getAllEntitiesCookieSecurityPropertieses(
        params: {
            predicate?: { [key: string]: object };
            filter?: string;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getAllEntitiesCookieSecurityPropertieses(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getAllEntitiesDataSources(
        params: {
            predicate?: { [key: string]: object };
            filter?: string;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getAllEntitiesDataSources(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getAllEntitiesUserGroups(
        params: {
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"userGroups" | "acls" | "ALL">;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getAllEntitiesUserGroups(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getAllEntitiesUsers(
        params: {
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"userGroups" | "acls" | "ALL">;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getAllEntitiesUsers(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'workspaces' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getAllEntitiesWorkspaces(
        params: {
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"workspaces" | "ALL">;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getAllEntitiesWorkspaces(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'users' | 'userGroups' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getEntityAcls(
        params: {
            id: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"users" | "userGroups" | "ALL">;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getEntityAcls(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getEntityCookieSecurityPropertieses(
        params: {
            id: string;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getEntityCookieSecurityPropertieses(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getEntityDataSources(
        params: {
            id: string;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getEntityDataSources(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getEntityUserGroups(
        params: {
            id: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"userGroups" | "acls" | "ALL">;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getEntityUserGroups(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getEntityUsers(
        params: {
            id: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"userGroups" | "acls" | "ALL">;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getEntityUsers(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'workspaces' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getEntityWorkspaces(
        params: {
            id: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"workspaces" | "ALL">;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getEntityWorkspaces(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {JsonApiACLInDocument} jsonApiACLInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'users' | 'userGroups' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public updateEntityAcls(
        params: {
            id: string;
            jsonApiACLInDocument: JsonApiACLInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"users" | "userGroups" | "ALL">;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).updateEntityAcls(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {JsonApiCookieSecurityPropertiesInDocument} jsonApiCookieSecurityPropertiesInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public updateEntityCookieSecurityPropertieses(
        params: {
            id: string;
            jsonApiCookieSecurityPropertiesInDocument: JsonApiCookieSecurityPropertiesInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).updateEntityCookieSecurityPropertieses(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} id
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public updateEntityDataSources(
        params: {
            id: string;
            jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).updateEntityDataSources(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public updateEntityUserGroups(
        params: {
            id: string;
            jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"userGroups" | "acls" | "ALL">;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).updateEntityUserGroups(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'userGroups' | 'acls' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public updateEntityUsers(
        params: {
            id: string;
            jsonApiUserInDocument: JsonApiUserInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"userGroups" | "acls" | "ALL">;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).updateEntityUsers(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'workspaces' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public updateEntityWorkspaces(
        params: {
            id: string;
            jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"workspaces" | "ALL">;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).updateEntityWorkspaces(params, options)(
            this.axios,
            this.basePath,
        );
    }
}

/**
 * UserModelControllerApi - axios parameter creator
 * @export
 */
export const UserModelControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} userId
         * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityApiTokens(
            params: {
                userId: string;
                jsonApiApiTokenInDocument: JsonApiApiTokenInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { userId, jsonApiApiTokenInDocument, predicate, filter } = params;
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError(
                    "userId",
                    "Required parameter userId was null or undefined when calling createEntityApiTokens.",
                );
            }
            // verify required parameter 'jsonApiApiTokenInDocument' is not null or undefined
            if (jsonApiApiTokenInDocument === null || jsonApiApiTokenInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiApiTokenInDocument",
                    "Required parameter jsonApiApiTokenInDocument was null or undefined when calling createEntityApiTokens.",
                );
            }
            const localVarPath = `/api/entities/users/{userId}/apiTokens`.replace(
                `{${"userId"}}`,
                encodeURIComponent(String(userId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiApiTokenInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiApiTokenInDocument !== undefined ? jsonApiApiTokenInDocument : {})
                : jsonApiApiTokenInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityApiTokens(
            params: {
                userId: string;
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { userId, id, predicate, filter } = params;
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError(
                    "userId",
                    "Required parameter userId was null or undefined when calling deleteEntityApiTokens.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling deleteEntityApiTokens.",
                );
            }
            const localVarPath = `/api/entities/users/{userId}/apiTokens/{id}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} userId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesApiTokens(
            params: {
                userId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { userId, predicate, filter, page, size, sort } = params;
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError(
                    "userId",
                    "Required parameter userId was null or undefined when calling getAllEntitiesApiTokens.",
                );
            }
            const localVarPath = `/api/entities/users/{userId}/apiTokens`.replace(
                `{${"userId"}}`,
                encodeURIComponent(String(userId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityApiTokens(
            params: {
                userId: string;
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { userId, id, predicate, filter, page, size, sort } = params;
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError(
                    "userId",
                    "Required parameter userId was null or undefined when calling getEntityApiTokens.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityApiTokens.",
                );
            }
            const localVarPath = `/api/entities/users/{userId}/apiTokens/{id}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * UserModelControllerApi - functional programming interface
 * @export
 */
export const UserModelControllerApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} userId
         * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityApiTokens(
            params: {
                userId: string;
                jsonApiApiTokenInDocument: JsonApiApiTokenInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiApiTokenOutDocument> {
            const localVarAxiosArgs = UserModelControllerApiAxiosParamCreator(
                configuration,
            ).createEntityApiTokens(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityApiTokens(
            params: {
                userId: string;
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = UserModelControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityApiTokens(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} userId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesApiTokens(
            params: {
                userId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiApiTokenOutList> {
            const localVarAxiosArgs = UserModelControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesApiTokens(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityApiTokens(
            params: {
                userId: string;
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiApiTokenOutDocument> {
            const localVarAxiosArgs = UserModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntityApiTokens(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * UserModelControllerApi - factory interface
 * @export
 */
export const UserModelControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         *
         * @param {string} userId
         * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityApiTokens(
            params: {
                userId: string;
                jsonApiApiTokenInDocument: JsonApiApiTokenInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options?: any,
        ): AxiosPromise<JsonApiApiTokenOutDocument> {
            return UserModelControllerApiFp(configuration).createEntityApiTokens(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityApiTokens(
            params: {
                userId: string;
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return UserModelControllerApiFp(configuration).deleteEntityApiTokens(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} userId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesApiTokens(
            params: {
                userId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiApiTokenOutList> {
            return UserModelControllerApiFp(configuration).getAllEntitiesApiTokens(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityApiTokens(
            params: {
                userId: string;
                id: string;
                predicate?: { [key: string]: object };
                filter?: string;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiApiTokenOutDocument> {
            return UserModelControllerApiFp(configuration).getEntityApiTokens(params, options)(
                axios,
                basePath,
            );
        },
    };
};

/**
 * UserModelControllerApi - interface
 * @export
 * @interface UserModelControllerApi
 */
export interface UserModelControllerApiInterface {
    /**
     *
     * @param {string} userId
     * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApiInterface
     */
    createEntityApiTokens(
        params: {
            userId: string;
            jsonApiApiTokenInDocument: JsonApiApiTokenInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ): AxiosPromise<JsonApiApiTokenOutDocument>;

    /**
     *
     * @param {string} userId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApiInterface
     */
    deleteEntityApiTokens(
        params: {
            userId: string;
            id: string;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} userId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApiInterface
     */
    getAllEntitiesApiTokens(
        params: {
            userId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiApiTokenOutList>;

    /**
     *
     * @param {string} userId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApiInterface
     */
    getEntityApiTokens(
        params: {
            userId: string;
            id: string;
            predicate?: { [key: string]: object };
            filter?: string;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiApiTokenOutDocument>;
}

/**
 * UserModelControllerApi - object-oriented interface
 * @export
 * @class UserModelControllerApi
 * @extends {BaseAPI}
 */
export class UserModelControllerApi extends BaseAPI implements UserModelControllerApiInterface {
    /**
     *
     * @param {string} userId
     * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApi
     */
    public createEntityApiTokens(
        params: {
            userId: string;
            jsonApiApiTokenInDocument: JsonApiApiTokenInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ) {
        return UserModelControllerApiFp(this.configuration).createEntityApiTokens(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} userId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApi
     */
    public deleteEntityApiTokens(
        params: {
            userId: string;
            id: string;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ) {
        return UserModelControllerApiFp(this.configuration).deleteEntityApiTokens(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} userId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApi
     */
    public getAllEntitiesApiTokens(
        params: {
            userId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return UserModelControllerApiFp(this.configuration).getAllEntitiesApiTokens(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} userId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApi
     */
    public getEntityApiTokens(
        params: {
            userId: string;
            id: string;
            predicate?: { [key: string]: object };
            filter?: string;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return UserModelControllerApiFp(this.configuration).getEntityApiTokens(params, options)(
            this.axios,
            this.basePath,
        );
    }
}

/**
 * WorkspaceObjectControllerApi - axios parameter creator
 * @export
 */
export const WorkspaceObjectControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityAnalyticalDashboards(
            params: {
                workspaceId: string;
                jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<
                    | "visualizationObjects"
                    | "analyticalDashboards"
                    | "labels"
                    | "metrics"
                    | "datasets"
                    | "filterContexts"
                    | "ALL"
                >;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, jsonApiAnalyticalDashboardInDocument, predicate, filter, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createEntityAnalyticalDashboards.",
                );
            }
            // verify required parameter 'jsonApiAnalyticalDashboardInDocument' is not null or undefined
            if (
                jsonApiAnalyticalDashboardInDocument === null ||
                jsonApiAnalyticalDashboardInDocument === undefined
            ) {
                throw new RequiredError(
                    "jsonApiAnalyticalDashboardInDocument",
                    "Required parameter jsonApiAnalyticalDashboardInDocument was null or undefined when calling createEntityAnalyticalDashboards.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/analyticalDashboards`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiAnalyticalDashboardInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiAnalyticalDashboardInDocument !== undefined
                          ? jsonApiAnalyticalDashboardInDocument
                          : {},
                  )
                : jsonApiAnalyticalDashboardInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityFilterContexts(
            params: {
                workspaceId: string;
                jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, jsonApiFilterContextInDocument, predicate, filter, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createEntityFilterContexts.",
                );
            }
            // verify required parameter 'jsonApiFilterContextInDocument' is not null or undefined
            if (jsonApiFilterContextInDocument === null || jsonApiFilterContextInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiFilterContextInDocument",
                    "Required parameter jsonApiFilterContextInDocument was null or undefined when calling createEntityFilterContexts.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/filterContexts`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiFilterContextInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiFilterContextInDocument !== undefined ? jsonApiFilterContextInDocument : {},
                  )
                : jsonApiFilterContextInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityMetrics(
            params: {
                workspaceId: string;
                jsonApiMetricInDocument: JsonApiMetricInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, jsonApiMetricInDocument, predicate, filter, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createEntityMetrics.",
                );
            }
            // verify required parameter 'jsonApiMetricInDocument' is not null or undefined
            if (jsonApiMetricInDocument === null || jsonApiMetricInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiMetricInDocument",
                    "Required parameter jsonApiMetricInDocument was null or undefined when calling createEntityMetrics.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/metrics`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiMetricInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiMetricInDocument !== undefined ? jsonApiMetricInDocument : {})
                : jsonApiMetricInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityVisualizationObjects(
            params: {
                workspaceId: string;
                jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, jsonApiVisualizationObjectInDocument, predicate, filter, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createEntityVisualizationObjects.",
                );
            }
            // verify required parameter 'jsonApiVisualizationObjectInDocument' is not null or undefined
            if (
                jsonApiVisualizationObjectInDocument === null ||
                jsonApiVisualizationObjectInDocument === undefined
            ) {
                throw new RequiredError(
                    "jsonApiVisualizationObjectInDocument",
                    "Required parameter jsonApiVisualizationObjectInDocument was null or undefined when calling createEntityVisualizationObjects.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/visualizationObjects`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiVisualizationObjectInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiVisualizationObjectInDocument !== undefined
                          ? jsonApiVisualizationObjectInDocument
                          : {},
                  )
                : jsonApiVisualizationObjectInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'workspaceDataFilterSettings' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityWorkspaceDataFilters(
            params: {
                workspaceId: string;
                jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"workspaceDataFilterSettings" | "ALL">;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, jsonApiWorkspaceDataFilterInDocument, predicate, filter, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createEntityWorkspaceDataFilters.",
                );
            }
            // verify required parameter 'jsonApiWorkspaceDataFilterInDocument' is not null or undefined
            if (
                jsonApiWorkspaceDataFilterInDocument === null ||
                jsonApiWorkspaceDataFilterInDocument === undefined
            ) {
                throw new RequiredError(
                    "jsonApiWorkspaceDataFilterInDocument",
                    "Required parameter jsonApiWorkspaceDataFilterInDocument was null or undefined when calling createEntityWorkspaceDataFilters.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/workspaceDataFilters`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiWorkspaceDataFilterInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiWorkspaceDataFilterInDocument !== undefined
                          ? jsonApiWorkspaceDataFilterInDocument
                          : {},
                  )
                : jsonApiWorkspaceDataFilterInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityAnalyticalDashboards(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, predicate, filter } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling deleteEntityAnalyticalDashboards.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling deleteEntityAnalyticalDashboards.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/analyticalDashboards/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityFilterContexts(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, predicate, filter } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling deleteEntityFilterContexts.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling deleteEntityFilterContexts.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/filterContexts/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityMetrics(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, predicate, filter } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling deleteEntityMetrics.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling deleteEntityMetrics.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/metrics/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityVisualizationObjects(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, predicate, filter } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling deleteEntityVisualizationObjects.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling deleteEntityVisualizationObjects.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/visualizationObjects/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityWorkspaceDataFilters(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, predicate, filter } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling deleteEntityWorkspaceDataFilters.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling deleteEntityWorkspaceDataFilters.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/workspaceDataFilters/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesAnalyticalDashboards(
            params: {
                workspaceId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<
                    | "visualizationObjects"
                    | "analyticalDashboards"
                    | "labels"
                    | "metrics"
                    | "datasets"
                    | "filterContexts"
                    | "ALL"
                >;
                page?: number;
                size?: number;
                sort?: Array<string>;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, predicate, filter, include, page, size, sort, xGDCVALIDATERELATIONS } =
                params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getAllEntitiesAnalyticalDashboards.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/analyticalDashboards`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'datasets' | 'labels' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesAttributes(
            params: {
                workspaceId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"datasets" | "labels" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, predicate, filter, include, page, size, sort, xGDCVALIDATERELATIONS } =
                params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getAllEntitiesAttributes.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/attributes`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'attributes' | 'facts' | 'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDatasets(
            params: {
                workspaceId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"attributes" | "facts" | "datasets" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, predicate, filter, include, page, size, sort, xGDCVALIDATERELATIONS } =
                params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getAllEntitiesDatasets.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/datasets`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesFacts(
            params: {
                workspaceId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"datasets" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, predicate, filter, include, page, size, sort, xGDCVALIDATERELATIONS } =
                params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getAllEntitiesFacts.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/facts`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesFilterContexts(
            params: {
                workspaceId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, predicate, filter, include, page, size, sort, xGDCVALIDATERELATIONS } =
                params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getAllEntitiesFilterContexts.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/filterContexts`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'attributes' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesLabels(
            params: {
                workspaceId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"attributes" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, predicate, filter, include, page, size, sort, xGDCVALIDATERELATIONS } =
                params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getAllEntitiesLabels.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/labels`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesMetrics(
            params: {
                workspaceId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, predicate, filter, include, page, size, sort, xGDCVALIDATERELATIONS } =
                params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getAllEntitiesMetrics.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/metrics`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesVisualizationObjects(
            params: {
                workspaceId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, predicate, filter, include, page, size, sort, xGDCVALIDATERELATIONS } =
                params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getAllEntitiesVisualizationObjects.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/visualizationObjects`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'workspaceDataFilters' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaceDataFilterSettings(
            params: {
                workspaceId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"workspaceDataFilters" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, predicate, filter, include, page, size, sort, xGDCVALIDATERELATIONS } =
                params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getAllEntitiesWorkspaceDataFilterSettings.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/workspaceDataFilterSettings`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'workspaceDataFilterSettings' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaceDataFilters(
            params: {
                workspaceId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"workspaceDataFilterSettings" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, predicate, filter, include, page, size, sort, xGDCVALIDATERELATIONS } =
                params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getAllEntitiesWorkspaceDataFilters.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/workspaceDataFilters`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAnalyticalDashboards(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<
                    | "visualizationObjects"
                    | "analyticalDashboards"
                    | "labels"
                    | "metrics"
                    | "datasets"
                    | "filterContexts"
                    | "ALL"
                >;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, predicate, filter, include, xGDCVALIDATERELATIONS } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityAnalyticalDashboards.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling getEntityAnalyticalDashboards.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/analyticalDashboards/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'datasets' | 'labels' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAttributes(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"datasets" | "labels" | "ALL">;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, predicate, filter, include, xGDCVALIDATERELATIONS } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityAttributes.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling getEntityAttributes.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/attributes/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'attributes' | 'facts' | 'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDatasets(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"attributes" | "facts" | "datasets" | "ALL">;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, predicate, filter, include, xGDCVALIDATERELATIONS } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityDatasets.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling getEntityDatasets.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/datasets/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFacts(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"datasets" | "ALL">;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, predicate, filter, include, xGDCVALIDATERELATIONS } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityFacts.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling getEntityFacts.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/facts/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFilterContexts(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, predicate, filter, include, xGDCVALIDATERELATIONS } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityFilterContexts.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling getEntityFilterContexts.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/filterContexts/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'attributes' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityLabels(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"attributes" | "ALL">;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, predicate, filter, include, xGDCVALIDATERELATIONS } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityLabels.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling getEntityLabels.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/labels/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityMetrics(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, predicate, filter, include, xGDCVALIDATERELATIONS } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityMetrics.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling getEntityMetrics.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/metrics/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityVisualizationObjects(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, predicate, filter, include, xGDCVALIDATERELATIONS } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityVisualizationObjects.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling getEntityVisualizationObjects.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/visualizationObjects/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'workspaceDataFilters' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaceDataFilterSettings(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"workspaceDataFilters" | "ALL">;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, predicate, filter, include, xGDCVALIDATERELATIONS } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityWorkspaceDataFilterSettings.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling getEntityWorkspaceDataFilterSettings.",
                );
            }
            const localVarPath =
                `/api/entities/workspaces/{workspaceId}/workspaceDataFilterSettings/{objectId}`
                    .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                    .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'workspaceDataFilterSettings' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaceDataFilters(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"workspaceDataFilterSettings" | "ALL">;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, predicate, filter, include, xGDCVALIDATERELATIONS } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityWorkspaceDataFilters.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling getEntityWorkspaceDataFilters.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/workspaceDataFilters/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(
                    JSON.stringify(xGDCVALIDATERELATIONS),
                );
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityAnalyticalDashboards(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<
                    | "visualizationObjects"
                    | "analyticalDashboards"
                    | "labels"
                    | "metrics"
                    | "datasets"
                    | "filterContexts"
                    | "ALL"
                >;
            },
            options: any = {},
        ): RequestArgs {
            const {
                workspaceId,
                objectId,
                jsonApiAnalyticalDashboardInDocument,
                predicate,
                filter,
                include,
            } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling updateEntityAnalyticalDashboards.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling updateEntityAnalyticalDashboards.",
                );
            }
            // verify required parameter 'jsonApiAnalyticalDashboardInDocument' is not null or undefined
            if (
                jsonApiAnalyticalDashboardInDocument === null ||
                jsonApiAnalyticalDashboardInDocument === undefined
            ) {
                throw new RequiredError(
                    "jsonApiAnalyticalDashboardInDocument",
                    "Required parameter jsonApiAnalyticalDashboardInDocument was null or undefined when calling updateEntityAnalyticalDashboards.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/analyticalDashboards/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiAnalyticalDashboardInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiAnalyticalDashboardInDocument !== undefined
                          ? jsonApiAnalyticalDashboardInDocument
                          : {},
                  )
                : jsonApiAnalyticalDashboardInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityFilterContexts(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, jsonApiFilterContextInDocument, predicate, filter, include } =
                params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling updateEntityFilterContexts.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling updateEntityFilterContexts.",
                );
            }
            // verify required parameter 'jsonApiFilterContextInDocument' is not null or undefined
            if (jsonApiFilterContextInDocument === null || jsonApiFilterContextInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiFilterContextInDocument",
                    "Required parameter jsonApiFilterContextInDocument was null or undefined when calling updateEntityFilterContexts.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/filterContexts/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiFilterContextInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiFilterContextInDocument !== undefined ? jsonApiFilterContextInDocument : {},
                  )
                : jsonApiFilterContextInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityMetrics(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiMetricInDocument: JsonApiMetricInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, jsonApiMetricInDocument, predicate, filter, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling updateEntityMetrics.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling updateEntityMetrics.",
                );
            }
            // verify required parameter 'jsonApiMetricInDocument' is not null or undefined
            if (jsonApiMetricInDocument === null || jsonApiMetricInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiMetricInDocument",
                    "Required parameter jsonApiMetricInDocument was null or undefined when calling updateEntityMetrics.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/metrics/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiMetricInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiMetricInDocument !== undefined ? jsonApiMetricInDocument : {})
                : jsonApiMetricInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityVisualizationObjects(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
            },
            options: any = {},
        ): RequestArgs {
            const {
                workspaceId,
                objectId,
                jsonApiVisualizationObjectInDocument,
                predicate,
                filter,
                include,
            } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling updateEntityVisualizationObjects.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling updateEntityVisualizationObjects.",
                );
            }
            // verify required parameter 'jsonApiVisualizationObjectInDocument' is not null or undefined
            if (
                jsonApiVisualizationObjectInDocument === null ||
                jsonApiVisualizationObjectInDocument === undefined
            ) {
                throw new RequiredError(
                    "jsonApiVisualizationObjectInDocument",
                    "Required parameter jsonApiVisualizationObjectInDocument was null or undefined when calling updateEntityVisualizationObjects.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/visualizationObjects/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiVisualizationObjectInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiVisualizationObjectInDocument !== undefined
                          ? jsonApiVisualizationObjectInDocument
                          : {},
                  )
                : jsonApiVisualizationObjectInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'workspaceDataFilterSettings' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityWorkspaceDataFilters(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"workspaceDataFilterSettings" | "ALL">;
            },
            options: any = {},
        ): RequestArgs {
            const {
                workspaceId,
                objectId,
                jsonApiWorkspaceDataFilterInDocument,
                predicate,
                filter,
                include,
            } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling updateEntityWorkspaceDataFilters.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling updateEntityWorkspaceDataFilters.",
                );
            }
            // verify required parameter 'jsonApiWorkspaceDataFilterInDocument' is not null or undefined
            if (
                jsonApiWorkspaceDataFilterInDocument === null ||
                jsonApiWorkspaceDataFilterInDocument === undefined
            ) {
                throw new RequiredError(
                    "jsonApiWorkspaceDataFilterInDocument",
                    "Required parameter jsonApiWorkspaceDataFilterInDocument was null or undefined when calling updateEntityWorkspaceDataFilters.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/workspaceDataFilters/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (predicate !== undefined) {
                if (typeof predicate === "object") {
                    addFlattenedObjectTo(predicate, localVarQueryParameter);
                } else {
                    localVarQueryParameter["predicate"] = predicate;
                }
            }

            if (filter !== undefined) {
                if (typeof filter === "object") {
                    addFlattenedObjectTo(filter, localVarQueryParameter);
                } else {
                    localVarQueryParameter["filter"] = filter;
                }
            }

            if (include) {
                localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiWorkspaceDataFilterInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiWorkspaceDataFilterInDocument !== undefined
                          ? jsonApiWorkspaceDataFilterInDocument
                          : {},
                  )
                : jsonApiWorkspaceDataFilterInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * WorkspaceObjectControllerApi - functional programming interface
 * @export
 */
export const WorkspaceObjectControllerApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityAnalyticalDashboards(
            params: {
                workspaceId: string;
                jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<
                    | "visualizationObjects"
                    | "analyticalDashboards"
                    | "labels"
                    | "metrics"
                    | "datasets"
                    | "filterContexts"
                    | "ALL"
                >;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).createEntityAnalyticalDashboards(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityFilterContexts(
            params: {
                workspaceId: string;
                jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).createEntityFilterContexts(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityMetrics(
            params: {
                workspaceId: string;
                jsonApiMetricInDocument: JsonApiMetricInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).createEntityMetrics(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityVisualizationObjects(
            params: {
                workspaceId: string;
                jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).createEntityVisualizationObjects(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'workspaceDataFilterSettings' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityWorkspaceDataFilters(
            params: {
                workspaceId: string;
                jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"workspaceDataFilterSettings" | "ALL">;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).createEntityWorkspaceDataFilters(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityAnalyticalDashboards(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityAnalyticalDashboards(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityFilterContexts(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityFilterContexts(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityMetrics(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityMetrics(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityVisualizationObjects(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityVisualizationObjects(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityWorkspaceDataFilters(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityWorkspaceDataFilters(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesAnalyticalDashboards(
            params: {
                workspaceId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<
                    | "visualizationObjects"
                    | "analyticalDashboards"
                    | "labels"
                    | "metrics"
                    | "datasets"
                    | "filterContexts"
                    | "ALL"
                >;
                page?: number;
                size?: number;
                sort?: Array<string>;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardOutList> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesAnalyticalDashboards(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'datasets' | 'labels' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesAttributes(
            params: {
                workspaceId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"datasets" | "labels" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAttributeOutList> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesAttributes(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'attributes' | 'facts' | 'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDatasets(
            params: {
                workspaceId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"attributes" | "facts" | "datasets" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDatasetOutList> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesDatasets(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesFacts(
            params: {
                workspaceId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"datasets" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFactOutList> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesFacts(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesFilterContexts(
            params: {
                workspaceId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextOutList> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesFilterContexts(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'attributes' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesLabels(
            params: {
                workspaceId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"attributes" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiLabelOutList> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesLabels(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesMetrics(
            params: {
                workspaceId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricOutList> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesMetrics(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesVisualizationObjects(
            params: {
                workspaceId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectOutList> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesVisualizationObjects(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'workspaceDataFilters' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaceDataFilterSettings(
            params: {
                workspaceId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"workspaceDataFilters" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<JsonApiWorkspaceDataFilterSettingOutList> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesWorkspaceDataFilterSettings(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'workspaceDataFilterSettings' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaceDataFilters(
            params: {
                workspaceId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"workspaceDataFilterSettings" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterOutList> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesWorkspaceDataFilters(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAnalyticalDashboards(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<
                    | "visualizationObjects"
                    | "analyticalDashboards"
                    | "labels"
                    | "metrics"
                    | "datasets"
                    | "filterContexts"
                    | "ALL"
                >;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntityAnalyticalDashboards(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'datasets' | 'labels' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAttributes(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"datasets" | "labels" | "ALL">;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAttributeOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntityAttributes(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'attributes' | 'facts' | 'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDatasets(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"attributes" | "facts" | "datasets" | "ALL">;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDatasetOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntityDatasets(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFacts(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"datasets" | "ALL">;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFactOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntityFacts(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFilterContexts(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntityFilterContexts(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'attributes' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityLabels(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"attributes" | "ALL">;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiLabelOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntityLabels(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityMetrics(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntityMetrics(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityVisualizationObjects(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntityVisualizationObjects(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'workspaceDataFilters' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaceDataFilterSettings(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"workspaceDataFilters" | "ALL">;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntityWorkspaceDataFilterSettings(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'workspaceDataFilterSettings' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaceDataFilters(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"workspaceDataFilterSettings" | "ALL">;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntityWorkspaceDataFilters(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityAnalyticalDashboards(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<
                    | "visualizationObjects"
                    | "analyticalDashboards"
                    | "labels"
                    | "metrics"
                    | "datasets"
                    | "filterContexts"
                    | "ALL"
                >;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityAnalyticalDashboards(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityFilterContexts(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityFilterContexts(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityMetrics(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiMetricInDocument: JsonApiMetricInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityMetrics(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityVisualizationObjects(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityVisualizationObjects(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'workspaceDataFilterSettings' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityWorkspaceDataFilters(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"workspaceDataFilterSettings" | "ALL">;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityWorkspaceDataFilters(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * WorkspaceObjectControllerApi - factory interface
 * @export
 */
export const WorkspaceObjectControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityAnalyticalDashboards(
            params: {
                workspaceId: string;
                jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<
                    | "visualizationObjects"
                    | "analyticalDashboards"
                    | "labels"
                    | "metrics"
                    | "datasets"
                    | "filterContexts"
                    | "ALL"
                >;
            },
            options?: any,
        ): AxiosPromise<JsonApiAnalyticalDashboardOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).createEntityAnalyticalDashboards(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityFilterContexts(
            params: {
                workspaceId: string;
                jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
            },
            options?: any,
        ): AxiosPromise<JsonApiFilterContextOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).createEntityFilterContexts(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityMetrics(
            params: {
                workspaceId: string;
                jsonApiMetricInDocument: JsonApiMetricInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
            },
            options?: any,
        ): AxiosPromise<JsonApiMetricOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).createEntityMetrics(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityVisualizationObjects(
            params: {
                workspaceId: string;
                jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
            },
            options?: any,
        ): AxiosPromise<JsonApiVisualizationObjectOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).createEntityVisualizationObjects(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'workspaceDataFilterSettings' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityWorkspaceDataFilters(
            params: {
                workspaceId: string;
                jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"workspaceDataFilterSettings" | "ALL">;
            },
            options?: any,
        ): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).createEntityWorkspaceDataFilters(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityAnalyticalDashboards(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return WorkspaceObjectControllerApiFp(configuration).deleteEntityAnalyticalDashboards(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityFilterContexts(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return WorkspaceObjectControllerApiFp(configuration).deleteEntityFilterContexts(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityMetrics(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return WorkspaceObjectControllerApiFp(configuration).deleteEntityMetrics(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityVisualizationObjects(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return WorkspaceObjectControllerApiFp(configuration).deleteEntityVisualizationObjects(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityWorkspaceDataFilters(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return WorkspaceObjectControllerApiFp(configuration).deleteEntityWorkspaceDataFilters(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesAnalyticalDashboards(
            params: {
                workspaceId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<
                    | "visualizationObjects"
                    | "analyticalDashboards"
                    | "labels"
                    | "metrics"
                    | "datasets"
                    | "filterContexts"
                    | "ALL"
                >;
                page?: number;
                size?: number;
                sort?: Array<string>;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options?: any,
        ): AxiosPromise<JsonApiAnalyticalDashboardOutList> {
            return WorkspaceObjectControllerApiFp(configuration).getAllEntitiesAnalyticalDashboards(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'datasets' | 'labels' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesAttributes(
            params: {
                workspaceId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"datasets" | "labels" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options?: any,
        ): AxiosPromise<JsonApiAttributeOutList> {
            return WorkspaceObjectControllerApiFp(configuration).getAllEntitiesAttributes(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'attributes' | 'facts' | 'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDatasets(
            params: {
                workspaceId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"attributes" | "facts" | "datasets" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options?: any,
        ): AxiosPromise<JsonApiDatasetOutList> {
            return WorkspaceObjectControllerApiFp(configuration).getAllEntitiesDatasets(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesFacts(
            params: {
                workspaceId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"datasets" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options?: any,
        ): AxiosPromise<JsonApiFactOutList> {
            return WorkspaceObjectControllerApiFp(configuration).getAllEntitiesFacts(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesFilterContexts(
            params: {
                workspaceId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options?: any,
        ): AxiosPromise<JsonApiFilterContextOutList> {
            return WorkspaceObjectControllerApiFp(configuration).getAllEntitiesFilterContexts(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'attributes' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesLabels(
            params: {
                workspaceId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"attributes" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options?: any,
        ): AxiosPromise<JsonApiLabelOutList> {
            return WorkspaceObjectControllerApiFp(configuration).getAllEntitiesLabels(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesMetrics(
            params: {
                workspaceId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options?: any,
        ): AxiosPromise<JsonApiMetricOutList> {
            return WorkspaceObjectControllerApiFp(configuration).getAllEntitiesMetrics(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesVisualizationObjects(
            params: {
                workspaceId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options?: any,
        ): AxiosPromise<JsonApiVisualizationObjectOutList> {
            return WorkspaceObjectControllerApiFp(configuration).getAllEntitiesVisualizationObjects(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'workspaceDataFilters' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaceDataFilterSettings(
            params: {
                workspaceId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"workspaceDataFilters" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options?: any,
        ): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutList> {
            return WorkspaceObjectControllerApiFp(configuration).getAllEntitiesWorkspaceDataFilterSettings(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'workspaceDataFilterSettings' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaceDataFilters(
            params: {
                workspaceId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"workspaceDataFilterSettings" | "ALL">;
                page?: number;
                size?: number;
                sort?: Array<string>;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options?: any,
        ): AxiosPromise<JsonApiWorkspaceDataFilterOutList> {
            return WorkspaceObjectControllerApiFp(configuration).getAllEntitiesWorkspaceDataFilters(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAnalyticalDashboards(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<
                    | "visualizationObjects"
                    | "analyticalDashboards"
                    | "labels"
                    | "metrics"
                    | "datasets"
                    | "filterContexts"
                    | "ALL"
                >;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options?: any,
        ): AxiosPromise<JsonApiAnalyticalDashboardOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).getEntityAnalyticalDashboards(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'datasets' | 'labels' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAttributes(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"datasets" | "labels" | "ALL">;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options?: any,
        ): AxiosPromise<JsonApiAttributeOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).getEntityAttributes(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'attributes' | 'facts' | 'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDatasets(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"attributes" | "facts" | "datasets" | "ALL">;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options?: any,
        ): AxiosPromise<JsonApiDatasetOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).getEntityDatasets(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFacts(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"datasets" | "ALL">;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options?: any,
        ): AxiosPromise<JsonApiFactOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).getEntityFacts(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFilterContexts(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options?: any,
        ): AxiosPromise<JsonApiFilterContextOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).getEntityFilterContexts(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'attributes' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityLabels(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"attributes" | "ALL">;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options?: any,
        ): AxiosPromise<JsonApiLabelOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).getEntityLabels(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityMetrics(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options?: any,
        ): AxiosPromise<JsonApiMetricOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).getEntityMetrics(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityVisualizationObjects(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options?: any,
        ): AxiosPromise<JsonApiVisualizationObjectOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).getEntityVisualizationObjects(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'workspaceDataFilters' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaceDataFilterSettings(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"workspaceDataFilters" | "ALL">;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options?: any,
        ): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).getEntityWorkspaceDataFilterSettings(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'workspaceDataFilterSettings' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaceDataFilters(
            params: {
                workspaceId: string;
                objectId: string;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"workspaceDataFilterSettings" | "ALL">;
                xGDCVALIDATERELATIONS?: boolean;
            },
            options?: any,
        ): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).getEntityWorkspaceDataFilters(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityAnalyticalDashboards(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<
                    | "visualizationObjects"
                    | "analyticalDashboards"
                    | "labels"
                    | "metrics"
                    | "datasets"
                    | "filterContexts"
                    | "ALL"
                >;
            },
            options?: any,
        ): AxiosPromise<JsonApiAnalyticalDashboardOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).updateEntityAnalyticalDashboards(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityFilterContexts(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
            },
            options?: any,
        ): AxiosPromise<JsonApiFilterContextOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).updateEntityFilterContexts(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityMetrics(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiMetricInDocument: JsonApiMetricInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
            },
            options?: any,
        ): AxiosPromise<JsonApiMetricOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).updateEntityMetrics(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityVisualizationObjects(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
            },
            options?: any,
        ): AxiosPromise<JsonApiVisualizationObjectOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).updateEntityVisualizationObjects(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
         * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
         * @param {Array<'workspaceDataFilterSettings' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityWorkspaceDataFilters(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
                predicate?: { [key: string]: object };
                filter?: string;
                include?: Array<"workspaceDataFilterSettings" | "ALL">;
            },
            options?: any,
        ): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).updateEntityWorkspaceDataFilters(
                params,
                options,
            )(axios, basePath);
        },
    };
};

/**
 * WorkspaceObjectControllerApi - interface
 * @export
 * @interface WorkspaceObjectControllerApi
 */
export interface WorkspaceObjectControllerApiInterface {
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    createEntityAnalyticalDashboards(
        params: {
            workspaceId: string;
            jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<
                | "visualizationObjects"
                | "analyticalDashboards"
                | "labels"
                | "metrics"
                | "datasets"
                | "filterContexts"
                | "ALL"
            >;
        },
        options?: any,
    ): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    createEntityFilterContexts(
        params: {
            workspaceId: string;
            jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
        },
        options?: any,
    ): AxiosPromise<JsonApiFilterContextOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    createEntityMetrics(
        params: {
            workspaceId: string;
            jsonApiMetricInDocument: JsonApiMetricInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
        },
        options?: any,
    ): AxiosPromise<JsonApiMetricOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    createEntityVisualizationObjects(
        params: {
            workspaceId: string;
            jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
        },
        options?: any,
    ): AxiosPromise<JsonApiVisualizationObjectOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'workspaceDataFilterSettings' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    createEntityWorkspaceDataFilters(
        params: {
            workspaceId: string;
            jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"workspaceDataFilterSettings" | "ALL">;
        },
        options?: any,
    ): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    deleteEntityAnalyticalDashboards(
        params: {
            workspaceId: string;
            objectId: string;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    deleteEntityFilterContexts(
        params: {
            workspaceId: string;
            objectId: string;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    deleteEntityMetrics(
        params: {
            workspaceId: string;
            objectId: string;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    deleteEntityVisualizationObjects(
        params: {
            workspaceId: string;
            objectId: string;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    deleteEntityWorkspaceDataFilters(
        params: {
            workspaceId: string;
            objectId: string;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesAnalyticalDashboards(
        params: {
            workspaceId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<
                | "visualizationObjects"
                | "analyticalDashboards"
                | "labels"
                | "metrics"
                | "datasets"
                | "filterContexts"
                | "ALL"
            >;
            page?: number;
            size?: number;
            sort?: Array<string>;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ): AxiosPromise<JsonApiAnalyticalDashboardOutList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'datasets' | 'labels' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesAttributes(
        params: {
            workspaceId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"datasets" | "labels" | "ALL">;
            page?: number;
            size?: number;
            sort?: Array<string>;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ): AxiosPromise<JsonApiAttributeOutList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesDatasets(
        params: {
            workspaceId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"attributes" | "facts" | "datasets" | "ALL">;
            page?: number;
            size?: number;
            sort?: Array<string>;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ): AxiosPromise<JsonApiDatasetOutList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesFacts(
        params: {
            workspaceId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"datasets" | "ALL">;
            page?: number;
            size?: number;
            sort?: Array<string>;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ): AxiosPromise<JsonApiFactOutList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesFilterContexts(
        params: {
            workspaceId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
            page?: number;
            size?: number;
            sort?: Array<string>;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ): AxiosPromise<JsonApiFilterContextOutList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'attributes' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesLabels(
        params: {
            workspaceId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"attributes" | "ALL">;
            page?: number;
            size?: number;
            sort?: Array<string>;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ): AxiosPromise<JsonApiLabelOutList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesMetrics(
        params: {
            workspaceId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
            page?: number;
            size?: number;
            sort?: Array<string>;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ): AxiosPromise<JsonApiMetricOutList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesVisualizationObjects(
        params: {
            workspaceId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
            page?: number;
            size?: number;
            sort?: Array<string>;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ): AxiosPromise<JsonApiVisualizationObjectOutList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'workspaceDataFilters' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesWorkspaceDataFilterSettings(
        params: {
            workspaceId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"workspaceDataFilters" | "ALL">;
            page?: number;
            size?: number;
            sort?: Array<string>;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'workspaceDataFilterSettings' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesWorkspaceDataFilters(
        params: {
            workspaceId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"workspaceDataFilterSettings" | "ALL">;
            page?: number;
            size?: number;
            sort?: Array<string>;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ): AxiosPromise<JsonApiWorkspaceDataFilterOutList>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityAnalyticalDashboards(
        params: {
            workspaceId: string;
            objectId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<
                | "visualizationObjects"
                | "analyticalDashboards"
                | "labels"
                | "metrics"
                | "datasets"
                | "filterContexts"
                | "ALL"
            >;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'datasets' | 'labels' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityAttributes(
        params: {
            workspaceId: string;
            objectId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"datasets" | "labels" | "ALL">;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ): AxiosPromise<JsonApiAttributeOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityDatasets(
        params: {
            workspaceId: string;
            objectId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"attributes" | "facts" | "datasets" | "ALL">;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ): AxiosPromise<JsonApiDatasetOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityFacts(
        params: {
            workspaceId: string;
            objectId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"datasets" | "ALL">;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ): AxiosPromise<JsonApiFactOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityFilterContexts(
        params: {
            workspaceId: string;
            objectId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ): AxiosPromise<JsonApiFilterContextOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'attributes' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityLabels(
        params: {
            workspaceId: string;
            objectId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"attributes" | "ALL">;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ): AxiosPromise<JsonApiLabelOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityMetrics(
        params: {
            workspaceId: string;
            objectId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ): AxiosPromise<JsonApiMetricOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityVisualizationObjects(
        params: {
            workspaceId: string;
            objectId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ): AxiosPromise<JsonApiVisualizationObjectOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'workspaceDataFilters' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityWorkspaceDataFilterSettings(
        params: {
            workspaceId: string;
            objectId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"workspaceDataFilters" | "ALL">;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'workspaceDataFilterSettings' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityWorkspaceDataFilters(
        params: {
            workspaceId: string;
            objectId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"workspaceDataFilterSettings" | "ALL">;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    updateEntityAnalyticalDashboards(
        params: {
            workspaceId: string;
            objectId: string;
            jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<
                | "visualizationObjects"
                | "analyticalDashboards"
                | "labels"
                | "metrics"
                | "datasets"
                | "filterContexts"
                | "ALL"
            >;
        },
        options?: any,
    ): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    updateEntityFilterContexts(
        params: {
            workspaceId: string;
            objectId: string;
            jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
        },
        options?: any,
    ): AxiosPromise<JsonApiFilterContextOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    updateEntityMetrics(
        params: {
            workspaceId: string;
            objectId: string;
            jsonApiMetricInDocument: JsonApiMetricInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
        },
        options?: any,
    ): AxiosPromise<JsonApiMetricOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    updateEntityVisualizationObjects(
        params: {
            workspaceId: string;
            objectId: string;
            jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
        },
        options?: any,
    ): AxiosPromise<JsonApiVisualizationObjectOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'workspaceDataFilterSettings' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    updateEntityWorkspaceDataFilters(
        params: {
            workspaceId: string;
            objectId: string;
            jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"workspaceDataFilterSettings" | "ALL">;
        },
        options?: any,
    ): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
}

/**
 * WorkspaceObjectControllerApi - object-oriented interface
 * @export
 * @class WorkspaceObjectControllerApi
 * @extends {BaseAPI}
 */
export class WorkspaceObjectControllerApi extends BaseAPI implements WorkspaceObjectControllerApiInterface {
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public createEntityAnalyticalDashboards(
        params: {
            workspaceId: string;
            jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<
                | "visualizationObjects"
                | "analyticalDashboards"
                | "labels"
                | "metrics"
                | "datasets"
                | "filterContexts"
                | "ALL"
            >;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).createEntityAnalyticalDashboards(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public createEntityFilterContexts(
        params: {
            workspaceId: string;
            jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).createEntityFilterContexts(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public createEntityMetrics(
        params: {
            workspaceId: string;
            jsonApiMetricInDocument: JsonApiMetricInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).createEntityMetrics(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public createEntityVisualizationObjects(
        params: {
            workspaceId: string;
            jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).createEntityVisualizationObjects(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'workspaceDataFilterSettings' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public createEntityWorkspaceDataFilters(
        params: {
            workspaceId: string;
            jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"workspaceDataFilterSettings" | "ALL">;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).createEntityWorkspaceDataFilters(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public deleteEntityAnalyticalDashboards(
        params: {
            workspaceId: string;
            objectId: string;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).deleteEntityAnalyticalDashboards(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public deleteEntityFilterContexts(
        params: {
            workspaceId: string;
            objectId: string;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).deleteEntityFilterContexts(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public deleteEntityMetrics(
        params: {
            workspaceId: string;
            objectId: string;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).deleteEntityMetrics(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public deleteEntityVisualizationObjects(
        params: {
            workspaceId: string;
            objectId: string;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).deleteEntityVisualizationObjects(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public deleteEntityWorkspaceDataFilters(
        params: {
            workspaceId: string;
            objectId: string;
            predicate?: { [key: string]: object };
            filter?: string;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).deleteEntityWorkspaceDataFilters(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getAllEntitiesAnalyticalDashboards(
        params: {
            workspaceId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<
                | "visualizationObjects"
                | "analyticalDashboards"
                | "labels"
                | "metrics"
                | "datasets"
                | "filterContexts"
                | "ALL"
            >;
            page?: number;
            size?: number;
            sort?: Array<string>;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getAllEntitiesAnalyticalDashboards(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'datasets' | 'labels' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getAllEntitiesAttributes(
        params: {
            workspaceId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"datasets" | "labels" | "ALL">;
            page?: number;
            size?: number;
            sort?: Array<string>;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getAllEntitiesAttributes(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getAllEntitiesDatasets(
        params: {
            workspaceId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"attributes" | "facts" | "datasets" | "ALL">;
            page?: number;
            size?: number;
            sort?: Array<string>;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getAllEntitiesDatasets(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getAllEntitiesFacts(
        params: {
            workspaceId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"datasets" | "ALL">;
            page?: number;
            size?: number;
            sort?: Array<string>;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getAllEntitiesFacts(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getAllEntitiesFilterContexts(
        params: {
            workspaceId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
            page?: number;
            size?: number;
            sort?: Array<string>;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getAllEntitiesFilterContexts(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'attributes' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getAllEntitiesLabels(
        params: {
            workspaceId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"attributes" | "ALL">;
            page?: number;
            size?: number;
            sort?: Array<string>;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getAllEntitiesLabels(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getAllEntitiesMetrics(
        params: {
            workspaceId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
            page?: number;
            size?: number;
            sort?: Array<string>;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getAllEntitiesMetrics(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getAllEntitiesVisualizationObjects(
        params: {
            workspaceId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
            page?: number;
            size?: number;
            sort?: Array<string>;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getAllEntitiesVisualizationObjects(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'workspaceDataFilters' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getAllEntitiesWorkspaceDataFilterSettings(
        params: {
            workspaceId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"workspaceDataFilters" | "ALL">;
            page?: number;
            size?: number;
            sort?: Array<string>;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getAllEntitiesWorkspaceDataFilterSettings(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'workspaceDataFilterSettings' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getAllEntitiesWorkspaceDataFilters(
        params: {
            workspaceId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"workspaceDataFilterSettings" | "ALL">;
            page?: number;
            size?: number;
            sort?: Array<string>;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getAllEntitiesWorkspaceDataFilters(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntityAnalyticalDashboards(
        params: {
            workspaceId: string;
            objectId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<
                | "visualizationObjects"
                | "analyticalDashboards"
                | "labels"
                | "metrics"
                | "datasets"
                | "filterContexts"
                | "ALL"
            >;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntityAnalyticalDashboards(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'datasets' | 'labels' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntityAttributes(
        params: {
            workspaceId: string;
            objectId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"datasets" | "labels" | "ALL">;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntityAttributes(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntityDatasets(
        params: {
            workspaceId: string;
            objectId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"attributes" | "facts" | "datasets" | "ALL">;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntityDatasets(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntityFacts(
        params: {
            workspaceId: string;
            objectId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"datasets" | "ALL">;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntityFacts(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntityFilterContexts(
        params: {
            workspaceId: string;
            objectId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntityFilterContexts(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'attributes' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntityLabels(
        params: {
            workspaceId: string;
            objectId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"attributes" | "ALL">;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntityLabels(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntityMetrics(
        params: {
            workspaceId: string;
            objectId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntityMetrics(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntityVisualizationObjects(
        params: {
            workspaceId: string;
            objectId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntityVisualizationObjects(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'workspaceDataFilters' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntityWorkspaceDataFilterSettings(
        params: {
            workspaceId: string;
            objectId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"workspaceDataFilters" | "ALL">;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntityWorkspaceDataFilterSettings(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'workspaceDataFilterSettings' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntityWorkspaceDataFilters(
        params: {
            workspaceId: string;
            objectId: string;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"workspaceDataFilterSettings" | "ALL">;
            xGDCVALIDATERELATIONS?: boolean;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntityWorkspaceDataFilters(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public updateEntityAnalyticalDashboards(
        params: {
            workspaceId: string;
            objectId: string;
            jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<
                | "visualizationObjects"
                | "analyticalDashboards"
                | "labels"
                | "metrics"
                | "datasets"
                | "filterContexts"
                | "ALL"
            >;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).updateEntityAnalyticalDashboards(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public updateEntityFilterContexts(
        params: {
            workspaceId: string;
            objectId: string;
            jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).updateEntityFilterContexts(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public updateEntityMetrics(
        params: {
            workspaceId: string;
            objectId: string;
            jsonApiMetricInDocument: JsonApiMetricInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).updateEntityMetrics(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public updateEntityVisualizationObjects(
        params: {
            workspaceId: string;
            objectId: string;
            jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).updateEntityVisualizationObjects(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser.You can specify any object parameter and parameter of related entity up to 2nd level (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;)
     * @param {Array<'workspaceDataFilterSettings' | 'ALL'>} [include] Array of included entities. Entities are separated by commas (e.g. include&#x3D;entity1,entity2). If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public updateEntityWorkspaceDataFilters(
        params: {
            workspaceId: string;
            objectId: string;
            jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
            predicate?: { [key: string]: object };
            filter?: string;
            include?: Array<"workspaceDataFilterSettings" | "ALL">;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).updateEntityWorkspaceDataFilters(
            params,
            options,
        )(this.axios, this.basePath);
    }
}
