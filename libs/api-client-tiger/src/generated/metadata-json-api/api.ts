/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// @ts-ignore
import globalImportUrl from "url";
import globalImportQs from "qs";
import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from "./base";

// utility function that adds support for nested objects in query
const addFlattenedObjectTo = (object: any, target: any): void => {
    const flattened = globalImportQs.parse(globalImportQs.stringify(object), { depth: 0 });
    Object.keys(flattened).forEach((key) => {
        target[key] = (flattened as any)[key];
    });
};

/**
 *
 * @export
 * @interface DatasetReferenceIdentifier
 */
export interface DatasetReferenceIdentifier {
    /**
     *
     * @type {string}
     * @memberof DatasetReferenceIdentifier
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof DatasetReferenceIdentifier
     */
    type: DatasetReferenceIdentifierTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum DatasetReferenceIdentifierTypeEnum {
    Dataset = "dataset",
}

/**
 *
 * @export
 * @interface DeclarativeAnalyticalDashboard
 */
export interface DeclarativeAnalyticalDashboard {
    /**
     * Analytical dashboard ID.
     * @type {string}
     * @memberof DeclarativeAnalyticalDashboard
     */
    id: string;
    /**
     * Analytical dashboard title.
     * @type {string}
     * @memberof DeclarativeAnalyticalDashboard
     */
    title: string;
    /**
     * Analytical dashboard description.
     * @type {string}
     * @memberof DeclarativeAnalyticalDashboard
     */
    description?: string;
    /**
     * A server agnostic definition of the visualization object in JSON format.
     * @type {object}
     * @memberof DeclarativeAnalyticalDashboard
     */
    content: object;
}
/**
 * Entities describing users\' view on data.
 * @export
 * @interface DeclarativeAnalytics
 */
export interface DeclarativeAnalytics {
    /**
     *
     * @type {DeclarativeAnalyticsLayer}
     * @memberof DeclarativeAnalytics
     */
    analytics: DeclarativeAnalyticsLayer;
}
/**
 *
 * @export
 * @interface DeclarativeAnalyticsLayer
 */
export interface DeclarativeAnalyticsLayer {
    /**
     * A list of analytical dashboards available in the model.
     * @type {Array<DeclarativeAnalyticalDashboard>}
     * @memberof DeclarativeAnalyticsLayer
     */
    analyticalDashboards: Array<DeclarativeAnalyticalDashboard>;
    /**
     * A list of filter contexts available in the model.
     * @type {Array<DeclarativeFilterContext>}
     * @memberof DeclarativeAnalyticsLayer
     */
    filterContexts: Array<DeclarativeFilterContext>;
    /**
     * A list of metrics available in the model.
     * @type {Array<DeclarativeMetric>}
     * @memberof DeclarativeAnalyticsLayer
     */
    metrics: Array<DeclarativeMetric>;
    /**
     * A list of visualization objects available in the model.
     * @type {Array<DeclarativeVisualizationObject>}
     * @memberof DeclarativeAnalyticsLayer
     */
    visualizationObjects: Array<DeclarativeVisualizationObject>;
}
/**
 * A dataset attribute.
 * @export
 * @interface DeclarativeAttribute
 */
export interface DeclarativeAttribute {
    /**
     * Attribute ID.
     * @type {string}
     * @memberof DeclarativeAttribute
     */
    id: string;
    /**
     * Attribute title.
     * @type {string}
     * @memberof DeclarativeAttribute
     */
    title: string;
    /**
     * Attribute description.
     * @type {string}
     * @memberof DeclarativeAttribute
     */
    description?: string;
    /**
     * An array of attribute labels.
     * @type {Array<DeclarativeLabel>}
     * @memberof DeclarativeAttribute
     */
    labels: Array<DeclarativeLabel>;
}
/**
 * A table column.
 * @export
 * @interface DeclarativeColumn
 */
export interface DeclarativeColumn {
    /**
     * Column name
     * @type {string}
     * @memberof DeclarativeColumn
     */
    name: string;
    /**
     * Column type
     * @type {string}
     * @memberof DeclarativeColumn
     */
    dataType: DeclarativeColumnDataTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum DeclarativeColumnDataTypeEnum {
    INT = "INT",
    STRING = "STRING",
    DATE = "DATE",
    NUMERIC = "NUMERIC",
    TIMESTAMP = "TIMESTAMP",
    BOOLEAN = "BOOLEAN",
}

/**
 * A data source.
 * @export
 * @interface DeclarativeDataSource
 */
export interface DeclarativeDataSource {
    /**
     * Data source name.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    name: string;
    /**
     * An array of physical database tables.
     * @type {Array<DeclarativeTable>}
     * @memberof DeclarativeDataSource
     */
    tables: Array<DeclarativeTable>;
}
/**
 * A dataset defined by its properties.
 * @export
 * @interface DeclarativeDataset
 */
export interface DeclarativeDataset {
    /**
     * The Dataset ID. This ID is further used to refer to this instance of dataset.
     * @type {string}
     * @memberof DeclarativeDataset
     */
    id: string;
    /**
     * A dataset title.
     * @type {string}
     * @memberof DeclarativeDataset
     */
    title: string;
    /**
     * A dataset description.
     * @type {string}
     * @memberof DeclarativeDataset
     */
    description?: string;
    /**
     * An array of grain identifiers.
     * @type {Array<GrainIdentifier>}
     * @memberof DeclarativeDataset
     */
    grain: Array<GrainIdentifier>;
    /**
     * An array of attributes.
     * @type {Array<DeclarativeAttribute>}
     * @memberof DeclarativeDataset
     */
    attributes: Array<DeclarativeAttribute>;
    /**
     * An array of facts.
     * @type {Array<DeclarativeFact>}
     * @memberof DeclarativeDataset
     */
    facts: Array<DeclarativeFact>;
    /**
     * An array of references.
     * @type {Array<DeclarativeReference>}
     * @memberof DeclarativeDataset
     */
    references: Array<DeclarativeReference>;
    /**
     * A id of the source/originating table for the dataset from the physical data model.
     * @type {string}
     * @memberof DeclarativeDataset
     */
    sourceTableId: string;
}
/**
 * A date dataset.
 * @export
 * @interface DeclarativeDateDataset
 */
export interface DeclarativeDateDataset {
    /**
     * Date dataset ID.
     * @type {string}
     * @memberof DeclarativeDateDataset
     */
    id: string;
    /**
     * Date dataset title.
     * @type {string}
     * @memberof DeclarativeDateDataset
     */
    title: string;
    /**
     * Date dataset description.
     * @type {string}
     * @memberof DeclarativeDateDataset
     */
    description?: string;
    /**
     *
     * @type {GranularitiesFormatting}
     * @memberof DeclarativeDateDataset
     */
    granularitiesFormatting: GranularitiesFormatting;
    /**
     * An array of date granularities. All listed granularities will be available for date dataset.
     * @type {Array<string>}
     * @memberof DeclarativeDateDataset
     */
    granularities: Array<DeclarativeDateDatasetGranularitiesEnum>;
}

/**
 * @export
 * @enum {string}
 */
export enum DeclarativeDateDatasetGranularitiesEnum {
    MINUTE = "MINUTE",
    HOUR = "HOUR",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    QUARTER = "QUARTER",
    YEAR = "YEAR",
    MINUTEOFHOUR = "MINUTE_OF_HOUR",
    HOUROFDAY = "HOUR_OF_DAY",
    DAYOFWEEK = "DAY_OF_WEEK",
    DAYOFMONTH = "DAY_OF_MONTH",
    DAYOFYEAR = "DAY_OF_YEAR",
    WEEKOFYEAR = "WEEK_OF_YEAR",
    MONTHOFYEAR = "MONTH_OF_YEAR",
    QUARTEROFYEAR = "QUARTER_OF_YEAR",
}

/**
 * A dataset fact.
 * @export
 * @interface DeclarativeFact
 */
export interface DeclarativeFact {
    /**
     * Fact ID.
     * @type {string}
     * @memberof DeclarativeFact
     */
    id: string;
    /**
     * Fact title.
     * @type {string}
     * @memberof DeclarativeFact
     */
    title: string;
    /**
     * Fact description.
     * @type {string}
     * @memberof DeclarativeFact
     */
    description?: string;
    /**
     * A name of the source column in the table.
     * @type {string}
     * @memberof DeclarativeFact
     */
    sourceColumn: string;
}
/**
 *
 * @export
 * @interface DeclarativeFilterContext
 */
export interface DeclarativeFilterContext {
    /**
     * Filter Context ID.
     * @type {string}
     * @memberof DeclarativeFilterContext
     */
    id: string;
    /**
     * Filter Context title.
     * @type {string}
     * @memberof DeclarativeFilterContext
     */
    title: string;
    /**
     * Filter Context description.
     * @type {string}
     * @memberof DeclarativeFilterContext
     */
    description?: string;
    /**
     * A server agnostic definition of the visualization object in JSON format.
     * @type {object}
     * @memberof DeclarativeFilterContext
     */
    content: object;
}
/**
 * A attribute label.
 * @export
 * @interface DeclarativeLabel
 */
export interface DeclarativeLabel {
    /**
     * Label ID.
     * @type {string}
     * @memberof DeclarativeLabel
     */
    id: string;
    /**
     * Label title.
     * @type {string}
     * @memberof DeclarativeLabel
     */
    title: string;
    /**
     * Label description.
     * @type {string}
     * @memberof DeclarativeLabel
     */
    description?: string;
    /**
     * A flag indicating whether the label should be treated as a primary one.
     * @type {boolean}
     * @memberof DeclarativeLabel
     */
    primary: boolean;
    /**
     * A name of the source column in the table.
     * @type {string}
     * @memberof DeclarativeLabel
     */
    sourceColumn: string;
}
/**
 * A logical data model (LDM) representation.
 * @export
 * @interface DeclarativeLdm
 */
export interface DeclarativeLdm {
    /**
     * An array containing datasets.
     * @type {Array<DeclarativeDataset>}
     * @memberof DeclarativeLdm
     */
    datasets: Array<DeclarativeDataset>;
    /**
     * An array containing date-related datasets.
     * @type {Array<DeclarativeDateDataset>}
     * @memberof DeclarativeLdm
     */
    dateInstances: Array<DeclarativeDateDataset>;
}
/**
 *
 * @export
 * @interface DeclarativeMetric
 */
export interface DeclarativeMetric {
    /**
     * Metric ID.
     * @type {string}
     * @memberof DeclarativeMetric
     */
    id: string;
    /**
     * Metric title.
     * @type {string}
     * @memberof DeclarativeMetric
     */
    title: string;
    /**
     * Metric description.
     * @type {string}
     * @memberof DeclarativeMetric
     */
    description?: string;
    /**
     * A server agnostic definition of the visualization object in JSON format.
     * @type {object}
     * @memberof DeclarativeMetric
     */
    content: object;
}
/**
 * A data model structured as a set of its attributes.
 * @export
 * @interface DeclarativeModel
 */
export interface DeclarativeModel {
    /**
     *
     * @type {DeclarativeLdm}
     * @memberof DeclarativeModel
     */
    ldm: DeclarativeLdm;
    /**
     *
     * @type {DeclarativePdm}
     * @memberof DeclarativeModel
     */
    pdm: DeclarativePdm;
}
/**
 * A physical data model (PDM) representation.
 * @export
 * @interface DeclarativePdm
 */
export interface DeclarativePdm {
    /**
     * An array of data sources.
     * @type {Array<DeclarativeDataSource>}
     * @memberof DeclarativePdm
     */
    sources: Array<DeclarativeDataSource>;
}
/**
 * A dataset reference.
 * @export
 * @interface DeclarativeReference
 */
export interface DeclarativeReference {
    /**
     *
     * @type {ReferenceIdentifier}
     * @memberof DeclarativeReference
     */
    identifier: ReferenceIdentifier;
    /**
     * The multi-value flag enables many-to-many cardinality for references.
     * @type {boolean}
     * @memberof DeclarativeReference
     */
    multivalue: boolean;
    /**
     * An array of source column names for a given reference.
     * @type {Array<string>}
     * @memberof DeclarativeReference
     */
    sourceColumns: Array<string>;
}
/**
 * A database table.
 * @export
 * @interface DeclarativeTable
 */
export interface DeclarativeTable {
    /**
     * Table id.
     * @type {string}
     * @memberof DeclarativeTable
     */
    id: string;
    /**
     * Path to table.
     * @type {Array<string>}
     * @memberof DeclarativeTable
     */
    path: Array<string>;
    /**
     * An array of physical columns
     * @type {Array<DeclarativeColumn>}
     * @memberof DeclarativeTable
     */
    columns: Array<DeclarativeColumn>;
}
/**
 *
 * @export
 * @interface DeclarativeVisualizationObject
 */
export interface DeclarativeVisualizationObject {
    /**
     * Visualization object ID.
     * @type {string}
     * @memberof DeclarativeVisualizationObject
     */
    id: string;
    /**
     * Visualization object title.
     * @type {string}
     * @memberof DeclarativeVisualizationObject
     */
    title: string;
    /**
     * Visualization object description.
     * @type {string}
     * @memberof DeclarativeVisualizationObject
     */
    description?: string;
    /**
     * A server agnostic definition of the visualization object in JSON format.
     * @type {object}
     * @memberof DeclarativeVisualizationObject
     */
    content: object;
}
/**
 *
 * @export
 * @interface DeclarativeWorkspace
 */
export interface DeclarativeWorkspace {
    /**
     *
     * @type {string}
     * @memberof DeclarativeWorkspace
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof DeclarativeWorkspace
     */
    name: string;
    /**
     *
     * @type {DeclarativeWorkspaceModel}
     * @memberof DeclarativeWorkspace
     */
    model: DeclarativeWorkspaceModel;
    /**
     *
     * @type {WorkspaceIdentifier}
     * @memberof DeclarativeWorkspace
     */
    parent?: WorkspaceIdentifier;
}
/**
 * Workspace Data Filters serving the filtering of what data users can see in workspaces.
 * @export
 * @interface DeclarativeWorkspaceDataFilter
 */
export interface DeclarativeWorkspaceDataFilter {
    /**
     * Workspace Data Filters ID. This ID is further used to refer to this instance.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilter
     */
    id: string;
    /**
     * Workspace Data Filters title.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilter
     */
    title: string;
    /**
     * Workspace Data Filters description.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilter
     */
    description?: string;
    /**
     * Workspace Data Filters column name. Data are filtered using this physical column.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilter
     */
    columnName: string;
    /**
     * Data source name (ID). Workspace Data Filters must always be connected to single data source.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilter
     */
    dataSourceName: string;
    /**
     * Filter settings specifying values of filters valid for the workspace.
     * @type {Array<DeclarativeWorkspaceDataFilterSetting>}
     * @memberof DeclarativeWorkspaceDataFilter
     */
    workspaceDataFilterSettings: Array<DeclarativeWorkspaceDataFilterSetting>;
    /**
     *
     * @type {WorkspaceIdentifier}
     * @memberof DeclarativeWorkspaceDataFilter
     */
    workspace?: WorkspaceIdentifier;
}
/**
 * Workspace Data Filters serving the filtering of what data users can see in workspaces.
 * @export
 * @interface DeclarativeWorkspaceDataFilterSetting
 */
export interface DeclarativeWorkspaceDataFilterSetting {
    /**
     * Workspace Data Filters ID. This ID is further used to refer to this instance.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilterSetting
     */
    id: string;
    /**
     * Workspace Data Filters setting title.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilterSetting
     */
    title: string;
    /**
     * Workspace Data Filters setting description.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilterSetting
     */
    description?: string;
    /**
     * Only those rows are returned, where columnName from filter matches those values.
     * @type {Array<string>}
     * @memberof DeclarativeWorkspaceDataFilterSetting
     */
    filterValues: Array<string>;
    /**
     *
     * @type {WorkspaceIdentifier}
     * @memberof DeclarativeWorkspaceDataFilterSetting
     */
    workspace: WorkspaceIdentifier;
}
/**
 *
 * @export
 * @interface DeclarativeWorkspaceDataFilters
 */
export interface DeclarativeWorkspaceDataFilters {
    /**
     *
     * @type {Array<DeclarativeWorkspaceDataFilter>}
     * @memberof DeclarativeWorkspaceDataFilters
     */
    workspaceDataFilters: Array<DeclarativeWorkspaceDataFilter>;
}
/**
 *
 * @export
 * @interface DeclarativeWorkspaceModel
 */
export interface DeclarativeWorkspaceModel {
    /**
     *
     * @type {DeclarativeLdm}
     * @memberof DeclarativeWorkspaceModel
     */
    ldm: DeclarativeLdm;
    /**
     *
     * @type {DeclarativePdm}
     * @memberof DeclarativeWorkspaceModel
     */
    pdm: DeclarativePdm;
    /**
     *
     * @type {DeclarativeAnalyticsLayer}
     * @memberof DeclarativeWorkspaceModel
     */
    analytics: DeclarativeAnalyticsLayer;
}
/**
 *
 * @export
 * @interface DeclarativeWorkspaces
 */
export interface DeclarativeWorkspaces {
    /**
     *
     * @type {Array<DeclarativeWorkspace>}
     * @memberof DeclarativeWorkspaces
     */
    workspaces: Array<DeclarativeWorkspace>;
    /**
     *
     * @type {Array<DeclarativeWorkspaceDataFilter>}
     * @memberof DeclarativeWorkspaces
     */
    workspaceDataFilters: Array<DeclarativeWorkspaceDataFilter>;
}
/**
 * A grain identifier.
 * @export
 * @interface GrainIdentifier
 */
export interface GrainIdentifier {
    /**
     * Grain ID.
     * @type {string}
     * @memberof GrainIdentifier
     */
    id: string;
    /**
     * A type of the grain.
     * @type {string}
     * @memberof GrainIdentifier
     */
    type: GrainIdentifierTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum GrainIdentifierTypeEnum {
    Attribute = "attribute",
    Dataset = "dataset",
}

/**
 * A date dataset granularities title formatting rules.
 * @export
 * @interface GranularitiesFormatting
 */
export interface GranularitiesFormatting {
    /**
     * Title base is used as a token in title pattern. If left empty, it is replaced by date dataset title.
     * @type {string}
     * @memberof GranularitiesFormatting
     */
    titleBase: string;
    /**
     * This pattern is used to generate the title of attributes and labels that result from the granularities. There are two tokens available:  * `%titleBase` - represents shared part by all titles, or title of Date Dataset if left empty * `%granularityTitle` - represents `DateGranularity` built-in title
     * @type {string}
     * @memberof GranularitiesFormatting
     */
    titlePattern: string;
}
/**
 * JSON:API representation of acl entity.
 * @export
 * @interface JsonApiACLIn
 */
export interface JsonApiACLIn {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiACLIn
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiACLIn
     */
    type: string;
    /**
     *
     * @type {JsonApiACLOutAttributes}
     * @memberof JsonApiACLIn
     */
    attributes?: JsonApiACLOutAttributes;
    /**
     *
     * @type {JsonApiACLOutRelationships}
     * @memberof JsonApiACLIn
     */
    relationships?: JsonApiACLOutRelationships;
}
/**
 *
 * @export
 * @interface JsonApiACLInDocument
 */
export interface JsonApiACLInDocument {
    /**
     *
     * @type {JsonApiACLIn}
     * @memberof JsonApiACLInDocument
     */
    data: JsonApiACLIn;
}
/**
 * JSON:API representation of acl entity.
 * @export
 * @interface JsonApiACLOut
 */
export interface JsonApiACLOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiACLOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiACLOut
     */
    type: string;
    /**
     *
     * @type {JsonApiACLOutAttributes}
     * @memberof JsonApiACLOut
     */
    attributes?: JsonApiACLOutAttributes;
    /**
     *
     * @type {JsonApiACLOutRelationships}
     * @memberof JsonApiACLOut
     */
    relationships?: JsonApiACLOutRelationships;
}
/**
 *
 * @export
 * @interface JsonApiACLOutAttributes
 */
export interface JsonApiACLOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiACLOutAttributes
     */
    access?: JsonApiACLOutAttributesAccessEnum;
    /**
     *
     * @type {number}
     * @memberof JsonApiACLOutAttributes
     */
    priority?: number;
    /**
     *
     * @type {string}
     * @memberof JsonApiACLOutAttributes
     */
    control?: JsonApiACLOutAttributesControlEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiACLOutAttributesAccessEnum {
    FULLACCESS = "FULL_ACCESS",
}
/**
 * @export
 * @enum {string}
 */
export enum JsonApiACLOutAttributesControlEnum {
    ALLOW = "ALLOW",
    DENY = "DENY",
}

/**
 *
 * @export
 * @interface JsonApiACLOutDocument
 */
export interface JsonApiACLOutDocument {
    /**
     *
     * @type {JsonApiACLOut}
     * @memberof JsonApiACLOutDocument
     */
    data: JsonApiACLOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiACLOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserOutWithLinks | JsonApiUserGroupOutWithLinks>}
     * @memberof JsonApiACLOutDocument
     */
    included?: Array<JsonApiUserOutWithLinks | JsonApiUserGroupOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiACLOutList
 */
export interface JsonApiACLOutList {
    /**
     *
     * @type {Array<JsonApiACLOutWithLinks>}
     * @memberof JsonApiACLOutList
     */
    data: Array<JsonApiACLOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiACLOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserOutWithLinks | JsonApiUserGroupOutWithLinks>}
     * @memberof JsonApiACLOutList
     */
    included?: Array<JsonApiUserOutWithLinks | JsonApiUserGroupOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiACLOutRelationships
 */
export interface JsonApiACLOutRelationships {
    /**
     *
     * @type {JsonApiACLOutRelationshipsUsers}
     * @memberof JsonApiACLOutRelationships
     */
    users?: JsonApiACLOutRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLOutRelationshipsUsers}
     * @memberof JsonApiACLOutRelationships
     */
    userGroups?: JsonApiACLOutRelationshipsUsers;
}
/**
 *
 * @export
 * @interface JsonApiACLOutRelationshipsUsers
 */
export interface JsonApiACLOutRelationshipsUsers {
    /**
     *
     * @type {Array<JsonApiLinkage>}
     * @memberof JsonApiACLOutRelationshipsUsers
     */
    data?: Array<JsonApiLinkage>;
}
/**
 *
 * @export
 * @interface JsonApiACLOutWithLinks
 */
export interface JsonApiACLOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiACLOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiACLOutWithLinks
     */
    type: string;
    /**
     *
     * @type {JsonApiACLOutAttributes}
     * @memberof JsonApiACLOutWithLinks
     */
    attributes?: JsonApiACLOutAttributes;
    /**
     *
     * @type {JsonApiACLOutRelationships}
     * @memberof JsonApiACLOutWithLinks
     */
    relationships?: JsonApiACLOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiACLOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * JSON:API representation of analyticalDashboard entity.
 * @export
 * @interface JsonApiAnalyticalDashboardIn
 */
export interface JsonApiAnalyticalDashboardIn {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardIn
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardIn
     */
    type: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutAttributes}
     * @memberof JsonApiAnalyticalDashboardIn
     */
    attributes?: JsonApiAnalyticalDashboardOutAttributes;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardInDocument
 */
export interface JsonApiAnalyticalDashboardInDocument {
    /**
     *
     * @type {JsonApiAnalyticalDashboardIn}
     * @memberof JsonApiAnalyticalDashboardInDocument
     */
    data: JsonApiAnalyticalDashboardIn;
}
/**
 * JSON:API representation of analyticalDashboard entity.
 * @export
 * @interface JsonApiAnalyticalDashboardOut
 */
export interface JsonApiAnalyticalDashboardOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardOut
     */
    type: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutAttributes}
     * @memberof JsonApiAnalyticalDashboardOut
     */
    attributes?: JsonApiAnalyticalDashboardOutAttributes;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationships}
     * @memberof JsonApiAnalyticalDashboardOut
     */
    relationships?: JsonApiAnalyticalDashboardOutRelationships;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutAttributes
 */
export interface JsonApiAnalyticalDashboardOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardOutAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardOutAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiAnalyticalDashboardOutAttributes
     */
    tags?: Array<string>;
    /**
     * Free-form JSON content.
     * @type {object}
     * @memberof JsonApiAnalyticalDashboardOutAttributes
     */
    content?: object;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutDocument
 */
export interface JsonApiAnalyticalDashboardOutDocument {
    /**
     *
     * @type {JsonApiAnalyticalDashboardOut}
     * @memberof JsonApiAnalyticalDashboardOutDocument
     */
    data: JsonApiAnalyticalDashboardOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiAnalyticalDashboardOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiVisualizationObjectOutWithLinks | JsonApiLabelOutWithLinks | JsonApiMetricOutWithLinks | JsonApiDatasetOutWithLinks | JsonApiFilterContextOutWithLinks>}
     * @memberof JsonApiAnalyticalDashboardOutDocument
     */
    included?: Array<
        | JsonApiVisualizationObjectOutWithLinks
        | JsonApiLabelOutWithLinks
        | JsonApiMetricOutWithLinks
        | JsonApiDatasetOutWithLinks
        | JsonApiFilterContextOutWithLinks
    >;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiAnalyticalDashboardOutList
 */
export interface JsonApiAnalyticalDashboardOutList {
    /**
     *
     * @type {Array<JsonApiAnalyticalDashboardOutWithLinks>}
     * @memberof JsonApiAnalyticalDashboardOutList
     */
    data: Array<JsonApiAnalyticalDashboardOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiAnalyticalDashboardOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiVisualizationObjectOutWithLinks | JsonApiLabelOutWithLinks | JsonApiMetricOutWithLinks | JsonApiDatasetOutWithLinks | JsonApiFilterContextOutWithLinks>}
     * @memberof JsonApiAnalyticalDashboardOutList
     */
    included?: Array<
        | JsonApiVisualizationObjectOutWithLinks
        | JsonApiLabelOutWithLinks
        | JsonApiMetricOutWithLinks
        | JsonApiDatasetOutWithLinks
        | JsonApiFilterContextOutWithLinks
    >;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutRelationships
 */
export interface JsonApiAnalyticalDashboardOutRelationships {
    /**
     *
     * @type {JsonApiACLOutRelationshipsUsers}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    visualizationObjects?: JsonApiACLOutRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLOutRelationshipsUsers}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    labels?: JsonApiACLOutRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLOutRelationshipsUsers}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    metrics?: JsonApiACLOutRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLOutRelationshipsUsers}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    datasets?: JsonApiACLOutRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLOutRelationshipsUsers}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    filterContexts?: JsonApiACLOutRelationshipsUsers;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutWithLinks
 */
export interface JsonApiAnalyticalDashboardOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardOutWithLinks
     */
    type: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutAttributes}
     * @memberof JsonApiAnalyticalDashboardOutWithLinks
     */
    attributes?: JsonApiAnalyticalDashboardOutAttributes;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationships}
     * @memberof JsonApiAnalyticalDashboardOutWithLinks
     */
    relationships?: JsonApiAnalyticalDashboardOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiAnalyticalDashboardOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * JSON:API representation of apiToken entity.
 * @export
 * @interface JsonApiApiTokenIn
 */
export interface JsonApiApiTokenIn {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiApiTokenIn
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiApiTokenIn
     */
    type: string;
    /**
     *
     * @type {object}
     * @memberof JsonApiApiTokenIn
     */
    attributes?: object;
}
/**
 *
 * @export
 * @interface JsonApiApiTokenInDocument
 */
export interface JsonApiApiTokenInDocument {
    /**
     *
     * @type {JsonApiApiTokenIn}
     * @memberof JsonApiApiTokenInDocument
     */
    data: JsonApiApiTokenIn;
}
/**
 * JSON:API representation of apiToken entity.
 * @export
 * @interface JsonApiApiTokenOut
 */
export interface JsonApiApiTokenOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiApiTokenOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiApiTokenOut
     */
    type: string;
    /**
     *
     * @type {JsonApiApiTokenOutAttributes}
     * @memberof JsonApiApiTokenOut
     */
    attributes?: JsonApiApiTokenOutAttributes;
}
/**
 *
 * @export
 * @interface JsonApiApiTokenOutAttributes
 */
export interface JsonApiApiTokenOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiApiTokenOutAttributes
     */
    bearerToken?: string;
}
/**
 *
 * @export
 * @interface JsonApiApiTokenOutDocument
 */
export interface JsonApiApiTokenOutDocument {
    /**
     *
     * @type {JsonApiApiTokenOut}
     * @memberof JsonApiApiTokenOutDocument
     */
    data: JsonApiApiTokenOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiApiTokenOutDocument
     */
    links?: ObjectLinks;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiApiTokenOutList
 */
export interface JsonApiApiTokenOutList {
    /**
     *
     * @type {Array<JsonApiApiTokenOutWithLinks>}
     * @memberof JsonApiApiTokenOutList
     */
    data: Array<JsonApiApiTokenOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiApiTokenOutList
     */
    links?: ListLinks;
}
/**
 *
 * @export
 * @interface JsonApiApiTokenOutWithLinks
 */
export interface JsonApiApiTokenOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiApiTokenOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiApiTokenOutWithLinks
     */
    type: string;
    /**
     *
     * @type {JsonApiApiTokenOutAttributes}
     * @memberof JsonApiApiTokenOutWithLinks
     */
    attributes?: JsonApiApiTokenOutAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiApiTokenOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * JSON:API representation of attribute entity.
 * @export
 * @interface JsonApiAttributeOut
 */
export interface JsonApiAttributeOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAttributeOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAttributeOut
     */
    type: string;
    /**
     *
     * @type {JsonApiAttributeOutAttributes}
     * @memberof JsonApiAttributeOut
     */
    attributes?: JsonApiAttributeOutAttributes;
    /**
     *
     * @type {JsonApiAttributeOutRelationships}
     * @memberof JsonApiAttributeOut
     */
    relationships?: JsonApiAttributeOutRelationships;
}
/**
 *
 * @export
 * @interface JsonApiAttributeOutAttributes
 */
export interface JsonApiAttributeOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeOutAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeOutAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiAttributeOutAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeOutAttributes
     */
    granularity?: JsonApiAttributeOutAttributesGranularityEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiAttributeOutAttributesGranularityEnum {
    MINUTE = "MINUTE",
    HOUR = "HOUR",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    QUARTER = "QUARTER",
    YEAR = "YEAR",
    MINUTEOFHOUR = "MINUTE_OF_HOUR",
    HOUROFDAY = "HOUR_OF_DAY",
    DAYOFWEEK = "DAY_OF_WEEK",
    DAYOFMONTH = "DAY_OF_MONTH",
    DAYOFYEAR = "DAY_OF_YEAR",
    WEEKOFYEAR = "WEEK_OF_YEAR",
    MONTHOFYEAR = "MONTH_OF_YEAR",
    QUARTEROFYEAR = "QUARTER_OF_YEAR",
}

/**
 *
 * @export
 * @interface JsonApiAttributeOutDocument
 */
export interface JsonApiAttributeOutDocument {
    /**
     *
     * @type {JsonApiAttributeOut}
     * @memberof JsonApiAttributeOutDocument
     */
    data: JsonApiAttributeOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiAttributeOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiDatasetOutWithLinks | JsonApiLabelOutWithLinks>}
     * @memberof JsonApiAttributeOutDocument
     */
    included?: Array<JsonApiDatasetOutWithLinks | JsonApiLabelOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiAttributeOutList
 */
export interface JsonApiAttributeOutList {
    /**
     *
     * @type {Array<JsonApiAttributeOutWithLinks>}
     * @memberof JsonApiAttributeOutList
     */
    data: Array<JsonApiAttributeOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiAttributeOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiDatasetOutWithLinks | JsonApiLabelOutWithLinks>}
     * @memberof JsonApiAttributeOutList
     */
    included?: Array<JsonApiDatasetOutWithLinks | JsonApiLabelOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiAttributeOutRelationships
 */
export interface JsonApiAttributeOutRelationships {
    /**
     *
     * @type {JsonApiOrganizationOutRelationshipsUser}
     * @memberof JsonApiAttributeOutRelationships
     */
    dataset?: JsonApiOrganizationOutRelationshipsUser;
    /**
     *
     * @type {JsonApiACLOutRelationshipsUsers}
     * @memberof JsonApiAttributeOutRelationships
     */
    labels?: JsonApiACLOutRelationshipsUsers;
}
/**
 *
 * @export
 * @interface JsonApiAttributeOutWithLinks
 */
export interface JsonApiAttributeOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAttributeOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAttributeOutWithLinks
     */
    type: string;
    /**
     *
     * @type {JsonApiAttributeOutAttributes}
     * @memberof JsonApiAttributeOutWithLinks
     */
    attributes?: JsonApiAttributeOutAttributes;
    /**
     *
     * @type {JsonApiAttributeOutRelationships}
     * @memberof JsonApiAttributeOutWithLinks
     */
    relationships?: JsonApiAttributeOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiAttributeOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * JSON:API representation of dataSource entity.
 * @export
 * @interface JsonApiDataSourceIn
 */
export interface JsonApiDataSourceIn {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDataSourceIn
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDataSourceIn
     */
    type: string;
    /**
     *
     * @type {JsonApiDataSourceInAttributes}
     * @memberof JsonApiDataSourceIn
     */
    attributes?: JsonApiDataSourceInAttributes;
}
/**
 *
 * @export
 * @interface JsonApiDataSourceInAttributes
 */
export interface JsonApiDataSourceInAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    type?: JsonApiDataSourceInAttributesTypeEnum;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    schema?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    password?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    uploadId?: string;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiDataSourceInAttributes
     */
    enableCaching?: boolean;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiDataSourceInAttributesTypeEnum {
    POSTGRESQL = "POSTGRESQL",
    REDSHIFT = "REDSHIFT",
    VERTICA = "VERTICA",
    SNOWFLAKE = "SNOWFLAKE",
    ADS = "ADS",
    BIGQUERY = "BIGQUERY",
    MSSQL = "MSSQL",
    PRESTO = "PRESTO",
}

/**
 *
 * @export
 * @interface JsonApiDataSourceInDocument
 */
export interface JsonApiDataSourceInDocument {
    /**
     *
     * @type {JsonApiDataSourceIn}
     * @memberof JsonApiDataSourceInDocument
     */
    data: JsonApiDataSourceIn;
}
/**
 * JSON:API representation of dataSource entity.
 * @export
 * @interface JsonApiDataSourceOut
 */
export interface JsonApiDataSourceOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDataSourceOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDataSourceOut
     */
    type: string;
    /**
     *
     * @type {JsonApiDataSourceOutAttributes}
     * @memberof JsonApiDataSourceOut
     */
    attributes?: JsonApiDataSourceOutAttributes;
}
/**
 *
 * @export
 * @interface JsonApiDataSourceOutAttributes
 */
export interface JsonApiDataSourceOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceOutAttributes
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceOutAttributes
     */
    type?: JsonApiDataSourceOutAttributesTypeEnum;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceOutAttributes
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceOutAttributes
     */
    schema?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceOutAttributes
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceOutAttributes
     */
    uploadId?: string;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiDataSourceOutAttributes
     */
    enableCaching?: boolean;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiDataSourceOutAttributesTypeEnum {
    POSTGRESQL = "POSTGRESQL",
    REDSHIFT = "REDSHIFT",
    VERTICA = "VERTICA",
    SNOWFLAKE = "SNOWFLAKE",
    ADS = "ADS",
    BIGQUERY = "BIGQUERY",
    MSSQL = "MSSQL",
    PRESTO = "PRESTO",
}

/**
 *
 * @export
 * @interface JsonApiDataSourceOutDocument
 */
export interface JsonApiDataSourceOutDocument {
    /**
     *
     * @type {JsonApiDataSourceOut}
     * @memberof JsonApiDataSourceOutDocument
     */
    data: JsonApiDataSourceOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDataSourceOutDocument
     */
    links?: ObjectLinks;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiDataSourceOutList
 */
export interface JsonApiDataSourceOutList {
    /**
     *
     * @type {Array<JsonApiDataSourceOutWithLinks>}
     * @memberof JsonApiDataSourceOutList
     */
    data: Array<JsonApiDataSourceOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiDataSourceOutList
     */
    links?: ListLinks;
}
/**
 *
 * @export
 * @interface JsonApiDataSourceOutWithLinks
 */
export interface JsonApiDataSourceOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDataSourceOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDataSourceOutWithLinks
     */
    type: string;
    /**
     *
     * @type {JsonApiDataSourceOutAttributes}
     * @memberof JsonApiDataSourceOutWithLinks
     */
    attributes?: JsonApiDataSourceOutAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDataSourceOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * JSON:API representation of dataset entity.
 * @export
 * @interface JsonApiDatasetOut
 */
export interface JsonApiDatasetOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDatasetOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDatasetOut
     */
    type: string;
    /**
     *
     * @type {JsonApiDatasetOutAttributes}
     * @memberof JsonApiDatasetOut
     */
    attributes?: JsonApiDatasetOutAttributes;
    /**
     *
     * @type {JsonApiDatasetOutRelationships}
     * @memberof JsonApiDatasetOut
     */
    relationships?: JsonApiDatasetOutRelationships;
}
/**
 *
 * @export
 * @interface JsonApiDatasetOutAttributes
 */
export interface JsonApiDatasetOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiDatasetOutAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributes
     */
    type?: JsonApiDatasetOutAttributesTypeEnum;
    /**
     *
     * @type {Array<JsonApiDatasetOutAttributesGrain>}
     * @memberof JsonApiDatasetOutAttributes
     */
    grain?: Array<JsonApiDatasetOutAttributesGrain>;
    /**
     *
     * @type {Array<JsonApiDatasetOutAttributesReferenceProperties>}
     * @memberof JsonApiDatasetOutAttributes
     */
    referenceProperties?: Array<JsonApiDatasetOutAttributesReferenceProperties>;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiDatasetOutAttributesTypeEnum {
    NORMAL = "NORMAL",
    DATE = "DATE",
}

/**
 *
 * @export
 * @interface JsonApiDatasetOutAttributesGrain
 */
export interface JsonApiDatasetOutAttributesGrain {
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributesGrain
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributesGrain
     */
    type: JsonApiDatasetOutAttributesGrainTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiDatasetOutAttributesGrainTypeEnum {
    Attribute = "attribute",
    Dataset = "dataset",
}

/**
 *
 * @export
 * @interface JsonApiDatasetOutAttributesReferenceProperties
 */
export interface JsonApiDatasetOutAttributesReferenceProperties {
    /**
     *
     * @type {DatasetReferenceIdentifier}
     * @memberof JsonApiDatasetOutAttributesReferenceProperties
     */
    identifier: DatasetReferenceIdentifier;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiDatasetOutAttributesReferenceProperties
     */
    multivalue: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiDatasetOutAttributesReferenceProperties
     */
    sourceColumns: Array<string>;
}
/**
 *
 * @export
 * @interface JsonApiDatasetOutDocument
 */
export interface JsonApiDatasetOutDocument {
    /**
     *
     * @type {JsonApiDatasetOut}
     * @memberof JsonApiDatasetOutDocument
     */
    data: JsonApiDatasetOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDatasetOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiSourceTableOutWithLinks | JsonApiAttributeOutWithLinks | JsonApiFactOutWithLinks | JsonApiDatasetOutWithLinks>}
     * @memberof JsonApiDatasetOutDocument
     */
    included?: Array<
        | JsonApiSourceTableOutWithLinks
        | JsonApiAttributeOutWithLinks
        | JsonApiFactOutWithLinks
        | JsonApiDatasetOutWithLinks
    >;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiDatasetOutList
 */
export interface JsonApiDatasetOutList {
    /**
     *
     * @type {Array<JsonApiDatasetOutWithLinks>}
     * @memberof JsonApiDatasetOutList
     */
    data: Array<JsonApiDatasetOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiDatasetOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiSourceTableOutWithLinks | JsonApiAttributeOutWithLinks | JsonApiFactOutWithLinks | JsonApiDatasetOutWithLinks>}
     * @memberof JsonApiDatasetOutList
     */
    included?: Array<
        | JsonApiSourceTableOutWithLinks
        | JsonApiAttributeOutWithLinks
        | JsonApiFactOutWithLinks
        | JsonApiDatasetOutWithLinks
    >;
}
/**
 *
 * @export
 * @interface JsonApiDatasetOutRelationships
 */
export interface JsonApiDatasetOutRelationships {
    /**
     *
     * @type {JsonApiOrganizationOutRelationshipsUser}
     * @memberof JsonApiDatasetOutRelationships
     */
    table?: JsonApiOrganizationOutRelationshipsUser;
    /**
     *
     * @type {JsonApiACLOutRelationshipsUsers}
     * @memberof JsonApiDatasetOutRelationships
     */
    attributes?: JsonApiACLOutRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLOutRelationshipsUsers}
     * @memberof JsonApiDatasetOutRelationships
     */
    facts?: JsonApiACLOutRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLOutRelationshipsUsers}
     * @memberof JsonApiDatasetOutRelationships
     */
    datasets?: JsonApiACLOutRelationshipsUsers;
}
/**
 *
 * @export
 * @interface JsonApiDatasetOutWithLinks
 */
export interface JsonApiDatasetOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDatasetOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDatasetOutWithLinks
     */
    type: string;
    /**
     *
     * @type {JsonApiDatasetOutAttributes}
     * @memberof JsonApiDatasetOutWithLinks
     */
    attributes?: JsonApiDatasetOutAttributes;
    /**
     *
     * @type {JsonApiDatasetOutRelationships}
     * @memberof JsonApiDatasetOutWithLinks
     */
    relationships?: JsonApiDatasetOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDatasetOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * JSON:API representation of fact entity.
 * @export
 * @interface JsonApiFactOut
 */
export interface JsonApiFactOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiFactOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiFactOut
     */
    type: string;
    /**
     *
     * @type {JsonApiFactOutAttributes}
     * @memberof JsonApiFactOut
     */
    attributes?: JsonApiFactOutAttributes;
    /**
     *
     * @type {JsonApiFactOutRelationships}
     * @memberof JsonApiFactOut
     */
    relationships?: JsonApiFactOutRelationships;
}
/**
 *
 * @export
 * @interface JsonApiFactOutAttributes
 */
export interface JsonApiFactOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiFactOutAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiFactOutAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiFactOutAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof JsonApiFactOutAttributes
     */
    sourceColumn?: string;
}
/**
 *
 * @export
 * @interface JsonApiFactOutDocument
 */
export interface JsonApiFactOutDocument {
    /**
     *
     * @type {JsonApiFactOut}
     * @memberof JsonApiFactOutDocument
     */
    data: JsonApiFactOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiFactOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiDatasetOutWithLinks>}
     * @memberof JsonApiFactOutDocument
     */
    included?: Array<JsonApiDatasetOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiFactOutList
 */
export interface JsonApiFactOutList {
    /**
     *
     * @type {Array<JsonApiFactOutWithLinks>}
     * @memberof JsonApiFactOutList
     */
    data: Array<JsonApiFactOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiFactOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiDatasetOutWithLinks>}
     * @memberof JsonApiFactOutList
     */
    included?: Array<JsonApiDatasetOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiFactOutRelationships
 */
export interface JsonApiFactOutRelationships {
    /**
     *
     * @type {JsonApiOrganizationOutRelationshipsUser}
     * @memberof JsonApiFactOutRelationships
     */
    dataset?: JsonApiOrganizationOutRelationshipsUser;
}
/**
 *
 * @export
 * @interface JsonApiFactOutWithLinks
 */
export interface JsonApiFactOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiFactOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiFactOutWithLinks
     */
    type: string;
    /**
     *
     * @type {JsonApiFactOutAttributes}
     * @memberof JsonApiFactOutWithLinks
     */
    attributes?: JsonApiFactOutAttributes;
    /**
     *
     * @type {JsonApiFactOutRelationships}
     * @memberof JsonApiFactOutWithLinks
     */
    relationships?: JsonApiFactOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiFactOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * JSON:API representation of filterContext entity.
 * @export
 * @interface JsonApiFilterContextIn
 */
export interface JsonApiFilterContextIn {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiFilterContextIn
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiFilterContextIn
     */
    type: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutAttributes}
     * @memberof JsonApiFilterContextIn
     */
    attributes?: JsonApiAnalyticalDashboardOutAttributes;
}
/**
 *
 * @export
 * @interface JsonApiFilterContextInDocument
 */
export interface JsonApiFilterContextInDocument {
    /**
     *
     * @type {JsonApiFilterContextIn}
     * @memberof JsonApiFilterContextInDocument
     */
    data: JsonApiFilterContextIn;
}
/**
 * JSON:API representation of filterContext entity.
 * @export
 * @interface JsonApiFilterContextOut
 */
export interface JsonApiFilterContextOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiFilterContextOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiFilterContextOut
     */
    type: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutAttributes}
     * @memberof JsonApiFilterContextOut
     */
    attributes?: JsonApiAnalyticalDashboardOutAttributes;
    /**
     *
     * @type {JsonApiFilterContextOutRelationships}
     * @memberof JsonApiFilterContextOut
     */
    relationships?: JsonApiFilterContextOutRelationships;
}
/**
 *
 * @export
 * @interface JsonApiFilterContextOutDocument
 */
export interface JsonApiFilterContextOutDocument {
    /**
     *
     * @type {JsonApiFilterContextOut}
     * @memberof JsonApiFilterContextOutDocument
     */
    data: JsonApiFilterContextOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiFilterContextOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAttributeOutWithLinks | JsonApiDatasetOutWithLinks | JsonApiLabelOutWithLinks>}
     * @memberof JsonApiFilterContextOutDocument
     */
    included?: Array<JsonApiAttributeOutWithLinks | JsonApiDatasetOutWithLinks | JsonApiLabelOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiFilterContextOutList
 */
export interface JsonApiFilterContextOutList {
    /**
     *
     * @type {Array<JsonApiFilterContextOutWithLinks>}
     * @memberof JsonApiFilterContextOutList
     */
    data: Array<JsonApiFilterContextOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiFilterContextOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAttributeOutWithLinks | JsonApiDatasetOutWithLinks | JsonApiLabelOutWithLinks>}
     * @memberof JsonApiFilterContextOutList
     */
    included?: Array<JsonApiAttributeOutWithLinks | JsonApiDatasetOutWithLinks | JsonApiLabelOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiFilterContextOutRelationships
 */
export interface JsonApiFilterContextOutRelationships {
    /**
     *
     * @type {JsonApiACLOutRelationshipsUsers}
     * @memberof JsonApiFilterContextOutRelationships
     */
    attributes?: JsonApiACLOutRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLOutRelationshipsUsers}
     * @memberof JsonApiFilterContextOutRelationships
     */
    datasets?: JsonApiACLOutRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLOutRelationshipsUsers}
     * @memberof JsonApiFilterContextOutRelationships
     */
    labels?: JsonApiACLOutRelationshipsUsers;
}
/**
 *
 * @export
 * @interface JsonApiFilterContextOutWithLinks
 */
export interface JsonApiFilterContextOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiFilterContextOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiFilterContextOutWithLinks
     */
    type: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutAttributes}
     * @memberof JsonApiFilterContextOutWithLinks
     */
    attributes?: JsonApiAnalyticalDashboardOutAttributes;
    /**
     *
     * @type {JsonApiFilterContextOutRelationships}
     * @memberof JsonApiFilterContextOutWithLinks
     */
    relationships?: JsonApiFilterContextOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiFilterContextOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * JSON:API representation of label entity.
 * @export
 * @interface JsonApiLabelOut
 */
export interface JsonApiLabelOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiLabelOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiLabelOut
     */
    type: string;
    /**
     *
     * @type {JsonApiLabelOutAttributes}
     * @memberof JsonApiLabelOut
     */
    attributes?: JsonApiLabelOutAttributes;
    /**
     *
     * @type {JsonApiLabelOutRelationships}
     * @memberof JsonApiLabelOut
     */
    relationships?: JsonApiLabelOutRelationships;
}
/**
 *
 * @export
 * @interface JsonApiLabelOutAttributes
 */
export interface JsonApiLabelOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiLabelOutAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiLabelOutAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiLabelOutAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiLabelOutAttributes
     */
    primary?: boolean;
    /**
     *
     * @type {string}
     * @memberof JsonApiLabelOutAttributes
     */
    sourceColumn?: string;
}
/**
 *
 * @export
 * @interface JsonApiLabelOutDocument
 */
export interface JsonApiLabelOutDocument {
    /**
     *
     * @type {JsonApiLabelOut}
     * @memberof JsonApiLabelOutDocument
     */
    data: JsonApiLabelOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiLabelOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAttributeOutWithLinks>}
     * @memberof JsonApiLabelOutDocument
     */
    included?: Array<JsonApiAttributeOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiLabelOutList
 */
export interface JsonApiLabelOutList {
    /**
     *
     * @type {Array<JsonApiLabelOutWithLinks>}
     * @memberof JsonApiLabelOutList
     */
    data: Array<JsonApiLabelOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiLabelOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAttributeOutWithLinks>}
     * @memberof JsonApiLabelOutList
     */
    included?: Array<JsonApiAttributeOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiLabelOutRelationships
 */
export interface JsonApiLabelOutRelationships {
    /**
     *
     * @type {JsonApiOrganizationOutRelationshipsUser}
     * @memberof JsonApiLabelOutRelationships
     */
    attribute?: JsonApiOrganizationOutRelationshipsUser;
}
/**
 *
 * @export
 * @interface JsonApiLabelOutWithLinks
 */
export interface JsonApiLabelOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiLabelOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiLabelOutWithLinks
     */
    type: string;
    /**
     *
     * @type {JsonApiLabelOutAttributes}
     * @memberof JsonApiLabelOutWithLinks
     */
    attributes?: JsonApiLabelOutAttributes;
    /**
     *
     * @type {JsonApiLabelOutRelationships}
     * @memberof JsonApiLabelOutWithLinks
     */
    relationships?: JsonApiLabelOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiLabelOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiLinkage
 */
export interface JsonApiLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiLinkage
     */
    type: string;
}
/**
 * JSON:API representation of metric entity.
 * @export
 * @interface JsonApiMetricIn
 */
export interface JsonApiMetricIn {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiMetricIn
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiMetricIn
     */
    type: string;
    /**
     *
     * @type {JsonApiMetricOutAttributes}
     * @memberof JsonApiMetricIn
     */
    attributes?: JsonApiMetricOutAttributes;
}
/**
 *
 * @export
 * @interface JsonApiMetricInDocument
 */
export interface JsonApiMetricInDocument {
    /**
     *
     * @type {JsonApiMetricIn}
     * @memberof JsonApiMetricInDocument
     */
    data: JsonApiMetricIn;
}
/**
 * JSON:API representation of metric entity.
 * @export
 * @interface JsonApiMetricOut
 */
export interface JsonApiMetricOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiMetricOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiMetricOut
     */
    type: string;
    /**
     *
     * @type {JsonApiMetricOutAttributes}
     * @memberof JsonApiMetricOut
     */
    attributes?: JsonApiMetricOutAttributes;
    /**
     *
     * @type {JsonApiMetricOutRelationships}
     * @memberof JsonApiMetricOut
     */
    relationships?: JsonApiMetricOutRelationships;
}
/**
 *
 * @export
 * @interface JsonApiMetricOutAttributes
 */
export interface JsonApiMetricOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricOutAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricOutAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiMetricOutAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {JsonApiMetricOutAttributesContent}
     * @memberof JsonApiMetricOutAttributes
     */
    content?: JsonApiMetricOutAttributesContent;
}
/**
 *
 * @export
 * @interface JsonApiMetricOutAttributesContent
 */
export interface JsonApiMetricOutAttributesContent {
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricOutAttributesContent
     */
    format?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricOutAttributesContent
     */
    maql?: string;
}
/**
 *
 * @export
 * @interface JsonApiMetricOutDocument
 */
export interface JsonApiMetricOutDocument {
    /**
     *
     * @type {JsonApiMetricOut}
     * @memberof JsonApiMetricOutDocument
     */
    data: JsonApiMetricOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiMetricOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiFactOutWithLinks | JsonApiAttributeOutWithLinks | JsonApiLabelOutWithLinks | JsonApiMetricOutWithLinks>}
     * @memberof JsonApiMetricOutDocument
     */
    included?: Array<
        | JsonApiFactOutWithLinks
        | JsonApiAttributeOutWithLinks
        | JsonApiLabelOutWithLinks
        | JsonApiMetricOutWithLinks
    >;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiMetricOutList
 */
export interface JsonApiMetricOutList {
    /**
     *
     * @type {Array<JsonApiMetricOutWithLinks>}
     * @memberof JsonApiMetricOutList
     */
    data: Array<JsonApiMetricOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiMetricOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiFactOutWithLinks | JsonApiAttributeOutWithLinks | JsonApiLabelOutWithLinks | JsonApiMetricOutWithLinks>}
     * @memberof JsonApiMetricOutList
     */
    included?: Array<
        | JsonApiFactOutWithLinks
        | JsonApiAttributeOutWithLinks
        | JsonApiLabelOutWithLinks
        | JsonApiMetricOutWithLinks
    >;
}
/**
 *
 * @export
 * @interface JsonApiMetricOutRelationships
 */
export interface JsonApiMetricOutRelationships {
    /**
     *
     * @type {JsonApiACLOutRelationshipsUsers}
     * @memberof JsonApiMetricOutRelationships
     */
    facts?: JsonApiACLOutRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLOutRelationshipsUsers}
     * @memberof JsonApiMetricOutRelationships
     */
    attributes?: JsonApiACLOutRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLOutRelationshipsUsers}
     * @memberof JsonApiMetricOutRelationships
     */
    labels?: JsonApiACLOutRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLOutRelationshipsUsers}
     * @memberof JsonApiMetricOutRelationships
     */
    metrics?: JsonApiACLOutRelationshipsUsers;
}
/**
 *
 * @export
 * @interface JsonApiMetricOutWithLinks
 */
export interface JsonApiMetricOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiMetricOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiMetricOutWithLinks
     */
    type: string;
    /**
     *
     * @type {JsonApiMetricOutAttributes}
     * @memberof JsonApiMetricOutWithLinks
     */
    attributes?: JsonApiMetricOutAttributes;
    /**
     *
     * @type {JsonApiMetricOutRelationships}
     * @memberof JsonApiMetricOutWithLinks
     */
    relationships?: JsonApiMetricOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiMetricOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * JSON:API representation of modelModule entity.
 * @export
 * @interface JsonApiModelModuleIn
 */
export interface JsonApiModelModuleIn {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiModelModuleIn
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiModelModuleIn
     */
    type: string;
    /**
     *
     * @type {object}
     * @memberof JsonApiModelModuleIn
     */
    attributes?: object;
}
/**
 *
 * @export
 * @interface JsonApiModelModuleInDocument
 */
export interface JsonApiModelModuleInDocument {
    /**
     *
     * @type {JsonApiModelModuleIn}
     * @memberof JsonApiModelModuleInDocument
     */
    data: JsonApiModelModuleIn;
}
/**
 * JSON:API representation of modelModule entity.
 * @export
 * @interface JsonApiModelModuleOut
 */
export interface JsonApiModelModuleOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiModelModuleOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiModelModuleOut
     */
    type: string;
    /**
     *
     * @type {object}
     * @memberof JsonApiModelModuleOut
     */
    attributes?: object;
}
/**
 *
 * @export
 * @interface JsonApiModelModuleOutDocument
 */
export interface JsonApiModelModuleOutDocument {
    /**
     *
     * @type {JsonApiModelModuleOut}
     * @memberof JsonApiModelModuleOutDocument
     */
    data: JsonApiModelModuleOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiModelModuleOutDocument
     */
    links?: ObjectLinks;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiModelModuleOutList
 */
export interface JsonApiModelModuleOutList {
    /**
     *
     * @type {Array<JsonApiModelModuleOutWithLinks>}
     * @memberof JsonApiModelModuleOutList
     */
    data: Array<JsonApiModelModuleOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiModelModuleOutList
     */
    links?: ListLinks;
}
/**
 *
 * @export
 * @interface JsonApiModelModuleOutWithLinks
 */
export interface JsonApiModelModuleOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiModelModuleOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiModelModuleOutWithLinks
     */
    type: string;
    /**
     *
     * @type {object}
     * @memberof JsonApiModelModuleOutWithLinks
     */
    attributes?: object;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiModelModuleOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * JSON:API representation of organization entity.
 * @export
 * @interface JsonApiOrganizationIn
 */
export interface JsonApiOrganizationIn {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiOrganizationIn
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiOrganizationIn
     */
    type: string;
    /**
     *
     * @type {JsonApiOrganizationInAttributes}
     * @memberof JsonApiOrganizationIn
     */
    attributes?: JsonApiOrganizationInAttributes;
}
/**
 *
 * @export
 * @interface JsonApiOrganizationInAttributes
 */
export interface JsonApiOrganizationInAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationInAttributes
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationInAttributes
     */
    hostname?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationInAttributes
     */
    oauthIssuerLocation?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationInAttributes
     */
    oauthClientId?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationInAttributes
     */
    oauthClientSecret?: string;
}
/**
 *
 * @export
 * @interface JsonApiOrganizationInDocument
 */
export interface JsonApiOrganizationInDocument {
    /**
     *
     * @type {JsonApiOrganizationIn}
     * @memberof JsonApiOrganizationInDocument
     */
    data: JsonApiOrganizationIn;
}
/**
 * JSON:API representation of organization entity.
 * @export
 * @interface JsonApiOrganizationOut
 */
export interface JsonApiOrganizationOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiOrganizationOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiOrganizationOut
     */
    type: string;
    /**
     *
     * @type {JsonApiOrganizationOutAttributes}
     * @memberof JsonApiOrganizationOut
     */
    attributes?: JsonApiOrganizationOutAttributes;
    /**
     *
     * @type {JsonApiOrganizationOutRelationships}
     * @memberof JsonApiOrganizationOut
     */
    relationships?: JsonApiOrganizationOutRelationships;
}
/**
 *
 * @export
 * @interface JsonApiOrganizationOutAttributes
 */
export interface JsonApiOrganizationOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationOutAttributes
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationOutAttributes
     */
    hostname?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationOutAttributes
     */
    oauthIssuerLocation?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationOutAttributes
     */
    oauthClientId?: string;
}
/**
 *
 * @export
 * @interface JsonApiOrganizationOutDocument
 */
export interface JsonApiOrganizationOutDocument {
    /**
     *
     * @type {JsonApiOrganizationOut}
     * @memberof JsonApiOrganizationOutDocument
     */
    data: JsonApiOrganizationOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiOrganizationOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserOutWithLinks | JsonApiUserGroupOutWithLinks>}
     * @memberof JsonApiOrganizationOutDocument
     */
    included?: Array<JsonApiUserOutWithLinks | JsonApiUserGroupOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiOrganizationOutList
 */
export interface JsonApiOrganizationOutList {
    /**
     *
     * @type {Array<JsonApiOrganizationOutWithLinks>}
     * @memberof JsonApiOrganizationOutList
     */
    data: Array<JsonApiOrganizationOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiOrganizationOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserOutWithLinks | JsonApiUserGroupOutWithLinks>}
     * @memberof JsonApiOrganizationOutList
     */
    included?: Array<JsonApiUserOutWithLinks | JsonApiUserGroupOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiOrganizationOutRelationships
 */
export interface JsonApiOrganizationOutRelationships {
    /**
     *
     * @type {JsonApiOrganizationOutRelationshipsUser}
     * @memberof JsonApiOrganizationOutRelationships
     */
    user?: JsonApiOrganizationOutRelationshipsUser;
    /**
     *
     * @type {JsonApiOrganizationOutRelationshipsUser}
     * @memberof JsonApiOrganizationOutRelationships
     */
    userGroup?: JsonApiOrganizationOutRelationshipsUser;
}
/**
 *
 * @export
 * @interface JsonApiOrganizationOutRelationshipsUser
 */
export interface JsonApiOrganizationOutRelationshipsUser {
    /**
     *
     * @type {JsonApiRelToOne}
     * @memberof JsonApiOrganizationOutRelationshipsUser
     */
    data?: JsonApiRelToOne | null;
}
/**
 *
 * @export
 * @interface JsonApiOrganizationOutWithLinks
 */
export interface JsonApiOrganizationOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiOrganizationOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiOrganizationOutWithLinks
     */
    type: string;
    /**
     *
     * @type {JsonApiOrganizationOutAttributes}
     * @memberof JsonApiOrganizationOutWithLinks
     */
    attributes?: JsonApiOrganizationOutAttributes;
    /**
     *
     * @type {JsonApiOrganizationOutRelationships}
     * @memberof JsonApiOrganizationOutWithLinks
     */
    relationships?: JsonApiOrganizationOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiOrganizationOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * @type JsonApiRelToOne
 * References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
 * @export
 */
export type JsonApiRelToOne = JsonApiLinkage;
/**
 * A source table
 * @export
 * @interface JsonApiSourceTableOut
 */
export interface JsonApiSourceTableOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiSourceTableOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiSourceTableOut
     */
    type: string;
    /**
     *
     * @type {JsonApiSourceTableOutAttributes}
     * @memberof JsonApiSourceTableOut
     */
    attributes?: JsonApiSourceTableOutAttributes;
    /**
     *
     * @type {JsonApiSourceTableOutRelationships}
     * @memberof JsonApiSourceTableOut
     */
    relationships?: JsonApiSourceTableOutRelationships;
}
/**
 *
 * @export
 * @interface JsonApiSourceTableOutAttributes
 */
export interface JsonApiSourceTableOutAttributes {
    /**
     * Path to table.
     * @type {Array<string>}
     * @memberof JsonApiSourceTableOutAttributes
     */
    path?: Array<string>;
    /**
     *
     * @type {Array<JsonApiSourceTableOutAttributesColumns>}
     * @memberof JsonApiSourceTableOutAttributes
     */
    columns?: Array<JsonApiSourceTableOutAttributesColumns>;
}
/**
 * A source table column
 * @export
 * @interface JsonApiSourceTableOutAttributesColumns
 */
export interface JsonApiSourceTableOutAttributesColumns {
    /**
     *
     * @type {string}
     * @memberof JsonApiSourceTableOutAttributesColumns
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiSourceTableOutAttributesColumns
     */
    dataType: JsonApiSourceTableOutAttributesColumnsDataTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiSourceTableOutAttributesColumnsDataTypeEnum {
    INT = "INT",
    STRING = "STRING",
    DATE = "DATE",
    NUMERIC = "NUMERIC",
    TIMESTAMP = "TIMESTAMP",
    BOOLEAN = "BOOLEAN",
}

/**
 *
 * @export
 * @interface JsonApiSourceTableOutDocument
 */
export interface JsonApiSourceTableOutDocument {
    /**
     *
     * @type {JsonApiSourceTableOut}
     * @memberof JsonApiSourceTableOutDocument
     */
    data: JsonApiSourceTableOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiSourceTableOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiSourceTablesOutWithLinks>}
     * @memberof JsonApiSourceTableOutDocument
     */
    included?: Array<JsonApiSourceTablesOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiSourceTableOutList
 */
export interface JsonApiSourceTableOutList {
    /**
     *
     * @type {Array<JsonApiSourceTableOutWithLinks>}
     * @memberof JsonApiSourceTableOutList
     */
    data: Array<JsonApiSourceTableOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiSourceTableOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiSourceTablesOutWithLinks>}
     * @memberof JsonApiSourceTableOutList
     */
    included?: Array<JsonApiSourceTablesOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiSourceTableOutRelationships
 */
export interface JsonApiSourceTableOutRelationships {
    /**
     *
     * @type {JsonApiOrganizationOutRelationshipsUser}
     * @memberof JsonApiSourceTableOutRelationships
     */
    source?: JsonApiOrganizationOutRelationshipsUser;
}
/**
 *
 * @export
 * @interface JsonApiSourceTableOutWithLinks
 */
export interface JsonApiSourceTableOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiSourceTableOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiSourceTableOutWithLinks
     */
    type: string;
    /**
     *
     * @type {JsonApiSourceTableOutAttributes}
     * @memberof JsonApiSourceTableOutWithLinks
     */
    attributes?: JsonApiSourceTableOutAttributes;
    /**
     *
     * @type {JsonApiSourceTableOutRelationships}
     * @memberof JsonApiSourceTableOutWithLinks
     */
    relationships?: JsonApiSourceTableOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiSourceTableOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * A defined data source for analytics data
 * @export
 * @interface JsonApiSourceTablesOut
 */
export interface JsonApiSourceTablesOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiSourceTablesOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiSourceTablesOut
     */
    type: string;
    /**
     *
     * @type {object}
     * @memberof JsonApiSourceTablesOut
     */
    attributes?: object;
    /**
     *
     * @type {JsonApiSourceTablesOutRelationships}
     * @memberof JsonApiSourceTablesOut
     */
    relationships?: JsonApiSourceTablesOutRelationships;
}
/**
 *
 * @export
 * @interface JsonApiSourceTablesOutDocument
 */
export interface JsonApiSourceTablesOutDocument {
    /**
     *
     * @type {JsonApiSourceTablesOut}
     * @memberof JsonApiSourceTablesOutDocument
     */
    data: JsonApiSourceTablesOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiSourceTablesOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiSourceTableOutWithLinks>}
     * @memberof JsonApiSourceTablesOutDocument
     */
    included?: Array<JsonApiSourceTableOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiSourceTablesOutList
 */
export interface JsonApiSourceTablesOutList {
    /**
     *
     * @type {Array<JsonApiSourceTablesOutWithLinks>}
     * @memberof JsonApiSourceTablesOutList
     */
    data: Array<JsonApiSourceTablesOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiSourceTablesOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiSourceTableOutWithLinks>}
     * @memberof JsonApiSourceTablesOutList
     */
    included?: Array<JsonApiSourceTableOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiSourceTablesOutRelationships
 */
export interface JsonApiSourceTablesOutRelationships {
    /**
     *
     * @type {JsonApiACLOutRelationshipsUsers}
     * @memberof JsonApiSourceTablesOutRelationships
     */
    tables?: JsonApiACLOutRelationshipsUsers;
}
/**
 *
 * @export
 * @interface JsonApiSourceTablesOutWithLinks
 */
export interface JsonApiSourceTablesOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiSourceTablesOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiSourceTablesOutWithLinks
     */
    type: string;
    /**
     *
     * @type {object}
     * @memberof JsonApiSourceTablesOutWithLinks
     */
    attributes?: object;
    /**
     *
     * @type {JsonApiSourceTablesOutRelationships}
     * @memberof JsonApiSourceTablesOutWithLinks
     */
    relationships?: JsonApiSourceTablesOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiSourceTablesOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * JSON:API representation of userGroup entity.
 * @export
 * @interface JsonApiUserGroupIn
 */
export interface JsonApiUserGroupIn {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserGroupIn
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserGroupIn
     */
    type: string;
    /**
     *
     * @type {object}
     * @memberof JsonApiUserGroupIn
     */
    attributes?: object;
    /**
     *
     * @type {JsonApiUserGroupOutRelationships}
     * @memberof JsonApiUserGroupIn
     */
    relationships?: JsonApiUserGroupOutRelationships;
}
/**
 *
 * @export
 * @interface JsonApiUserGroupInDocument
 */
export interface JsonApiUserGroupInDocument {
    /**
     *
     * @type {JsonApiUserGroupIn}
     * @memberof JsonApiUserGroupInDocument
     */
    data: JsonApiUserGroupIn;
}
/**
 * JSON:API representation of userGroup entity.
 * @export
 * @interface JsonApiUserGroupOut
 */
export interface JsonApiUserGroupOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserGroupOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserGroupOut
     */
    type: string;
    /**
     *
     * @type {object}
     * @memberof JsonApiUserGroupOut
     */
    attributes?: object;
    /**
     *
     * @type {JsonApiUserGroupOutRelationships}
     * @memberof JsonApiUserGroupOut
     */
    relationships?: JsonApiUserGroupOutRelationships;
}
/**
 *
 * @export
 * @interface JsonApiUserGroupOutDocument
 */
export interface JsonApiUserGroupOutDocument {
    /**
     *
     * @type {JsonApiUserGroupOut}
     * @memberof JsonApiUserGroupOutDocument
     */
    data: JsonApiUserGroupOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiUserGroupOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserGroupOutWithLinks | JsonApiACLOutWithLinks>}
     * @memberof JsonApiUserGroupOutDocument
     */
    included?: Array<JsonApiUserGroupOutWithLinks | JsonApiACLOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiUserGroupOutList
 */
export interface JsonApiUserGroupOutList {
    /**
     *
     * @type {Array<JsonApiUserGroupOutWithLinks>}
     * @memberof JsonApiUserGroupOutList
     */
    data: Array<JsonApiUserGroupOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiUserGroupOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserGroupOutWithLinks | JsonApiACLOutWithLinks>}
     * @memberof JsonApiUserGroupOutList
     */
    included?: Array<JsonApiUserGroupOutWithLinks | JsonApiACLOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiUserGroupOutRelationships
 */
export interface JsonApiUserGroupOutRelationships {
    /**
     *
     * @type {JsonApiOrganizationOutRelationshipsUser}
     * @memberof JsonApiUserGroupOutRelationships
     */
    userGroup?: JsonApiOrganizationOutRelationshipsUser;
    /**
     *
     * @type {JsonApiACLOutRelationshipsUsers}
     * @memberof JsonApiUserGroupOutRelationships
     */
    acls?: JsonApiACLOutRelationshipsUsers;
}
/**
 *
 * @export
 * @interface JsonApiUserGroupOutWithLinks
 */
export interface JsonApiUserGroupOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserGroupOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserGroupOutWithLinks
     */
    type: string;
    /**
     *
     * @type {object}
     * @memberof JsonApiUserGroupOutWithLinks
     */
    attributes?: object;
    /**
     *
     * @type {JsonApiUserGroupOutRelationships}
     * @memberof JsonApiUserGroupOutWithLinks
     */
    relationships?: JsonApiUserGroupOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiUserGroupOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * JSON:API representation of user entity.
 * @export
 * @interface JsonApiUserIn
 */
export interface JsonApiUserIn {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserIn
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserIn
     */
    type: string;
    /**
     *
     * @type {JsonApiUserOutAttributes}
     * @memberof JsonApiUserIn
     */
    attributes?: JsonApiUserOutAttributes;
    /**
     *
     * @type {JsonApiUserGroupOutRelationships}
     * @memberof JsonApiUserIn
     */
    relationships?: JsonApiUserGroupOutRelationships;
}
/**
 *
 * @export
 * @interface JsonApiUserInDocument
 */
export interface JsonApiUserInDocument {
    /**
     *
     * @type {JsonApiUserIn}
     * @memberof JsonApiUserInDocument
     */
    data: JsonApiUserIn;
}
/**
 * JSON:API representation of user entity.
 * @export
 * @interface JsonApiUserOut
 */
export interface JsonApiUserOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserOut
     */
    type: string;
    /**
     *
     * @type {JsonApiUserOutAttributes}
     * @memberof JsonApiUserOut
     */
    attributes?: JsonApiUserOutAttributes;
    /**
     *
     * @type {JsonApiUserGroupOutRelationships}
     * @memberof JsonApiUserOut
     */
    relationships?: JsonApiUserGroupOutRelationships;
}
/**
 *
 * @export
 * @interface JsonApiUserOutAttributes
 */
export interface JsonApiUserOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiUserOutAttributes
     */
    authenticationId?: string;
}
/**
 *
 * @export
 * @interface JsonApiUserOutDocument
 */
export interface JsonApiUserOutDocument {
    /**
     *
     * @type {JsonApiUserOut}
     * @memberof JsonApiUserOutDocument
     */
    data: JsonApiUserOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiUserOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserGroupOutWithLinks | JsonApiACLOutWithLinks>}
     * @memberof JsonApiUserOutDocument
     */
    included?: Array<JsonApiUserGroupOutWithLinks | JsonApiACLOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiUserOutList
 */
export interface JsonApiUserOutList {
    /**
     *
     * @type {Array<JsonApiUserOutWithLinks>}
     * @memberof JsonApiUserOutList
     */
    data: Array<JsonApiUserOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiUserOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserGroupOutWithLinks | JsonApiACLOutWithLinks>}
     * @memberof JsonApiUserOutList
     */
    included?: Array<JsonApiUserGroupOutWithLinks | JsonApiACLOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiUserOutWithLinks
 */
export interface JsonApiUserOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserOutWithLinks
     */
    type: string;
    /**
     *
     * @type {JsonApiUserOutAttributes}
     * @memberof JsonApiUserOutWithLinks
     */
    attributes?: JsonApiUserOutAttributes;
    /**
     *
     * @type {JsonApiUserGroupOutRelationships}
     * @memberof JsonApiUserOutWithLinks
     */
    relationships?: JsonApiUserGroupOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiUserOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * JSON:API representation of visualizationObject entity.
 * @export
 * @interface JsonApiVisualizationObjectIn
 */
export interface JsonApiVisualizationObjectIn {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiVisualizationObjectIn
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiVisualizationObjectIn
     */
    type: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutAttributes}
     * @memberof JsonApiVisualizationObjectIn
     */
    attributes?: JsonApiAnalyticalDashboardOutAttributes;
}
/**
 *
 * @export
 * @interface JsonApiVisualizationObjectInDocument
 */
export interface JsonApiVisualizationObjectInDocument {
    /**
     *
     * @type {JsonApiVisualizationObjectIn}
     * @memberof JsonApiVisualizationObjectInDocument
     */
    data: JsonApiVisualizationObjectIn;
}
/**
 * JSON:API representation of visualizationObject entity.
 * @export
 * @interface JsonApiVisualizationObjectOut
 */
export interface JsonApiVisualizationObjectOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiVisualizationObjectOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiVisualizationObjectOut
     */
    type: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutAttributes}
     * @memberof JsonApiVisualizationObjectOut
     */
    attributes?: JsonApiAnalyticalDashboardOutAttributes;
    /**
     *
     * @type {JsonApiVisualizationObjectOutRelationships}
     * @memberof JsonApiVisualizationObjectOut
     */
    relationships?: JsonApiVisualizationObjectOutRelationships;
}
/**
 *
 * @export
 * @interface JsonApiVisualizationObjectOutDocument
 */
export interface JsonApiVisualizationObjectOutDocument {
    /**
     *
     * @type {JsonApiVisualizationObjectOut}
     * @memberof JsonApiVisualizationObjectOutDocument
     */
    data: JsonApiVisualizationObjectOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiVisualizationObjectOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiFactOutWithLinks | JsonApiAttributeOutWithLinks | JsonApiLabelOutWithLinks | JsonApiMetricOutWithLinks | JsonApiAnalyticalDashboardOutWithLinks | JsonApiDatasetOutWithLinks>}
     * @memberof JsonApiVisualizationObjectOutDocument
     */
    included?: Array<
        | JsonApiFactOutWithLinks
        | JsonApiAttributeOutWithLinks
        | JsonApiLabelOutWithLinks
        | JsonApiMetricOutWithLinks
        | JsonApiAnalyticalDashboardOutWithLinks
        | JsonApiDatasetOutWithLinks
    >;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiVisualizationObjectOutList
 */
export interface JsonApiVisualizationObjectOutList {
    /**
     *
     * @type {Array<JsonApiVisualizationObjectOutWithLinks>}
     * @memberof JsonApiVisualizationObjectOutList
     */
    data: Array<JsonApiVisualizationObjectOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiVisualizationObjectOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiFactOutWithLinks | JsonApiAttributeOutWithLinks | JsonApiLabelOutWithLinks | JsonApiMetricOutWithLinks | JsonApiAnalyticalDashboardOutWithLinks | JsonApiDatasetOutWithLinks>}
     * @memberof JsonApiVisualizationObjectOutList
     */
    included?: Array<
        | JsonApiFactOutWithLinks
        | JsonApiAttributeOutWithLinks
        | JsonApiLabelOutWithLinks
        | JsonApiMetricOutWithLinks
        | JsonApiAnalyticalDashboardOutWithLinks
        | JsonApiDatasetOutWithLinks
    >;
}
/**
 *
 * @export
 * @interface JsonApiVisualizationObjectOutRelationships
 */
export interface JsonApiVisualizationObjectOutRelationships {
    /**
     *
     * @type {JsonApiACLOutRelationshipsUsers}
     * @memberof JsonApiVisualizationObjectOutRelationships
     */
    facts?: JsonApiACLOutRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLOutRelationshipsUsers}
     * @memberof JsonApiVisualizationObjectOutRelationships
     */
    attributes?: JsonApiACLOutRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLOutRelationshipsUsers}
     * @memberof JsonApiVisualizationObjectOutRelationships
     */
    labels?: JsonApiACLOutRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLOutRelationshipsUsers}
     * @memberof JsonApiVisualizationObjectOutRelationships
     */
    metrics?: JsonApiACLOutRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLOutRelationshipsUsers}
     * @memberof JsonApiVisualizationObjectOutRelationships
     */
    analyticalDashboards?: JsonApiACLOutRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLOutRelationshipsUsers}
     * @memberof JsonApiVisualizationObjectOutRelationships
     */
    datasets?: JsonApiACLOutRelationshipsUsers;
}
/**
 *
 * @export
 * @interface JsonApiVisualizationObjectOutWithLinks
 */
export interface JsonApiVisualizationObjectOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiVisualizationObjectOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiVisualizationObjectOutWithLinks
     */
    type: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutAttributes}
     * @memberof JsonApiVisualizationObjectOutWithLinks
     */
    attributes?: JsonApiAnalyticalDashboardOutAttributes;
    /**
     *
     * @type {JsonApiVisualizationObjectOutRelationships}
     * @memberof JsonApiVisualizationObjectOutWithLinks
     */
    relationships?: JsonApiVisualizationObjectOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiVisualizationObjectOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * JSON:API representation of workspaceDataFilter entity.
 * @export
 * @interface JsonApiWorkspaceDataFilterIn
 */
export interface JsonApiWorkspaceDataFilterIn {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterIn
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterIn
     */
    type: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterOutAttributes}
     * @memberof JsonApiWorkspaceDataFilterIn
     */
    attributes?: JsonApiWorkspaceDataFilterOutAttributes;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterOutRelationships}
     * @memberof JsonApiWorkspaceDataFilterIn
     */
    relationships?: JsonApiWorkspaceDataFilterOutRelationships;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterInDocument
 */
export interface JsonApiWorkspaceDataFilterInDocument {
    /**
     *
     * @type {JsonApiWorkspaceDataFilterIn}
     * @memberof JsonApiWorkspaceDataFilterInDocument
     */
    data: JsonApiWorkspaceDataFilterIn;
}
/**
 * JSON:API representation of workspaceDataFilter entity.
 * @export
 * @interface JsonApiWorkspaceDataFilterOut
 */
export interface JsonApiWorkspaceDataFilterOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterOut
     */
    type: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterOutAttributes}
     * @memberof JsonApiWorkspaceDataFilterOut
     */
    attributes?: JsonApiWorkspaceDataFilterOutAttributes;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterOutRelationships}
     * @memberof JsonApiWorkspaceDataFilterOut
     */
    relationships?: JsonApiWorkspaceDataFilterOutRelationships;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterOutAttributes
 */
export interface JsonApiWorkspaceDataFilterOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterOutAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterOutAttributes
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterOutAttributes
     */
    columnName?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterOutAttributes
     */
    dataSourceName?: string;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterOutDocument
 */
export interface JsonApiWorkspaceDataFilterOutDocument {
    /**
     *
     * @type {JsonApiWorkspaceDataFilterOut}
     * @memberof JsonApiWorkspaceDataFilterOutDocument
     */
    data: JsonApiWorkspaceDataFilterOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceDataFilterOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiWorkspaceDataFilterSettingOutWithLinks>}
     * @memberof JsonApiWorkspaceDataFilterOutDocument
     */
    included?: Array<JsonApiWorkspaceDataFilterSettingOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiWorkspaceDataFilterOutList
 */
export interface JsonApiWorkspaceDataFilterOutList {
    /**
     *
     * @type {Array<JsonApiWorkspaceDataFilterOutWithLinks>}
     * @memberof JsonApiWorkspaceDataFilterOutList
     */
    data: Array<JsonApiWorkspaceDataFilterOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiWorkspaceDataFilterOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiWorkspaceDataFilterSettingOutWithLinks>}
     * @memberof JsonApiWorkspaceDataFilterOutList
     */
    included?: Array<JsonApiWorkspaceDataFilterSettingOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterOutRelationships
 */
export interface JsonApiWorkspaceDataFilterOutRelationships {
    /**
     *
     * @type {JsonApiACLOutRelationshipsUsers}
     * @memberof JsonApiWorkspaceDataFilterOutRelationships
     */
    workspaceDataFilterSettings?: JsonApiACLOutRelationshipsUsers;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterOutWithLinks
 */
export interface JsonApiWorkspaceDataFilterOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterOutWithLinks
     */
    type: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterOutAttributes}
     * @memberof JsonApiWorkspaceDataFilterOutWithLinks
     */
    attributes?: JsonApiWorkspaceDataFilterOutAttributes;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterOutRelationships}
     * @memberof JsonApiWorkspaceDataFilterOutWithLinks
     */
    relationships?: JsonApiWorkspaceDataFilterOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceDataFilterOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * JSON:API representation of workspaceDataFilterSetting entity.
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingOut
 */
export interface JsonApiWorkspaceDataFilterSettingOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingOut
     */
    type: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingOutAttributes}
     * @memberof JsonApiWorkspaceDataFilterSettingOut
     */
    attributes?: JsonApiWorkspaceDataFilterSettingOutAttributes;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingOutRelationships}
     * @memberof JsonApiWorkspaceDataFilterSettingOut
     */
    relationships?: JsonApiWorkspaceDataFilterSettingOutRelationships;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingOutAttributes
 */
export interface JsonApiWorkspaceDataFilterSettingOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingOutAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingOutAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiWorkspaceDataFilterSettingOutAttributes
     */
    filterValues?: Array<string>;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingOutDocument
 */
export interface JsonApiWorkspaceDataFilterSettingOutDocument {
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingOut}
     * @memberof JsonApiWorkspaceDataFilterSettingOutDocument
     */
    data: JsonApiWorkspaceDataFilterSettingOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceDataFilterSettingOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiWorkspaceDataFilterOutWithLinks>}
     * @memberof JsonApiWorkspaceDataFilterSettingOutDocument
     */
    included?: Array<JsonApiWorkspaceDataFilterOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingOutList
 */
export interface JsonApiWorkspaceDataFilterSettingOutList {
    /**
     *
     * @type {Array<JsonApiWorkspaceDataFilterSettingOutWithLinks>}
     * @memberof JsonApiWorkspaceDataFilterSettingOutList
     */
    data: Array<JsonApiWorkspaceDataFilterSettingOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiWorkspaceDataFilterSettingOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiWorkspaceDataFilterOutWithLinks>}
     * @memberof JsonApiWorkspaceDataFilterSettingOutList
     */
    included?: Array<JsonApiWorkspaceDataFilterOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingOutRelationships
 */
export interface JsonApiWorkspaceDataFilterSettingOutRelationships {
    /**
     *
     * @type {JsonApiOrganizationOutRelationshipsUser}
     * @memberof JsonApiWorkspaceDataFilterSettingOutRelationships
     */
    workspaceDataFilter?: JsonApiOrganizationOutRelationshipsUser;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingOutWithLinks
 */
export interface JsonApiWorkspaceDataFilterSettingOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingOutWithLinks
     */
    type: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingOutAttributes}
     * @memberof JsonApiWorkspaceDataFilterSettingOutWithLinks
     */
    attributes?: JsonApiWorkspaceDataFilterSettingOutAttributes;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingOutRelationships}
     * @memberof JsonApiWorkspaceDataFilterSettingOutWithLinks
     */
    relationships?: JsonApiWorkspaceDataFilterSettingOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceDataFilterSettingOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * JSON:API representation of workspace entity.
 * @export
 * @interface JsonApiWorkspaceIn
 */
export interface JsonApiWorkspaceIn {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceIn
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceIn
     */
    type: string;
    /**
     *
     * @type {JsonApiWorkspaceOutAttributes}
     * @memberof JsonApiWorkspaceIn
     */
    attributes?: JsonApiWorkspaceOutAttributes;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceInDocument
 */
export interface JsonApiWorkspaceInDocument {
    /**
     *
     * @type {JsonApiWorkspaceIn}
     * @memberof JsonApiWorkspaceInDocument
     */
    data: JsonApiWorkspaceIn;
}
/**
 * JSON:API representation of workspace entity.
 * @export
 * @interface JsonApiWorkspaceOut
 */
export interface JsonApiWorkspaceOut {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceOut
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceOut
     */
    type: string;
    /**
     *
     * @type {JsonApiWorkspaceOutAttributes}
     * @memberof JsonApiWorkspaceOut
     */
    attributes?: JsonApiWorkspaceOutAttributes;
    /**
     *
     * @type {JsonApiWorkspaceOutRelationships}
     * @memberof JsonApiWorkspaceOut
     */
    relationships?: JsonApiWorkspaceOutRelationships;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceOutAttributes
 */
export interface JsonApiWorkspaceOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceOutAttributes
     */
    name?: string;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceOutDocument
 */
export interface JsonApiWorkspaceOutDocument {
    /**
     *
     * @type {JsonApiWorkspaceOut}
     * @memberof JsonApiWorkspaceOutDocument
     */
    data: JsonApiWorkspaceOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiWorkspaceOutWithLinks>}
     * @memberof JsonApiWorkspaceOutDocument
     */
    included?: Array<JsonApiWorkspaceOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiWorkspaceOutList
 */
export interface JsonApiWorkspaceOutList {
    /**
     *
     * @type {Array<JsonApiWorkspaceOutWithLinks>}
     * @memberof JsonApiWorkspaceOutList
     */
    data: Array<JsonApiWorkspaceOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiWorkspaceOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiWorkspaceOutWithLinks>}
     * @memberof JsonApiWorkspaceOutList
     */
    included?: Array<JsonApiWorkspaceOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceOutRelationships
 */
export interface JsonApiWorkspaceOutRelationships {
    /**
     *
     * @type {JsonApiOrganizationOutRelationshipsUser}
     * @memberof JsonApiWorkspaceOutRelationships
     */
    workspace?: JsonApiOrganizationOutRelationshipsUser;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceOutWithLinks
 */
export interface JsonApiWorkspaceOutWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceOutWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceOutWithLinks
     */
    type: string;
    /**
     *
     * @type {JsonApiWorkspaceOutAttributes}
     * @memberof JsonApiWorkspaceOutWithLinks
     */
    attributes?: JsonApiWorkspaceOutAttributes;
    /**
     *
     * @type {JsonApiWorkspaceOutRelationships}
     * @memberof JsonApiWorkspaceOutWithLinks
     */
    relationships?: JsonApiWorkspaceOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 *
 * @export
 * @interface ListLinks
 */
export interface ListLinks {
    /**
     * A string containing the link\'s URL.
     * @type {string}
     * @memberof ListLinks
     */
    self: string;
    /**
     * A string containing the link\'s URL for the next page of data.
     * @type {string}
     * @memberof ListLinks
     */
    next?: string;
}
/**
 *
 * @export
 * @interface ListLinksAllOf
 */
export interface ListLinksAllOf {
    /**
     * A string containing the link\'s URL for the next page of data.
     * @type {string}
     * @memberof ListLinksAllOf
     */
    next?: string;
}
/**
 *
 * @export
 * @interface ObjectLinks
 */
export interface ObjectLinks {
    /**
     * A string containing the link\'s URL.
     * @type {string}
     * @memberof ObjectLinks
     */
    self: string;
}
/**
 *
 * @export
 * @interface ObjectLinksContainer
 */
export interface ObjectLinksContainer {
    /**
     *
     * @type {ObjectLinks}
     * @memberof ObjectLinksContainer
     */
    links?: ObjectLinks;
}
/**
 * A reference identifier.
 * @export
 * @interface ReferenceIdentifier
 */
export interface ReferenceIdentifier {
    /**
     * Reference ID.
     * @type {string}
     * @memberof ReferenceIdentifier
     */
    id: string;
    /**
     * A type of the reference.
     * @type {string}
     * @memberof ReferenceIdentifier
     */
    type: ReferenceIdentifierTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum ReferenceIdentifierTypeEnum {
    Dataset = "dataset",
}

/**
 * Store filter into this workspace. Empty if it is part of layout of workspaces.
 * @export
 * @interface WorkspaceIdentifier
 */
export interface WorkspaceIdentifier {
    /**
     *
     * @type {string}
     * @memberof WorkspaceIdentifier
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceIdentifier
     */
    type: WorkspaceIdentifierTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum WorkspaceIdentifierTypeEnum {
    Workspace = "workspace",
}

/**
 * DeclarativeLayoutControllerApi - axios parameter creator
 * @export
 */
export const DeclarativeLayoutControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve current analytics model of the workspace.
         * @summary Get analytics model
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalyticsModel(
            params: {
                workspaceId: string;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getAnalyticsModel.",
                );
            }
            const localVarPath = `/api/layout/workspaces/{workspaceId}/analyticsModel`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve current logical model of the workspace in declarative form.
         * @summary Get logical model
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogicalModel(
            params: {
                workspaceId: string;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getLogicalModel.",
                );
            }
            const localVarPath = `/api/layout/workspaces/{workspaceId}/logicalModel`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve complete layout of organization, workspaces, user-groups, etc.
         * @summary Get organization layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationLayout(params: {}, options: any = {}): RequestArgs {
            const {} = params;
            const localVarPath = `/api/layout/organization`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all workspaces and related workspace data filters (and their settings / values).
         * @summary Get workspace data filters for all workspaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceDataFiltersLayout(params: {}, options: any = {}): RequestArgs {
            const {} = params;
            const localVarPath = `/api/layout/workspaceDataFilters`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve current model of the workspace in declarative form.
         * @summary Get workspace layout
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceLayout(
            params: {
                workspaceId: string;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getWorkspaceLayout.",
                );
            }
            const localVarPath = `/api/layout/workspaces/{workspaceId}`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets complete layout of workspaces, their hierarchy, models.
         * @summary Set all workspaces layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspacesLayout(params: {}, options: any = {}): RequestArgs {
            const {} = params;
            const localVarPath = `/api/layout/workspaces`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set complete layout of workspace, like model, ACLs, etc.
         * @summary Set workspace layout
         * @param {string} workspaceId
         * @param {DeclarativeWorkspaceModel} declarativeWorkspaceModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWorkspaceLayout(
            params: {
                workspaceId: string;
                declarativeWorkspaceModel: DeclarativeWorkspaceModel;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, declarativeWorkspaceModel } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling putWorkspaceLayout.",
                );
            }
            // verify required parameter 'declarativeWorkspaceModel' is not null or undefined
            if (declarativeWorkspaceModel === null || declarativeWorkspaceModel === undefined) {
                throw new RequiredError(
                    "declarativeWorkspaceModel",
                    "Required parameter declarativeWorkspaceModel was null or undefined when calling putWorkspaceLayout.",
                );
            }
            const localVarPath = `/api/layout/workspaces/{workspaceId}`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof declarativeWorkspaceModel !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(declarativeWorkspaceModel !== undefined ? declarativeWorkspaceModel : {})
                : declarativeWorkspaceModel || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set effective analytics model of the workspace.
         * @summary Set analytics model
         * @param {string} workspaceId
         * @param {DeclarativeAnalytics} declarativeAnalytics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAnalyticsModel(
            params: {
                workspaceId: string;
                declarativeAnalytics: DeclarativeAnalytics;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, declarativeAnalytics } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling setAnalyticsModel.",
                );
            }
            // verify required parameter 'declarativeAnalytics' is not null or undefined
            if (declarativeAnalytics === null || declarativeAnalytics === undefined) {
                throw new RequiredError(
                    "declarativeAnalytics",
                    "Required parameter declarativeAnalytics was null or undefined when calling setAnalyticsModel.",
                );
            }
            const localVarPath = `/api/layout/workspaces/{workspaceId}/analyticsModel`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof declarativeAnalytics !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(declarativeAnalytics !== undefined ? declarativeAnalytics : {})
                : declarativeAnalytics || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set effective logical model of the workspace.
         * @summary Set logical model
         * @param {string} workspaceId
         * @param {DeclarativeModel} declarativeModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLogicalModel(
            params: {
                workspaceId: string;
                declarativeModel: DeclarativeModel;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, declarativeModel } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling setLogicalModel.",
                );
            }
            // verify required parameter 'declarativeModel' is not null or undefined
            if (declarativeModel === null || declarativeModel === undefined) {
                throw new RequiredError(
                    "declarativeModel",
                    "Required parameter declarativeModel was null or undefined when calling setLogicalModel.",
                );
            }
            const localVarPath = `/api/layout/workspaces/{workspaceId}/logicalModel`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof declarativeModel !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(declarativeModel !== undefined ? declarativeModel : {})
                : declarativeModel || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets complete layout of organization, like workspaces, user-groups, etc.
         * @summary Set organization layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOrganizationLayout(params: {}, options: any = {}): RequestArgs {
            const {} = params;
            const localVarPath = `/api/layout/organization`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets workspace data filters in all workspaces in entire organization.
         * @summary Set all workspace data filters
         * @param {DeclarativeWorkspaceDataFilters} declarativeWorkspaceDataFilters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkspaceDataFiltersLayout(
            params: {
                declarativeWorkspaceDataFilters: DeclarativeWorkspaceDataFilters;
            },
            options: any = {},
        ): RequestArgs {
            const { declarativeWorkspaceDataFilters } = params;
            // verify required parameter 'declarativeWorkspaceDataFilters' is not null or undefined
            if (declarativeWorkspaceDataFilters === null || declarativeWorkspaceDataFilters === undefined) {
                throw new RequiredError(
                    "declarativeWorkspaceDataFilters",
                    "Required parameter declarativeWorkspaceDataFilters was null or undefined when calling setWorkspaceDataFiltersLayout.",
                );
            }
            const localVarPath = `/api/layout/workspaceDataFilters`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof declarativeWorkspaceDataFilters !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      declarativeWorkspaceDataFilters !== undefined ? declarativeWorkspaceDataFilters : {},
                  )
                : declarativeWorkspaceDataFilters || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets complete layout of workspaces, their hierarchy, models.
         * @summary Set all workspaces layout
         * @param {DeclarativeWorkspaces} declarativeWorkspaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkspacesLayout(
            params: {
                declarativeWorkspaces: DeclarativeWorkspaces;
            },
            options: any = {},
        ): RequestArgs {
            const { declarativeWorkspaces } = params;
            // verify required parameter 'declarativeWorkspaces' is not null or undefined
            if (declarativeWorkspaces === null || declarativeWorkspaces === undefined) {
                throw new RequiredError(
                    "declarativeWorkspaces",
                    "Required parameter declarativeWorkspaces was null or undefined when calling setWorkspacesLayout.",
                );
            }
            const localVarPath = `/api/layout/workspaces`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof declarativeWorkspaces !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(declarativeWorkspaces !== undefined ? declarativeWorkspaces : {})
                : declarativeWorkspaces || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * DeclarativeLayoutControllerApi - functional programming interface
 * @export
 */
export const DeclarativeLayoutControllerApiFp = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve current analytics model of the workspace.
         * @summary Get analytics model
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalyticsModel(
            params: {
                workspaceId: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeAnalytics> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).getAnalyticsModel(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve current logical model of the workspace in declarative form.
         * @summary Get logical model
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogicalModel(
            params: {
                workspaceId: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeModel> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).getLogicalModel(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve complete layout of organization, workspaces, user-groups, etc.
         * @summary Get organization layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationLayout(
            params: {},
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).getOrganizationLayout(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve all workspaces and related workspace data filters (and their settings / values).
         * @summary Get workspace data filters for all workspaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceDataFiltersLayout(
            params: {},
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeWorkspaceDataFilters> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).getWorkspaceDataFiltersLayout(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve current model of the workspace in declarative form.
         * @summary Get workspace layout
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceLayout(
            params: {
                workspaceId: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeWorkspaceModel> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).getWorkspaceLayout(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sets complete layout of workspaces, their hierarchy, models.
         * @summary Set all workspaces layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspacesLayout(
            params: {},
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeWorkspaces> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).getWorkspacesLayout(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Set complete layout of workspace, like model, ACLs, etc.
         * @summary Set workspace layout
         * @param {string} workspaceId
         * @param {DeclarativeWorkspaceModel} declarativeWorkspaceModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWorkspaceLayout(
            params: {
                workspaceId: string;
                declarativeWorkspaceModel: DeclarativeWorkspaceModel;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).putWorkspaceLayout(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Set effective analytics model of the workspace.
         * @summary Set analytics model
         * @param {string} workspaceId
         * @param {DeclarativeAnalytics} declarativeAnalytics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAnalyticsModel(
            params: {
                workspaceId: string;
                declarativeAnalytics: DeclarativeAnalytics;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).setAnalyticsModel(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Set effective logical model of the workspace.
         * @summary Set logical model
         * @param {string} workspaceId
         * @param {DeclarativeModel} declarativeModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLogicalModel(
            params: {
                workspaceId: string;
                declarativeModel: DeclarativeModel;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).setLogicalModel(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sets complete layout of organization, like workspaces, user-groups, etc.
         * @summary Set organization layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOrganizationLayout(
            params: {},
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).setOrganizationLayout(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sets workspace data filters in all workspaces in entire organization.
         * @summary Set all workspace data filters
         * @param {DeclarativeWorkspaceDataFilters} declarativeWorkspaceDataFilters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkspaceDataFiltersLayout(
            params: {
                declarativeWorkspaceDataFilters: DeclarativeWorkspaceDataFilters;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).setWorkspaceDataFiltersLayout(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sets complete layout of workspaces, their hierarchy, models.
         * @summary Set all workspaces layout
         * @param {DeclarativeWorkspaces} declarativeWorkspaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkspacesLayout(
            params: {
                declarativeWorkspaces: DeclarativeWorkspaces;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).setWorkspacesLayout(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * DeclarativeLayoutControllerApi - factory interface
 * @export
 */
export const DeclarativeLayoutControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         * Retrieve current analytics model of the workspace.
         * @summary Get analytics model
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalyticsModel(
            params: {
                workspaceId: string;
            },
            options?: any,
        ): AxiosPromise<DeclarativeAnalytics> {
            return DeclarativeLayoutControllerApiFp(configuration).getAnalyticsModel(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve current logical model of the workspace in declarative form.
         * @summary Get logical model
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogicalModel(
            params: {
                workspaceId: string;
            },
            options?: any,
        ): AxiosPromise<DeclarativeModel> {
            return DeclarativeLayoutControllerApiFp(configuration).getLogicalModel(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve complete layout of organization, workspaces, user-groups, etc.
         * @summary Get organization layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationLayout(params: {}, options?: any): AxiosPromise<void> {
            return DeclarativeLayoutControllerApiFp(configuration).getOrganizationLayout(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve all workspaces and related workspace data filters (and their settings / values).
         * @summary Get workspace data filters for all workspaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceDataFiltersLayout(
            params: {},
            options?: any,
        ): AxiosPromise<DeclarativeWorkspaceDataFilters> {
            return DeclarativeLayoutControllerApiFp(configuration).getWorkspaceDataFiltersLayout(
                params,
                options,
            )(axios, basePath);
        },
        /**
         * Retrieve current model of the workspace in declarative form.
         * @summary Get workspace layout
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceLayout(
            params: {
                workspaceId: string;
            },
            options?: any,
        ): AxiosPromise<DeclarativeWorkspaceModel> {
            return DeclarativeLayoutControllerApiFp(configuration).getWorkspaceLayout(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Sets complete layout of workspaces, their hierarchy, models.
         * @summary Set all workspaces layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspacesLayout(params: {}, options?: any): AxiosPromise<DeclarativeWorkspaces> {
            return DeclarativeLayoutControllerApiFp(configuration).getWorkspacesLayout(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Set complete layout of workspace, like model, ACLs, etc.
         * @summary Set workspace layout
         * @param {string} workspaceId
         * @param {DeclarativeWorkspaceModel} declarativeWorkspaceModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWorkspaceLayout(
            params: {
                workspaceId: string;
                declarativeWorkspaceModel: DeclarativeWorkspaceModel;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DeclarativeLayoutControllerApiFp(configuration).putWorkspaceLayout(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Set effective analytics model of the workspace.
         * @summary Set analytics model
         * @param {string} workspaceId
         * @param {DeclarativeAnalytics} declarativeAnalytics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAnalyticsModel(
            params: {
                workspaceId: string;
                declarativeAnalytics: DeclarativeAnalytics;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DeclarativeLayoutControllerApiFp(configuration).setAnalyticsModel(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Set effective logical model of the workspace.
         * @summary Set logical model
         * @param {string} workspaceId
         * @param {DeclarativeModel} declarativeModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLogicalModel(
            params: {
                workspaceId: string;
                declarativeModel: DeclarativeModel;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DeclarativeLayoutControllerApiFp(configuration).setLogicalModel(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Sets complete layout of organization, like workspaces, user-groups, etc.
         * @summary Set organization layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOrganizationLayout(params: {}, options?: any): AxiosPromise<void> {
            return DeclarativeLayoutControllerApiFp(configuration).setOrganizationLayout(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Sets workspace data filters in all workspaces in entire organization.
         * @summary Set all workspace data filters
         * @param {DeclarativeWorkspaceDataFilters} declarativeWorkspaceDataFilters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkspaceDataFiltersLayout(
            params: {
                declarativeWorkspaceDataFilters: DeclarativeWorkspaceDataFilters;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DeclarativeLayoutControllerApiFp(configuration).setWorkspaceDataFiltersLayout(
                params,
                options,
            )(axios, basePath);
        },
        /**
         * Sets complete layout of workspaces, their hierarchy, models.
         * @summary Set all workspaces layout
         * @param {DeclarativeWorkspaces} declarativeWorkspaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkspacesLayout(
            params: {
                declarativeWorkspaces: DeclarativeWorkspaces;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DeclarativeLayoutControllerApiFp(configuration).setWorkspacesLayout(params, options)(
                axios,
                basePath,
            );
        },
    };
};

/**
 * DeclarativeLayoutControllerApi - interface
 * @export
 * @interface DeclarativeLayoutControllerApi
 */
export interface DeclarativeLayoutControllerApiInterface {
    /**
     * Retrieve current analytics model of the workspace.
     * @summary Get analytics model
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    getAnalyticsModel(
        params: {
            workspaceId: string;
        },
        options?: any,
    ): AxiosPromise<DeclarativeAnalytics>;

    /**
     * Retrieve current logical model of the workspace in declarative form.
     * @summary Get logical model
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    getLogicalModel(
        params: {
            workspaceId: string;
        },
        options?: any,
    ): AxiosPromise<DeclarativeModel>;

    /**
     * Retrieve complete layout of organization, workspaces, user-groups, etc.
     * @summary Get organization layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    getOrganizationLayout(params: {}, options?: any): AxiosPromise<void>;

    /**
     * Retrieve all workspaces and related workspace data filters (and their settings / values).
     * @summary Get workspace data filters for all workspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    getWorkspaceDataFiltersLayout(params: {}, options?: any): AxiosPromise<DeclarativeWorkspaceDataFilters>;

    /**
     * Retrieve current model of the workspace in declarative form.
     * @summary Get workspace layout
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    getWorkspaceLayout(
        params: {
            workspaceId: string;
        },
        options?: any,
    ): AxiosPromise<DeclarativeWorkspaceModel>;

    /**
     * Sets complete layout of workspaces, their hierarchy, models.
     * @summary Set all workspaces layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    getWorkspacesLayout(params: {}, options?: any): AxiosPromise<DeclarativeWorkspaces>;

    /**
     * Set complete layout of workspace, like model, ACLs, etc.
     * @summary Set workspace layout
     * @param {string} workspaceId
     * @param {DeclarativeWorkspaceModel} declarativeWorkspaceModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    putWorkspaceLayout(
        params: {
            workspaceId: string;
            declarativeWorkspaceModel: DeclarativeWorkspaceModel;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     * Set effective analytics model of the workspace.
     * @summary Set analytics model
     * @param {string} workspaceId
     * @param {DeclarativeAnalytics} declarativeAnalytics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    setAnalyticsModel(
        params: {
            workspaceId: string;
            declarativeAnalytics: DeclarativeAnalytics;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     * Set effective logical model of the workspace.
     * @summary Set logical model
     * @param {string} workspaceId
     * @param {DeclarativeModel} declarativeModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    setLogicalModel(
        params: {
            workspaceId: string;
            declarativeModel: DeclarativeModel;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     * Sets complete layout of organization, like workspaces, user-groups, etc.
     * @summary Set organization layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    setOrganizationLayout(params: {}, options?: any): AxiosPromise<void>;

    /**
     * Sets workspace data filters in all workspaces in entire organization.
     * @summary Set all workspace data filters
     * @param {DeclarativeWorkspaceDataFilters} declarativeWorkspaceDataFilters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    setWorkspaceDataFiltersLayout(
        params: {
            declarativeWorkspaceDataFilters: DeclarativeWorkspaceDataFilters;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     * Sets complete layout of workspaces, their hierarchy, models.
     * @summary Set all workspaces layout
     * @param {DeclarativeWorkspaces} declarativeWorkspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    setWorkspacesLayout(
        params: {
            declarativeWorkspaces: DeclarativeWorkspaces;
        },
        options?: any,
    ): AxiosPromise<void>;
}

/**
 * DeclarativeLayoutControllerApi - object-oriented interface
 * @export
 * @class DeclarativeLayoutControllerApi
 * @extends {BaseAPI}
 */
export class DeclarativeLayoutControllerApi extends BaseAPI
    implements DeclarativeLayoutControllerApiInterface {
    /**
     * Retrieve current analytics model of the workspace.
     * @summary Get analytics model
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public getAnalyticsModel(
        params: {
            workspaceId: string;
        },
        options?: any,
    ) {
        return DeclarativeLayoutControllerApiFp(this.configuration).getAnalyticsModel(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve current logical model of the workspace in declarative form.
     * @summary Get logical model
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public getLogicalModel(
        params: {
            workspaceId: string;
        },
        options?: any,
    ) {
        return DeclarativeLayoutControllerApiFp(this.configuration).getLogicalModel(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve complete layout of organization, workspaces, user-groups, etc.
     * @summary Get organization layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public getOrganizationLayout(params: {}, options?: any) {
        return DeclarativeLayoutControllerApiFp(this.configuration).getOrganizationLayout(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve all workspaces and related workspace data filters (and their settings / values).
     * @summary Get workspace data filters for all workspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public getWorkspaceDataFiltersLayout(params: {}, options?: any) {
        return DeclarativeLayoutControllerApiFp(this.configuration).getWorkspaceDataFiltersLayout(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     * Retrieve current model of the workspace in declarative form.
     * @summary Get workspace layout
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public getWorkspaceLayout(
        params: {
            workspaceId: string;
        },
        options?: any,
    ) {
        return DeclarativeLayoutControllerApiFp(this.configuration).getWorkspaceLayout(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Sets complete layout of workspaces, their hierarchy, models.
     * @summary Set all workspaces layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public getWorkspacesLayout(params: {}, options?: any) {
        return DeclarativeLayoutControllerApiFp(this.configuration).getWorkspacesLayout(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Set complete layout of workspace, like model, ACLs, etc.
     * @summary Set workspace layout
     * @param {string} workspaceId
     * @param {DeclarativeWorkspaceModel} declarativeWorkspaceModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public putWorkspaceLayout(
        params: {
            workspaceId: string;
            declarativeWorkspaceModel: DeclarativeWorkspaceModel;
        },
        options?: any,
    ) {
        return DeclarativeLayoutControllerApiFp(this.configuration).putWorkspaceLayout(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Set effective analytics model of the workspace.
     * @summary Set analytics model
     * @param {string} workspaceId
     * @param {DeclarativeAnalytics} declarativeAnalytics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public setAnalyticsModel(
        params: {
            workspaceId: string;
            declarativeAnalytics: DeclarativeAnalytics;
        },
        options?: any,
    ) {
        return DeclarativeLayoutControllerApiFp(this.configuration).setAnalyticsModel(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Set effective logical model of the workspace.
     * @summary Set logical model
     * @param {string} workspaceId
     * @param {DeclarativeModel} declarativeModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public setLogicalModel(
        params: {
            workspaceId: string;
            declarativeModel: DeclarativeModel;
        },
        options?: any,
    ) {
        return DeclarativeLayoutControllerApiFp(this.configuration).setLogicalModel(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Sets complete layout of organization, like workspaces, user-groups, etc.
     * @summary Set organization layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public setOrganizationLayout(params: {}, options?: any) {
        return DeclarativeLayoutControllerApiFp(this.configuration).setOrganizationLayout(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Sets workspace data filters in all workspaces in entire organization.
     * @summary Set all workspace data filters
     * @param {DeclarativeWorkspaceDataFilters} declarativeWorkspaceDataFilters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public setWorkspaceDataFiltersLayout(
        params: {
            declarativeWorkspaceDataFilters: DeclarativeWorkspaceDataFilters;
        },
        options?: any,
    ) {
        return DeclarativeLayoutControllerApiFp(this.configuration).setWorkspaceDataFiltersLayout(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     * Sets complete layout of workspaces, their hierarchy, models.
     * @summary Set all workspaces layout
     * @param {DeclarativeWorkspaces} declarativeWorkspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public setWorkspacesLayout(
        params: {
            declarativeWorkspaces: DeclarativeWorkspaces;
        },
        options?: any,
    ) {
        return DeclarativeLayoutControllerApiFp(this.configuration).setWorkspacesLayout(params, options)(
            this.axios,
            this.basePath,
        );
    }
}

/**
 * NotificationControllerApi - axios parameter creator
 * @export
 */
export const NotificationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Notification sets up all reports to be computed again with new data.
         * @summary Register an upload notification
         * @param {string} dataSourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUploadNotification(
            params: {
                dataSourceId: string;
            },
            options: any = {},
        ): RequestArgs {
            const { dataSourceId } = params;
            // verify required parameter 'dataSourceId' is not null or undefined
            if (dataSourceId === null || dataSourceId === undefined) {
                throw new RequiredError(
                    "dataSourceId",
                    "Required parameter dataSourceId was null or undefined when calling registerUploadNotification.",
                );
            }
            const localVarPath = `/api/actions/dataSources/{dataSourceId}/uploadNotification`.replace(
                `{${"dataSourceId"}}`,
                encodeURIComponent(String(dataSourceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * NotificationControllerApi - functional programming interface
 * @export
 */
export const NotificationControllerApiFp = function (configuration?: Configuration) {
    return {
        /**
         * Notification sets up all reports to be computed again with new data.
         * @summary Register an upload notification
         * @param {string} dataSourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUploadNotification(
            params: {
                dataSourceId: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = NotificationControllerApiAxiosParamCreator(
                configuration,
            ).registerUploadNotification(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * NotificationControllerApi - factory interface
 * @export
 */
export const NotificationControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         * Notification sets up all reports to be computed again with new data.
         * @summary Register an upload notification
         * @param {string} dataSourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUploadNotification(
            params: {
                dataSourceId: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return NotificationControllerApiFp(configuration).registerUploadNotification(params, options)(
                axios,
                basePath,
            );
        },
    };
};

/**
 * NotificationControllerApi - interface
 * @export
 * @interface NotificationControllerApi
 */
export interface NotificationControllerApiInterface {
    /**
     * Notification sets up all reports to be computed again with new data.
     * @summary Register an upload notification
     * @param {string} dataSourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationControllerApiInterface
     */
    registerUploadNotification(
        params: {
            dataSourceId: string;
        },
        options?: any,
    ): AxiosPromise<void>;
}

/**
 * NotificationControllerApi - object-oriented interface
 * @export
 * @class NotificationControllerApi
 * @extends {BaseAPI}
 */
export class NotificationControllerApi extends BaseAPI implements NotificationControllerApiInterface {
    /**
     * Notification sets up all reports to be computed again with new data.
     * @summary Register an upload notification
     * @param {string} dataSourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationControllerApi
     */
    public registerUploadNotification(
        params: {
            dataSourceId: string;
        },
        options?: any,
    ) {
        return NotificationControllerApiFp(this.configuration).registerUploadNotification(params, options)(
            this.axios,
            this.basePath,
        );
    }
}

/**
 * OptionsControllerApi - axios parameter creator
 * @export
 */
export const OptionsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves links for all options for different configurations.
         * @summary Links for all configuration options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOptions(params: {}, options: any = {}): RequestArgs {
            const {} = params;
            const localVarPath = `/api/options`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all supported data sources along with information about the used drivers.
         * @summary Get all available data source drivers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSourceDrivers(params: {}, options: any = {}): RequestArgs {
            const {} = params;
            const localVarPath = `/api/options/availableDrivers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * OptionsControllerApi - functional programming interface
 * @export
 */
export const OptionsControllerApiFp = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves links for all options for different configurations.
         * @summary Links for all configuration options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOptions(
            params: {},
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OptionsControllerApiAxiosParamCreator(configuration).getAllOptions(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a list of all supported data sources along with information about the used drivers.
         * @summary Get all available data source drivers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSourceDrivers(
            params: {},
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OptionsControllerApiAxiosParamCreator(
                configuration,
            ).getDataSourceDrivers(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * OptionsControllerApi - factory interface
 * @export
 */
export const OptionsControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         * Retrieves links for all options for different configurations.
         * @summary Links for all configuration options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOptions(params: {}, options?: any): AxiosPromise<void> {
            return OptionsControllerApiFp(configuration).getAllOptions(params, options)(axios, basePath);
        },
        /**
         * Retrieves a list of all supported data sources along with information about the used drivers.
         * @summary Get all available data source drivers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSourceDrivers(params: {}, options?: any): AxiosPromise<void> {
            return OptionsControllerApiFp(configuration).getDataSourceDrivers(params, options)(
                axios,
                basePath,
            );
        },
    };
};

/**
 * OptionsControllerApi - interface
 * @export
 * @interface OptionsControllerApi
 */
export interface OptionsControllerApiInterface {
    /**
     * Retrieves links for all options for different configurations.
     * @summary Links for all configuration options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptionsControllerApiInterface
     */
    getAllOptions(params: {}, options?: any): AxiosPromise<void>;

    /**
     * Retrieves a list of all supported data sources along with information about the used drivers.
     * @summary Get all available data source drivers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptionsControllerApiInterface
     */
    getDataSourceDrivers(params: {}, options?: any): AxiosPromise<void>;
}

/**
 * OptionsControllerApi - object-oriented interface
 * @export
 * @class OptionsControllerApi
 * @extends {BaseAPI}
 */
export class OptionsControllerApi extends BaseAPI implements OptionsControllerApiInterface {
    /**
     * Retrieves links for all options for different configurations.
     * @summary Links for all configuration options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptionsControllerApi
     */
    public getAllOptions(params: {}, options?: any) {
        return OptionsControllerApiFp(this.configuration).getAllOptions(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieves a list of all supported data sources along with information about the used drivers.
     * @summary Get all available data source drivers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptionsControllerApi
     */
    public getDataSourceDrivers(params: {}, options?: any) {
        return OptionsControllerApiFp(this.configuration).getDataSourceDrivers(params, options)(
            this.axios,
            this.basePath,
        );
    }
}

/**
 * OrganizationControllerApi - axios parameter creator
 * @export
 */
export const OrganizationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUsers(params: {}, options: any = {}): RequestArgs {
            const {} = params;
            const localVarPath = `/api/entities/organization`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * OrganizationControllerApi - functional programming interface
 * @export
 */
export const OrganizationControllerApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUsers(
            params: {},
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<
            | JsonApiDataSourceOutDocument
            | JsonApiACLOutDocument
            | JsonApiModelModuleOutDocument
            | JsonApiOrganizationOutDocument
            | JsonApiUserGroupOutDocument
            | JsonApiUserOutDocument
            | JsonApiWorkspaceOutDocument
        > {
            const localVarAxiosArgs = OrganizationControllerApiAxiosParamCreator(
                configuration,
            ).getOrganizationUsers(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * OrganizationControllerApi - factory interface
 * @export
 */
export const OrganizationControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUsers(
            params: {},
            options?: any,
        ): AxiosPromise<
            | JsonApiDataSourceOutDocument
            | JsonApiACLOutDocument
            | JsonApiModelModuleOutDocument
            | JsonApiOrganizationOutDocument
            | JsonApiUserGroupOutDocument
            | JsonApiUserOutDocument
            | JsonApiWorkspaceOutDocument
        > {
            return OrganizationControllerApiFp(configuration).getOrganizationUsers(params, options)(
                axios,
                basePath,
            );
        },
    };
};

/**
 * OrganizationControllerApi - interface
 * @export
 * @interface OrganizationControllerApi
 */
export interface OrganizationControllerApiInterface {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApiInterface
     */
    getOrganizationUsers(
        params: {},
        options?: any,
    ): AxiosPromise<
        | JsonApiDataSourceOutDocument
        | JsonApiACLOutDocument
        | JsonApiModelModuleOutDocument
        | JsonApiOrganizationOutDocument
        | JsonApiUserGroupOutDocument
        | JsonApiUserOutDocument
        | JsonApiWorkspaceOutDocument
    >;
}

/**
 * OrganizationControllerApi - object-oriented interface
 * @export
 * @class OrganizationControllerApi
 * @extends {BaseAPI}
 */
export class OrganizationControllerApi extends BaseAPI implements OrganizationControllerApiInterface {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    public getOrganizationUsers(params: {}, options?: any) {
        return OrganizationControllerApiFp(this.configuration).getOrganizationUsers(params, options)(
            this.axios,
            this.basePath,
        );
    }
}

/**
 * OrganizationModelControllerApi - axios parameter creator
 * @export
 */
export const OrganizationModelControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiACLInDocument} jsonApiACLInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityAcls(
            params: {
                workspaceId: string;
                jsonApiACLInDocument: JsonApiACLInDocument;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, jsonApiACLInDocument } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createChildEntityAcls.",
                );
            }
            // verify required parameter 'jsonApiACLInDocument' is not null or undefined
            if (jsonApiACLInDocument === null || jsonApiACLInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiACLInDocument",
                    "Required parameter jsonApiACLInDocument was null or undefined when calling createChildEntityAcls.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/children/acls`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiACLInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiACLInDocument !== undefined ? jsonApiACLInDocument : {})
                : jsonApiACLInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityDataSources(
            params: {
                workspaceId: string;
                jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, jsonApiDataSourceInDocument } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createChildEntityDataSources.",
                );
            }
            // verify required parameter 'jsonApiDataSourceInDocument' is not null or undefined
            if (jsonApiDataSourceInDocument === null || jsonApiDataSourceInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiDataSourceInDocument",
                    "Required parameter jsonApiDataSourceInDocument was null or undefined when calling createChildEntityDataSources.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/children/dataSources`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiDataSourceInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiDataSourceInDocument !== undefined ? jsonApiDataSourceInDocument : {})
                : jsonApiDataSourceInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiModelModuleInDocument} jsonApiModelModuleInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityModelModules(
            params: {
                workspaceId: string;
                jsonApiModelModuleInDocument: JsonApiModelModuleInDocument;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, jsonApiModelModuleInDocument } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createChildEntityModelModules.",
                );
            }
            // verify required parameter 'jsonApiModelModuleInDocument' is not null or undefined
            if (jsonApiModelModuleInDocument === null || jsonApiModelModuleInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiModelModuleInDocument",
                    "Required parameter jsonApiModelModuleInDocument was null or undefined when calling createChildEntityModelModules.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/children/modelModules`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiModelModuleInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiModelModuleInDocument !== undefined ? jsonApiModelModuleInDocument : {},
                  )
                : jsonApiModelModuleInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityOrganizations(
            params: {
                workspaceId: string;
                jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, jsonApiOrganizationInDocument } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createChildEntityOrganizations.",
                );
            }
            // verify required parameter 'jsonApiOrganizationInDocument' is not null or undefined
            if (jsonApiOrganizationInDocument === null || jsonApiOrganizationInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiOrganizationInDocument",
                    "Required parameter jsonApiOrganizationInDocument was null or undefined when calling createChildEntityOrganizations.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/children/organizations`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiOrganizationInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiOrganizationInDocument !== undefined ? jsonApiOrganizationInDocument : {},
                  )
                : jsonApiOrganizationInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityUserGroups(
            params: {
                workspaceId: string;
                jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, jsonApiUserGroupInDocument } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createChildEntityUserGroups.",
                );
            }
            // verify required parameter 'jsonApiUserGroupInDocument' is not null or undefined
            if (jsonApiUserGroupInDocument === null || jsonApiUserGroupInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiUserGroupInDocument",
                    "Required parameter jsonApiUserGroupInDocument was null or undefined when calling createChildEntityUserGroups.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/children/userGroups`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiUserGroupInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiUserGroupInDocument !== undefined ? jsonApiUserGroupInDocument : {})
                : jsonApiUserGroupInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiUserInDocument} jsonApiUserInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityUsers(
            params: {
                workspaceId: string;
                jsonApiUserInDocument: JsonApiUserInDocument;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, jsonApiUserInDocument } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createChildEntityUsers.",
                );
            }
            // verify required parameter 'jsonApiUserInDocument' is not null or undefined
            if (jsonApiUserInDocument === null || jsonApiUserInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiUserInDocument",
                    "Required parameter jsonApiUserInDocument was null or undefined when calling createChildEntityUsers.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/children/users`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiUserInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiUserInDocument !== undefined ? jsonApiUserInDocument : {})
                : jsonApiUserInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityWorkspaces(
            params: {
                workspaceId: string;
                jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, jsonApiWorkspaceInDocument } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createChildEntityWorkspaces.",
                );
            }
            // verify required parameter 'jsonApiWorkspaceInDocument' is not null or undefined
            if (jsonApiWorkspaceInDocument === null || jsonApiWorkspaceInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiWorkspaceInDocument",
                    "Required parameter jsonApiWorkspaceInDocument was null or undefined when calling createChildEntityWorkspaces.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/children/workspaces`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiWorkspaceInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiWorkspaceInDocument !== undefined ? jsonApiWorkspaceInDocument : {})
                : jsonApiWorkspaceInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {JsonApiACLInDocument} jsonApiACLInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityAcls(
            params: {
                jsonApiACLInDocument: JsonApiACLInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { jsonApiACLInDocument, variableParam, include } = params;
            // verify required parameter 'jsonApiACLInDocument' is not null or undefined
            if (jsonApiACLInDocument === null || jsonApiACLInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiACLInDocument",
                    "Required parameter jsonApiACLInDocument was null or undefined when calling createEntityAcls.",
                );
            }
            const localVarPath = `/api/entities/acls`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiACLInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiACLInDocument !== undefined ? jsonApiACLInDocument : {})
                : jsonApiACLInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityDataSources(
            params: {
                jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { jsonApiDataSourceInDocument, variableParam, include } = params;
            // verify required parameter 'jsonApiDataSourceInDocument' is not null or undefined
            if (jsonApiDataSourceInDocument === null || jsonApiDataSourceInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiDataSourceInDocument",
                    "Required parameter jsonApiDataSourceInDocument was null or undefined when calling createEntityDataSources.",
                );
            }
            const localVarPath = `/api/entities/dataSources`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiDataSourceInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiDataSourceInDocument !== undefined ? jsonApiDataSourceInDocument : {})
                : jsonApiDataSourceInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {JsonApiModelModuleInDocument} jsonApiModelModuleInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityModelModules(
            params: {
                jsonApiModelModuleInDocument: JsonApiModelModuleInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { jsonApiModelModuleInDocument, variableParam, include } = params;
            // verify required parameter 'jsonApiModelModuleInDocument' is not null or undefined
            if (jsonApiModelModuleInDocument === null || jsonApiModelModuleInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiModelModuleInDocument",
                    "Required parameter jsonApiModelModuleInDocument was null or undefined when calling createEntityModelModules.",
                );
            }
            const localVarPath = `/api/entities/modelModules`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiModelModuleInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiModelModuleInDocument !== undefined ? jsonApiModelModuleInDocument : {},
                  )
                : jsonApiModelModuleInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityOrganizations(
            params: {
                jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { jsonApiOrganizationInDocument, variableParam, include } = params;
            // verify required parameter 'jsonApiOrganizationInDocument' is not null or undefined
            if (jsonApiOrganizationInDocument === null || jsonApiOrganizationInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiOrganizationInDocument",
                    "Required parameter jsonApiOrganizationInDocument was null or undefined when calling createEntityOrganizations.",
                );
            }
            const localVarPath = `/api/entities/organizations`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiOrganizationInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiOrganizationInDocument !== undefined ? jsonApiOrganizationInDocument : {},
                  )
                : jsonApiOrganizationInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityUserGroups(
            params: {
                jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { jsonApiUserGroupInDocument, variableParam, include } = params;
            // verify required parameter 'jsonApiUserGroupInDocument' is not null or undefined
            if (jsonApiUserGroupInDocument === null || jsonApiUserGroupInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiUserGroupInDocument",
                    "Required parameter jsonApiUserGroupInDocument was null or undefined when calling createEntityUserGroups.",
                );
            }
            const localVarPath = `/api/entities/userGroups`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiUserGroupInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiUserGroupInDocument !== undefined ? jsonApiUserGroupInDocument : {})
                : jsonApiUserGroupInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {JsonApiUserInDocument} jsonApiUserInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityUsers(
            params: {
                jsonApiUserInDocument: JsonApiUserInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { jsonApiUserInDocument, variableParam, include } = params;
            // verify required parameter 'jsonApiUserInDocument' is not null or undefined
            if (jsonApiUserInDocument === null || jsonApiUserInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiUserInDocument",
                    "Required parameter jsonApiUserInDocument was null or undefined when calling createEntityUsers.",
                );
            }
            const localVarPath = `/api/entities/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiUserInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiUserInDocument !== undefined ? jsonApiUserInDocument : {})
                : jsonApiUserInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityWorkspaces(
            params: {
                jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { jsonApiWorkspaceInDocument, variableParam, include } = params;
            // verify required parameter 'jsonApiWorkspaceInDocument' is not null or undefined
            if (jsonApiWorkspaceInDocument === null || jsonApiWorkspaceInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiWorkspaceInDocument",
                    "Required parameter jsonApiWorkspaceInDocument was null or undefined when calling createEntityWorkspaces.",
                );
            }
            const localVarPath = `/api/entities/workspaces`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiWorkspaceInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiWorkspaceInDocument !== undefined ? jsonApiWorkspaceInDocument : {})
                : jsonApiWorkspaceInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} childWorkspaceId
         * @param {JsonApiACLInDocument} jsonApiACLInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkspaceDataFilterSettingEntityAcls(
            params: {
                workspaceId: string;
                childWorkspaceId: string;
                jsonApiACLInDocument: JsonApiACLInDocument;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, childWorkspaceId, jsonApiACLInDocument } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createWorkspaceDataFilterSettingEntityAcls.",
                );
            }
            // verify required parameter 'childWorkspaceId' is not null or undefined
            if (childWorkspaceId === null || childWorkspaceId === undefined) {
                throw new RequiredError(
                    "childWorkspaceId",
                    "Required parameter childWorkspaceId was null or undefined when calling createWorkspaceDataFilterSettingEntityAcls.",
                );
            }
            // verify required parameter 'jsonApiACLInDocument' is not null or undefined
            if (jsonApiACLInDocument === null || jsonApiACLInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiACLInDocument",
                    "Required parameter jsonApiACLInDocument was null or undefined when calling createWorkspaceDataFilterSettingEntityAcls.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/children/{childWorkspaceId}/acls`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"childWorkspaceId"}}`, encodeURIComponent(String(childWorkspaceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiACLInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiACLInDocument !== undefined ? jsonApiACLInDocument : {})
                : jsonApiACLInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} childWorkspaceId
         * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkspaceDataFilterSettingEntityDataSources(
            params: {
                workspaceId: string;
                childWorkspaceId: string;
                jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, childWorkspaceId, jsonApiDataSourceInDocument } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createWorkspaceDataFilterSettingEntityDataSources.",
                );
            }
            // verify required parameter 'childWorkspaceId' is not null or undefined
            if (childWorkspaceId === null || childWorkspaceId === undefined) {
                throw new RequiredError(
                    "childWorkspaceId",
                    "Required parameter childWorkspaceId was null or undefined when calling createWorkspaceDataFilterSettingEntityDataSources.",
                );
            }
            // verify required parameter 'jsonApiDataSourceInDocument' is not null or undefined
            if (jsonApiDataSourceInDocument === null || jsonApiDataSourceInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiDataSourceInDocument",
                    "Required parameter jsonApiDataSourceInDocument was null or undefined when calling createWorkspaceDataFilterSettingEntityDataSources.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/children/{childWorkspaceId}/dataSources`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"childWorkspaceId"}}`, encodeURIComponent(String(childWorkspaceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiDataSourceInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiDataSourceInDocument !== undefined ? jsonApiDataSourceInDocument : {})
                : jsonApiDataSourceInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} childWorkspaceId
         * @param {JsonApiModelModuleInDocument} jsonApiModelModuleInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkspaceDataFilterSettingEntityModelModules(
            params: {
                workspaceId: string;
                childWorkspaceId: string;
                jsonApiModelModuleInDocument: JsonApiModelModuleInDocument;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, childWorkspaceId, jsonApiModelModuleInDocument } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createWorkspaceDataFilterSettingEntityModelModules.",
                );
            }
            // verify required parameter 'childWorkspaceId' is not null or undefined
            if (childWorkspaceId === null || childWorkspaceId === undefined) {
                throw new RequiredError(
                    "childWorkspaceId",
                    "Required parameter childWorkspaceId was null or undefined when calling createWorkspaceDataFilterSettingEntityModelModules.",
                );
            }
            // verify required parameter 'jsonApiModelModuleInDocument' is not null or undefined
            if (jsonApiModelModuleInDocument === null || jsonApiModelModuleInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiModelModuleInDocument",
                    "Required parameter jsonApiModelModuleInDocument was null or undefined when calling createWorkspaceDataFilterSettingEntityModelModules.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/children/{childWorkspaceId}/modelModules`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"childWorkspaceId"}}`, encodeURIComponent(String(childWorkspaceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiModelModuleInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiModelModuleInDocument !== undefined ? jsonApiModelModuleInDocument : {},
                  )
                : jsonApiModelModuleInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} childWorkspaceId
         * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkspaceDataFilterSettingEntityOrganizations(
            params: {
                workspaceId: string;
                childWorkspaceId: string;
                jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, childWorkspaceId, jsonApiOrganizationInDocument } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createWorkspaceDataFilterSettingEntityOrganizations.",
                );
            }
            // verify required parameter 'childWorkspaceId' is not null or undefined
            if (childWorkspaceId === null || childWorkspaceId === undefined) {
                throw new RequiredError(
                    "childWorkspaceId",
                    "Required parameter childWorkspaceId was null or undefined when calling createWorkspaceDataFilterSettingEntityOrganizations.",
                );
            }
            // verify required parameter 'jsonApiOrganizationInDocument' is not null or undefined
            if (jsonApiOrganizationInDocument === null || jsonApiOrganizationInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiOrganizationInDocument",
                    "Required parameter jsonApiOrganizationInDocument was null or undefined when calling createWorkspaceDataFilterSettingEntityOrganizations.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/children/{childWorkspaceId}/organizations`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"childWorkspaceId"}}`, encodeURIComponent(String(childWorkspaceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiOrganizationInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiOrganizationInDocument !== undefined ? jsonApiOrganizationInDocument : {},
                  )
                : jsonApiOrganizationInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} childWorkspaceId
         * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkspaceDataFilterSettingEntityUserGroups(
            params: {
                workspaceId: string;
                childWorkspaceId: string;
                jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, childWorkspaceId, jsonApiUserGroupInDocument } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createWorkspaceDataFilterSettingEntityUserGroups.",
                );
            }
            // verify required parameter 'childWorkspaceId' is not null or undefined
            if (childWorkspaceId === null || childWorkspaceId === undefined) {
                throw new RequiredError(
                    "childWorkspaceId",
                    "Required parameter childWorkspaceId was null or undefined when calling createWorkspaceDataFilterSettingEntityUserGroups.",
                );
            }
            // verify required parameter 'jsonApiUserGroupInDocument' is not null or undefined
            if (jsonApiUserGroupInDocument === null || jsonApiUserGroupInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiUserGroupInDocument",
                    "Required parameter jsonApiUserGroupInDocument was null or undefined when calling createWorkspaceDataFilterSettingEntityUserGroups.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/children/{childWorkspaceId}/userGroups`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"childWorkspaceId"}}`, encodeURIComponent(String(childWorkspaceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiUserGroupInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiUserGroupInDocument !== undefined ? jsonApiUserGroupInDocument : {})
                : jsonApiUserGroupInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} childWorkspaceId
         * @param {JsonApiUserInDocument} jsonApiUserInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkspaceDataFilterSettingEntityUsers(
            params: {
                workspaceId: string;
                childWorkspaceId: string;
                jsonApiUserInDocument: JsonApiUserInDocument;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, childWorkspaceId, jsonApiUserInDocument } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createWorkspaceDataFilterSettingEntityUsers.",
                );
            }
            // verify required parameter 'childWorkspaceId' is not null or undefined
            if (childWorkspaceId === null || childWorkspaceId === undefined) {
                throw new RequiredError(
                    "childWorkspaceId",
                    "Required parameter childWorkspaceId was null or undefined when calling createWorkspaceDataFilterSettingEntityUsers.",
                );
            }
            // verify required parameter 'jsonApiUserInDocument' is not null or undefined
            if (jsonApiUserInDocument === null || jsonApiUserInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiUserInDocument",
                    "Required parameter jsonApiUserInDocument was null or undefined when calling createWorkspaceDataFilterSettingEntityUsers.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/children/{childWorkspaceId}/users`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"childWorkspaceId"}}`, encodeURIComponent(String(childWorkspaceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiUserInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiUserInDocument !== undefined ? jsonApiUserInDocument : {})
                : jsonApiUserInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} childWorkspaceId
         * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkspaceDataFilterSettingEntityWorkspaces(
            params: {
                workspaceId: string;
                childWorkspaceId: string;
                jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, childWorkspaceId, jsonApiWorkspaceInDocument } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createWorkspaceDataFilterSettingEntityWorkspaces.",
                );
            }
            // verify required parameter 'childWorkspaceId' is not null or undefined
            if (childWorkspaceId === null || childWorkspaceId === undefined) {
                throw new RequiredError(
                    "childWorkspaceId",
                    "Required parameter childWorkspaceId was null or undefined when calling createWorkspaceDataFilterSettingEntityWorkspaces.",
                );
            }
            // verify required parameter 'jsonApiWorkspaceInDocument' is not null or undefined
            if (jsonApiWorkspaceInDocument === null || jsonApiWorkspaceInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiWorkspaceInDocument",
                    "Required parameter jsonApiWorkspaceInDocument was null or undefined when calling createWorkspaceDataFilterSettingEntityWorkspaces.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/children/{childWorkspaceId}/workspaces`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"childWorkspaceId"}}`, encodeURIComponent(String(childWorkspaceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiWorkspaceInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiWorkspaceInDocument !== undefined ? jsonApiWorkspaceInDocument : {})
                : jsonApiWorkspaceInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityAcls(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): RequestArgs {
            const { id, variableParam } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling deleteEntityAcls.",
                );
            }
            const localVarPath = `/api/entities/acls/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityDataSources(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): RequestArgs {
            const { id, variableParam } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling deleteEntityDataSources.",
                );
            }
            const localVarPath = `/api/entities/dataSources/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityModelModules(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): RequestArgs {
            const { id, variableParam } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling deleteEntityModelModules.",
                );
            }
            const localVarPath = `/api/entities/modelModules/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityOrganizations(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): RequestArgs {
            const { id, variableParam } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling deleteEntityOrganizations.",
                );
            }
            const localVarPath = `/api/entities/organizations/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityUserGroups(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): RequestArgs {
            const { id, variableParam } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling deleteEntityUserGroups.",
                );
            }
            const localVarPath = `/api/entities/userGroups/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityUsers(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): RequestArgs {
            const { id, variableParam } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling deleteEntityUsers.",
                );
            }
            const localVarPath = `/api/entities/users/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityWorkspaces(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): RequestArgs {
            const { id, variableParam } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling deleteEntityWorkspaces.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesAcls(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { variableParam, include, page, size, sort } = params;
            const localVarPath = `/api/entities/acls`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDataSources(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { variableParam, include, page, size, sort } = params;
            const localVarPath = `/api/entities/dataSources`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesModelModules(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { variableParam, include, page, size, sort } = params;
            const localVarPath = `/api/entities/modelModules`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesOrganizations(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { variableParam, include, page, size, sort } = params;
            const localVarPath = `/api/entities/organizations`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesUserGroups(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { variableParam, include, page, size, sort } = params;
            const localVarPath = `/api/entities/userGroups`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesUsers(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { variableParam, include, page, size, sort } = params;
            const localVarPath = `/api/entities/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaces(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { variableParam, include, page, size, sort } = params;
            const localVarPath = `/api/entities/workspaces`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAcls(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityAcls.",
                );
            }
            const localVarPath = `/api/entities/acls/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDataSources(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityDataSources.",
                );
            }
            const localVarPath = `/api/entities/dataSources/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityModelModules(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityModelModules.",
                );
            }
            const localVarPath = `/api/entities/modelModules/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityOrganizations(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityOrganizations.",
                );
            }
            const localVarPath = `/api/entities/organizations/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityUserGroups(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityUserGroups.",
                );
            }
            const localVarPath = `/api/entities/userGroups/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityUsers(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityUsers.",
                );
            }
            const localVarPath = `/api/entities/users/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaces(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityWorkspaces.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiACLInDocument} jsonApiACLInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityAcls(
            params: {
                id: string;
                jsonApiACLInDocument: JsonApiACLInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, jsonApiACLInDocument, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling updateEntityAcls.",
                );
            }
            // verify required parameter 'jsonApiACLInDocument' is not null or undefined
            if (jsonApiACLInDocument === null || jsonApiACLInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiACLInDocument",
                    "Required parameter jsonApiACLInDocument was null or undefined when calling updateEntityAcls.",
                );
            }
            const localVarPath = `/api/entities/acls/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiACLInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiACLInDocument !== undefined ? jsonApiACLInDocument : {})
                : jsonApiACLInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityDataSources(
            params: {
                id: string;
                jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, jsonApiDataSourceInDocument, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling updateEntityDataSources.",
                );
            }
            // verify required parameter 'jsonApiDataSourceInDocument' is not null or undefined
            if (jsonApiDataSourceInDocument === null || jsonApiDataSourceInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiDataSourceInDocument",
                    "Required parameter jsonApiDataSourceInDocument was null or undefined when calling updateEntityDataSources.",
                );
            }
            const localVarPath = `/api/entities/dataSources/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiDataSourceInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiDataSourceInDocument !== undefined ? jsonApiDataSourceInDocument : {})
                : jsonApiDataSourceInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiModelModuleInDocument} jsonApiModelModuleInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityModelModules(
            params: {
                id: string;
                jsonApiModelModuleInDocument: JsonApiModelModuleInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, jsonApiModelModuleInDocument, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling updateEntityModelModules.",
                );
            }
            // verify required parameter 'jsonApiModelModuleInDocument' is not null or undefined
            if (jsonApiModelModuleInDocument === null || jsonApiModelModuleInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiModelModuleInDocument",
                    "Required parameter jsonApiModelModuleInDocument was null or undefined when calling updateEntityModelModules.",
                );
            }
            const localVarPath = `/api/entities/modelModules/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiModelModuleInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiModelModuleInDocument !== undefined ? jsonApiModelModuleInDocument : {},
                  )
                : jsonApiModelModuleInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityOrganizations(
            params: {
                id: string;
                jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, jsonApiOrganizationInDocument, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling updateEntityOrganizations.",
                );
            }
            // verify required parameter 'jsonApiOrganizationInDocument' is not null or undefined
            if (jsonApiOrganizationInDocument === null || jsonApiOrganizationInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiOrganizationInDocument",
                    "Required parameter jsonApiOrganizationInDocument was null or undefined when calling updateEntityOrganizations.",
                );
            }
            const localVarPath = `/api/entities/organizations/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiOrganizationInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiOrganizationInDocument !== undefined ? jsonApiOrganizationInDocument : {},
                  )
                : jsonApiOrganizationInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityUserGroups(
            params: {
                id: string;
                jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, jsonApiUserGroupInDocument, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling updateEntityUserGroups.",
                );
            }
            // verify required parameter 'jsonApiUserGroupInDocument' is not null or undefined
            if (jsonApiUserGroupInDocument === null || jsonApiUserGroupInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiUserGroupInDocument",
                    "Required parameter jsonApiUserGroupInDocument was null or undefined when calling updateEntityUserGroups.",
                );
            }
            const localVarPath = `/api/entities/userGroups/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiUserGroupInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiUserGroupInDocument !== undefined ? jsonApiUserGroupInDocument : {})
                : jsonApiUserGroupInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserInDocument} jsonApiUserInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityUsers(
            params: {
                id: string;
                jsonApiUserInDocument: JsonApiUserInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, jsonApiUserInDocument, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling updateEntityUsers.",
                );
            }
            // verify required parameter 'jsonApiUserInDocument' is not null or undefined
            if (jsonApiUserInDocument === null || jsonApiUserInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiUserInDocument",
                    "Required parameter jsonApiUserInDocument was null or undefined when calling updateEntityUsers.",
                );
            }
            const localVarPath = `/api/entities/users/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiUserInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiUserInDocument !== undefined ? jsonApiUserInDocument : {})
                : jsonApiUserInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityWorkspaces(
            params: {
                id: string;
                jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, jsonApiWorkspaceInDocument, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling updateEntityWorkspaces.",
                );
            }
            // verify required parameter 'jsonApiWorkspaceInDocument' is not null or undefined
            if (jsonApiWorkspaceInDocument === null || jsonApiWorkspaceInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiWorkspaceInDocument",
                    "Required parameter jsonApiWorkspaceInDocument was null or undefined when calling updateEntityWorkspaces.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiWorkspaceInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiWorkspaceInDocument !== undefined ? jsonApiWorkspaceInDocument : {})
                : jsonApiWorkspaceInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * OrganizationModelControllerApi - functional programming interface
 * @export
 */
export const OrganizationModelControllerApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiACLInDocument} jsonApiACLInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityAcls(
            params: {
                workspaceId: string;
                jsonApiACLInDocument: JsonApiACLInDocument;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiACLOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createChildEntityAcls(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityDataSources(
            params: {
                workspaceId: string;
                jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createChildEntityDataSources(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiModelModuleInDocument} jsonApiModelModuleInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityModelModules(
            params: {
                workspaceId: string;
                jsonApiModelModuleInDocument: JsonApiModelModuleInDocument;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiModelModuleOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createChildEntityModelModules(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityOrganizations(
            params: {
                workspaceId: string;
                jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createChildEntityOrganizations(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityUserGroups(
            params: {
                workspaceId: string;
                jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createChildEntityUserGroups(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiUserInDocument} jsonApiUserInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityUsers(
            params: {
                workspaceId: string;
                jsonApiUserInDocument: JsonApiUserInDocument;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createChildEntityUsers(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityWorkspaces(
            params: {
                workspaceId: string;
                jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createChildEntityWorkspaces(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {JsonApiACLInDocument} jsonApiACLInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityAcls(
            params: {
                jsonApiACLInDocument: JsonApiACLInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiACLOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createEntityAcls(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityDataSources(
            params: {
                jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createEntityDataSources(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {JsonApiModelModuleInDocument} jsonApiModelModuleInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityModelModules(
            params: {
                jsonApiModelModuleInDocument: JsonApiModelModuleInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiModelModuleOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createEntityModelModules(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityOrganizations(
            params: {
                jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createEntityOrganizations(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityUserGroups(
            params: {
                jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createEntityUserGroups(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {JsonApiUserInDocument} jsonApiUserInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityUsers(
            params: {
                jsonApiUserInDocument: JsonApiUserInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createEntityUsers(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityWorkspaces(
            params: {
                jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createEntityWorkspaces(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} childWorkspaceId
         * @param {JsonApiACLInDocument} jsonApiACLInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkspaceDataFilterSettingEntityAcls(
            params: {
                workspaceId: string;
                childWorkspaceId: string;
                jsonApiACLInDocument: JsonApiACLInDocument;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiACLOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createWorkspaceDataFilterSettingEntityAcls(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} childWorkspaceId
         * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkspaceDataFilterSettingEntityDataSources(
            params: {
                workspaceId: string;
                childWorkspaceId: string;
                jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createWorkspaceDataFilterSettingEntityDataSources(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} childWorkspaceId
         * @param {JsonApiModelModuleInDocument} jsonApiModelModuleInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkspaceDataFilterSettingEntityModelModules(
            params: {
                workspaceId: string;
                childWorkspaceId: string;
                jsonApiModelModuleInDocument: JsonApiModelModuleInDocument;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiModelModuleOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createWorkspaceDataFilterSettingEntityModelModules(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} childWorkspaceId
         * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkspaceDataFilterSettingEntityOrganizations(
            params: {
                workspaceId: string;
                childWorkspaceId: string;
                jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createWorkspaceDataFilterSettingEntityOrganizations(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} childWorkspaceId
         * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkspaceDataFilterSettingEntityUserGroups(
            params: {
                workspaceId: string;
                childWorkspaceId: string;
                jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createWorkspaceDataFilterSettingEntityUserGroups(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} childWorkspaceId
         * @param {JsonApiUserInDocument} jsonApiUserInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkspaceDataFilterSettingEntityUsers(
            params: {
                workspaceId: string;
                childWorkspaceId: string;
                jsonApiUserInDocument: JsonApiUserInDocument;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createWorkspaceDataFilterSettingEntityUsers(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} childWorkspaceId
         * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkspaceDataFilterSettingEntityWorkspaces(
            params: {
                workspaceId: string;
                childWorkspaceId: string;
                jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createWorkspaceDataFilterSettingEntityWorkspaces(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityAcls(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityAcls(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityDataSources(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityDataSources(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityModelModules(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityModelModules(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityOrganizations(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityOrganizations(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityUserGroups(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityUserGroups(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityUsers(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityUsers(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityWorkspaces(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityWorkspaces(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesAcls(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiACLOutList> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesAcls(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDataSources(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceOutList> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesDataSources(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesModelModules(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiModelModuleOutList> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesModelModules(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesOrganizations(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationOutList> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesOrganizations(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesUserGroups(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupOutList> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesUserGroups(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesUsers(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserOutList> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesUsers(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaces(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceOutList> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesWorkspaces(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAcls(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiACLOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntityAcls(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDataSources(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntityDataSources(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityModelModules(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiModelModuleOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntityModelModules(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityOrganizations(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntityOrganizations(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityUserGroups(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntityUserGroups(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityUsers(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntityUsers(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaces(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntityWorkspaces(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiACLInDocument} jsonApiACLInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityAcls(
            params: {
                id: string;
                jsonApiACLInDocument: JsonApiACLInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiACLOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityAcls(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityDataSources(
            params: {
                id: string;
                jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityDataSources(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiModelModuleInDocument} jsonApiModelModuleInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityModelModules(
            params: {
                id: string;
                jsonApiModelModuleInDocument: JsonApiModelModuleInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiModelModuleOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityModelModules(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityOrganizations(
            params: {
                id: string;
                jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityOrganizations(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityUserGroups(
            params: {
                id: string;
                jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityUserGroups(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserInDocument} jsonApiUserInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityUsers(
            params: {
                id: string;
                jsonApiUserInDocument: JsonApiUserInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityUsers(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityWorkspaces(
            params: {
                id: string;
                jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceOutDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityWorkspaces(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * OrganizationModelControllerApi - factory interface
 * @export
 */
export const OrganizationModelControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiACLInDocument} jsonApiACLInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityAcls(
            params: {
                workspaceId: string;
                jsonApiACLInDocument: JsonApiACLInDocument;
            },
            options?: any,
        ): AxiosPromise<JsonApiACLOutDocument> {
            return OrganizationModelControllerApiFp(configuration).createChildEntityAcls(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityDataSources(
            params: {
                workspaceId: string;
                jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
            },
            options?: any,
        ): AxiosPromise<JsonApiDataSourceOutDocument> {
            return OrganizationModelControllerApiFp(configuration).createChildEntityDataSources(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiModelModuleInDocument} jsonApiModelModuleInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityModelModules(
            params: {
                workspaceId: string;
                jsonApiModelModuleInDocument: JsonApiModelModuleInDocument;
            },
            options?: any,
        ): AxiosPromise<JsonApiModelModuleOutDocument> {
            return OrganizationModelControllerApiFp(configuration).createChildEntityModelModules(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityOrganizations(
            params: {
                workspaceId: string;
                jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
            },
            options?: any,
        ): AxiosPromise<JsonApiOrganizationOutDocument> {
            return OrganizationModelControllerApiFp(configuration).createChildEntityOrganizations(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityUserGroups(
            params: {
                workspaceId: string;
                jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
            },
            options?: any,
        ): AxiosPromise<JsonApiUserGroupOutDocument> {
            return OrganizationModelControllerApiFp(configuration).createChildEntityUserGroups(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiUserInDocument} jsonApiUserInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityUsers(
            params: {
                workspaceId: string;
                jsonApiUserInDocument: JsonApiUserInDocument;
            },
            options?: any,
        ): AxiosPromise<JsonApiUserOutDocument> {
            return OrganizationModelControllerApiFp(configuration).createChildEntityUsers(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityWorkspaces(
            params: {
                workspaceId: string;
                jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
            },
            options?: any,
        ): AxiosPromise<JsonApiWorkspaceOutDocument> {
            return OrganizationModelControllerApiFp(configuration).createChildEntityWorkspaces(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {JsonApiACLInDocument} jsonApiACLInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityAcls(
            params: {
                jsonApiACLInDocument: JsonApiACLInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiACLOutDocument> {
            return OrganizationModelControllerApiFp(configuration).createEntityAcls(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityDataSources(
            params: {
                jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiDataSourceOutDocument> {
            return OrganizationModelControllerApiFp(configuration).createEntityDataSources(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {JsonApiModelModuleInDocument} jsonApiModelModuleInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityModelModules(
            params: {
                jsonApiModelModuleInDocument: JsonApiModelModuleInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiModelModuleOutDocument> {
            return OrganizationModelControllerApiFp(configuration).createEntityModelModules(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityOrganizations(
            params: {
                jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiOrganizationOutDocument> {
            return OrganizationModelControllerApiFp(configuration).createEntityOrganizations(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityUserGroups(
            params: {
                jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiUserGroupOutDocument> {
            return OrganizationModelControllerApiFp(configuration).createEntityUserGroups(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {JsonApiUserInDocument} jsonApiUserInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityUsers(
            params: {
                jsonApiUserInDocument: JsonApiUserInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiUserOutDocument> {
            return OrganizationModelControllerApiFp(configuration).createEntityUsers(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityWorkspaces(
            params: {
                jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiWorkspaceOutDocument> {
            return OrganizationModelControllerApiFp(configuration).createEntityWorkspaces(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} childWorkspaceId
         * @param {JsonApiACLInDocument} jsonApiACLInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkspaceDataFilterSettingEntityAcls(
            params: {
                workspaceId: string;
                childWorkspaceId: string;
                jsonApiACLInDocument: JsonApiACLInDocument;
            },
            options?: any,
        ): AxiosPromise<JsonApiACLOutDocument> {
            return OrganizationModelControllerApiFp(configuration).createWorkspaceDataFilterSettingEntityAcls(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} childWorkspaceId
         * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkspaceDataFilterSettingEntityDataSources(
            params: {
                workspaceId: string;
                childWorkspaceId: string;
                jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
            },
            options?: any,
        ): AxiosPromise<JsonApiDataSourceOutDocument> {
            return OrganizationModelControllerApiFp(
                configuration,
            ).createWorkspaceDataFilterSettingEntityDataSources(params, options)(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} childWorkspaceId
         * @param {JsonApiModelModuleInDocument} jsonApiModelModuleInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkspaceDataFilterSettingEntityModelModules(
            params: {
                workspaceId: string;
                childWorkspaceId: string;
                jsonApiModelModuleInDocument: JsonApiModelModuleInDocument;
            },
            options?: any,
        ): AxiosPromise<JsonApiModelModuleOutDocument> {
            return OrganizationModelControllerApiFp(
                configuration,
            ).createWorkspaceDataFilterSettingEntityModelModules(params, options)(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} childWorkspaceId
         * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkspaceDataFilterSettingEntityOrganizations(
            params: {
                workspaceId: string;
                childWorkspaceId: string;
                jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
            },
            options?: any,
        ): AxiosPromise<JsonApiOrganizationOutDocument> {
            return OrganizationModelControllerApiFp(
                configuration,
            ).createWorkspaceDataFilterSettingEntityOrganizations(params, options)(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} childWorkspaceId
         * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkspaceDataFilterSettingEntityUserGroups(
            params: {
                workspaceId: string;
                childWorkspaceId: string;
                jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
            },
            options?: any,
        ): AxiosPromise<JsonApiUserGroupOutDocument> {
            return OrganizationModelControllerApiFp(
                configuration,
            ).createWorkspaceDataFilterSettingEntityUserGroups(params, options)(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} childWorkspaceId
         * @param {JsonApiUserInDocument} jsonApiUserInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkspaceDataFilterSettingEntityUsers(
            params: {
                workspaceId: string;
                childWorkspaceId: string;
                jsonApiUserInDocument: JsonApiUserInDocument;
            },
            options?: any,
        ): AxiosPromise<JsonApiUserOutDocument> {
            return OrganizationModelControllerApiFp(
                configuration,
            ).createWorkspaceDataFilterSettingEntityUsers(params, options)(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} childWorkspaceId
         * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkspaceDataFilterSettingEntityWorkspaces(
            params: {
                workspaceId: string;
                childWorkspaceId: string;
                jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
            },
            options?: any,
        ): AxiosPromise<JsonApiWorkspaceOutDocument> {
            return OrganizationModelControllerApiFp(
                configuration,
            ).createWorkspaceDataFilterSettingEntityWorkspaces(params, options)(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityAcls(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options?: any,
        ): AxiosPromise<void> {
            return OrganizationModelControllerApiFp(configuration).deleteEntityAcls(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityDataSources(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options?: any,
        ): AxiosPromise<void> {
            return OrganizationModelControllerApiFp(configuration).deleteEntityDataSources(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityModelModules(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options?: any,
        ): AxiosPromise<void> {
            return OrganizationModelControllerApiFp(configuration).deleteEntityModelModules(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityOrganizations(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options?: any,
        ): AxiosPromise<void> {
            return OrganizationModelControllerApiFp(configuration).deleteEntityOrganizations(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityUserGroups(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options?: any,
        ): AxiosPromise<void> {
            return OrganizationModelControllerApiFp(configuration).deleteEntityUserGroups(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityUsers(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options?: any,
        ): AxiosPromise<void> {
            return OrganizationModelControllerApiFp(configuration).deleteEntityUsers(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityWorkspaces(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options?: any,
        ): AxiosPromise<void> {
            return OrganizationModelControllerApiFp(configuration).deleteEntityWorkspaces(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesAcls(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiACLOutList> {
            return OrganizationModelControllerApiFp(configuration).getAllEntitiesAcls(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDataSources(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiDataSourceOutList> {
            return OrganizationModelControllerApiFp(configuration).getAllEntitiesDataSources(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesModelModules(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiModelModuleOutList> {
            return OrganizationModelControllerApiFp(configuration).getAllEntitiesModelModules(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesOrganizations(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiOrganizationOutList> {
            return OrganizationModelControllerApiFp(configuration).getAllEntitiesOrganizations(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesUserGroups(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiUserGroupOutList> {
            return OrganizationModelControllerApiFp(configuration).getAllEntitiesUserGroups(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesUsers(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiUserOutList> {
            return OrganizationModelControllerApiFp(configuration).getAllEntitiesUsers(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaces(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiWorkspaceOutList> {
            return OrganizationModelControllerApiFp(configuration).getAllEntitiesWorkspaces(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAcls(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiACLOutDocument> {
            return OrganizationModelControllerApiFp(configuration).getEntityAcls(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDataSources(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiDataSourceOutDocument> {
            return OrganizationModelControllerApiFp(configuration).getEntityDataSources(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityModelModules(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiModelModuleOutDocument> {
            return OrganizationModelControllerApiFp(configuration).getEntityModelModules(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityOrganizations(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiOrganizationOutDocument> {
            return OrganizationModelControllerApiFp(configuration).getEntityOrganizations(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityUserGroups(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiUserGroupOutDocument> {
            return OrganizationModelControllerApiFp(configuration).getEntityUserGroups(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityUsers(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiUserOutDocument> {
            return OrganizationModelControllerApiFp(configuration).getEntityUsers(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaces(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiWorkspaceOutDocument> {
            return OrganizationModelControllerApiFp(configuration).getEntityWorkspaces(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiACLInDocument} jsonApiACLInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityAcls(
            params: {
                id: string;
                jsonApiACLInDocument: JsonApiACLInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiACLOutDocument> {
            return OrganizationModelControllerApiFp(configuration).updateEntityAcls(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityDataSources(
            params: {
                id: string;
                jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiDataSourceOutDocument> {
            return OrganizationModelControllerApiFp(configuration).updateEntityDataSources(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiModelModuleInDocument} jsonApiModelModuleInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityModelModules(
            params: {
                id: string;
                jsonApiModelModuleInDocument: JsonApiModelModuleInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiModelModuleOutDocument> {
            return OrganizationModelControllerApiFp(configuration).updateEntityModelModules(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityOrganizations(
            params: {
                id: string;
                jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiOrganizationOutDocument> {
            return OrganizationModelControllerApiFp(configuration).updateEntityOrganizations(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityUserGroups(
            params: {
                id: string;
                jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiUserGroupOutDocument> {
            return OrganizationModelControllerApiFp(configuration).updateEntityUserGroups(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserInDocument} jsonApiUserInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityUsers(
            params: {
                id: string;
                jsonApiUserInDocument: JsonApiUserInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiUserOutDocument> {
            return OrganizationModelControllerApiFp(configuration).updateEntityUsers(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityWorkspaces(
            params: {
                id: string;
                jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiWorkspaceOutDocument> {
            return OrganizationModelControllerApiFp(configuration).updateEntityWorkspaces(params, options)(
                axios,
                basePath,
            );
        },
    };
};

/**
 * OrganizationModelControllerApi - interface
 * @export
 * @interface OrganizationModelControllerApi
 */
export interface OrganizationModelControllerApiInterface {
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiACLInDocument} jsonApiACLInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createChildEntityAcls(
        params: {
            workspaceId: string;
            jsonApiACLInDocument: JsonApiACLInDocument;
        },
        options?: any,
    ): AxiosPromise<JsonApiACLOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createChildEntityDataSources(
        params: {
            workspaceId: string;
            jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
        },
        options?: any,
    ): AxiosPromise<JsonApiDataSourceOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiModelModuleInDocument} jsonApiModelModuleInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createChildEntityModelModules(
        params: {
            workspaceId: string;
            jsonApiModelModuleInDocument: JsonApiModelModuleInDocument;
        },
        options?: any,
    ): AxiosPromise<JsonApiModelModuleOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createChildEntityOrganizations(
        params: {
            workspaceId: string;
            jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
        },
        options?: any,
    ): AxiosPromise<JsonApiOrganizationOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createChildEntityUserGroups(
        params: {
            workspaceId: string;
            jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
        },
        options?: any,
    ): AxiosPromise<JsonApiUserGroupOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createChildEntityUsers(
        params: {
            workspaceId: string;
            jsonApiUserInDocument: JsonApiUserInDocument;
        },
        options?: any,
    ): AxiosPromise<JsonApiUserOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createChildEntityWorkspaces(
        params: {
            workspaceId: string;
            jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
        },
        options?: any,
    ): AxiosPromise<JsonApiWorkspaceOutDocument>;

    /**
     *
     * @param {JsonApiACLInDocument} jsonApiACLInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createEntityAcls(
        params: {
            jsonApiACLInDocument: JsonApiACLInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiACLOutDocument>;

    /**
     *
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createEntityDataSources(
        params: {
            jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiDataSourceOutDocument>;

    /**
     *
     * @param {JsonApiModelModuleInDocument} jsonApiModelModuleInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createEntityModelModules(
        params: {
            jsonApiModelModuleInDocument: JsonApiModelModuleInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiModelModuleOutDocument>;

    /**
     *
     * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createEntityOrganizations(
        params: {
            jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiOrganizationOutDocument>;

    /**
     *
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createEntityUserGroups(
        params: {
            jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiUserGroupOutDocument>;

    /**
     *
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createEntityUsers(
        params: {
            jsonApiUserInDocument: JsonApiUserInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiUserOutDocument>;

    /**
     *
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createEntityWorkspaces(
        params: {
            jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiWorkspaceOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} childWorkspaceId
     * @param {JsonApiACLInDocument} jsonApiACLInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createWorkspaceDataFilterSettingEntityAcls(
        params: {
            workspaceId: string;
            childWorkspaceId: string;
            jsonApiACLInDocument: JsonApiACLInDocument;
        },
        options?: any,
    ): AxiosPromise<JsonApiACLOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} childWorkspaceId
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createWorkspaceDataFilterSettingEntityDataSources(
        params: {
            workspaceId: string;
            childWorkspaceId: string;
            jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
        },
        options?: any,
    ): AxiosPromise<JsonApiDataSourceOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} childWorkspaceId
     * @param {JsonApiModelModuleInDocument} jsonApiModelModuleInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createWorkspaceDataFilterSettingEntityModelModules(
        params: {
            workspaceId: string;
            childWorkspaceId: string;
            jsonApiModelModuleInDocument: JsonApiModelModuleInDocument;
        },
        options?: any,
    ): AxiosPromise<JsonApiModelModuleOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} childWorkspaceId
     * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createWorkspaceDataFilterSettingEntityOrganizations(
        params: {
            workspaceId: string;
            childWorkspaceId: string;
            jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
        },
        options?: any,
    ): AxiosPromise<JsonApiOrganizationOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} childWorkspaceId
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createWorkspaceDataFilterSettingEntityUserGroups(
        params: {
            workspaceId: string;
            childWorkspaceId: string;
            jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
        },
        options?: any,
    ): AxiosPromise<JsonApiUserGroupOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} childWorkspaceId
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createWorkspaceDataFilterSettingEntityUsers(
        params: {
            workspaceId: string;
            childWorkspaceId: string;
            jsonApiUserInDocument: JsonApiUserInDocument;
        },
        options?: any,
    ): AxiosPromise<JsonApiUserOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} childWorkspaceId
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createWorkspaceDataFilterSettingEntityWorkspaces(
        params: {
            workspaceId: string;
            childWorkspaceId: string;
            jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
        },
        options?: any,
    ): AxiosPromise<JsonApiWorkspaceOutDocument>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    deleteEntityAcls(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    deleteEntityDataSources(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    deleteEntityModelModules(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    deleteEntityOrganizations(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    deleteEntityUserGroups(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    deleteEntityUsers(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    deleteEntityWorkspaces(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesAcls(
        params: {
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiACLOutList>;

    /**
     *
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesDataSources(
        params: {
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiDataSourceOutList>;

    /**
     *
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesModelModules(
        params: {
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiModelModuleOutList>;

    /**
     *
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesOrganizations(
        params: {
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiOrganizationOutList>;

    /**
     *
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesUserGroups(
        params: {
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiUserGroupOutList>;

    /**
     *
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesUsers(
        params: {
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiUserOutList>;

    /**
     *
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesWorkspaces(
        params: {
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiWorkspaceOutList>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityAcls(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiACLOutDocument>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityDataSources(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiDataSourceOutDocument>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityModelModules(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiModelModuleOutDocument>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityOrganizations(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiOrganizationOutDocument>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityUserGroups(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiUserGroupOutDocument>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityUsers(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiUserOutDocument>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityWorkspaces(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiWorkspaceOutDocument>;

    /**
     *
     * @param {string} id
     * @param {JsonApiACLInDocument} jsonApiACLInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    updateEntityAcls(
        params: {
            id: string;
            jsonApiACLInDocument: JsonApiACLInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiACLOutDocument>;

    /**
     *
     * @param {string} id
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    updateEntityDataSources(
        params: {
            id: string;
            jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiDataSourceOutDocument>;

    /**
     *
     * @param {string} id
     * @param {JsonApiModelModuleInDocument} jsonApiModelModuleInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    updateEntityModelModules(
        params: {
            id: string;
            jsonApiModelModuleInDocument: JsonApiModelModuleInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiModelModuleOutDocument>;

    /**
     *
     * @param {string} id
     * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    updateEntityOrganizations(
        params: {
            id: string;
            jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiOrganizationOutDocument>;

    /**
     *
     * @param {string} id
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    updateEntityUserGroups(
        params: {
            id: string;
            jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiUserGroupOutDocument>;

    /**
     *
     * @param {string} id
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    updateEntityUsers(
        params: {
            id: string;
            jsonApiUserInDocument: JsonApiUserInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiUserOutDocument>;

    /**
     *
     * @param {string} id
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    updateEntityWorkspaces(
        params: {
            id: string;
            jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiWorkspaceOutDocument>;
}

/**
 * OrganizationModelControllerApi - object-oriented interface
 * @export
 * @class OrganizationModelControllerApi
 * @extends {BaseAPI}
 */
export class OrganizationModelControllerApi extends BaseAPI
    implements OrganizationModelControllerApiInterface {
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiACLInDocument} jsonApiACLInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createChildEntityAcls(
        params: {
            workspaceId: string;
            jsonApiACLInDocument: JsonApiACLInDocument;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createChildEntityAcls(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createChildEntityDataSources(
        params: {
            workspaceId: string;
            jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createChildEntityDataSources(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiModelModuleInDocument} jsonApiModelModuleInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createChildEntityModelModules(
        params: {
            workspaceId: string;
            jsonApiModelModuleInDocument: JsonApiModelModuleInDocument;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createChildEntityModelModules(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createChildEntityOrganizations(
        params: {
            workspaceId: string;
            jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createChildEntityOrganizations(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createChildEntityUserGroups(
        params: {
            workspaceId: string;
            jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createChildEntityUserGroups(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createChildEntityUsers(
        params: {
            workspaceId: string;
            jsonApiUserInDocument: JsonApiUserInDocument;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createChildEntityUsers(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createChildEntityWorkspaces(
        params: {
            workspaceId: string;
            jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createChildEntityWorkspaces(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {JsonApiACLInDocument} jsonApiACLInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createEntityAcls(
        params: {
            jsonApiACLInDocument: JsonApiACLInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createEntityAcls(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createEntityDataSources(
        params: {
            jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createEntityDataSources(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {JsonApiModelModuleInDocument} jsonApiModelModuleInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createEntityModelModules(
        params: {
            jsonApiModelModuleInDocument: JsonApiModelModuleInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createEntityModelModules(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createEntityOrganizations(
        params: {
            jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createEntityOrganizations(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createEntityUserGroups(
        params: {
            jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createEntityUserGroups(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createEntityUsers(
        params: {
            jsonApiUserInDocument: JsonApiUserInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createEntityUsers(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createEntityWorkspaces(
        params: {
            jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createEntityWorkspaces(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} childWorkspaceId
     * @param {JsonApiACLInDocument} jsonApiACLInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createWorkspaceDataFilterSettingEntityAcls(
        params: {
            workspaceId: string;
            childWorkspaceId: string;
            jsonApiACLInDocument: JsonApiACLInDocument;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(
            this.configuration,
        ).createWorkspaceDataFilterSettingEntityAcls(params, options)(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} childWorkspaceId
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createWorkspaceDataFilterSettingEntityDataSources(
        params: {
            workspaceId: string;
            childWorkspaceId: string;
            jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(
            this.configuration,
        ).createWorkspaceDataFilterSettingEntityDataSources(params, options)(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} childWorkspaceId
     * @param {JsonApiModelModuleInDocument} jsonApiModelModuleInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createWorkspaceDataFilterSettingEntityModelModules(
        params: {
            workspaceId: string;
            childWorkspaceId: string;
            jsonApiModelModuleInDocument: JsonApiModelModuleInDocument;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(
            this.configuration,
        ).createWorkspaceDataFilterSettingEntityModelModules(params, options)(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} childWorkspaceId
     * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createWorkspaceDataFilterSettingEntityOrganizations(
        params: {
            workspaceId: string;
            childWorkspaceId: string;
            jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(
            this.configuration,
        ).createWorkspaceDataFilterSettingEntityOrganizations(params, options)(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} childWorkspaceId
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createWorkspaceDataFilterSettingEntityUserGroups(
        params: {
            workspaceId: string;
            childWorkspaceId: string;
            jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(
            this.configuration,
        ).createWorkspaceDataFilterSettingEntityUserGroups(params, options)(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} childWorkspaceId
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createWorkspaceDataFilterSettingEntityUsers(
        params: {
            workspaceId: string;
            childWorkspaceId: string;
            jsonApiUserInDocument: JsonApiUserInDocument;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(
            this.configuration,
        ).createWorkspaceDataFilterSettingEntityUsers(params, options)(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} childWorkspaceId
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createWorkspaceDataFilterSettingEntityWorkspaces(
        params: {
            workspaceId: string;
            childWorkspaceId: string;
            jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(
            this.configuration,
        ).createWorkspaceDataFilterSettingEntityWorkspaces(params, options)(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public deleteEntityAcls(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).deleteEntityAcls(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public deleteEntityDataSources(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).deleteEntityDataSources(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public deleteEntityModelModules(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).deleteEntityModelModules(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public deleteEntityOrganizations(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).deleteEntityOrganizations(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public deleteEntityUserGroups(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).deleteEntityUserGroups(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public deleteEntityUsers(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).deleteEntityUsers(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public deleteEntityWorkspaces(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).deleteEntityWorkspaces(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getAllEntitiesAcls(
        params: {
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getAllEntitiesAcls(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getAllEntitiesDataSources(
        params: {
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getAllEntitiesDataSources(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getAllEntitiesModelModules(
        params: {
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getAllEntitiesModelModules(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getAllEntitiesOrganizations(
        params: {
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getAllEntitiesOrganizations(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getAllEntitiesUserGroups(
        params: {
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getAllEntitiesUserGroups(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getAllEntitiesUsers(
        params: {
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getAllEntitiesUsers(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getAllEntitiesWorkspaces(
        params: {
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getAllEntitiesWorkspaces(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getEntityAcls(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getEntityAcls(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getEntityDataSources(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getEntityDataSources(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getEntityModelModules(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getEntityModelModules(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getEntityOrganizations(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getEntityOrganizations(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getEntityUserGroups(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getEntityUserGroups(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getEntityUsers(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getEntityUsers(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getEntityWorkspaces(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getEntityWorkspaces(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {JsonApiACLInDocument} jsonApiACLInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public updateEntityAcls(
        params: {
            id: string;
            jsonApiACLInDocument: JsonApiACLInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).updateEntityAcls(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public updateEntityDataSources(
        params: {
            id: string;
            jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).updateEntityDataSources(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {JsonApiModelModuleInDocument} jsonApiModelModuleInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public updateEntityModelModules(
        params: {
            id: string;
            jsonApiModelModuleInDocument: JsonApiModelModuleInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).updateEntityModelModules(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public updateEntityOrganizations(
        params: {
            id: string;
            jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).updateEntityOrganizations(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} id
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public updateEntityUserGroups(
        params: {
            id: string;
            jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).updateEntityUserGroups(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public updateEntityUsers(
        params: {
            id: string;
            jsonApiUserInDocument: JsonApiUserInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).updateEntityUsers(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public updateEntityWorkspaces(
        params: {
            id: string;
            jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).updateEntityWorkspaces(params, options)(
            this.axios,
            this.basePath,
        );
    }
}

/**
 * UserModelControllerApi - axios parameter creator
 * @export
 */
export const UserModelControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} userId
         * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityApiTokens(
            params: {
                userId: string;
                jsonApiApiTokenInDocument: JsonApiApiTokenInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { userId, jsonApiApiTokenInDocument, variableParam, include } = params;
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError(
                    "userId",
                    "Required parameter userId was null or undefined when calling createEntityApiTokens.",
                );
            }
            // verify required parameter 'jsonApiApiTokenInDocument' is not null or undefined
            if (jsonApiApiTokenInDocument === null || jsonApiApiTokenInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiApiTokenInDocument",
                    "Required parameter jsonApiApiTokenInDocument was null or undefined when calling createEntityApiTokens.",
                );
            }
            const localVarPath = `/api/entities/users/{userId}/apiTokens`.replace(
                `{${"userId"}}`,
                encodeURIComponent(String(userId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiApiTokenInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiApiTokenInDocument !== undefined ? jsonApiApiTokenInDocument : {})
                : jsonApiApiTokenInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityApiTokens(
            params: {
                userId: string;
                id: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): RequestArgs {
            const { userId, id, variableParam } = params;
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError(
                    "userId",
                    "Required parameter userId was null or undefined when calling deleteEntityApiTokens.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling deleteEntityApiTokens.",
                );
            }
            const localVarPath = `/api/entities/users/{userId}/apiTokens/{id}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} userId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesApiTokens(
            params: {
                userId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { userId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError(
                    "userId",
                    "Required parameter userId was null or undefined when calling getAllEntitiesApiTokens.",
                );
            }
            const localVarPath = `/api/entities/users/{userId}/apiTokens`.replace(
                `{${"userId"}}`,
                encodeURIComponent(String(userId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityApiTokens(
            params: {
                userId: string;
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { userId, id, variableParam, include, page, size, sort } = params;
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError(
                    "userId",
                    "Required parameter userId was null or undefined when calling getEntityApiTokens.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityApiTokens.",
                );
            }
            const localVarPath = `/api/entities/users/{userId}/apiTokens/{id}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * UserModelControllerApi - functional programming interface
 * @export
 */
export const UserModelControllerApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} userId
         * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityApiTokens(
            params: {
                userId: string;
                jsonApiApiTokenInDocument: JsonApiApiTokenInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiApiTokenOutDocument> {
            const localVarAxiosArgs = UserModelControllerApiAxiosParamCreator(
                configuration,
            ).createEntityApiTokens(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityApiTokens(
            params: {
                userId: string;
                id: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = UserModelControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityApiTokens(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} userId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesApiTokens(
            params: {
                userId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiApiTokenOutList> {
            const localVarAxiosArgs = UserModelControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesApiTokens(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityApiTokens(
            params: {
                userId: string;
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiApiTokenOutDocument> {
            const localVarAxiosArgs = UserModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntityApiTokens(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * UserModelControllerApi - factory interface
 * @export
 */
export const UserModelControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         *
         * @param {string} userId
         * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityApiTokens(
            params: {
                userId: string;
                jsonApiApiTokenInDocument: JsonApiApiTokenInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiApiTokenOutDocument> {
            return UserModelControllerApiFp(configuration).createEntityApiTokens(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityApiTokens(
            params: {
                userId: string;
                id: string;
                variableParam?: { [key: string]: object };
            },
            options?: any,
        ): AxiosPromise<void> {
            return UserModelControllerApiFp(configuration).deleteEntityApiTokens(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} userId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesApiTokens(
            params: {
                userId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiApiTokenOutList> {
            return UserModelControllerApiFp(configuration).getAllEntitiesApiTokens(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityApiTokens(
            params: {
                userId: string;
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiApiTokenOutDocument> {
            return UserModelControllerApiFp(configuration).getEntityApiTokens(params, options)(
                axios,
                basePath,
            );
        },
    };
};

/**
 * UserModelControllerApi - interface
 * @export
 * @interface UserModelControllerApi
 */
export interface UserModelControllerApiInterface {
    /**
     *
     * @param {string} userId
     * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApiInterface
     */
    createEntityApiTokens(
        params: {
            userId: string;
            jsonApiApiTokenInDocument: JsonApiApiTokenInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiApiTokenOutDocument>;

    /**
     *
     * @param {string} userId
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApiInterface
     */
    deleteEntityApiTokens(
        params: {
            userId: string;
            id: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} userId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApiInterface
     */
    getAllEntitiesApiTokens(
        params: {
            userId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiApiTokenOutList>;

    /**
     *
     * @param {string} userId
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApiInterface
     */
    getEntityApiTokens(
        params: {
            userId: string;
            id: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiApiTokenOutDocument>;
}

/**
 * UserModelControllerApi - object-oriented interface
 * @export
 * @class UserModelControllerApi
 * @extends {BaseAPI}
 */
export class UserModelControllerApi extends BaseAPI implements UserModelControllerApiInterface {
    /**
     *
     * @param {string} userId
     * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApi
     */
    public createEntityApiTokens(
        params: {
            userId: string;
            jsonApiApiTokenInDocument: JsonApiApiTokenInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return UserModelControllerApiFp(this.configuration).createEntityApiTokens(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} userId
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApi
     */
    public deleteEntityApiTokens(
        params: {
            userId: string;
            id: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ) {
        return UserModelControllerApiFp(this.configuration).deleteEntityApiTokens(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} userId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApi
     */
    public getAllEntitiesApiTokens(
        params: {
            userId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return UserModelControllerApiFp(this.configuration).getAllEntitiesApiTokens(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} userId
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApi
     */
    public getEntityApiTokens(
        params: {
            userId: string;
            id: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return UserModelControllerApiFp(this.configuration).getEntityApiTokens(params, options)(
            this.axios,
            this.basePath,
        );
    }
}

/**
 * WorkspaceObjectControllerApi - axios parameter creator
 * @export
 */
export const WorkspaceObjectControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityAnalyticalDashboards(
            params: {
                workspaceId: string;
                jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, jsonApiAnalyticalDashboardInDocument, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createEntityAnalyticalDashboards.",
                );
            }
            // verify required parameter 'jsonApiAnalyticalDashboardInDocument' is not null or undefined
            if (
                jsonApiAnalyticalDashboardInDocument === null ||
                jsonApiAnalyticalDashboardInDocument === undefined
            ) {
                throw new RequiredError(
                    "jsonApiAnalyticalDashboardInDocument",
                    "Required parameter jsonApiAnalyticalDashboardInDocument was null or undefined when calling createEntityAnalyticalDashboards.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/analyticalDashboards`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiAnalyticalDashboardInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiAnalyticalDashboardInDocument !== undefined
                          ? jsonApiAnalyticalDashboardInDocument
                          : {},
                  )
                : jsonApiAnalyticalDashboardInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityFilterContexts(
            params: {
                workspaceId: string;
                jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, jsonApiFilterContextInDocument, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createEntityFilterContexts.",
                );
            }
            // verify required parameter 'jsonApiFilterContextInDocument' is not null or undefined
            if (jsonApiFilterContextInDocument === null || jsonApiFilterContextInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiFilterContextInDocument",
                    "Required parameter jsonApiFilterContextInDocument was null or undefined when calling createEntityFilterContexts.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/filterContexts`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiFilterContextInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiFilterContextInDocument !== undefined ? jsonApiFilterContextInDocument : {},
                  )
                : jsonApiFilterContextInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityMetrics(
            params: {
                workspaceId: string;
                jsonApiMetricInDocument: JsonApiMetricInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, jsonApiMetricInDocument, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createEntityMetrics.",
                );
            }
            // verify required parameter 'jsonApiMetricInDocument' is not null or undefined
            if (jsonApiMetricInDocument === null || jsonApiMetricInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiMetricInDocument",
                    "Required parameter jsonApiMetricInDocument was null or undefined when calling createEntityMetrics.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/metrics`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiMetricInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiMetricInDocument !== undefined ? jsonApiMetricInDocument : {})
                : jsonApiMetricInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityVisualizationObjects(
            params: {
                workspaceId: string;
                jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, jsonApiVisualizationObjectInDocument, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createEntityVisualizationObjects.",
                );
            }
            // verify required parameter 'jsonApiVisualizationObjectInDocument' is not null or undefined
            if (
                jsonApiVisualizationObjectInDocument === null ||
                jsonApiVisualizationObjectInDocument === undefined
            ) {
                throw new RequiredError(
                    "jsonApiVisualizationObjectInDocument",
                    "Required parameter jsonApiVisualizationObjectInDocument was null or undefined when calling createEntityVisualizationObjects.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/visualizationObjects`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiVisualizationObjectInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiVisualizationObjectInDocument !== undefined
                          ? jsonApiVisualizationObjectInDocument
                          : {},
                  )
                : jsonApiVisualizationObjectInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityWorkspaceDataFilters(
            params: {
                workspaceId: string;
                jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, jsonApiWorkspaceDataFilterInDocument, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createEntityWorkspaceDataFilters.",
                );
            }
            // verify required parameter 'jsonApiWorkspaceDataFilterInDocument' is not null or undefined
            if (
                jsonApiWorkspaceDataFilterInDocument === null ||
                jsonApiWorkspaceDataFilterInDocument === undefined
            ) {
                throw new RequiredError(
                    "jsonApiWorkspaceDataFilterInDocument",
                    "Required parameter jsonApiWorkspaceDataFilterInDocument was null or undefined when calling createEntityWorkspaceDataFilters.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/workspaceDataFilters`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiWorkspaceDataFilterInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiWorkspaceDataFilterInDocument !== undefined
                          ? jsonApiWorkspaceDataFilterInDocument
                          : {},
                  )
                : jsonApiWorkspaceDataFilterInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityAnalyticalDashboards(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, variableParam } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling deleteEntityAnalyticalDashboards.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling deleteEntityAnalyticalDashboards.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/analyticalDashboards/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityFilterContexts(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, variableParam } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling deleteEntityFilterContexts.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling deleteEntityFilterContexts.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/filterContexts/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityMetrics(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, variableParam } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling deleteEntityMetrics.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling deleteEntityMetrics.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/metrics/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityVisualizationObjects(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, variableParam } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling deleteEntityVisualizationObjects.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling deleteEntityVisualizationObjects.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/visualizationObjects/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityWorkspaceDataFilters(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, variableParam } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling deleteEntityWorkspaceDataFilters.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling deleteEntityWorkspaceDataFilters.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/workspaceDataFilters/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesAnalyticalDashboards(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitiesAnalyticalDashboards.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/analyticalDashboards`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesAttributes(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitiesAttributes.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/attributes`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesDatasets(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitiesDatasets.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/datasets`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesFacts(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitiesFacts.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/facts`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesFilterContexts(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitiesFilterContexts.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/filterContexts`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesLabels(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitiesLabels.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/labels`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesMetrics(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitiesMetrics.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/metrics`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesSources(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitiesSources.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/sources`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesTables(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitiesTables.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/tables`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesVisualizationObjects(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitiesVisualizationObjects.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/visualizationObjects`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesWorkspaceDataFilterSettings(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitiesWorkspaceDataFilterSettings.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/workspaceDataFilterSettings`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesWorkspaceDataFilters(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitiesWorkspaceDataFilters.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/workspaceDataFilters`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAnalyticalDashboards(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityAnalyticalDashboards.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling getEntityAnalyticalDashboards.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/analyticalDashboards/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAttributes(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityAttributes.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling getEntityAttributes.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/attributes/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDatasets(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityDatasets.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling getEntityDatasets.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/datasets/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFacts(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityFacts.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling getEntityFacts.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/facts/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFilterContexts(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityFilterContexts.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling getEntityFilterContexts.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/filterContexts/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityLabels(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityLabels.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling getEntityLabels.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/labels/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityMetrics(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityMetrics.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling getEntityMetrics.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/metrics/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitySources(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitySources.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling getEntitySources.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/sources/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityTables(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityTables.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling getEntityTables.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/tables/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityVisualizationObjects(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityVisualizationObjects.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling getEntityVisualizationObjects.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/visualizationObjects/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaceDataFilterSettings(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityWorkspaceDataFilterSettings.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling getEntityWorkspaceDataFilterSettings.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/workspaceDataFilterSettings/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaceDataFilters(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityWorkspaceDataFilters.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling getEntityWorkspaceDataFilters.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/workspaceDataFilters/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityAnalyticalDashboards(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const {
                workspaceId,
                objectId,
                jsonApiAnalyticalDashboardInDocument,
                variableParam,
                include,
            } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling updateEntityAnalyticalDashboards.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling updateEntityAnalyticalDashboards.",
                );
            }
            // verify required parameter 'jsonApiAnalyticalDashboardInDocument' is not null or undefined
            if (
                jsonApiAnalyticalDashboardInDocument === null ||
                jsonApiAnalyticalDashboardInDocument === undefined
            ) {
                throw new RequiredError(
                    "jsonApiAnalyticalDashboardInDocument",
                    "Required parameter jsonApiAnalyticalDashboardInDocument was null or undefined when calling updateEntityAnalyticalDashboards.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/analyticalDashboards/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiAnalyticalDashboardInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiAnalyticalDashboardInDocument !== undefined
                          ? jsonApiAnalyticalDashboardInDocument
                          : {},
                  )
                : jsonApiAnalyticalDashboardInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityFilterContexts(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, jsonApiFilterContextInDocument, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling updateEntityFilterContexts.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling updateEntityFilterContexts.",
                );
            }
            // verify required parameter 'jsonApiFilterContextInDocument' is not null or undefined
            if (jsonApiFilterContextInDocument === null || jsonApiFilterContextInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiFilterContextInDocument",
                    "Required parameter jsonApiFilterContextInDocument was null or undefined when calling updateEntityFilterContexts.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/filterContexts/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiFilterContextInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiFilterContextInDocument !== undefined ? jsonApiFilterContextInDocument : {},
                  )
                : jsonApiFilterContextInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityMetrics(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiMetricInDocument: JsonApiMetricInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, jsonApiMetricInDocument, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling updateEntityMetrics.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling updateEntityMetrics.",
                );
            }
            // verify required parameter 'jsonApiMetricInDocument' is not null or undefined
            if (jsonApiMetricInDocument === null || jsonApiMetricInDocument === undefined) {
                throw new RequiredError(
                    "jsonApiMetricInDocument",
                    "Required parameter jsonApiMetricInDocument was null or undefined when calling updateEntityMetrics.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/metrics/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiMetricInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiMetricInDocument !== undefined ? jsonApiMetricInDocument : {})
                : jsonApiMetricInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityVisualizationObjects(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const {
                workspaceId,
                objectId,
                jsonApiVisualizationObjectInDocument,
                variableParam,
                include,
            } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling updateEntityVisualizationObjects.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling updateEntityVisualizationObjects.",
                );
            }
            // verify required parameter 'jsonApiVisualizationObjectInDocument' is not null or undefined
            if (
                jsonApiVisualizationObjectInDocument === null ||
                jsonApiVisualizationObjectInDocument === undefined
            ) {
                throw new RequiredError(
                    "jsonApiVisualizationObjectInDocument",
                    "Required parameter jsonApiVisualizationObjectInDocument was null or undefined when calling updateEntityVisualizationObjects.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/visualizationObjects/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiVisualizationObjectInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiVisualizationObjectInDocument !== undefined
                          ? jsonApiVisualizationObjectInDocument
                          : {},
                  )
                : jsonApiVisualizationObjectInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityWorkspaceDataFilters(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const {
                workspaceId,
                objectId,
                jsonApiWorkspaceDataFilterInDocument,
                variableParam,
                include,
            } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling updateEntityWorkspaceDataFilters.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling updateEntityWorkspaceDataFilters.",
                );
            }
            // verify required parameter 'jsonApiWorkspaceDataFilterInDocument' is not null or undefined
            if (
                jsonApiWorkspaceDataFilterInDocument === null ||
                jsonApiWorkspaceDataFilterInDocument === undefined
            ) {
                throw new RequiredError(
                    "jsonApiWorkspaceDataFilterInDocument",
                    "Required parameter jsonApiWorkspaceDataFilterInDocument was null or undefined when calling updateEntityWorkspaceDataFilters.",
                );
            }
            const localVarPath = `/api/entities/workspaces/{workspaceId}/workspaceDataFilters/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiWorkspaceDataFilterInDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiWorkspaceDataFilterInDocument !== undefined
                          ? jsonApiWorkspaceDataFilterInDocument
                          : {},
                  )
                : jsonApiWorkspaceDataFilterInDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * WorkspaceObjectControllerApi - functional programming interface
 * @export
 */
export const WorkspaceObjectControllerApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityAnalyticalDashboards(
            params: {
                workspaceId: string;
                jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).createEntityAnalyticalDashboards(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityFilterContexts(
            params: {
                workspaceId: string;
                jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).createEntityFilterContexts(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityMetrics(
            params: {
                workspaceId: string;
                jsonApiMetricInDocument: JsonApiMetricInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).createEntityMetrics(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityVisualizationObjects(
            params: {
                workspaceId: string;
                jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).createEntityVisualizationObjects(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityWorkspaceDataFilters(
            params: {
                workspaceId: string;
                jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).createEntityWorkspaceDataFilters(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityAnalyticalDashboards(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityAnalyticalDashboards(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityFilterContexts(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityFilterContexts(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityMetrics(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityMetrics(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityVisualizationObjects(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityVisualizationObjects(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityWorkspaceDataFilters(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityWorkspaceDataFilters(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesAnalyticalDashboards(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardOutList> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntitiesAnalyticalDashboards(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesAttributes(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAttributeOutList> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntitiesAttributes(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesDatasets(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDatasetOutList> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntitiesDatasets(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesFacts(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFactOutList> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntitiesFacts(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesFilterContexts(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextOutList> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntitiesFilterContexts(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesLabels(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiLabelOutList> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntitiesLabels(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesMetrics(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricOutList> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntitiesMetrics(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesSources(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiSourceTablesOutList> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntitiesSources(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesTables(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiSourceTableOutList> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntitiesTables(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesVisualizationObjects(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectOutList> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntitiesVisualizationObjects(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesWorkspaceDataFilterSettings(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<JsonApiWorkspaceDataFilterSettingOutList> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntitiesWorkspaceDataFilterSettings(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesWorkspaceDataFilters(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterOutList> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntitiesWorkspaceDataFilters(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAnalyticalDashboards(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntityAnalyticalDashboards(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAttributes(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAttributeOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntityAttributes(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDatasets(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDatasetOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntityDatasets(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFacts(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFactOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntityFacts(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFilterContexts(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntityFilterContexts(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityLabels(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiLabelOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntityLabels(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityMetrics(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntityMetrics(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitySources(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiSourceTablesOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntitySources(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityTables(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiSourceTableOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntityTables(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityVisualizationObjects(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntityVisualizationObjects(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaceDataFilterSettings(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntityWorkspaceDataFilterSettings(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaceDataFilters(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntityWorkspaceDataFilters(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityAnalyticalDashboards(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityAnalyticalDashboards(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityFilterContexts(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityFilterContexts(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityMetrics(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiMetricInDocument: JsonApiMetricInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityMetrics(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityVisualizationObjects(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityVisualizationObjects(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityWorkspaceDataFilters(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterOutDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityWorkspaceDataFilters(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * WorkspaceObjectControllerApi - factory interface
 * @export
 */
export const WorkspaceObjectControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityAnalyticalDashboards(
            params: {
                workspaceId: string;
                jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiAnalyticalDashboardOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).createEntityAnalyticalDashboards(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityFilterContexts(
            params: {
                workspaceId: string;
                jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiFilterContextOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).createEntityFilterContexts(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityMetrics(
            params: {
                workspaceId: string;
                jsonApiMetricInDocument: JsonApiMetricInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiMetricOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).createEntityMetrics(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityVisualizationObjects(
            params: {
                workspaceId: string;
                jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiVisualizationObjectOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).createEntityVisualizationObjects(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityWorkspaceDataFilters(
            params: {
                workspaceId: string;
                jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).createEntityWorkspaceDataFilters(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityAnalyticalDashboards(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
            },
            options?: any,
        ): AxiosPromise<void> {
            return WorkspaceObjectControllerApiFp(configuration).deleteEntityAnalyticalDashboards(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityFilterContexts(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
            },
            options?: any,
        ): AxiosPromise<void> {
            return WorkspaceObjectControllerApiFp(configuration).deleteEntityFilterContexts(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityMetrics(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
            },
            options?: any,
        ): AxiosPromise<void> {
            return WorkspaceObjectControllerApiFp(configuration).deleteEntityMetrics(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityVisualizationObjects(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
            },
            options?: any,
        ): AxiosPromise<void> {
            return WorkspaceObjectControllerApiFp(configuration).deleteEntityVisualizationObjects(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityWorkspaceDataFilters(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
            },
            options?: any,
        ): AxiosPromise<void> {
            return WorkspaceObjectControllerApiFp(configuration).deleteEntityWorkspaceDataFilters(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesAnalyticalDashboards(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiAnalyticalDashboardOutList> {
            return WorkspaceObjectControllerApiFp(configuration).getEntitiesAnalyticalDashboards(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesAttributes(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiAttributeOutList> {
            return WorkspaceObjectControllerApiFp(configuration).getEntitiesAttributes(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesDatasets(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiDatasetOutList> {
            return WorkspaceObjectControllerApiFp(configuration).getEntitiesDatasets(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesFacts(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiFactOutList> {
            return WorkspaceObjectControllerApiFp(configuration).getEntitiesFacts(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesFilterContexts(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiFilterContextOutList> {
            return WorkspaceObjectControllerApiFp(configuration).getEntitiesFilterContexts(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesLabels(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiLabelOutList> {
            return WorkspaceObjectControllerApiFp(configuration).getEntitiesLabels(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesMetrics(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiMetricOutList> {
            return WorkspaceObjectControllerApiFp(configuration).getEntitiesMetrics(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesSources(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiSourceTablesOutList> {
            return WorkspaceObjectControllerApiFp(configuration).getEntitiesSources(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesTables(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiSourceTableOutList> {
            return WorkspaceObjectControllerApiFp(configuration).getEntitiesTables(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesVisualizationObjects(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiVisualizationObjectOutList> {
            return WorkspaceObjectControllerApiFp(configuration).getEntitiesVisualizationObjects(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesWorkspaceDataFilterSettings(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutList> {
            return WorkspaceObjectControllerApiFp(configuration).getEntitiesWorkspaceDataFilterSettings(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesWorkspaceDataFilters(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiWorkspaceDataFilterOutList> {
            return WorkspaceObjectControllerApiFp(configuration).getEntitiesWorkspaceDataFilters(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAnalyticalDashboards(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiAnalyticalDashboardOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).getEntityAnalyticalDashboards(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAttributes(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiAttributeOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).getEntityAttributes(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDatasets(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiDatasetOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).getEntityDatasets(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFacts(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiFactOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).getEntityFacts(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFilterContexts(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiFilterContextOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).getEntityFilterContexts(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityLabels(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiLabelOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).getEntityLabels(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityMetrics(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiMetricOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).getEntityMetrics(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitySources(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiSourceTablesOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).getEntitySources(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityTables(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiSourceTableOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).getEntityTables(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityVisualizationObjects(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiVisualizationObjectOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).getEntityVisualizationObjects(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaceDataFilterSettings(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).getEntityWorkspaceDataFilterSettings(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaceDataFilters(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).getEntityWorkspaceDataFilters(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityAnalyticalDashboards(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiAnalyticalDashboardOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).updateEntityAnalyticalDashboards(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityFilterContexts(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiFilterContextOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).updateEntityFilterContexts(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityMetrics(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiMetricInDocument: JsonApiMetricInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiMetricOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).updateEntityMetrics(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityVisualizationObjects(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiVisualizationObjectOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).updateEntityVisualizationObjects(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityWorkspaceDataFilters(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument> {
            return WorkspaceObjectControllerApiFp(configuration).updateEntityWorkspaceDataFilters(
                params,
                options,
            )(axios, basePath);
        },
    };
};

/**
 * WorkspaceObjectControllerApi - interface
 * @export
 * @interface WorkspaceObjectControllerApi
 */
export interface WorkspaceObjectControllerApiInterface {
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    createEntityAnalyticalDashboards(
        params: {
            workspaceId: string;
            jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    createEntityFilterContexts(
        params: {
            workspaceId: string;
            jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiFilterContextOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    createEntityMetrics(
        params: {
            workspaceId: string;
            jsonApiMetricInDocument: JsonApiMetricInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiMetricOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    createEntityVisualizationObjects(
        params: {
            workspaceId: string;
            jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiVisualizationObjectOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    createEntityWorkspaceDataFilters(
        params: {
            workspaceId: string;
            jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    deleteEntityAnalyticalDashboards(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    deleteEntityFilterContexts(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    deleteEntityMetrics(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    deleteEntityVisualizationObjects(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    deleteEntityWorkspaceDataFilters(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntitiesAnalyticalDashboards(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiAnalyticalDashboardOutList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntitiesAttributes(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiAttributeOutList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntitiesDatasets(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiDatasetOutList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntitiesFacts(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiFactOutList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntitiesFilterContexts(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiFilterContextOutList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntitiesLabels(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiLabelOutList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntitiesMetrics(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiMetricOutList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntitiesSources(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiSourceTablesOutList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntitiesTables(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiSourceTableOutList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntitiesVisualizationObjects(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiVisualizationObjectOutList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntitiesWorkspaceDataFilterSettings(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntitiesWorkspaceDataFilters(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiWorkspaceDataFilterOutList>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityAnalyticalDashboards(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityAttributes(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiAttributeOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityDatasets(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiDatasetOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityFacts(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiFactOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityFilterContexts(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiFilterContextOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityLabels(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiLabelOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityMetrics(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiMetricOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntitySources(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiSourceTablesOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityTables(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiSourceTableOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityVisualizationObjects(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiVisualizationObjectOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityWorkspaceDataFilterSettings(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityWorkspaceDataFilters(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    updateEntityAnalyticalDashboards(
        params: {
            workspaceId: string;
            objectId: string;
            jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    updateEntityFilterContexts(
        params: {
            workspaceId: string;
            objectId: string;
            jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiFilterContextOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    updateEntityMetrics(
        params: {
            workspaceId: string;
            objectId: string;
            jsonApiMetricInDocument: JsonApiMetricInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiMetricOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    updateEntityVisualizationObjects(
        params: {
            workspaceId: string;
            objectId: string;
            jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiVisualizationObjectOutDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    updateEntityWorkspaceDataFilters(
        params: {
            workspaceId: string;
            objectId: string;
            jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
}

/**
 * WorkspaceObjectControllerApi - object-oriented interface
 * @export
 * @class WorkspaceObjectControllerApi
 * @extends {BaseAPI}
 */
export class WorkspaceObjectControllerApi extends BaseAPI implements WorkspaceObjectControllerApiInterface {
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public createEntityAnalyticalDashboards(
        params: {
            workspaceId: string;
            jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).createEntityAnalyticalDashboards(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public createEntityFilterContexts(
        params: {
            workspaceId: string;
            jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).createEntityFilterContexts(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public createEntityMetrics(
        params: {
            workspaceId: string;
            jsonApiMetricInDocument: JsonApiMetricInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).createEntityMetrics(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public createEntityVisualizationObjects(
        params: {
            workspaceId: string;
            jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).createEntityVisualizationObjects(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public createEntityWorkspaceDataFilters(
        params: {
            workspaceId: string;
            jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).createEntityWorkspaceDataFilters(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public deleteEntityAnalyticalDashboards(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).deleteEntityAnalyticalDashboards(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public deleteEntityFilterContexts(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).deleteEntityFilterContexts(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public deleteEntityMetrics(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).deleteEntityMetrics(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public deleteEntityVisualizationObjects(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).deleteEntityVisualizationObjects(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public deleteEntityWorkspaceDataFilters(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).deleteEntityWorkspaceDataFilters(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntitiesAnalyticalDashboards(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntitiesAnalyticalDashboards(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntitiesAttributes(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntitiesAttributes(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntitiesDatasets(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntitiesDatasets(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntitiesFacts(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntitiesFacts(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntitiesFilterContexts(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntitiesFilterContexts(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntitiesLabels(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntitiesLabels(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntitiesMetrics(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntitiesMetrics(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntitiesSources(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntitiesSources(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntitiesTables(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntitiesTables(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntitiesVisualizationObjects(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntitiesVisualizationObjects(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntitiesWorkspaceDataFilterSettings(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntitiesWorkspaceDataFilterSettings(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntitiesWorkspaceDataFilters(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntitiesWorkspaceDataFilters(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntityAnalyticalDashboards(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntityAnalyticalDashboards(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntityAttributes(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntityAttributes(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntityDatasets(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntityDatasets(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntityFacts(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntityFacts(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntityFilterContexts(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntityFilterContexts(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntityLabels(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntityLabels(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntityMetrics(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntityMetrics(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntitySources(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntitySources(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntityTables(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntityTables(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntityVisualizationObjects(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntityVisualizationObjects(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntityWorkspaceDataFilterSettings(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntityWorkspaceDataFilterSettings(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntityWorkspaceDataFilters(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntityWorkspaceDataFilters(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public updateEntityAnalyticalDashboards(
        params: {
            workspaceId: string;
            objectId: string;
            jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).updateEntityAnalyticalDashboards(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public updateEntityFilterContexts(
        params: {
            workspaceId: string;
            objectId: string;
            jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).updateEntityFilterContexts(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public updateEntityMetrics(
        params: {
            workspaceId: string;
            objectId: string;
            jsonApiMetricInDocument: JsonApiMetricInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).updateEntityMetrics(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public updateEntityVisualizationObjects(
        params: {
            workspaceId: string;
            objectId: string;
            jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).updateEntityVisualizationObjects(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public updateEntityWorkspaceDataFilters(
        params: {
            workspaceId: string;
            objectId: string;
            jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).updateEntityWorkspaceDataFilters(
            params,
            options,
        )(this.axios, this.basePath);
    }
}
