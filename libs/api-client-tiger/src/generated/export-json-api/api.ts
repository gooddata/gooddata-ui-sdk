// (C) 2023 GoodData Corporation

/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
// Some imports not used depending on template conditions, we also need prettier-ignore so that the import does not get split and ts-ignore still works
// prettier-ignore
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// Some imports not used depending on template conditions, we also need prettier-ignore so that the import does not get split and ts-ignore still works
// prettier-ignore
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Custom label object override.
 * @export
 * @interface CustomLabel
 */
export interface CustomLabel {
    /**
     * Override value.
     * @type {string}
     * @memberof CustomLabel
     */
    title: string;
}
/**
 * Custom metric object override.
 * @export
 * @interface CustomMetric
 */
export interface CustomMetric {
    /**
     * Metric title override.
     * @type {string}
     * @memberof CustomMetric
     */
    title: string;
    /**
     * Format override.
     * @type {string}
     * @memberof CustomMetric
     */
    format: string;
}
/**
 * Custom cell value overrides (IDs will be replaced with specified values).
 * @export
 * @interface CustomOverride
 */
export interface CustomOverride {
    /**
     * Map of CustomLabels with keys used as placeholders in document.
     * @type {{ [key: string]: CustomLabel; }}
     * @memberof CustomOverride
     */
    labels?: { [key: string]: CustomLabel };
    /**
     * Map of CustomMetrics with keys used as placeholders in document.
     * @type {{ [key: string]: CustomMetric; }}
     * @memberof CustomOverride
     */
    metrics?: { [key: string]: CustomMetric };
}
/**
 *
 * @export
 * @interface ExportResponse
 */
export interface ExportResponse {
    /**
     *
     * @type {string}
     * @memberof ExportResponse
     */
    exportResult: string;
}
/**
 *
 * @export
 * @interface PdfExportRequest
 */
export interface PdfExportRequest {
    /**
     *
     * @type {string}
     * @memberof PdfExportRequest
     */
    fileName: string;
    /**
     *
     * @type {string}
     * @memberof PdfExportRequest
     */
    dashboardId: string;
    /**
     *
     * @type {object}
     * @memberof PdfExportRequest
     */
    metadata?: object;
}
/**
 * XLSX specific settings.
 * @export
 * @interface Settings
 */
export interface Settings {
    /**
     * Merge equal headers in neighbouring cells.
     * @type {boolean}
     * @memberof Settings
     */
    mergeHeaders: boolean;
    /**
     * Print applied filters on top of the document.
     * @type {boolean}
     * @memberof Settings
     */
    showFilters: boolean;
}
/**
 * Export request object describing the export properties and overrides for tabular exports.
 * @export
 * @interface TabularExportRequest
 */
export interface TabularExportRequest {
    /**
     * Expected file format.
     * @type {string}
     * @memberof TabularExportRequest
     */
    format: TabularExportRequestFormatEnum;
    /**
     * Execution result identifier.
     * @type {string}
     * @memberof TabularExportRequest
     */
    executionResult: string;
    /**
     * Filename of downloaded file without extension.
     * @type {string}
     * @memberof TabularExportRequest
     */
    fileName: string;
    /**
     *
     * @type {Settings}
     * @memberof TabularExportRequest
     */
    settings?: Settings;
    /**
     *
     * @type {CustomOverride}
     * @memberof TabularExportRequest
     */
    customOverride?: CustomOverride;
}

export const TabularExportRequestFormatEnum = {
    CSV: "CSV",
    XLSX: "XLSX",
} as const;

export type TabularExportRequestFormatEnum =
    typeof TabularExportRequestFormatEnum[keyof typeof TabularExportRequestFormatEnum];

/**
 * ActionsApi - axios parameter creator
 * @export
 */
export const ActionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * An visual export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
         * @summary Create visual - pdf export request
         * @param {string} workspaceId
         * @param {PdfExportRequest} pdfExportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPdfExport: async (
            workspaceId: string,
            pdfExportRequest: PdfExportRequest,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("createPdfExport", "workspaceId", workspaceId);
            // verify required parameter 'pdfExportRequest' is not null or undefined
            assertParamExists("createPdfExport", "pdfExportRequest", pdfExportRequest);
            const localVarPath = `/api/v1/actions/workspaces/{workspaceId}/export/visual`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof pdfExportRequest !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(pdfExportRequest !== undefined ? pdfExportRequest : {})
                : pdfExportRequest || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * An tabular export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
         * @summary Create tabular export request
         * @param {string} workspaceId
         * @param {TabularExportRequest} tabularExportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTabularExport: async (
            workspaceId: string,
            tabularExportRequest: TabularExportRequest,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("createTabularExport", "workspaceId", workspaceId);
            // verify required parameter 'tabularExportRequest' is not null or undefined
            assertParamExists("createTabularExport", "tabularExportRequest", tabularExportRequest);
            const localVarPath = `/api/v1/actions/workspaces/{workspaceId}/export/tabular`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            const needsSerialization =
                typeof tabularExportRequest !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(tabularExportRequest !== undefined ? tabularExportRequest : {})
                : tabularExportRequest || "";

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns 202 until original POST export request is not processed.Returns 200 with exported data once the export is done.
         * @summary Retrieve exported files
         * @param {string} workspaceId
         * @param {string} exportId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExportedFile: async (
            workspaceId: string,
            exportId: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getExportedFile", "workspaceId", workspaceId);
            // verify required parameter 'exportId' is not null or undefined
            assertParamExists("getExportedFile", "exportId", exportId);
            const localVarPath = `/api/v1/actions/workspaces/{workspaceId}/export/visual/{exportId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"exportId"}}`, encodeURIComponent(String(exportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoints serves as a cache for user defined metadata for the front end ui to retrieve them, if one was created using the POST ../export/visual endpoint. The metadata structure is not verified. If metadata for given {exportId} has been found, endpoint returns the value 200 else 404.
         * @summary Retrieve metadata context
         * @param {string} workspaceId
         * @param {string} exportId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadata: async (
            workspaceId: string,
            exportId: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getMetadata", "workspaceId", workspaceId);
            // verify required parameter 'exportId' is not null or undefined
            assertParamExists("getMetadata", "exportId", exportId);
            const localVarPath = `/api/v1/actions/workspaces/{workspaceId}/export/visual/{exportId}/metadata`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"exportId"}}`, encodeURIComponent(String(exportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * After clients creates a POST export request, the processing of it will start shortly asynchronously. To retrieve the result, client has to check periodically for the result on this endpoint. In case the result isn\'t ready yet, the service returns 202. If the result is ready, it returns 200 and octet stream of the result file with provided filename.
         * @summary Retrieve exported files
         * @param {string} workspaceId
         * @param {string} exportId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTabularExport: async (
            workspaceId: string,
            exportId: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists("getTabularExport", "workspaceId", workspaceId);
            // verify required parameter 'exportId' is not null or undefined
            assertParamExists("getTabularExport", "exportId", exportId);
            const localVarPath = `/api/v1/actions/workspaces/{workspaceId}/export/tabular/{exportId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"exportId"}}`, encodeURIComponent(String(exportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * ActionsApi - functional programming interface
 * @export
 */
export const ActionsApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = ActionsApiAxiosParamCreator(configuration);
    return {
        /**
         * An visual export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
         * @summary Create visual - pdf export request
         * @param {string} workspaceId
         * @param {PdfExportRequest} pdfExportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPdfExport(
            workspaceId: string,
            pdfExportRequest: PdfExportRequest,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPdfExport(
                workspaceId,
                pdfExportRequest,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * An tabular export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
         * @summary Create tabular export request
         * @param {string} workspaceId
         * @param {TabularExportRequest} tabularExportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTabularExport(
            workspaceId: string,
            tabularExportRequest: TabularExportRequest,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTabularExport(
                workspaceId,
                tabularExportRequest,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns 202 until original POST export request is not processed.Returns 200 with exported data once the export is done.
         * @summary Retrieve exported files
         * @param {string} workspaceId
         * @param {string} exportId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExportedFile(
            workspaceId: string,
            exportId: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExportedFile(
                workspaceId,
                exportId,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoints serves as a cache for user defined metadata for the front end ui to retrieve them, if one was created using the POST ../export/visual endpoint. The metadata structure is not verified. If metadata for given {exportId} has been found, endpoint returns the value 200 else 404.
         * @summary Retrieve metadata context
         * @param {string} workspaceId
         * @param {string} exportId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetadata(
            workspaceId: string,
            exportId: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetadata(
                workspaceId,
                exportId,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * After clients creates a POST export request, the processing of it will start shortly asynchronously. To retrieve the result, client has to check periodically for the result on this endpoint. In case the result isn\'t ready yet, the service returns 202. If the result is ready, it returns 200 and octet stream of the result file with provided filename.
         * @summary Retrieve exported files
         * @param {string} workspaceId
         * @param {string} exportId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTabularExport(
            workspaceId: string,
            exportId: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTabularExport(
                workspaceId,
                exportId,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};

/**
 * ActionsApi - factory interface
 * @export
 */
export const ActionsApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    const localVarFp = ActionsApiFp(configuration);
    return {
        /**
         * An visual export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
         * @summary Create visual - pdf export request
         * @param {ActionsApiCreatePdfExportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPdfExport(
            requestParameters: ActionsApiCreatePdfExportRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<ExportResponse> {
            return localVarFp
                .createPdfExport(requestParameters.workspaceId, requestParameters.pdfExportRequest, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * An tabular export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
         * @summary Create tabular export request
         * @param {ActionsApiCreateTabularExportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTabularExport(
            requestParameters: ActionsApiCreateTabularExportRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<ExportResponse> {
            return localVarFp
                .createTabularExport(
                    requestParameters.workspaceId,
                    requestParameters.tabularExportRequest,
                    options,
                )
                .then((request) => request(axios, basePath));
        },
        /**
         * Returns 202 until original POST export request is not processed.Returns 200 with exported data once the export is done.
         * @summary Retrieve exported files
         * @param {ActionsApiGetExportedFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExportedFile(
            requestParameters: ActionsApiGetExportedFileRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .getExportedFile(requestParameters.workspaceId, requestParameters.exportId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * This endpoints serves as a cache for user defined metadata for the front end ui to retrieve them, if one was created using the POST ../export/visual endpoint. The metadata structure is not verified. If metadata for given {exportId} has been found, endpoint returns the value 200 else 404.
         * @summary Retrieve metadata context
         * @param {ActionsApiGetMetadataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadata(
            requestParameters: ActionsApiGetMetadataRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .getMetadata(requestParameters.workspaceId, requestParameters.exportId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * After clients creates a POST export request, the processing of it will start shortly asynchronously. To retrieve the result, client has to check periodically for the result on this endpoint. In case the result isn\'t ready yet, the service returns 202. If the result is ready, it returns 200 and octet stream of the result file with provided filename.
         * @summary Retrieve exported files
         * @param {ActionsApiGetTabularExportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTabularExport(
            requestParameters: ActionsApiGetTabularExportRequest,
            options?: AxiosRequestConfig,
        ): AxiosPromise<void> {
            return localVarFp
                .getTabularExport(requestParameters.workspaceId, requestParameters.exportId, options)
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * ActionsApi - interface
 * @export
 * @interface ActionsApi
 */
export interface ActionsApiInterface {
    /**
     * An visual export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
     * @summary Create visual - pdf export request
     * @param {ActionsApiCreatePdfExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    createPdfExport(
        requestParameters: ActionsApiCreatePdfExportRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<ExportResponse>;

    /**
     * An tabular export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
     * @summary Create tabular export request
     * @param {ActionsApiCreateTabularExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    createTabularExport(
        requestParameters: ActionsApiCreateTabularExportRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<ExportResponse>;

    /**
     * Returns 202 until original POST export request is not processed.Returns 200 with exported data once the export is done.
     * @summary Retrieve exported files
     * @param {ActionsApiGetExportedFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    getExportedFile(
        requestParameters: ActionsApiGetExportedFileRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;

    /**
     * This endpoints serves as a cache for user defined metadata for the front end ui to retrieve them, if one was created using the POST ../export/visual endpoint. The metadata structure is not verified. If metadata for given {exportId} has been found, endpoint returns the value 200 else 404.
     * @summary Retrieve metadata context
     * @param {ActionsApiGetMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    getMetadata(
        requestParameters: ActionsApiGetMetadataRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;

    /**
     * After clients creates a POST export request, the processing of it will start shortly asynchronously. To retrieve the result, client has to check periodically for the result on this endpoint. In case the result isn\'t ready yet, the service returns 202. If the result is ready, it returns 200 and octet stream of the result file with provided filename.
     * @summary Retrieve exported files
     * @param {ActionsApiGetTabularExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    getTabularExport(
        requestParameters: ActionsApiGetTabularExportRequest,
        options?: AxiosRequestConfig,
    ): AxiosPromise<void>;
}

/**
 * Request parameters for createPdfExport operation in ActionsApi.
 * @export
 * @interface ActionsApiCreatePdfExportRequest
 */
export interface ActionsApiCreatePdfExportRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiCreatePdfExport
     */
    readonly workspaceId: string;

    /**
     *
     * @type {PdfExportRequest}
     * @memberof ActionsApiCreatePdfExport
     */
    readonly pdfExportRequest: PdfExportRequest;
}

/**
 * Request parameters for createTabularExport operation in ActionsApi.
 * @export
 * @interface ActionsApiCreateTabularExportRequest
 */
export interface ActionsApiCreateTabularExportRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiCreateTabularExport
     */
    readonly workspaceId: string;

    /**
     *
     * @type {TabularExportRequest}
     * @memberof ActionsApiCreateTabularExport
     */
    readonly tabularExportRequest: TabularExportRequest;
}

/**
 * Request parameters for getExportedFile operation in ActionsApi.
 * @export
 * @interface ActionsApiGetExportedFileRequest
 */
export interface ActionsApiGetExportedFileRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiGetExportedFile
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof ActionsApiGetExportedFile
     */
    readonly exportId: string;
}

/**
 * Request parameters for getMetadata operation in ActionsApi.
 * @export
 * @interface ActionsApiGetMetadataRequest
 */
export interface ActionsApiGetMetadataRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiGetMetadata
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof ActionsApiGetMetadata
     */
    readonly exportId: string;
}

/**
 * Request parameters for getTabularExport operation in ActionsApi.
 * @export
 * @interface ActionsApiGetTabularExportRequest
 */
export interface ActionsApiGetTabularExportRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiGetTabularExport
     */
    readonly workspaceId: string;

    /**
     *
     * @type {string}
     * @memberof ActionsApiGetTabularExport
     */
    readonly exportId: string;
}

/**
 * ActionsApi - object-oriented interface
 * @export
 * @class ActionsApi
 * @extends {BaseAPI}
 */
export class ActionsApi extends BaseAPI implements ActionsApiInterface {
    /**
     * An visual export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
     * @summary Create visual - pdf export request
     * @param {ActionsApiCreatePdfExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public createPdfExport(
        requestParameters: ActionsApiCreatePdfExportRequest,
        options?: AxiosRequestConfig,
    ) {
        return ActionsApiFp(this.configuration)
            .createPdfExport(requestParameters.workspaceId, requestParameters.pdfExportRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * An tabular export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
     * @summary Create tabular export request
     * @param {ActionsApiCreateTabularExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public createTabularExport(
        requestParameters: ActionsApiCreateTabularExportRequest,
        options?: AxiosRequestConfig,
    ) {
        return ActionsApiFp(this.configuration)
            .createTabularExport(
                requestParameters.workspaceId,
                requestParameters.tabularExportRequest,
                options,
            )
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns 202 until original POST export request is not processed.Returns 200 with exported data once the export is done.
     * @summary Retrieve exported files
     * @param {ActionsApiGetExportedFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public getExportedFile(
        requestParameters: ActionsApiGetExportedFileRequest,
        options?: AxiosRequestConfig,
    ) {
        return ActionsApiFp(this.configuration)
            .getExportedFile(requestParameters.workspaceId, requestParameters.exportId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoints serves as a cache for user defined metadata for the front end ui to retrieve them, if one was created using the POST ../export/visual endpoint. The metadata structure is not verified. If metadata for given {exportId} has been found, endpoint returns the value 200 else 404.
     * @summary Retrieve metadata context
     * @param {ActionsApiGetMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public getMetadata(requestParameters: ActionsApiGetMetadataRequest, options?: AxiosRequestConfig) {
        return ActionsApiFp(this.configuration)
            .getMetadata(requestParameters.workspaceId, requestParameters.exportId, options)
            .then((request) => request(this.axios, this.basePath));
    }

    /**
     * After clients creates a POST export request, the processing of it will start shortly asynchronously. To retrieve the result, client has to check periodically for the result on this endpoint. In case the result isn\'t ready yet, the service returns 202. If the result is ready, it returns 200 and octet stream of the result file with provided filename.
     * @summary Retrieve exported files
     * @param {ActionsApiGetTabularExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public getTabularExport(
        requestParameters: ActionsApiGetTabularExportRequest,
        options?: AxiosRequestConfig,
    ) {
        return ActionsApiFp(this.configuration)
            .getTabularExport(requestParameters.workspaceId, requestParameters.exportId, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
