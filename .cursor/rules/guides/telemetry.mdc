# Telemetry and Event Tracking Guidelines

## Overview

This repository uses a sophisticated telemetry system that supports both general events and AI-specific events. The system routes events to different tracking providers based on event type.

## Event Types

### General Events (`"event"`)
- Standard UI interactions, navigation, settings changes
- Tracked by all telemetry providers (Amplitude, Matomo)
- Use `"event"` payload type

### AI Events (`"ai-event"`)
- AI-specific interactions (chat, search, visualization)
- Tracked only by AI-enabled providers (AI Amplitude tracker)
- Use `"ai-event"` payload type

## Factory Pattern Usage

### Component Telemetry

Use `createComponentTelemetry` for component-level tracking:

```typescript
const telemetry = createComponentTelemetry(
    ComponentSection.GENAI,           // Component section
    GenAiActionSource.LLM_ENDPOINT_FORM, // Action source
    workspace,                        // Workspace context (optional)
    "ai-event"                       // Payload type: "event" or "ai-event"
);
```

### Event Tracking Methods

Available methods on telemetry instance:
- `track(action, data?)` - Track user action
- `trackError(action, error, data?)` - Track errors
- `trackCreate(action, data?)` - Track creation events
- `trackEdit(action, data?)` - Track edit events
- `trackDelete(action, data?)` - Track deletion events
- `trackApply(action, data?)` - Track apply events
- `trackDialog(action, data?)` - Track dialog interactions
- `trackDocumentationClick(action, data?)` - Track documentation clicks
- `trackSelectItem(action, data?)` - Track item selection

## AI Event Tracking

### For AI Components

Always use `"ai-event"` payload type for AI-related components:

```typescript
// ✅ Correct for AI components
const telemetry = createComponentTelemetry(
    ComponentSection.GENAI,
    GenAiActionSource.LLM_ENDPOINT_FORM,
    undefined, // AI settings are organization-level
    "ai-event" // Use AI event payload type
);
```

### For General Components

Use `"event"` payload type (default) for general UI components:

```typescript
// ✅ Correct for general components
const telemetry = createComponentTelemetry(
    ComponentSection.SETTINGS,
    SettingsActionSource.LANGUAGE_CHANGE,
    workspace
    // Defaults to "event" payload type
);
```

## Direct Event Tracking

For direct event tracking without factory pattern:

```typescript
import { logUIActionSimple } from "../lib/Telemetry/events/trackedEvents";

// General events
logUIActionSimple(
    UIActionType.CLICKED,
    "component-section",
    "action-source",
    { customData: "value" },
    "event" // General event
);

// AI events
logUIActionSimple(
    UIActionType.CLICKED,
    "ai-component",
    "ai-action",
    { aiData: "value" },
    "ai-event" // AI event
);
```

## AI Utility Functions

For AI-specific events, use the dedicated AI utility functions:

```typescript
import { trackAnalyticToolAIEventWithData } from "../lib/Telemetry/providers/amplitude/amplitudeUtils";

trackAnalyticToolAIEventWithData(
    GenAIAnalyticToolEvent.CHAT_MESSAGE_SENT,
    { messageLength: 100, responseTime: 2000 }
);
```

## Tracker Architecture

### Tracker Types

1. **General Trackers** - Handle `"event"` payloads
   - Main Amplitude tracker
   - Matomo tracker
   - Intercom tracker

2. **AI Trackers** - Handle `"ai-event"` payloads
   - AI Amplitude tracker (separate API key)
   - Supports AI events only

### Event Routing

- `"event"` payloads → All trackers (except AI-only trackers)
- `"ai-event"` payloads → Only AI-enabled trackers
- Page views → All trackers (unchanged)

## Best Practices

### 1. Choose Correct Payload Type
- Use `"ai-event"` for AI interactions (chat, search, visualization)
- Use `"event"` for general UI interactions (navigation, settings)

### 2. Workspace Context
- AI settings are organization-level → Use `undefined` workspace
- General settings are workspace-level → Pass workspace context

### 3. Action Sources
- Use specific action sources for better analytics
- Follow existing naming conventions

### 4. Error Handling
- Always wrap telemetry calls in try-catch
- Don't let telemetry failures break user experience

### 5. Data Consistency
- Use consistent property names across events
- Include relevant context (page, user, workspace)

## Migration Notes

The telemetry system has been migrated to support AI events:

- ✅ **Phase 1**: Foundation setup complete
- ✅ **Phase 2**: Tracker updates complete  
- ✅ **Phase 3**: Factory pattern complete
- ✅ **Phase 4**: AI components updated

All AI components now use `"ai-event"` payload type and are routed to AI-specific trackers.

## Testing

### Verify Event Routing
```typescript
// Check browser console for debug logs
console.debug("Processing AI event, available trackers:", ...);
console.debug("Tracker registered:", ...);
```

### Test AI Events
1. Open AI chat component
2. Send message
3. Verify event appears in AI Amplitude project only

### Test General Events
1. Navigate to settings
2. Change language
3. Verify event appears in main Amplitude project only

## Common Patterns

### AI Chat Component
```typescript
const telemetry = createComponentTelemetry(
    ComponentSection.GENAI,
    GenAiActionSource.CHAT_INTERACTION,
    undefined,
    "ai-event"
);

// Track message sent
telemetry.track("message-sent", { messageLength: text.length });

// Track response received
telemetry.track("response-received", { responseTime: 2000 });
```

### Settings Component
```typescript
const telemetry = createComponentTelemetry(
    ComponentSection.SETTINGS,
    SettingsActionSource.LANGUAGE_CHANGE,
    workspace
    // Defaults to "event"
);

// Track setting change
telemetry.track("setting-changed", { setting: "language", value: "en" });
```
description:
globs:
alwaysApply: false
---
